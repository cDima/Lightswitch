'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /* =========================================================
                                                                                                                                                                                                                                                                                        * bootstrap-slider.js v2.0.0
                                                                                                                                                                                                                                                                                        * http://www.eyecon.ro/bootstrap-slider
                                                                                                                                                                                                                                                                                        * =========================================================
                                                                                                                                                                                                                                                                                        * Copyright 2012 Stefan Petre
                                                                                                                                                                                                                                                                                        * ========================================================= */

!function ($) {

	$.propHooks.disabled = {
		set: function set(el, value) {
			if (el.disabled !== value) {
				el.disabled = value;
				value && $(el).trigger('disabledSet');
				!value && $(el).trigger('enabledSet');
			}
		} };


	var Slider = function Slider(element, options) {
		this.element = $(element);
		this.picker = $('<div class="slider">' +
		'<div class="slider-track">' +
		'<div class="slider-selection"></div>' +
		'<div class="slider-handle"></div>' +
		'<div class="slider-handle"></div>' +
		'</div>' +
		'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>' +
		'</div>').
		insertBefore(this.element).
		append(this.element);
		this.id = this.element.data('slider-id') || options.id;
		if (this.id) {
			this.picker[0].id = this.id;
		}

		this.disabled = false;

		if (typeof Modernizr !== 'undefined' && Modernizr.touch) {
			this.touchCapable = true;
		}

		var tooltip = this.element.data('slider-tooltip') || options.tooltip;

		this.tooltip = this.picker.find('.tooltip');
		this.tooltipInner = this.tooltip.find('div.tooltip-inner');

		this.orientation = this.element.data('slider-orientation') || options.orientation;
		switch (this.orientation) {
			case 'vertical':
				this.picker.addClass('slider-vertical');
				this.stylePos = 'top';
				this.mousePos = 'pageY';
				this.sizePos = 'offsetHeight';
				this.tooltip.addClass('right')[0].style.left = '100%';
				break;
			default:
				this.picker.
				addClass('slider-horizontal');
				//.css('width', this.element.outerWidth());
				this.orientation = 'horizontal';
				this.stylePos = 'left';
				this.mousePos = 'pageX';
				this.sizePos = 'offsetWidth';
				this.tooltip.addClass('top')[0].style.top = -this.tooltip.outerHeight() - 14 + 'px';
				break;}


		this.min = this.element.data('slider-min') || options.min;
		this.max = this.element.data('slider-max') || options.max;
		this.step = this.element.data('slider-step') || options.step;
		this.value = this.element.data('slider-value') || options.value;
		if (this.value[1]) {
			this.range = true;
		}

		this.selection = this.element.data('slider-selection') || options.selection;
		this.selectionEl = this.picker.find('.slider-selection');
		if (this.selection === 'none') {
			this.selectionEl.addClass('hide');
		}
		this.selectionElStyle = this.selectionEl[0].style;


		this.handle1 = this.picker.find('.slider-handle:first');
		this.handle1Stype = this.handle1[0].style;
		this.handle2 = this.picker.find('.slider-handle:last');
		this.handle2Stype = this.handle2[0].style;

		var handle = this.element.data('slider-handle') || options.handle;
		switch (handle) {
			case 'round':
				this.handle1.addClass('round');
				this.handle2.addClass('round');
				break;
			case 'triangle':
				this.handle1.addClass('triangle');
				this.handle2.addClass('triangle');
				break;}


		if (this.range) {
			this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
			this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
		} else {
			this.value = [Math.max(this.min, Math.min(this.max, this.value))];
			this.handle2.addClass('hide');
			if (this.selection == 'after') {
				this.value[1] = this.max;
			} else {
				this.value[1] = this.min;
			}
		}
		this.diff = this.max - this.min;
		this.percentage = [
		(this.value[0] - this.min) * 100 / this.diff,
		(this.value[1] - this.min) * 100 / this.diff,
		this.step * 100 / this.diff];


		this.offset = this.picker.offset();
		this.size = this.picker[0][this.sizePos];

		this.formater = options.formater;

		this.layout();

		if (this.touchCapable) {
			// Touch: Bind touch events:
			this.picker.on({
				touchstart: $.proxy(this.mousedown, this) });

		} else {
			this.picker.on({
				mousedown: $.proxy(this.mousedown, this) });

		}

		if (tooltip === 'show') {
			this.picker.on({
				mouseenter: $.proxy(this.showTooltip, this),
				mouseleave: $.proxy(this.hideTooltip, this) });

		} else {
			this.tooltip.addClass('hide');
		}

		$(element).on({
			change: $.proxy(this.onValueChange, this),
			disabledSet: $.proxy(this.deactivate, this),
			enabledSet: $.proxy(this.activate, this) });

		//change(function(){

		//this.onValueChange();
		//});
	};

	Slider.prototype = {
		constructor: Slider,

		over: false,
		inDrag: false,

		showTooltip: function showTooltip() {
			this.tooltip.addClass('in');
			//var left = Math.round(this.percent*this.width);
			//this.tooltip.css('left', left - this.tooltip.outerWidth()/2);
			this.over = true;
		},

		hideTooltip: function hideTooltip() {
			if (this.inDrag === false) {
				this.tooltip.removeClass('in');
			}
			this.over = false;
		},

		layout: function layout() {
			this.handle1Stype[this.stylePos] = this.percentage[0] + '%';
			this.handle2Stype[this.stylePos] = this.percentage[1] + '%';
			if (this.orientation == 'vertical') {
				this.selectionElStyle.top = Math.min(this.percentage[0], this.percentage[1]) + '%';
				this.selectionElStyle.height = Math.abs(this.percentage[0] - this.percentage[1]) + '%';
			} else {
				this.selectionElStyle.left = Math.min(this.percentage[0], this.percentage[1]) + '%';
				this.selectionElStyle.width = Math.abs(this.percentage[0] - this.percentage[1]) + '%';
			}
			if (this.range) {
				this.tooltipInner.text(
				this.formater(this.value[0]) +
				' : ' +
				this.formater(this.value[1]));

				this.tooltip[0].style[this.stylePos] = this.size * (this.percentage[0] + (this.percentage[1] - this.percentage[0]) / 2) / 100 - (this.orientation === 'vertical' ? this.tooltip.outerHeight() / 2 : this.tooltip.outerWidth() / 2) + 'px';
			} else {
				this.tooltipInner.text(
				this.formater(this.value[0]));

				this.tooltip[0].style[this.stylePos] = this.size * this.percentage[0] / 100 - (this.orientation === 'vertical' ? this.tooltip.outerHeight() / 2 : this.tooltip.outerWidth() / 2) + 'px';
			}
		},

		mousedown: function mousedown(ev) {

			if (this.disabled) return;

			// Touch: Get the original event:
			if (this.touchCapable && ev.type === 'touchstart') {
				ev = ev.originalEvent;
			}

			this.offset = this.picker.offset();
			this.size = this.picker[0][this.sizePos];

			var percentage = this.getPercentage(ev);

			if (this.range) {
				var diff1 = Math.abs(this.percentage[0] - percentage);
				var diff2 = Math.abs(this.percentage[1] - percentage);
				this.dragged = diff1 < diff2 ? 0 : 1;
			} else {
				this.dragged = 0;
			}

			this.percentage[this.dragged] = percentage;
			this.layout();

			if (this.touchCapable) {
				// Touch: Bind touch events:
				$(document).on({
					touchmove: $.proxy(this.mousemove, this),
					touchend: $.proxy(this.mouseup, this) });

			} else {
				$(document).on({
					mousemove: $.proxy(this.mousemove, this),
					mouseup: $.proxy(this.mouseup, this) });

			}

			this.inDrag = true;
			var val = this.calculateValue();
			this.element.trigger({
				type: 'slideStart',
				value: val }).
			trigger({
				type: 'slide',
				value: val });

			return false;
		},

		mousemove: function mousemove(ev) {

			// Touch: Get the original event:
			if (this.touchCapable && ev.type === 'touchmove') {
				ev = ev.originalEvent;
			}

			var percentage = this.getPercentage(ev);
			if (this.range) {
				if (this.dragged === 0 && this.percentage[1] < percentage) {
					this.percentage[0] = this.percentage[1];
					this.dragged = 1;
				} else if (this.dragged === 1 && this.percentage[0] > percentage) {
					this.percentage[1] = this.percentage[0];
					this.dragged = 0;
				}
			}
			this.percentage[this.dragged] = percentage;
			this.layout();
			var val = this.calculateValue();
			this.element.
			trigger({
				type: 'slide',
				value: val }).

			data('value', val).
			prop('value', val);
			return false;
		},

		mouseup: function mouseup(ev) {
			if (this.touchCapable) {
				// Touch: Bind touch events:
				$(document).off({
					touchmove: this.mousemove,
					touchend: this.mouseup });

			} else {
				$(document).off({
					mousemove: this.mousemove,
					mouseup: this.mouseup });

			}

			this.inDrag = false;
			if (this.over == false) {
				this.hideTooltip();
			}
			this.element;
			var val = this.calculateValue();
			this.element.
			trigger({
				type: 'slideStop',
				value: val }).

			data('value', val).
			prop('value', val);
			return false;
		},

		activate: function activate(ev) {
			this.picker.removeClass("disabled");
			this.disabled = false;
		},

		deactivate: function deactivate(ev) {
			this.picker.addClass("disabled");
			this.disabled = true;
		},

		onValueChange: function onValueChange(ev) {
			var val = this.element.val();
			this.setValue(val);
		},

		calculateValue: function calculateValue() {
			var val;
			if (this.range) {
				val = [
				this.min + Math.round(this.diff * this.percentage[0] / 100 / this.step) * this.step,
				this.min + Math.round(this.diff * this.percentage[1] / 100 / this.step) * this.step];

				this.value = val;
			} else {
				val = this.min + Math.round(this.diff * this.percentage[0] / 100 / this.step) * this.step;
				this.value = [val, this.value[1]];
			}
			return val;
		},

		getPercentage: function getPercentage(ev) {
			if (this.touchCapable) {
				ev = ev.touches[0];
			}
			var percentage = (ev[this.mousePos] - this.offset[this.stylePos]) * 100 / this.size;
			percentage = Math.round(percentage / this.percentage[2]) * this.percentage[2];
			return Math.max(0, Math.min(100, percentage));
		},

		getValue: function getValue() {
			if (this.range) {
				return this.value;
			}
			return this.value[0];
		},

		setValue: function setValue(val) {
			this.value = val;

			if (this.range) {
				this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
				this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
			} else {
				this.value = [Math.max(this.min, Math.min(this.max, this.value))];
				this.handle2.addClass('hide');
				if (this.selection == 'after') {
					this.value[1] = this.max;
				} else {
					this.value[1] = this.min;
				}
			}
			this.diff = this.max - this.min;
			this.percentage = [
			(this.value[0] - this.min) * 100 / this.diff,
			(this.value[1] - this.min) * 100 / this.diff,
			this.step * 100 / this.diff];

			this.layout();
		} };


	$.fn.BootstrapSlider = function (option, val) {
		return this.each(function () {
			var $this = $(this),
			data = $this.data('slider'),
			options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option;
			if (!data) {
				$this.data('slider', data = new Slider(this, $.extend({}, $.fn.BootstrapSlider.defaults, options)));
			}
			if (typeof option == 'string') {
				data[option](val);
			}
		});
	};

	$.fn.BootstrapSlider.defaults = {
		min: 0,
		max: 10,
		step: 1,
		orientation: 'horizontal',
		value: 5,
		selection: 'before',
		tooltip: 'show',
		handle: 'round',
		formater: function formater(value) {
			return value;
		} };


	$.fn.BootstrapSlider.Constructor = Slider;

}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict'; /*!
               * Color Thief v2.0
               * by Lokesh Dhakar - http://www.lokeshdhakar.com
               *
               * Thanks
               * ------
               * Nick Rabinowitz - For creating quantize.js.
               * John Schulz - For clean up and optimization. @JFSIII
               * Nathan Spady - For adding drag and drop support to the demo page.
               *
               * License
               * -------
               * Copyright 2011, 2015 Lokesh Dhakar
               * Released under the MIT license
               * https://raw.githubusercontent.com/lokesh/color-thief/master/LICENSE
               *
               */


/*
                    CanvasImage Class
                    Class that wraps the html image element and canvas.
                    It also simplifies some of the canvas context manipulation
                    with a set of helper functions.
                  */
var CanvasImage = function CanvasImage(image) {
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');

    document.body.appendChild(this.canvas);

    this.width = this.canvas.width = image.width;
    this.height = this.canvas.height = image.height;

    this.context.drawImage(image, 0, 0, this.width, this.height);
};

CanvasImage.prototype.clear = function () {
    this.context.clearRect(0, 0, this.width, this.height);
};

CanvasImage.prototype.update = function (imageData) {
    this.context.putImageData(imageData, 0, 0);
};

CanvasImage.prototype.getPixelCount = function () {
    return this.width * this.height;
};

CanvasImage.prototype.getImageData = function () {
    return this.context.getImageData(0, 0, this.width, this.height);
};

CanvasImage.prototype.removeCanvas = function () {
    this.canvas.parentNode.removeChild(this.canvas);
};


var ColorThief = function ColorThief() {};

/*
                                            * getColor(sourceImage[, quality])
                                            * returns {r: num, g: num, b: num}
                                            *
                                            * Use the median cut algorithm provided by quantize.js to cluster similar
                                            * colors and return the base color from the largest cluster.
                                            *
                                            * Quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
                                            * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
                                            * faster a color will be returned but the greater the likelihood that it will not be the visually
                                            * most dominant color.
                                            *
                                            * */
ColorThief.prototype.getColor = function (sourceImage, quality) {
    var palette = this.getPalette(sourceImage, 5, quality);
    var dominantColor = palette[0];
    return dominantColor;
};


/*
    * getPalette(sourceImage[, colorCount, quality])
    * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]
    *
    * Use the median cut algorithm provided by quantize.js to cluster similar colors.
    *
    * colorCount determines the size of the palette; the number of colors returned. If not set, it
    * defaults to 10.
    *
    * BUGGY: Function does not always return the requested amount of colors. It can be +/- 2.
    *
    * quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
    * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
    * faster the palette generation but the greater the likelihood that colors will be missed.
    *
    *
    */
ColorThief.prototype.getPalette = function (sourceImage, colorCount, quality) {

    if (typeof colorCount === 'undefined') {
        colorCount = 10;
    }
    if (typeof quality === 'undefined' || quality < 1) {
        quality = 10;
    }

    // Create custom CanvasImage object
    var image = new CanvasImage(sourceImage);
    var imageData = image.getImageData();
    var pixels = imageData.data;
    var pixelCount = image.getPixelCount();

    // Store the RGB values in an array format suitable for quantize function
    var pixelArray = [];
    for (var i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {
        offset = i * 4;
        r = pixels[offset + 0];
        g = pixels[offset + 1];
        b = pixels[offset + 2];
        a = pixels[offset + 3];
        // If pixel is mostly opaque and not white
        if (a >= 125) {
            if (!(r > 250 && g > 250 && b > 250)) {
                pixelArray.push([r, g, b]);
            }
        }
    }

    // Send array to quantize function which clusters values
    // using median cut algorithm
    var cmap = MMCQ.quantize(pixelArray, colorCount);
    var palette = cmap ? cmap.palette() : null;

    // Clean up
    image.removeCanvas();

    return palette;
};




/*!
    * quantize.js Copyright 2008 Nick Rabinowitz.
    * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
    */

// fill out a couple protovis dependencies
/*!
 * Block below copied from Protovis: http://mbostock.github.com/protovis/
 * Copyright 2010 Stanford Visualization Group
 * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php
 */
if (!pv) {
    var pv = {
        map: function map(array, f) {
            var o = {};
            return f ? array.map(function (d, i) {o.index = i;return f.call(o, d);}) : array.slice();
        },
        naturalOrder: function naturalOrder(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        },
        sum: function sum(array, f) {
            var o = {};
            return array.reduce(f ? function (p, d, i) {o.index = i;return p + f.call(o, d);} : function (p, d) {return p + d;}, 0);
        },
        max: function max(array, f) {
            return Math.max.apply(null, f ? pv.map(array, f) : array);
        } };

}



/**
   * Basic Javascript port of the MMCQ (modified median cut quantization)
   * algorithm from the Leptonica library (http://www.leptonica.com/).
   * Returns a color map you can use to map original pixels to the reduced
   * palette. Still a work in progress.
   *
   * @author Nick Rabinowitz
   * @example
  
  // array of pixels as [R,G,B] arrays
  var myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]
                  // etc
                  ];
  var maxColors = 4;
  
  var cmap = MMCQ.quantize(myPixels, maxColors);
  var newPalette = cmap.palette();
  var newPixels = myPixels.map(function(p) {
      return cmap.map(p);
  });
  
   */
var MMCQ = function () {
    // private constants
    var sigbits = 5,
    rshift = 8 - sigbits,
    maxIterations = 1000,
    fractByPopulations = 0.75;

    // get reduced-space color index for a pixel
    function getColorIndex(r, g, b) {
        if (r === 0 && g === 0 && b === 0) {
            return 0;
        }
        return (r << 2 * sigbits) + (g << sigbits) + b;
    }

    // Simple priority queue
    function PQueue(comparator) {
        var contents = [],
        sorted = false;

        function sort() {
            contents.sort(comparator);
            sorted = true;
        }

        return {
            push: function push(o) {
                contents.push(o);
                sorted = false;
            },
            peek: function peek(index) {
                if (!sorted) sort();
                if (index === undefined) index = contents.length - 1;
                return contents[index];
            },
            pop: function pop() {
                if (!sorted) sort();
                return contents.pop();
            },
            size: function size() {
                return contents.length;
            },
            map: function map(f) {
                return contents.map(f);
            },
            debug: function debug() {
                if (!sorted) sort();
                return contents;
            } };

    }

    // 3d color space box
    function VBox(r1, r2, g1, g2, b1, b2, histo) {
        var vbox = this;
        vbox.r1 = r1;
        vbox.r2 = r2;
        vbox.g1 = g1;
        vbox.g2 = g2;
        vbox.b1 = b1;
        vbox.b2 = b2;
        vbox.histo = histo;
    }
    VBox.prototype = {
        volume: function volume(force) {
            var vbox = this;
            if (!vbox._volume || force) {
                vbox._volume = (vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1);
            }
            return vbox._volume;
        },
        count: function count(force) {
            var vbox = this,
            histo = vbox.histo;
            if (!vbox._count_set || force) {
                var npix = 0,
                i,j,k;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var index = getColorIndex(i, j, k);
                            npix += histo[index] || 0;
                        }
                    }
                }
                vbox._count = npix;
                vbox._count_set = true;
            }
            return vbox._count;
        },
        copy: function copy() {
            var vbox = this;
            return new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);
        },
        avg: function avg(force) {
            var vbox = this,
            histo = vbox.histo;
            if (!vbox._avg || force) {
                var ntot = 0,
                mult = 1 << 8 - sigbits,
                rsum = 0,
                gsum = 0,
                bsum = 0,
                hval,
                i,j,k,histoindex;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var histoindex = getColorIndex(i, j, k);
                            hval = histo[histoindex] || 0;
                            ntot += hval;
                            rsum += hval * (i + 0.5) * mult;
                            gsum += hval * (j + 0.5) * mult;
                            bsum += hval * (k + 0.5) * mult;
                        }
                    }
                }
                if (ntot) {
                    vbox._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];
                } else {
                    //                    console.log('empty box');
                    vbox._avg = [
                    ~~(mult * (vbox.r1 + vbox.r2 + 1) / 2),
                    ~~(mult * (vbox.g1 + vbox.g2 + 1) / 2),
                    ~~(mult * (vbox.b1 + vbox.b2 + 1) / 2)];

                }
            }
            return vbox._avg;
        },
        contains: function contains(pixel) {
            var vbox = this,
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            return rval >= vbox.r1 && rval <= vbox.r2 &&
            gval >= vbox.g1 && gval <= vbox.g2 &&
            bval >= vbox.b1 && bval <= vbox.b2;
        } };


    // Color map
    function CMap() {
        this.vboxes = new PQueue(function (a, b) {
            return pv.naturalOrder(
            a.vbox.count() * a.vbox.volume(),
            b.vbox.count() * b.vbox.volume());

        });
    }
    CMap.prototype = {
        push: function push(vbox) {
            this.vboxes.push({
                vbox: vbox,
                color: vbox.avg() });

        },
        palette: function palette() {
            return this.vboxes.map(function (vb) {return vb.color;});
        },
        size: function size() {
            return this.vboxes.size();
        },
        map: function map(color) {
            var vboxes = this.vboxes;
            for (var i = 0; i < vboxes.size(); i++) {
                if (vboxes.peek(i).vbox.contains(color)) {
                    return vboxes.peek(i).color;
                }
            }
            return this.nearest(color);
        },
        nearest: function nearest(color) {
            var vboxes = this.vboxes,
            d1,d2,pColor;
            for (var i = 0; i < vboxes.size(); i++) {
                d2 = Math.sqrt(
                Math.pow(color[0] - vboxes.peek(i).color[0], 2) +
                Math.pow(color[1] - vboxes.peek(i).color[1], 2) +
                Math.pow(color[2] - vboxes.peek(i).color[2], 2));

                if (d2 < d1 || d1 === undefined) {
                    d1 = d2;
                    pColor = vboxes.peek(i).color;
                }
            }
            return pColor;
        },
        forcebw: function forcebw() {
            // XXX: won't  work yet
            var vboxes = this.vboxes;
            vboxes.sort(function (a, b) {return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));});

            // force darkest color to black if everything < 5
            var lowest = vboxes[0].color;
            if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5)
            vboxes[0].color = [0, 0, 0];

            // force lightest color to white if everything > 251
            var idx = vboxes.length - 1,
            highest = vboxes[idx].color;
            if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251)
            vboxes[idx].color = [255, 255, 255];
        } };


    // histo (1-d array, giving the number of pixels in
    // each quantized region of color space), or null on error
    function getHisto(pixels) {
        var histosize = 1 << 3 * sigbits,
        histo = new Array(histosize),
        index,rval,gval,bval;
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            index = getColorIndex(rval, gval, bval);
            histo[index] = (histo[index] || 0) + 1;
        });
        return histo;
    }

    function vboxFromPixels(pixels, histo) {
        var rmin = 1000000,rmax = 0,
        gmin = 1000000,gmax = 0,
        bmin = 1000000,bmax = 0,
        rval,gval,bval;
        // find min/max
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            if (rval < rmin) rmin = rval;else
            if (rval > rmax) rmax = rval;
            if (gval < gmin) gmin = gval;else
            if (gval > gmax) gmax = gval;
            if (bval < bmin) bmin = bval;else
            if (bval > bmax) bmax = bval;
        });
        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);
    }

    function medianCutApply(histo, vbox) {
        if (!vbox.count()) return;

        var rw = vbox.r2 - vbox.r1 + 1,
        gw = vbox.g2 - vbox.g1 + 1,
        bw = vbox.b2 - vbox.b1 + 1,
        maxw = pv.max([rw, gw, bw]);
        // only one pixel, no split
        if (vbox.count() == 1) {
            return [vbox.copy()];
        }
        /* Find the partial sum arrays along the selected axis. */
        var total = 0,
        partialsum = [],
        lookaheadsum = [],
        i,j,k,sum,index;
        if (maxw == rw) {
            for (i = vbox.r1; i <= vbox.r2; i++) {
                sum = 0;
                for (j = vbox.g1; j <= vbox.g2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        var index = getColorIndex(i, j, k);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        } else
        if (maxw == gw) {
            for (i = vbox.g1; i <= vbox.g2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        index = getColorIndex(j, i, k);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        } else
        {/* maxw == bw */
            for (i = vbox.b1; i <= vbox.b2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.g1; k <= vbox.g2; k++) {
                        index = getColorIndex(j, k, i);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        }
        partialsum.forEach(function (d, i) {
            lookaheadsum[i] = total - d;
        });
        function doCut(color) {
            var dim1 = color + '1',
            dim2 = color + '2',
            left,right,vbox1,vbox2,d2,count2 = 0;
            for (i = vbox[dim1]; i <= vbox[dim2]; i++) {
                if (partialsum[i] > total / 2) {
                    vbox1 = vbox.copy();
                    vbox2 = vbox.copy();
                    left = i - vbox[dim1];
                    right = vbox[dim2] - i;
                    if (left <= right)
                    d2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));else
                    d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));
                    // avoid 0-count boxes
                    while (!partialsum[d2]) {d2++;}
                    count2 = lookaheadsum[d2];
                    while (!count2 && partialsum[d2 - 1]) {count2 = lookaheadsum[--d2];}
                    // set dimensions
                    vbox1[dim2] = d2;
                    vbox2[dim1] = vbox1[dim2] + 1;
                    //                    console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());
                    return [vbox1, vbox2];
                }
            }

        }
        // determine the cut planes
        return maxw == rw ? doCut('r') :
        maxw == gw ? doCut('g') :
        doCut('b');
    }

    function quantize(pixels, maxcolors) {
        // short-circuit
        if (!pixels.length || maxcolors < 2 || maxcolors > 256) {
            //            console.log('wrong number of maxcolors');
            return false;
        }

        // XXX: check color content and convert to grayscale if insufficient

        var histo = getHisto(pixels),
        histosize = 1 << 3 * sigbits;

        // check that we aren't below maxcolors already
        var nColors = 0;
        histo.forEach(function () {nColors++;});
        if (nColors <= maxcolors) {

        } // XXX: generate the new colors from the histo and return

        // get the beginning vbox from the colors
        var vbox = vboxFromPixels(pixels, histo),
        pq = new PQueue(function (a, b) {return pv.naturalOrder(a.count(), b.count());});
        pq.push(vbox);

        // inner function to do the iteration
        function iter(lh, target) {
            var ncolors = 1,
            niters = 0,
            vbox;
            while (niters < maxIterations) {
                vbox = lh.pop();
                if (!vbox.count()) {/* just put it back */
                    lh.push(vbox);
                    niters++;
                    continue;
                }
                // do the cut
                var vboxes = medianCutApply(histo, vbox),
                vbox1 = vboxes[0],
                vbox2 = vboxes[1];

                if (!vbox1) {
                    //                    console.log("vbox1 not defined; shouldn't happen!");
                    return;
                }
                lh.push(vbox1);
                if (vbox2) {/* vbox2 can be null */
                    lh.push(vbox2);
                    ncolors++;
                }
                if (ncolors >= target) return;
                if (niters++ > maxIterations) {
                    //                    console.log("infinite loop; perhaps too few pixels!");
                    return;
                }
            }
        }

        // first set of colors, sorted by population
        iter(pq, fractByPopulations * maxcolors);

        // Re-sort by the product of pixel occupancy times the size in color space.
        var pq2 = new PQueue(function (a, b) {
            return pv.naturalOrder(a.count() * a.volume(), b.count() * b.volume());
        });
        while (pq.size()) {
            pq2.push(pq.pop());
        }

        // next set - generate the median cuts using the (npix * vol) sorting.
        iter(pq2, maxcolors - pq2.size());

        // calculate the actual colors
        var cmap = new CMap();
        while (pq2.size()) {
            cmap.push(pq2.pop());
        }

        return cmap;
    }

    return {
        quantize: quantize };

}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

// extensions.js
// (c) Dmitry Sadakov - 2015 All rights reserved.

'use strict';

if (typeof String.prototype.endsWith !== 'function') {
				String.prototype.endsWith = function (suffix) {
								return this.indexOf(suffix, this.length - suffix.length) !== -1;
				};
}

if (typeof String.prototype.startsWith !== 'function') {
				String.prototype.startsWith = function (prefix) {
								return this.indexOf(prefix) !== -1;
				};
}


var brokenPromises = [];

if (typeof Promise !== 'undefined' && Promise) {
				Promise.any = function (arrayOfPromises) {
								if (!arrayOfPromises || !(arrayOfPromises instanceof Array)) {
												throw new Error('Must pass Promise.any an array');
								}

								if (arrayOfPromises.length === 0) {
												return Promise.resolve([]);
								}


								// For each promise that resolves or rejects, 
								// make them all resolve.
								// Record which ones did resolve or reject
								var i = 0;
								var resolvingPromises = arrayOfPromises.map(function (promise) {
												promise.id = i;
												var localI = i;
												brokenPromises[localI] = promise;
												i++;

												return promise.then(function (result) {
																console.log('resolved ' + localI);
																delete brokenPromises[localI];
																return {
																				resolve: true,
																				result: result };

												}, function (error) {
																console.log('rejected ' + localI);
																delete brokenPromises[localI];
																return {
																				resolve: false,
																				result: error };

												});
								});

								return Promise.all(resolvingPromises).then(function (results) {
												// Count how many passed/failed
												var passed = [],failed = [],allFailed = true;
												results.forEach(function (result) {
																if (result.resolve) {
																				allFailed = false;
																}
																if (result.resolve) {
																				passed.push(result.result);
																} else {
																				failed.push(result.result);
																}
												});

												if (allFailed) {
																throw failed;
												} else {
																return passed;
												}
								});
				};

}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVuc2lvbnMuanMiXSwibmFtZXMiOlsiU3RyaW5nIiwicHJvdG90eXBlIiwiZW5kc1dpdGgiLCJzdWZmaXgiLCJpbmRleE9mIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsInByZWZpeCIsImJyb2tlblByb21pc2VzIiwiUHJvbWlzZSIsImFueSIsImFycmF5T2ZQcm9taXNlcyIsIkFycmF5IiwiRXJyb3IiLCJyZXNvbHZlIiwiaSIsInJlc29sdmluZ1Byb21pc2VzIiwibWFwIiwicHJvbWlzZSIsImlkIiwibG9jYWxJIiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImFsbCIsInJlc3VsdHMiLCJwYXNzZWQiLCJmYWlsZWQiLCJhbGxGYWlsZWQiLCJmb3JFYWNoIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTs7QUFFQSxJQUFJLE9BQU9BLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQXhCLEtBQXFDLFVBQXpDLEVBQXFEO0FBQ2pERixXQUFPQyxTQUFQLENBQWlCQyxRQUFqQixHQUE0QixVQUFTQyxNQUFULEVBQWlCO0FBQ3pDLGVBQU8sS0FBS0MsT0FBTCxDQUFhRCxNQUFiLEVBQXFCLEtBQUtFLE1BQUwsR0FBY0YsT0FBT0UsTUFBMUMsTUFBc0QsQ0FBQyxDQUE5RDtBQUNILEtBRkQ7QUFHSDs7QUFFRCxJQUFJLE9BQU9MLE9BQU9DLFNBQVAsQ0FBaUJLLFVBQXhCLEtBQXVDLFVBQTNDLEVBQXVEO0FBQ25ETixXQUFPQyxTQUFQLENBQWlCSyxVQUFqQixHQUE4QixVQUFTQyxNQUFULEVBQWlCO0FBQzNDLGVBQU8sS0FBS0gsT0FBTCxDQUFhRyxNQUFiLE1BQXlCLENBQUMsQ0FBakM7QUFDSCxLQUZEO0FBR0g7OztBQUdELElBQUlDLGlCQUFpQixFQUFyQjs7QUFFQSxJQUFJLE9BQU9DLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQXRDLEVBQStDO0FBQzlDQSxZQUFRQyxHQUFSLEdBQWMsVUFBU0MsZUFBVCxFQUEwQjtBQUN0QyxZQUFHLENBQUNBLGVBQUQsSUFBb0IsRUFBRUEsMkJBQTJCQyxLQUE3QixDQUF2QixFQUE0RDtBQUMxRCxrQkFBTSxJQUFJQyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUVELFlBQUdGLGdCQUFnQk4sTUFBaEIsS0FBMkIsQ0FBOUIsRUFBaUM7QUFDL0IsbUJBQU9JLFFBQVFLLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBUDtBQUNEOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxZQUFJQyxJQUFJLENBQVI7QUFDQSxZQUFJQyxvQkFBb0JMLGdCQUFnQk0sR0FBaEIsQ0FBb0IsVUFBU0MsT0FBVCxFQUFrQjtBQUM3REEsb0JBQVFDLEVBQVIsR0FBYUosQ0FBYjtBQUNBLGdCQUFJSyxTQUFTTCxDQUFiO0FBQ0FQLDJCQUFlWSxNQUFmLElBQXlCRixPQUF6QjtBQUNBSDs7QUFFQyxtQkFBT0csUUFBUUcsSUFBUixDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDbkNDLHdCQUFRQyxHQUFSLENBQVksY0FBY0osTUFBMUI7QUFDQSx1QkFBT1osZUFBZVksTUFBZixDQUFQO0FBQ0EsdUJBQU87QUFDTE4sNkJBQVMsSUFESjtBQUVMUSw0QkFBUUEsTUFGSCxFQUFQOztBQUlELGFBUE0sRUFPSixVQUFTRyxLQUFULEVBQWdCO0FBQ2hCRix3QkFBUUMsR0FBUixDQUFZLGNBQWNKLE1BQTFCO0FBQ0EsdUJBQU9aLGVBQWVZLE1BQWYsQ0FBUDtBQUNELHVCQUFPO0FBQ0xOLDZCQUFTLEtBREo7QUFFTFEsNEJBQVFHLEtBRkgsRUFBUDs7QUFJRCxhQWRNLENBQVA7QUFlRCxTQXJCdUIsQ0FBeEI7O0FBdUJBLGVBQU9oQixRQUFRaUIsR0FBUixDQUFZVixpQkFBWixFQUErQkssSUFBL0IsQ0FBb0MsVUFBU00sT0FBVCxFQUFrQjtBQUMzRDtBQUNBLGdCQUFJQyxTQUFTLEVBQWIsQ0FBaUJDLFNBQVMsRUFBMUIsQ0FBOEJDLFlBQVksSUFBMUM7QUFDQUgsb0JBQVFJLE9BQVIsQ0FBZ0IsVUFBU1QsTUFBVCxFQUFpQjtBQUMvQixvQkFBR0EsT0FBT1IsT0FBVixFQUFtQjtBQUNqQmdCLGdDQUFZLEtBQVo7QUFDRDtBQUNELG9CQUFJUixPQUFPUixPQUFYLEVBQW9CO0FBQ2xCYywyQkFBT0ksSUFBUCxDQUFZVixPQUFPQSxNQUFuQjtBQUNELGlCQUZELE1BRU87QUFDTE8sMkJBQU9HLElBQVAsQ0FBWVYsT0FBT0EsTUFBbkI7QUFDRDtBQUNGLGFBVEQ7O0FBV0EsZ0JBQUdRLFNBQUgsRUFBYztBQUNaLHNCQUFNRCxNQUFOO0FBQ0QsYUFGRCxNQUVPO0FBQ0wsdUJBQU9ELE1BQVA7QUFDRDtBQUNGLFNBbkJNLENBQVA7QUFvQkQsS0F6REQ7O0FBMkRBIiwiZmlsZSI6ImV4dGVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRlbnNpb25zLmpzXG4vLyAoYykgRG1pdHJ5IFNhZGFrb3YgLSAyMDE1IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uKHN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHN1ZmZpeCwgdGhpcy5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XG4gICAgfTtcbn1cbiBcbmlmICh0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YocHJlZml4KSAhPT0gLTE7XG4gICAgfTtcbn1cblxuXG52YXIgYnJva2VuUHJvbWlzZXMgPSBbXTtcblxuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBQcm9taXNlKSB7XG5cdFByb21pc2UuYW55ID0gZnVuY3Rpb24oYXJyYXlPZlByb21pc2VzKSB7XG5cdCAgaWYoIWFycmF5T2ZQcm9taXNlcyB8fCAhKGFycmF5T2ZQcm9taXNlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHBhc3MgUHJvbWlzZS5hbnkgYW4gYXJyYXknKTtcblx0ICB9XG5cdCAgICBcblx0ICBpZihhcnJheU9mUHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG5cdCAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcblx0ICB9XG5cdCAgIFxuXHQgICAgXG5cdCAgLy8gRm9yIGVhY2ggcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9yIHJlamVjdHMsIFxuXHQgIC8vIG1ha2UgdGhlbSBhbGwgcmVzb2x2ZS5cblx0ICAvLyBSZWNvcmQgd2hpY2ggb25lcyBkaWQgcmVzb2x2ZSBvciByZWplY3Rcblx0ICB2YXIgaSA9IDA7XG5cdCAgdmFyIHJlc29sdmluZ1Byb21pc2VzID0gYXJyYXlPZlByb21pc2VzLm1hcChmdW5jdGlvbihwcm9taXNlKSB7XG5cdCAgXHRwcm9taXNlLmlkID0gaTtcblx0ICBcdHZhciBsb2NhbEkgPSBpO1xuXHQgIFx0YnJva2VuUHJvbWlzZXNbbG9jYWxJXSA9IHByb21pc2U7XG5cdCAgXHRpKys7XG5cblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlZCAnICsgbG9jYWxJKTtcblx0ICAgICAgZGVsZXRlIGJyb2tlblByb21pc2VzW2xvY2FsSV07XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcmVzb2x2ZTogdHJ1ZSxcblx0ICAgICAgICByZXN1bHQ6IHJlc3VsdFxuXHQgICAgICB9O1xuXHQgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0ICAgICAgIGNvbnNvbGUubG9nKCdyZWplY3RlZCAnICsgbG9jYWxJKTtcblx0ICAgICAgIGRlbGV0ZSBicm9rZW5Qcm9taXNlc1tsb2NhbEldO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlc29sdmU6IGZhbHNlLFxuXHQgICAgICAgIHJlc3VsdDogZXJyb3Jcblx0ICAgICAgfTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIFByb21pc2UuYWxsKHJlc29sdmluZ1Byb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcblx0ICAgIC8vIENvdW50IGhvdyBtYW55IHBhc3NlZC9mYWlsZWRcblx0ICAgIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW10sIGFsbEZhaWxlZCA9IHRydWU7XG5cdCAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgIGlmKHJlc3VsdC5yZXNvbHZlKSB7XG5cdCAgICAgICAgYWxsRmFpbGVkID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHJlc3VsdC5yZXNvbHZlKSB7XG5cdCAgICAgICAgcGFzc2VkLnB1c2gocmVzdWx0LnJlc3VsdCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZmFpbGVkLnB1c2gocmVzdWx0LnJlc3VsdCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBpZihhbGxGYWlsZWQpIHtcblx0ICAgICAgdGhyb3cgZmFpbGVkO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHBhc3NlZDtcblx0ICAgIH1cblx0ICB9KTtcblx0fTtcblxufSJdfQ==

/*
 *  Copyright 2015 Dmitry Sadakov. All rights reserved.
 */

'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

AjaxLite = function () {function AjaxLite() {_classCallCheck(this, AjaxLite);}_createClass(AjaxLite, null, [{ key: 'ajax', value: function ajax(
    options) {
      var url = options.url;
      var type = options.type || 'GET';
      var headers = options.headers || {};
      var body = options.data || null;
      var timeout = options.timeout || 1000;
      var success = options.success || function () {
        console.log('options.success was missing for this request');
      };
      var contentType = options.contentType || 'application/json';
      var error = options.error || function () {
        console.log('options.error was missing for this request');
      };

      if (!url) {
        error(null, 'loadURL requires a url argument');
      }

      var xhr = new XMLHttpRequest();
      xhr.contentType = 'json';
      xhr.ontimeout = function () {
        //error(xhr, 'timeout', xhr.response);
      };
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.contentType === 'json') {
            if (xhr.responseText === '') {
              xhr.responseJSON = null;
            } else {
              try {
                xhr.responseJSON = JSON.parse(xhr.responseText);
              } catch (err) {
                console.error('JSON parsing error: ' + url + '. Error: ' + err);
                xhr.responseJSON = null;
              }
            }
          }
          if (xhr.status === 200) {
            success(xhr.responseJSON || xhr.responseText, 'success', xhr);
          } else if (xhr.status === 0) {
            // xhr.statusText = 'timeout';
            error(xhr, 'timeout', xhr.response);
          } else {
            error(xhr, 'error', xhr.response);
          }
        }

      };

      xhr.open(type, url, true);

      xhr.setRequestHeader('Content-Type', contentType);
      xhr.setRequestHeader('Accept', 'application/json, text/javascript, */*');
      xhr.timeout = timeout;

      Object.keys(headers).forEach(function (key) {
        xhr.setRequestHeader(key, headers[key]);
      });

      console.log('AjaxLite sending: ' + url);
      if (body) {
        xhr.send(body);
      } else {
        xhr.send();
      }

      return xhr;
    } }]);return AjaxLite;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXhsaXRlLmpzIl0sIm5hbWVzIjpbIkFqYXhMaXRlIiwib3B0aW9ucyIsInVybCIsInR5cGUiLCJoZWFkZXJzIiwiYm9keSIsImRhdGEiLCJ0aW1lb3V0Iiwic3VjY2VzcyIsImNvbnNvbGUiLCJsb2ciLCJjb250ZW50VHlwZSIsImVycm9yIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2VKU09OIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwic3RhdHVzIiwicmVzcG9uc2UiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2VuZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQSxhOztBQUVNQSxRO0FBQ1FDLFcsRUFBUztBQUNuQixVQUFJQyxNQUFNRCxRQUFRQyxHQUFsQjtBQUNBLFVBQUlDLE9BQU9GLFFBQVFFLElBQVIsSUFBZ0IsS0FBM0I7QUFDQSxVQUFJQyxVQUFVSCxRQUFRRyxPQUFSLElBQW1CLEVBQWpDO0FBQ0EsVUFBSUMsT0FBT0osUUFBUUssSUFBUixJQUFnQixJQUEzQjtBQUNBLFVBQUlDLFVBQVVOLFFBQVFNLE9BQVIsSUFBbUIsSUFBakM7QUFDQSxVQUFJQyxVQUFVUCxRQUFRTyxPQUFSLElBQW1CLFlBQVc7QUFDMUNDLGdCQUFRQyxHQUFSLENBQVksOENBQVo7QUFDRCxPQUZEO0FBR0EsVUFBSUMsY0FBY1YsUUFBUVUsV0FBUixJQUF1QixrQkFBekM7QUFDQSxVQUFJQyxRQUFRWCxRQUFRVyxLQUFSLElBQWlCLFlBQVc7QUFDdENILGdCQUFRQyxHQUFSLENBQVksNENBQVo7QUFDRCxPQUZEOztBQUlBLFVBQUksQ0FBQ1IsR0FBTCxFQUFVO0FBQ1JVLGNBQU0sSUFBTixFQUFZLGlDQUFaO0FBQ0Q7O0FBRUQsVUFBSUMsTUFBTSxJQUFJQyxjQUFKLEVBQVY7QUFDQUQsVUFBSUYsV0FBSixHQUFrQixNQUFsQjtBQUNBRSxVQUFJRSxTQUFKLEdBQWdCLFlBQVc7QUFDekI7QUFDRCxPQUZEO0FBR0FGLFVBQUlHLGtCQUFKLEdBQXlCLFlBQVc7QUFDbEMsWUFBSUgsSUFBSUksVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixjQUFJSixJQUFJRixXQUFKLEtBQW9CLE1BQXhCLEVBQWdDO0FBQzlCLGdCQUFJRSxJQUFJSyxZQUFKLEtBQXFCLEVBQXpCLEVBQTZCO0FBQzNCTCxrQkFBSU0sWUFBSixHQUFtQixJQUFuQjtBQUNELGFBRkQsTUFFTztBQUNMLGtCQUFJO0FBQ0ZOLG9CQUFJTSxZQUFKLEdBQW1CQyxLQUFLQyxLQUFMLENBQVdSLElBQUlLLFlBQWYsQ0FBbkI7QUFDRCxlQUZELENBRUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1piLHdCQUFRRyxLQUFSLDBCQUFxQ1YsR0FBckMsaUJBQW9Eb0IsR0FBcEQ7QUFDQVQsb0JBQUlNLFlBQUosR0FBbUIsSUFBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxjQUFJTixJQUFJVSxNQUFKLEtBQWUsR0FBbkIsRUFBd0I7QUFDdEJmLG9CQUFRSyxJQUFJTSxZQUFKLElBQW9CTixJQUFJSyxZQUFoQyxFQUE4QyxTQUE5QyxFQUF5REwsR0FBekQ7QUFDRCxXQUZELE1BRU8sSUFBSUEsSUFBSVUsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQzNCO0FBQ0FYLGtCQUFNQyxHQUFOLEVBQVcsU0FBWCxFQUFzQkEsSUFBSVcsUUFBMUI7QUFDRCxXQUhNLE1BR0E7QUFDTFosa0JBQU1DLEdBQU4sRUFBVyxPQUFYLEVBQW9CQSxJQUFJVyxRQUF4QjtBQUNEO0FBQ0Y7O0FBRUYsT0F4QkQ7O0FBMEJBWCxVQUFJWSxJQUFKLENBQVN0QixJQUFULEVBQWVELEdBQWYsRUFBb0IsSUFBcEI7O0FBRUFXLFVBQUlhLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDZixXQUFyQztBQUNBRSxVQUFJYSxnQkFBSixDQUFxQixRQUFyQixFQUErQix3Q0FBL0I7QUFDQWIsVUFBSU4sT0FBSixHQUFjQSxPQUFkOztBQUVBb0IsYUFBT0MsSUFBUCxDQUFZeEIsT0FBWixFQUFxQnlCLE9BQXJCLENBQTZCLFVBQVNDLEdBQVQsRUFBYztBQUN6Q2pCLFlBQUlhLGdCQUFKLENBQXFCSSxHQUFyQixFQUEwQjFCLFFBQVEwQixHQUFSLENBQTFCO0FBQ0QsT0FGRDs7QUFJQXJCLGNBQVFDLEdBQVIsQ0FBWSx1QkFBdUJSLEdBQW5DO0FBQ0EsVUFBSUcsSUFBSixFQUFVO0FBQ1JRLFlBQUlrQixJQUFKLENBQVMxQixJQUFUO0FBQ0QsT0FGRCxNQUVPO0FBQ0xRLFlBQUlrQixJQUFKO0FBQ0Q7O0FBRUQsYUFBT2xCLEdBQVA7QUFDRCxLIiwiZmlsZSI6ImFqYXhsaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBDb3B5cmlnaHQgMjAxNSBEbWl0cnkgU2FkYWtvdi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNsYXNzIEFqYXhMaXRlIHtcbiAgc3RhdGljIGFqYXgob3B0aW9ucykge1xuICAgIHZhciB1cmwgPSBvcHRpb25zLnVybDtcbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnR0VUJztcbiAgICB2YXIgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuZGF0YSB8fCBudWxsO1xuICAgIHZhciB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDEwMDA7XG4gICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnb3B0aW9ucy5zdWNjZXNzIHdhcyBtaXNzaW5nIGZvciB0aGlzIHJlcXVlc3QnKTtcbiAgICB9O1xuICAgIHZhciBjb250ZW50VHlwZSA9IG9wdGlvbnMuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnb3B0aW9ucy5lcnJvciB3YXMgbWlzc2luZyBmb3IgdGhpcyByZXF1ZXN0Jyk7XG4gICAgfTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICBlcnJvcihudWxsLCAnbG9hZFVSTCByZXF1aXJlcyBhIHVybCBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIuY29udGVudFR5cGUgPSAnanNvbic7XG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy9lcnJvcih4aHIsICd0aW1lb3V0JywgeGhyLnJlc3BvbnNlKTtcbiAgICB9O1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoeGhyLmNvbnRlbnRUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVGV4dCA9PT0gJycpIHtcbiAgICAgICAgICAgIHhoci5yZXNwb25zZUpTT04gPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBKU09OIHBhcnNpbmcgZXJyb3I6ICR7dXJsfS4gRXJyb3I6ICR7ZXJyfWApO1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHN1Y2Nlc3MoeGhyLnJlc3BvbnNlSlNPTiB8fCB4aHIucmVzcG9uc2VUZXh0LCAnc3VjY2VzcycsIHhocik7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgIC8vIHhoci5zdGF0dXNUZXh0ID0gJ3RpbWVvdXQnO1xuICAgICAgICAgIGVycm9yKHhociwgJ3RpbWVvdXQnLCB4aHIucmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yKHhociwgJ2Vycm9yJywgeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIFxuICAgIH07XG5cbiAgICB4aHIub3Blbih0eXBlLCB1cmwsIHRydWUpO1xuXG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qJyk7XG4gICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG4gICAgT2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTtcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdBamF4TGl0ZSBzZW5kaW5nOiAnICsgdXJsKTtcbiAgICBpZiAoYm9keSkge1xuICAgICAgeGhyLnNlbmQoYm9keSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHhocjtcbiAgfVxufVxuIl19

/* (C) 2014 Dmitry Sadakov */

'use strict';

/*exported config */

var config = {
  //app: 'light' // light, ambieye, pro, web
  //app: 'ambieye',
  //app: 'pro',
  //app: 'app',
  app: 'web' };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVDLElBQUlBLFNBQVM7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxPQUFLLEtBTE8sRUFBYiIsImZpbGUiOiJjb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoQykgMjAxNCBEbWl0cnkgU2FkYWtvdiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qZXhwb3J0ZWQgY29uZmlnICovXG5cbiB2YXIgY29uZmlnID0ge1xuICAvL2FwcDogJ2xpZ2h0JyAvLyBsaWdodCwgYW1iaWV5ZSwgcHJvLCB3ZWJcbiAgLy9hcHA6ICdhbWJpZXllJyxcbiAgLy9hcHA6ICdwcm8nLFxuICAvL2FwcDogJ2FwcCcsXG4gIGFwcDogJ3dlYicsXG4gfTtcbiJdfQ==

/* (C) 2014 Dmitry Sadakov */

'use strict';

/*global config:true */

config.ambieye = true;
config.scenes = true;
config.search = true;
config.tabs = true;
config.feedback = true;
config.voice = true;

switch (config.app) {
    case 'light':
        config.ambieye = false;
        config.scenes = false;
        config.search = false;
        config.tabs = false;
        config.voice = false;
        break;
    case 'pro':
        config.ambieye = true;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'web':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'app':
        config.ambieye = false;
        config.scenes = true;
        config.search = false;
        config.tabs = true;
        config.feedback = false;
        config.voice = false;
        break;
    case 'eye':
        config.ambieye = true;
        config.scenes = false;
        config.search = false;
        config.tabs = true;
        config.voice = false;
        break;
    case 'win':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = false;
        break;}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5mZWF0dXJlcy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhbWJpZXllIiwic2NlbmVzIiwic2VhcmNoIiwidGFicyIsImZlZWRiYWNrIiwidm9pY2UiLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCLElBQWpCO0FBQ0FELE9BQU9FLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUYsT0FBT0csTUFBUCxHQUFnQixJQUFoQjtBQUNBSCxPQUFPSSxJQUFQLEdBQWMsSUFBZDtBQUNBSixPQUFPSyxRQUFQLEdBQWtCLElBQWxCO0FBQ0FMLE9BQU9NLEtBQVAsR0FBZSxJQUFmOztBQUVBLFFBQU9OLE9BQU9PLEdBQWQ7QUFDRSxTQUFLLE9BQUw7QUFDSVAsZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLEtBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsS0FBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLEtBQWQ7QUFDQUosZUFBT00sS0FBUCxHQUFlLEtBQWY7QUFDQTtBQUNKLFNBQUssS0FBTDtBQUNJTixlQUFPQyxPQUFQLEdBQWlCLElBQWpCO0FBQ0FELGVBQU9FLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUYsZUFBT0csTUFBUCxHQUFnQixJQUFoQjtBQUNBSCxlQUFPSSxJQUFQLEdBQWMsSUFBZDtBQUNBSixlQUFPTSxLQUFQLEdBQWUsSUFBZjtBQUNBO0FBQ0osU0FBSyxLQUFMO0FBQ0lOLGVBQU9DLE9BQVAsR0FBaUIsS0FBakI7QUFDQUQsZUFBT0UsTUFBUCxHQUFnQixJQUFoQjtBQUNBRixlQUFPRyxNQUFQLEdBQWdCLElBQWhCO0FBQ0FILGVBQU9JLElBQVAsR0FBYyxJQUFkO0FBQ0FKLGVBQU9NLEtBQVAsR0FBZSxJQUFmO0FBQ0E7QUFDSixTQUFLLEtBQUw7QUFDSU4sZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLElBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsS0FBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLElBQWQ7QUFDQUosZUFBT0ssUUFBUCxHQUFrQixLQUFsQjtBQUNBTCxlQUFPTSxLQUFQLEdBQWUsS0FBZjtBQUNBO0FBQ0osU0FBSyxLQUFMO0FBQ0lOLGVBQU9DLE9BQVAsR0FBaUIsSUFBakI7QUFDQUQsZUFBT0UsTUFBUCxHQUFnQixLQUFoQjtBQUNBRixlQUFPRyxNQUFQLEdBQWdCLEtBQWhCO0FBQ0FILGVBQU9JLElBQVAsR0FBYyxJQUFkO0FBQ0FKLGVBQU9NLEtBQVAsR0FBZSxLQUFmO0FBQ0E7QUFDSixTQUFLLEtBQUw7QUFDSU4sZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLElBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLElBQWQ7QUFDQUosZUFBT00sS0FBUCxHQUFlLEtBQWY7QUFDQSxjQTNDTiIsImZpbGUiOiJjb25maWcuZmVhdHVyZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoQykgMjAxNCBEbWl0cnkgU2FkYWtvdiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qZ2xvYmFsIGNvbmZpZzp0cnVlICovXG5cbmNvbmZpZy5hbWJpZXllID0gdHJ1ZTtcbmNvbmZpZy5zY2VuZXMgPSB0cnVlO1xuY29uZmlnLnNlYXJjaCA9IHRydWU7XG5jb25maWcudGFicyA9IHRydWU7XG5jb25maWcuZmVlZGJhY2sgPSB0cnVlO1xuY29uZmlnLnZvaWNlID0gdHJ1ZTtcblxuc3dpdGNoKGNvbmZpZy5hcHApIHtcbiAgY2FzZSAnbGlnaHQnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSBmYWxzZTtcbiAgICAgIGNvbmZpZy50YWJzID0gZmFsc2U7XG4gICAgICBjb25maWcudm9pY2UgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdwcm8nOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSB0cnVlO1xuICAgICAgY29uZmlnLnNjZW5lcyA9IHRydWU7XG4gICAgICBjb25maWcuc2VhcmNoID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy50YWJzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy52b2ljZSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgY2FzZSAnd2ViJzpcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSB0cnVlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdhcHAnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSB0cnVlO1xuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLmZlZWRiYWNrID0gZmFsc2U7XG4gICAgICBjb25maWcudm9pY2UgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdleWUnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSB0cnVlO1xuICAgICAgY29uZmlnLnNjZW5lcyA9IGZhbHNlO1xuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgY2FzZSAnd2luJzpcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSB0cnVlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiB9XG5cbiJdfQ==

'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

(function () {var aa = encodeURIComponent,f = window,ba = setTimeout,n = Math;function Pc(a, b) {return a.href = b;}function fa(a, b) {return a.name = b;}
	var Qc = "replace",q = "data",m = "match",xc = "send",ja = "port",u = "createElement",id = "setAttribute",da = "getTime",x = "host",A = "split",B = "location",ra = "hasOwnProperty",ma = "hostname",ga = "search",E = "protocol",Ab = "href",kd = "action",G = "apply",p = "push",h = "hash",s = "test",ha = "slice",r = "cookie",t = "indexOf",ia = "defaultValue",v = "name",y = "length",z = "prototype",la = "clientWidth",jd = "target",C = "call",na = "clientHeight",F = "substring",oa = "navigator",Ub = "parentNode",H = "join",I = "toLowerCase";var pa = new function () {var a = [];this.set = function (b) {a[b] = !0;};this.M = function () {for (var b = [], c = 0; c < a[y]; c++) {a[c] && (b[n.floor(c / 6)] = b[n.floor(c / 6)] ^ 1 << c % 6);}for (c = 0; c < b[y]; c++) {b[c] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(b[c] || 0);}return b[H]("") + "~";};}();function J(a) {pa.set(a);};var ea = function ea(a) {return "function" == typeof a;},ka = function ka(a) {return "[object Array]" == Object[z].toString[C](Object(a));},qa = function qa(a) {return void 0 != a && -1 < (a.constructor + "")[t]("String");},D = function D(a, b) {return 0 == a[t](b);},sa = function sa(a) {return a ? a[Qc](/^[\s\xa0]+|[\s\xa0]+$/g, "") : "";},ta = function ta(a) {var b = M[u]("img");b.width = 1;b.height = 1;b.src = a;return b;},ua = function ua() {},K = function K(a) {if (aa instanceof Function) return aa(a);J(28);return a;},L = function L(a, b, c, d) {try {a.addEventListener ? a.addEventListener(b,
			c, !!d) : a.attachEvent && a.attachEvent("on" + b, c);} catch (e) {J(27);}},va = function va(a, b, c) {a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent("on" + b, c);},wa = function wa(a, b) {if (a) {var c = M[u]("script");c.type = "text/javascript";c.async = !0;c.src = a;b && (c.id = b);var d = M.getElementsByTagName("script")[0];d[Ub].insertBefore(c, d);}},xa = function xa() {var a = "" + M[B][ma];return 0 == a[t]("www.") ? a[F](4) : a;},ya = function ya(a) {var b = M.referrer;if (/^https?:\/\//i[s](b)) {if (a) return b;a = "//" + M[B][ma];var c =
			b[t](a);if (5 == c || 6 == c) if (a = b.charAt(c + a[y]), "/" == a || "?" == a || "" == a || ":" == a) return;return b;}},za = function za(a, b) {if (1 == b[y] && null != b[0] && "object" === _typeof(b[0])) return b[0];for (var c = {}, d = n.min(a[y] + 1, b[y]), e = 0; e < d; e++) {if ("object" === _typeof(b[e])) {for (var g in b[e]) {b[e][ra](g) && (c[g] = b[e][g]);}break;} else e < a[y] && (c[a[e]] = b[e]);}return c;};var N = function N() {this.keys = [];this.w = {};this.m = {};};N[z].set = function (a, b, c) {this.keys[p](a);c ? this.m[":" + a] = b : this.w[":" + a] = b;};N[z].get = function (a) {return this.m[ra](":" + a) ? this.m[":" + a] : this.w[":" + a];};N[z].map = function (a) {for (var b = 0; b < this.keys[y]; b++) {var c = this.keys[b],d = this.get(c);d && a(c, d);}};var O = f,M = document,fb = function fb(a) {ba(a, 100);},Mc = function Mc() {for (var a = O[oa].userAgent + (M[r] ? M[r] : "") + (M.referrer ? M.referrer : ""), b = a[y], c = O.history[y]; 0 < c;) {a += c-- ^ b++;}return La(a);};var Aa = function Aa(a) {var b = O._gaUserPrefs;if (b && b.ioo && b.ioo() || a && !0 === O["ga-disable-" + a]) return !0;try {var c = O.external;if (c && c._gaUserPrefs && "oo" == c._gaUserPrefs) return !0;} catch (d) {}return !1;};var Ca = function Ca(a) {var b = [],c = M[r][A](";");a = new RegExp("^\\s*" + a + "=\\s*(.*?)\\s*$");for (var d = 0; d < c[y]; d++) {var e = c[d][m](a);e && b[p](e[1]);}return b;},zc = function zc(a, b, c, d, e, g) {e = Aa(e) ? !1 : eb[s](M[B][ma]) || "/" == c && vc[s](d) ? !1 : !0;if (!e) return !1;b && 1200 < b[y] && (b = b[F](0, 1200), J(24));c = a + "=" + b + "; path=" + c + "; ";g && (c += "expires=" + new Date(new Date()[da]() + g).toGMTString() + "; ");d && "none" != d && (c += "domain=" + d + ";");d = M[r];M.cookie = c;if (!(d = d != M[r])) t: {a = Ca(a);for (d = 0; d < a[y]; d++) {if (b == a[d]) {d = !0;break t;}}d = !1;}return d;},
	Cc = function Cc(a) {return K(a)[Qc](/\(/g, "%28")[Qc](/\)/g, "%29");},vc = /^(www\.)?google(\.com?)?(\.[a-z]{2})?$/,eb = /(^|\.)doubleclick\.net$/i;var oc = function oc() {return (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com";},Da = function Da(a) {fa(this, "len");this.message = a + "-8192";},Ea = function Ea(a) {fa(this, "ff2post");this.message = a + "-2036";},Ga = function Ga(a, b, c, d) {c = c || ua;d && (d = c, O[oa].sendBeacon ? O[oa].sendBeacon(a, b) ? (d(), d = !0) : d = !1 : d = !1);if (!d) if (2036 >= b[y]) wc(a, b, c);else if (8192 >= b[y]) {if (0 <= O[oa].userAgent[t]("Firefox") && ![].reduce) throw new Ea(b[y]);wd(a, b, c) || xd(a, b, c) || Fa(b, c) || c();} else throw new Da(b[y]);},wc = function wc(a, b, c) {var d =
		ta(a + "?" + b);d.onload = d.onerror = function () {d.onload = null;d.onerror = null;c();};},xd = function xd(a, b, c) {var d;d = O.XDomainRequest;if (!d) return !1;d = new d();d.open("POST", a);d.onerror = function () {c();};d.onload = c;d[xc](b);return !0;},wd = function wd(a, b, c) {var d = O.XMLHttpRequest;if (!d) return !1;var e = new d();if (!("withCredentials" in e)) return !1;e.open("POST", a, !0);e.withCredentials = !0;e.setRequestHeader("Content-Type", "text/plain");e.onreadystatechange = function () {4 == e.readyState && (c(), e = null);};e[xc](b);return !0;},Fa = function Fa(a,
	b) {if (!M.body) return fb(function () {Fa(a, b);}), !0;a = aa(a);try {var c = M[u]('<iframe name="' + a + '"></iframe>');} catch (d) {c = M[u]("iframe"), fa(c, a);}c.height = "0";c.width = "0";c.style.display = "none";c.style.visibility = "hidden";var e = M[B],e = oc() + "/analytics_iframe.html#" + aa(e[E] + "//" + e[x] + "/favicon.ico"),g = function g() {c.src = "";c[Ub] && c[Ub].removeChild(c);};L(O, "beforeunload", g);var ca = !1,l = 0,k = function k() {if (!ca) {try {if (9 < l || c.contentWindow[B][x] == M[B][x]) {ca = !0;g();va(O, "beforeunload", g);b();return;}} catch (a) {}l++;
				ba(k, 200);}};L(c, "load", k);M.body.appendChild(c);c.src = e;return !0;};var Ha = function Ha() {this.t = [];};Ha[z].add = function (a) {this.t[p](a);};Ha[z].D = function (a) {try {for (var b = 0; b < this.t[y]; b++) {var c = a.get(this.t[b]);c && ea(c) && c[C](O, a);}} catch (d) {}b = a.get(Ia);b != ua && ea(b) && (a.set(Ia, ua, !0), ba(b, 10));};function Ja(a) {if (100 != a.get(Ka) && La(P(a, Q)) % 1E4 >= 100 * R(a, Ka)) throw "abort";}function Ma(a) {if (Aa(P(a, Na))) throw "abort";}function Oa() {var a = M[B][E];if ("http:" != a && "https:" != a) throw "abort";}
	function Pa(a) {try {O.XMLHttpRequest && "withCredentials" in new O.XMLHttpRequest() ? J(40) : O.XDomainRequest && J(41), O[oa].sendBeacon && J(42);} catch (b) {}a.set(Ac, R(a, Ac) + 1);var c = [];Qa.map(function (b, e) {if (e.p) {var g = a.get(b);void 0 != g && g != e[ia] && ("boolean" == typeof g && (g *= 1), c[p](e.p + "=" + K("" + g)));}});c[p]("z=" + Bd());a.set(Ra, c[H]("&"), !0);}function Sa(a) {var b = P(a, gd) || oc() + "/collect";Ga(b, P(a, Ra), a.get(Ia), a.get(Vd));a.set(Ia, ua, !0);}
	function Hc(a) {var b = O.gaData;b && (b.expId && a.set(Nc, b.expId), b.expVar && a.set(Oc, b.expVar));}function cd() {if (O[oa] && "preview" == O[oa].loadPurpose) throw "abort";}function yd(a) {var b = O.gaDevIds;ka(b) && 0 != b[y] && a.set("&did", b[H](","), !0);}function vb(a) {if (!a.get(Na)) throw "abort";};var hd = function hd() {return n.round(2147483647 * n.random());},Bd = function Bd() {try {var a = new Uint32Array(1);O.crypto.getRandomValues(a);return a[0] & 2147483647;} catch (b) {return hd();}};function Ta(a) {var b = R(a, Ua);500 <= b && J(15);var c = P(a, Va);if ("transaction" != c && "item" != c) {var c = R(a, Wa),d = new Date()[da](),e = R(a, Xa);0 == e && a.set(Xa, d);e = n.round(2 * (d - e) / 1E3);0 < e && (c = n.min(c + e, 20), a.set(Xa, d));if (0 >= c) throw "abort";a.set(Wa, --c);}a.set(Ua, ++b);};var Ya = function Ya() {this.data = new N();},Qa = new N(),Za = [];Ya[z].get = function (a) {var b = $a(a),c = this[q].get(a);b && void 0 == c && (c = ea(b[ia]) ? b[ia]() : b[ia]);return b && b.n ? b.n(this, a, c) : c;};var P = function P(a, b) {var c = a.get(b);return void 0 == c ? "" : "" + c;},R = function R(a, b) {var c = a.get(b);return void 0 == c || "" === c ? 0 : 1 * c;};Ya[z].set = function (a, b, c) {if (a) if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) for (var d in a) {a[ra](d) && ab(this, d, a[d], c);} else ab(this, a, b, c);};
	var ab = function ab(a, b, c, d) {if (void 0 != c) switch (b) {case Na:wb[s](c);}var e = $a(b);e && e.o ? e.o(a, b, c, d) : a[q].set(b, c, d);},bb = function bb(a, b, c, d, e) {fa(this, a);this.p = b;this.n = d;this.o = e;this.defaultValue = c;},$a = function $a(a) {var b = Qa.get(a);if (!b) for (var c = 0; c < Za[y]; c++) {var d = Za[c],e = d[0].exec(a);if (e) {b = d[1](e);Qa.set(b[v], b);break;}}return b;},yc = function yc(a) {var b;Qa.map(function (c, d) {d.p == a && (b = d);});return b && b[v];},S = function S(a, b, c, d, e) {a = new bb(a, b, c, d, e);Qa.set(a[v], a);return a[v];},cb = function cb(a, b) {Za[p]([new RegExp("^" +
		a + "$"), b]);},T = function T(a, b, c) {return S(a, b, c, void 0, db);},db = function db() {};var gb = qa(f.GoogleAnalyticsObject) && sa(f.GoogleAnalyticsObject) || "ga",Ba = !1,hb = T("apiVersion", "v"),ib = T("clientVersion", "_v");S("anonymizeIp", "aip");var jb = S("adSenseId", "a"),Va = S("hitType", "t"),Ia = S("hitCallback"),Ra = S("hitPayload");S("nonInteraction", "ni");S("currencyCode", "cu");var Vd = S("useBeacon", void 0, !1);S("dataSource", "ds");S("sessionControl", "sc", "");S("sessionGroup", "sg");S("queueTime", "qt");var Ac = S("_s", "_s");S("screenName", "cd");
	var kb = S("location", "dl", ""),lb = S("referrer", "dr"),mb = S("page", "dp", "");S("hostname", "dh");var nb = S("language", "ul"),ob = S("encoding", "de");S("title", "dt", function () {return M.title || void 0;});cb("contentGroup([0-9]+)", function (a) {return new bb(a[0], "cg" + a[1]);});var pb = S("screenColors", "sd"),qb = S("screenResolution", "sr"),rb = S("viewportSize", "vp"),sb = S("javaEnabled", "je"),tb = S("flashVersion", "fl");S("campaignId", "ci");S("campaignName", "cn");S("campaignSource", "cs");S("campaignMedium", "cm");
	S("campaignKeyword", "ck");S("campaignContent", "cc");var ub = S("eventCategory", "ec"),xb = S("eventAction", "ea"),yb = S("eventLabel", "el"),zb = S("eventValue", "ev"),Bb = S("socialNetwork", "sn"),Cb = S("socialAction", "sa"),Db = S("socialTarget", "st"),Eb = S("l1", "plt"),Fb = S("l2", "pdt"),Gb = S("l3", "dns"),Hb = S("l4", "rrt"),Ib = S("l5", "srt"),Jb = S("l6", "tcp"),Kb = S("l7", "dit"),Lb = S("l8", "clt"),Mb = S("timingCategory", "utc"),Nb = S("timingVar", "utv"),Ob = S("timingLabel", "utl"),Pb = S("timingValue", "utt");S("appName", "an");
	S("appVersion", "av", "");S("appId", "aid", "");S("appInstallerId", "aiid", "");S("exDescription", "exd");S("exFatal", "exf");var Nc = S("expId", "xid"),Oc = S("expVar", "xvar"),Rc = S("_utma", "_utma"),Sc = S("_utmz", "_utmz"),Tc = S("_utmht", "_utmht"),Ua = S("_hc", void 0, 0),Xa = S("_ti", void 0, 0),Wa = S("_to", void 0, 20);cb("dimension([0-9]+)", function (a) {return new bb(a[0], "cd" + a[1]);});cb("metric([0-9]+)", function (a) {return new bb(a[0], "cm" + a[1]);});S("linkerParam", void 0, void 0, Bc, db);
	var ld = S("usage", "_u", void 0, function () {return pa.M();}, db);S("forceSSL", void 0, void 0, function () {return Ba;}, function (a, b, c) {J(34);Ba = !!c;});var ed = S("_j1", "jid"),Hd = S("_j2", "gjid");cb("\\&(.*)", function (a) {var b = new bb(a[0], a[1]),c = yc(a[0][F](1));c && (b.n = function (a) {return a.get(c);}, b.o = function (a, b, g, ca) {a.set(c, g, ca);}, b.p = void 0);return b;});
	var Qb = T("_oot"),dd = S("previewTask"),Rb = S("checkProtocolTask"),md = S("validationTask"),Sb = S("checkStorageTask"),Uc = S("historyImportTask"),Tb = S("samplerTask"),Vb = T("_rlt"),Wb = S("buildHitTask"),Xb = S("sendHitTask"),Vc = S("ceTask"),zd = S("devIdTask"),Cd = S("timingTask"),Ld = S("displayFeaturesTask"),V = T("name"),Q = T("clientId", "cid"),Ad = S("userId", "uid"),Na = T("trackingId", "tid"),U = T("cookieName", void 0, "_ga"),W = T("cookieDomain"),Yb = T("cookiePath", void 0, "/"),Zb = T("cookieExpires", void 0, 63072E3),$b = T("legacyCookieDomain"),
	Wc = T("legacyHistoryImport", void 0, !0),ac = T("storage", void 0, "cookie"),bc = T("allowLinker", void 0, !1),cc = T("allowAnchor", void 0, !0),Ka = T("sampleRate", "sf", 100),dc = T("siteSpeedSampleRate", void 0, 1),ec = T("alwaysSendReferrer", void 0, !1),gd = S("transportUrl"),Md = S("_r", "_r");
	function X(a, b, c, d) {b[a] = function () {try {return d && J(d), c[G](this, arguments);} catch (b) {var g = b && b[v];if (!(1 <= 100 * n.random() || Aa("?"))) {var ca = ["t=error", "_e=exc", "_v=j31", "sr=1"];a && ca[p]("_f=" + a);g && ca[p]("_m=" + K(g[F](0, 100)));ca[p]("aip=1");ca[p]("z=" + hd());Ga(oc() + "/collect", ca[H]("&"));}throw b;}};};var Od = function Od() {this.V = 1E4;this.fa = void 0;this.$ = !1;this.ea = 1;},Ed = function Ed() {var a = new Od(),b;if (a.fa && a.$) return 0;a.$ = !0;if (0 == a.V) return 0;void 0 === b && (b = Bd());return 0 == b % a.V ? n.floor(b / a.V) % a.ea + 1 : 0;};function fc() {var a, b, c;if ((c = (c = O[oa]) ? c.plugins : null) && c[y]) for (var d = 0; d < c[y] && !b; d++) {var e = c[d];-1 < e[v][t]("Shockwave Flash") && (b = e.description);}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"), b = a.GetVariable("$version");} catch (g) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), b = "WIN 6,0,21,0", a.AllowScriptAccess = "always", b = a.GetVariable("$version");} catch (ca) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), b = a.GetVariable("$version");} catch (l) {}b && (
		a = b[m](/[\d]+/g)) && 3 <= a[y] && (b = a[0] + "." + a[1] + " r" + a[2]);return b || void 0;};var gc = function gc(a, b) {var c = n.min(R(a, dc), 100);if (!(La(P(a, Q)) % 100 >= c) && (c = {}, Ec(c) || Fc(c))) {var d = c[Eb];void 0 == d || Infinity == d || isNaN(d) || (0 < d ? (Y(c, Gb), Y(c, Jb), Y(c, Ib), Y(c, Fb), Y(c, Hb), Y(c, Kb), Y(c, Lb), b(c)) : L(O, "load", function () {gc(a, b);}, !1));}},Ec = function Ec(a) {var b = O.performance || O.webkitPerformance,b = b && b.timing;if (!b) return !1;var c = b.navigationStart;if (0 == c) return !1;a[Eb] = b.loadEventStart - c;a[Gb] = b.domainLookupEnd - b.domainLookupStart;a[Jb] = b.connectEnd - b.connectStart;a[Ib] = b.responseStart - b.requestStart;
		a[Fb] = b.responseEnd - b.responseStart;a[Hb] = b.fetchStart - c;a[Kb] = b.domInteractive - c;a[Lb] = b.domContentLoadedEventStart - c;return !0;},Fc = function Fc(a) {if (O.top != O) return !1;var b = O.external,c = b && b.onloadT;b && !b.isValidLoadTime && (c = void 0);2147483648 < c && (c = void 0);0 < c && b.setPageReadyTime();if (void 0 == c) return !1;a[Eb] = c;return !0;},Y = function Y(a, b) {var c = a[b];if (isNaN(c) || Infinity == c || 0 > c) a[b] = void 0;},Fd = function Fd(a) {return function (b) {"pageview" != b.get(Va) || a.I || (a.I = !0, gc(b, function (b) {a[xc]("timing", b);}));};};var hc = !1,mc = function mc(a) {if ("cookie" == P(a, ac)) {var b = P(a, U),c = nd(a),d = kc(P(a, Yb)),e = lc(P(a, W)),g = 1E3 * R(a, Zb),ca = P(a, Na);if ("auto" != e) zc(b, c, d, e, ca, g) && (hc = !0);else {J(32);var l;t: {c = [];e = xa()[A](".");if (4 == e[y] && (l = e[e[y] - 1], parseInt(l, 10) == l)) {l = ["none"];break t;}for (l = e[y] - 2; 0 <= l; l--) {c[p](e[ha](l)[H]("."));}c[p]("none");l = c;}for (var k = 0; k < l[y]; k++) {if (e = l[k], a[q].set(W, e), c = nd(a), zc(b, c, d, e, ca, g)) {hc = !0;return;}}a[q].set(W, "auto");}}},nc = function nc(a) {if ("cookie" == P(a, ac) && !hc && (mc(a), !hc)) throw "abort";},
	Yc = function Yc(a) {if (a.get(Wc)) {var b = P(a, W),c = P(a, $b) || xa(),d = Xc("__utma", c, b);d && (J(19), a.set(Tc, new Date()[da](), !0), a.set(Rc, d.R), (b = Xc("__utmz", c, b)) && d[h] == b[h] && a.set(Sc, b.R));}},nd = function nd(a) {var b = Cc(P(a, Q)),c = ic(P(a, W));a = jc(P(a, Yb));1 < a && (c += "-" + a);return ["GA1", c, b][H](".");},Gc = function Gc(a, b, c) {for (var d = [], e = [], g, ca = 0; ca < a[y]; ca++) {var l = a[ca];if (l.r[c] == b) d[p](l);else void 0 == g || l.r[c] < g ? (e = [l], g = l.r[c]) : l.r[c] == g && e[p](l);}return 0 < d[y] ? d : e;},lc = function lc(a) {return 0 == a[t](".") ? a.substr(1) :
		a;},ic = function ic(a) {return lc(a)[A](".")[y];},kc = function kc(a) {if (!a) return "/";1 < a[y] && a.lastIndexOf("/") == a[y] - 1 && (a = a.substr(0, a[y] - 1));0 != a[t]("/") && (a = "/" + a);return a;},jc = function jc(a) {a = kc(a);return "/" == a ? 1 : a[A]("/")[y];};function Xc(a, b, c) {"none" == b && (b = "");var d = [],e = Ca(a);a = "__utma" == a ? 6 : 2;for (var g = 0; g < e[y]; g++) {var ca = ("" + e[g])[A](".");ca[y] >= a && d[p]({ hash: ca[0], R: e[g], O: ca });}return 0 == d[y] ? void 0 : 1 == d[y] ? d[0] : Zc(b, d) || Zc(c, d) || Zc(null, d) || d[0];}function Zc(a, b) {var c, d;null == a ? c = d = 1 : (c = La(a), d = La(D(a, ".") ? a[F](1) : "." + a));for (var e = 0; e < b[y]; e++) {if (b[e][h] == c || b[e][h] == d) return b[e];}};var od = new RegExp(/^https?:\/\/([^\/:]+)/),pd = /(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/;function Bc(a) {a = a.get(Q);var b = Ic(a, 0);return "_ga=1." + K(b + "." + a);}function Ic(a, b) {for (var c = new Date(), d = O[oa], e = d.plugins || [], c = [a, d.userAgent, c.getTimezoneOffset(), c.getYear(), c.getDate(), c.getHours(), c.getMinutes() + b], d = 0; d < e[y]; ++d) {c[p](e[d].description);}return La(c[H]("."));}var Dc = function Dc(a) {J(48);this.target = a;this.T = !1;};
	Dc[z].Q = function (a, b) {if (a.tagName) {if ("a" == a.tagName[I]()) {a[Ab] && Pc(a, qd(this, a[Ab], b));return;}if ("form" == a.tagName[I]()) return rd(this, a);}if ("string" == typeof a) return qd(this, a, b);};
	var qd = function qd(a, b, c) {var d = pd.exec(b);d && 3 <= d[y] && (b = d[1] + (d[3] ? d[2] + d[3] : ""));a = a[jd].get("linkerParam");var e = b[t]("?"),d = b[t]("#");c ? b += (-1 == d ? "#" : "&") + a : (c = -1 == e ? "?" : "&", b = -1 == d ? b + (c + a) : b[F](0, d) + c + a + b[F](d));return b;},rd = function rd(a, b) {if (b && b[kd]) {var c = a[jd].get("linkerParam")[A]("=")[1];if ("get" == b.method[I]()) {for (var d = b.childNodes || [], e = 0; e < d[y]; e++) {if ("_ga" == d[e][v]) {d[e][id]("value", c);return;}}d = M[u]("input");d[id]("type", "hidden");d[id]("name", "_ga");d[id]("value", c);b.appendChild(d);} else "post" ==
			b.method[I]() && (b.action = qd(a, b[kd]));}};
	Dc[z].S = function (a, b, c) {function d(c) {try {c = c || O.event;var d;t: {var g = c[jd] || c.srcElement;for (c = 100; g && 0 < c;) {if (g[Ab] && g.nodeName[m](/^a(?:rea)?$/i)) {d = g;break t;}g = g[Ub];c--;}d = {};}("http:" == d[E] || "https:" == d[E]) && sd(a, d[ma] || "") && d[Ab] && Pc(d, qd(e, d[Ab], b));} catch (w) {J(26);}}var e = this;this.T || (this.T = !0, L(M, "mousedown", d, !1), L(M, "touchstart", d, !1), L(M, "keyup", d, !1));if (c) {c = function c(b) {b = b || O.event;if ((b = b[jd] || b.srcElement) && b[kd]) {var c = b[kd][m](od);c && sd(a, c[1]) && rd(e, b);}};for (var g = 0; g < M.forms[y]; g++) {L(M.forms[g],
				"submit", c);}}};function sd(a, b) {if (b == M[B][ma]) return !1;for (var c = 0; c < a[y]; c++) {if (a[c] instanceof RegExp) {if (a[c][s](b)) return !0;} else if (0 <= b[t](a[c])) return !0;}return !1;};var Jd = function Jd(a, b, c, d) {this.U = b;this.aa = c;(b = d) || (b = (b = P(a, V)) && "t0" != b ? Wd[s](b) ? "_gat_" + Cc(P(a, Na)) : "_gat_" + Cc(b) : "_gat");this.Y = b;},Rd = function Rd(a, b) {var c = b.get(Wb);b.set(Wb, function (b) {Pd(a, b);var d = c(b);Qd(a, b);return d;});var d = b.get(Xb);b.set(Xb, function (b) {var c = d(b);Id(a, b);return c;});},Pd = function Pd(a, b) {b.get(a.U) || ("1" == Ca(a.Y)[0] ? b.set(a.U, "", !0) : b.set(a.U, "" + hd(), !0));},Qd = function Qd(a, b) {b.get(a.U) && zc(a.Y, "1", b.get(Yb), b.get(W), b.get(Na), 6E5);},Id = function Id(a, b) {if (b.get(a.U)) {var c = new N(),
			d = function d(a) {c.set($a(a).p, b.get(a));};d(hb);d(ib);d(Na);d(Q);d(a.U);d(ld);var e = a.aa;c.map(function (a, b) {e += K(a) + "=";e += K("" + b) + "&";});e += "z=" + hd();ta(e);b.set(a.U, "", !0);}},Wd = /^gtm\d+$/;var fd = function fd(a, b) {var c = a.b;if (!c.get("dcLoaded")) {J(29);O._gaq && J(52);b = b || {};var d;b[U] && (d = Cc(b[U]));d = new Jd(c, ed, "https://stats.g.doubleclick.net/collect?t=dc&aip=1&", d);Rd(d, c);c.set("dcLoaded", !0);}};var Sd = function Sd(a) {var b;b = a.get("dcLoaded") ? !1 : "cookie" != a.get(ac) ? !1 : !0;b && (J(51), b = new Jd(a, ed), Pd(b, a), Qd(b, a), a.get(b.U) && (a.set(Md, 1, !0), a.set(gd, oc() + "/r/collect", !0)));};var Kd = function Kd(a, b) {var c = a.b;if (!c.get("_rlsaLoaded")) {J(38);b = b || {};if (b[U]) var d = Cc(b[U]);d = new Jd(c, Hd, "https://www.google.com/ads/ga-audiences?t=sr&aip=1&", d);Rd(d, c);c.set("_rlsaLoaded", !0);tc("displayfeatures", a, b);}};var Lc = function Lc() {var a = O.gaGlobal = O.gaGlobal || {};return a.hid = a.hid || hd();};var ad,bd = function bd(a, b, c) {if (!ad) {var d;d = M[B][h];var e = O[v],g = /^#?gaso=([^&]*)/;if (e = (d = (d = d && d[m](g) || e && e[m](g)) ? d[1] : Ca("GASO")[0] || "") && d[m](/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i)) zc("GASO", "" + d, c, b, a, 0), f._udo || (f._udo = b), f._utcp || (f._utcp = c), a = e[1], wa("https://www.google.com/analytics/web/inpage/pub/inpage.js?" + (a ? "prefix=" + a + "&" : "") + hd(), "_gasojs");ad = !0;}};var wb = /^(UA|YT|MO|GP)-(\d+)-(\d+)$/,pc = function pc(a) {function b(a, b) {d.b[q].set(a, b);}function c(a, c) {b(a, c);d.filters.add(a);}var d = this;this.b = new Ya();this.filters = new Ha();b(V, a[V]);b(Na, sa(a[Na]));b(U, a[U]);b(W, a[W] || xa());b(Yb, a[Yb]);b(Zb, a[Zb]);b($b, a[$b]);b(Wc, a[Wc]);b(bc, a[bc]);b(cc, a[cc]);b(Ka, a[Ka]);b(dc, a[dc]);b(ec, a[ec]);b(ac, a[ac]);b(Ad, a[Ad]);b(hb, 1);b(ib, "j31");c(Qb, Ma);c(dd, cd);c(Rb, Oa);c(md, vb);c(Sb, nc);c(Uc, Yc);c(Tb, Ja);c(Vb, Ta);c(Vc, Hc);c(zd, yd);c(Ld, Sd);c(Wb, Pa);c(Xb, Sa);c(Cd, Fd(this));
		Jc(this.b, a[Q]);Kc(this.b);this.b.set(jb, Lc());bd(this.b.get(Na), this.b.get(W), this.b.get(Yb));},Jc = function Jc(a, b) {if ("cookie" == P(a, ac)) {hc = !1;var c;i: {var d = Ca(P(a, U));if (d && !(1 > d[y])) {c = [];for (var e = 0; e < d[y]; e++) {var g;g = d[e][A](".");var ca = g.shift();("GA1" == ca || "1" == ca) && 1 < g[y] ? (ca = g.shift()[A]("-"), 1 == ca[y] && (ca[1] = "1"), ca[0] *= 1, ca[1] *= 1, g = { r: ca, s: g[H](".") }) : g = void 0;g && c[p](g);}if (1 == c[y]) {J(13);c = c[0].s;break i;}if (0 == c[y]) J(12);else {J(14);d = ic(P(a, W));c = Gc(c, d, 0);if (1 == c[y]) {c = c[0].s;break i;}d =
						jc(P(a, Yb));c = Gc(c, d, 1);c = c[0] && c[0].s;break i;}}c = void 0;}c || (c = P(a, W), d = P(a, $b) || xa(), c = Xc("__utma", d, c), (c = void 0 == c ? void 0 : c.O[1] + "." + c.O[2]) && J(10));c && (a[q].set(Q, c), hc = !0);}c = a.get(cc);if (e = (c = M[B][c ? "href" : "search"][m]("(?:&|#|\\?)" + K("_ga")[Qc](/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + "=([^&#]*)")) && 2 == c[y] ? c[1] : "") a.get(bc) ? (c = e[t]("."), -1 == c ? J(22) : (d = e[F](c + 1), "1" != e[F](0, c) ? J(22) : (c = d[t]("."), -1 == c ? J(22) : (e = d[F](0, c), c = d[F](c + 1), e != Ic(c, 0) && e != Ic(c, -1) && e != Ic(c, -2) ? J(23) : (J(11), a[q].set(Q, c)))))) :
		J(21);b && (J(9), a[q].set(Q, K(b)));a.get(Q) || ((c = (c = O.gaGlobal && O.gaGlobal.vid) && -1 != c[ga](/^(?:utma\.)?\d+\.\d+$/) ? c : void 0) ? (J(17), a[q].set(Q, c)) : (J(8), a[q].set(Q, [hd() ^ Mc() & 2147483647, n.round(new Date()[da]() / 1E3)][H]("."))));mc(a);},Kc = function Kc(a) {var b = O[oa],c = O.screen,d = M[B];a.set(lb, ya(a.get(ec)));if (d) {var e = d.pathname || "";"/" != e.charAt(0) && (J(31), e = "/" + e);a.set(kb, d[E] + "//" + d[ma] + e + d[ga]);}c && a.set(qb, c.width + "x" + c.height);c && a.set(pb, c.colorDepth + "-bit");var c = M.documentElement,g = (e = M.body) &&
		e[la] && e[na],ca = [];c && c[la] && c[na] && ("CSS1Compat" === M.compatMode || !g) ? ca = [c[la], c[na]] : g && (ca = [e[la], e[na]]);c = 0 >= ca[0] || 0 >= ca[1] ? "" : ca[H]("x");a.set(rb, c);a.set(tb, fc());a.set(ob, M.characterSet || M.charset);a.set(sb, b && "function" === typeof b.javaEnabled && b.javaEnabled() || !1);a.set(nb, (b && (b.language || b.browserLanguage) || "")[I]());if (d && a.get(cc) && (b = M[B][h])) {b = b[A](/[?&#]+/);d = [];for (c = 0; c < b[y]; ++c) {(D(b[c], "utm_id") || D(b[c], "utm_campaign") || D(b[c], "utm_source") || D(b[c], "utm_medium") || D(b[c], "utm_term") ||
				D(b[c], "utm_content") || D(b[c], "gclid") || D(b[c], "dclid") || D(b[c], "gclsrc")) && d[p](b[c]);}0 < d[y] && (b = "#" + d[H]("&"), a.set(kb, a.get(kb) + b));}};pc[z].get = function (a) {return this.b.get(a);};pc[z].set = function (a, b) {this.b.set(a, b);};var qc = { pageview: [mb], event: [ub, xb, yb, zb], social: [Bb, Cb, Db], timing: [Mb, Nb, Pb, Ob] };
	pc[z].send = function (a) {if (!(1 > arguments[y])) {var b, c;"string" === typeof arguments[0] ? (b = arguments[0], c = [][ha][C](arguments, 1)) : (b = arguments[0] && arguments[0][Va], c = arguments);b && (c = za(qc[b] || [], c), c[Va] = b, this.b.set(c, void 0, !0), this.filters.D(this.b), this.b[q].m = {}, J(44));}};var rc = function rc(a) {if ("prerender" == M.visibilityState) return !1;a();return !0;};var td = /^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/,sc = function sc(a) {if (ea(a[0])) this.u = a[0];else {var b = td.exec(a[0]);null != b && 4 == b[y] && (this.c = b[1] || "t0", this.e = b[2] || "", this.d = b[3], this.a = [][ha][C](a, 1), this.e || (this.A = "create" == this.d, this.i = "require" == this.d, this.g = "provide" == this.d, this.ba = "remove" == this.d), this.i && (3 <= this.a[y] ? (this.X = this.a[1], this.W = this.a[2]) : this.a[1] && (qa(this.a[1]) ? this.X = this.a[1] : this.W = this.a[1])));b = a[1];a = a[2];if (!this.d) throw "abort";if (this.i && (!qa(b) || "" == b)) throw "abort";if (this.g && (
			!qa(b) || "" == b || !ea(a))) throw "abort";if (ud(this.c) || ud(this.e)) throw "abort";if (this.g && "t0" != this.c) throw "abort";}};function ud(a) {return 0 <= a[t](".") || 0 <= a[t](":");};var Yd, Zd, $d;Yd = new N();$d = new N();Zd = { ec: 45, ecommerce: 46, linkid: 47 };
	var tc = function tc(a, b, c) {b == $ ? J(35) : b.get(V);var d = Yd.get(a);if (!ea(d)) return !1;b.plugins_ = b.plugins_ || new N();if (b.plugins_.get(a)) return !0;b.plugins_.set(a, new d(b, c || {}));return !0;},ae = function ae(a) {function b(a) {var b = (a[ma] || "")[A](":")[0][I](),c = (a[E] || "")[I](),c = 1 * a[ja] || ("http:" == c ? 80 : "https:" == c ? 443 : "");a = a.pathname || "";D(a, "/") || (a = "/" + a);return [b, "" + c, a];}var c = M[u]("a");Pc(c, M[B][Ab]);var d = (c[E] || "")[I](),e = b(c),g = c[ga] || "",ca = d + "//" + e[0] + (e[1] ? ":" + e[1] : "");D(a, "//") ? a = d + a : D(a, "/") ? a = ca + a : !a ||
		D(a, "?") ? a = ca + e[2] + (a || g) : 0 > a[A]("/")[0][t](":") && (a = ca + e[2][F](0, e[2].lastIndexOf("/")) + "/" + a);Pc(c, a);d = b(c);return { protocol: (c[E] || "")[I](), host: d[0], port: d[1], path: d[2], G: c[ga] || "", url: a || "" };};var Z = { ga: function ga() {Z.f = [];} };Z.ga();Z.D = function (a) {var b = Z.J[G](Z, arguments),b = Z.f.concat(b);for (Z.f = []; 0 < b[y] && !Z.v(b[0]) && !(b.shift(), 0 < Z.f[y]);) {}Z.f = Z.f.concat(b);};
	Z.J = function (a) {for (var b = [], c = 0; c < arguments[y]; c++) {try {var d = new sc(arguments[c]);if (d.g) Yd.set(d.a[0], d.a[1]);else {if (d.i) {var e = d,g = e.a[0];if (!ea(Yd.get(g)) && !$d.get(g)) {Zd[ra](g) && J(Zd[g]);var ca = e.X;!ca && Zd[ra](g) ? (J(39), ca = g + ".js") : J(43);if (ca) {ca && 0 <= ca[t]("/") || (ca = (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com/plugins/ua/" + ca);var l = ae(ca),e = void 0;var k = l[E],w = M[B][E],e = "https:" == k || k == w ? !0 : "http:" != k ? !1 : "http:" == w;var Xd;if (Xd = e) {var e = l,be = ae(M[B][Ab]);if (e.G || 0 <=
									e.url[t]("?") || 0 <= e.path[t]("://")) Xd = !1;else if (e[x] == be[x] && e[ja] == be[ja]) Xd = !0;else {var ce = "http:" == e[E] ? 80 : 443;Xd = "www.google-analytics.com" == e[x] && (e[ja] || ce) == ce && D(e.path, "/plugins/") ? !0 : !1;}}Xd && (wa(l.url), $d.set(g, !0));}}}b[p](d);}} catch (de) {}}return b;};
	Z.v = function (a) {try {if (a.u) a.u[C](O, $.j("t0"));else {var b = a.c == gb ? $ : $.j(a.c);if (a.A) "t0" == a.c && $.create[G]($, a.a);else if (a.ba) $.remove(a.c);else if (b) if (a.i) {if (!tc(a.a[0], b, a.W)) return !0;} else if (a.e) {var c = a.d,d = a.a,e = b.plugins_.get(a.e);e[c][G](e, d);} else b[a.d][G](b, a.a);}} catch (g) {}};var $ = function $(a) {J(1);Z.D[G](Z, [arguments]);};$.h = {};$.P = [];$.L = 0;$.answer = 42;var uc = [Na, W, V];$.create = function (a) {var b = za(uc, [][ha][C](arguments));b[V] || (b[V] = "t0");var c = "" + b[V];if ($.h[c]) return $.h[c];b = new pc(b);$.h[c] = b;$.P[p](b);return b;};$.remove = function (a) {for (var b = 0; b < $.P[y]; b++) {if ($.P[b].get(V) == a) {$.P.splice(b, 1);$.h[a] = null;break;}}};$.j = function (a) {return $.h[a];};$.K = function () {return $.P[ha](0);};
	$.N = function () {"ga" != gb && J(49);var a = O[gb];if (!a || 42 != a.answer) {$.L = a && a.l;$.loaded = !0;var b = O[gb] = $;X("create", b, b.create, 3);X("remove", b, b.remove);X("getByName", b, b.j, 5);X("getAll", b, b.K, 6);b = pc[z];X("get", b, b.get, 7);X("set", b, b.set, 4);X("send", b, b[xc], 2);b = Ya[z];X("get", b, b.get);X("set", b, b.set);t: for (var b = M.getElementsByTagName("script"), c = 0; c < b[y] && 100 > c; c++) {var d;d = (d = b[c].src) ? 0 != d[t]("https://www.google-analytics.com/analytics") ? !1 : !0 : !1;if (d) {J(33);break t;}}"https:" != M[B][E] && !Ba && Ed() && (
			J(36), Ba = !0);(O.gaplugins = O.gaplugins || {}).Linker = Dc;b = Dc[z];Yd.set("linker", Dc);X("decorate", b, b.Q, 20);X("autoLink", b, b.S, 25);Yd.set("displayfeatures", fd);Yd.set("adfeatures", Kd);a = a && a.q;ka(a) ? Z.D[G]($, a) : J(50);}};$.k = function () {for (var a = $.K(), b = 0; b < a[y]; b++) {a[b].get(V);}};(function () {var a = $.N;if (!rc(a)) {J(16);var b = !1,c = function c() {!b && rc(a) && (b = !0, va(M, "visibilitychange", c));};L(M, "visibilitychange", c);}})();function La(a) {var b = 1,c = 0,d;if (a) for (b = 0, d = a[y] - 1; 0 <= d; d--) {c = a.charCodeAt(d), b = (b << 6 & 268435455) + c + (c << 14), c = b & 266338304, b = 0 != c ? b ^ c >> 21 : b;}return b;};})(window);

//mix panel
(function (f, b) {
	if (!b.__SV) {var a, e, i, g;
		window.mixpanel = b;b._i = [];
		b.init = function (a, e, d) {
			function f(b, h) {
				var a = h.split(".");
				2 == a.length && (b = b[a[0]], h = a[1]);
				b[h] = function () {
					b.push([h].concat(Array.prototype.slice.call(arguments, 0)));};
			}
			var c = b;
			"undefined" !== typeof d ? c = b[d] = [] : d = "mixpanel";
			c.people = c.people || [];
			c.toString = function (b) {var a = "mixpanel";"mixpanel" !== d && (a += "." + d);b || (a += " (stub)");
				return a;
			};
			c.people.toString = function () {
				return c.toString(1) + ".people (stub)";};
			i = "disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
			for (g = 0; g < i.length; g++) {f(c, i[g]);}
			b._i.push([a, e, d]);};
		b.__SV = 1.2;
		a = f.createElement("script");
		a.type = "text/javascript";a.async = !0;
		a.src = "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
		e = f.getElementsByTagName("script")[0];
		//e.parentNode.insertBefore(a,e)
	}})(document, window.mixpanel || []);

if (config.app === 'app') {

	// mixpanel 

	(function () {
		var n = !0,p = null,s = !1;function C() {return function () {};}
		(function (r) {function o() {}function i() {}function F(a, b, e) {var f,d = "mixpanel" === e ? r : r[e];if (d && !c.isArray(d)) q.error("You have already initialized " + e);else return f = new i(), f.Fa(a, b, e), f.people = new o(), f.people.Fa(f), w = w || f.d("debug"), c.h(d) || (f.Da.call(f.people, d.people), f.Da(d)), f;}function m(a) {this.props = {};this.kb = s;this.name = a.cookie_name ? "mp_" + a.cookie_name : "mp_" + a.token + "_mixpanel";this.load();this.Kb(a);this.Qc(a);this.save();}function G() {this.Ab = "submit";}function A() {this.Ab = "click";}function v() {}
			function x() {if (!x.tc) K = x.tc = n, L = s, c.a(y, function (a) {a.Wb();});}var J = Array.prototype,N = Function.prototype,z = Object.prototype,B = J.slice,D = z.toString,H = z.hasOwnProperty,u = window.console,E = window.navigator,k = window.document,t = E.userAgent,O = "__mps,__mpso,__mpa,__mpap,$people_distinct_id,__alias,__cmpns".split(","),z = r && r.__SV || 0,I = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest(),L = !I && -1 == t.indexOf("MSIE") && -1 == t.indexOf("Mozilla"),c = {},w = s,P = { api_host: ("https:" == k.location.protocol ? "https://" :
				"http://") + "api.mixpanel.com", cross_subdomain_cookie: n, cookie_name: "", loaded: C(), store_google: n, save_referrer: n, test: s, verbose: s, img: s, track_pageview: n, debug: s, track_links_timeout: 300, cookie_expiration: 365, upgrade: s, disable_cookie: s, secure_cookie: s, ip: n },K = s;(function () {var a = N.bind,b = J.forEach,e = J.indexOf,f = Array.isArray,d = {};c.bind = function (b, e) {var d, _f;if (a && b.bind === a) return a.apply(b, B.call(arguments, 1));if (!c.wb(b)) throw new TypeError();d = B.call(arguments, 2);return _f = function f() {if (!(this instanceof
						_f)) return b.apply(e, d.concat(B.call(arguments)));ctor.prototype = b.prototype;var a = new ctor();ctor.prototype = p;var c = b.apply(a, d.concat(B.call(arguments)));return Object(c) === c ? c : a;};};c.ic = function (a) {for (var b in a) {"function" === typeof a[b] && (a[b] = c.bind(a[b], a));}};var l = c.a = function (a, e, c) {if (a != p) if (b && a.forEach === b) a.forEach(e, c);else if (a.length === +a.length) for (var f = 0, l = a.length; f < l && !(f in a && e.call(c, a[f], f, a) === d); f++) {} else for (f in a) {if (H.call(a, f) && e.call(c, a[f], f, a) === d) break;}};c.p = function (a) {a &&
					c.Ua(a) && (a = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;"));return a;};c.extend = function (a) {l(B.call(arguments, 1), function (b) {for (var e in b) {void 0 !== b[e] && (a[e] = b[e]);}});return a;};c.isArray = f || function (a) {return "[object Array]" === D.call(a);};c.wb = function (a) {try {return (/^\s*\bfunction\b/.test(a));} catch (b) {return s;}};c.xc = function (a) {return !(!a || !H.call(a, "callee"));};c.$ = function (a) {return !a ? [] : a.$ ? a.$() : c.isArray(a) || c.xc(a) ? B.call(a) : c.Sc(a);};
				c.Sc = function (a) {var b = [];if (a == p) return b;l(a, function (a) {b[b.length] = a;});return b;};c.Wc = function (a) {return a;};c.sb = function (a, b) {var c = s;if (a == p) return c;if (e && a.indexOf === e) return -1 != a.indexOf(b);l(a, function (a) {if (c || (c = a === b)) return d;});return c;};c.o = function (a, b) {return -1 !== a.indexOf(b);};})();c.ub = function (a, b) {a.prototype = new b();a.Lc = b.prototype;};c.j = function (a) {return a === Object(a) && !c.isArray(a);};c.W = function (a) {if (c.j(a)) {for (var b in a) {if (H.call(a, b)) return s;}return n;}return s;};c.h = function (a) {return void 0 ===
				a;};c.Ua = function (a) {return "[object String]" == D.call(a);};c.yc = function (a) {return "[object Date]" == D.call(a);};c.zc = function (a) {return "[object Number]" == D.call(a);};c.ob = function (a) {c.a(a, function (b, e) {c.yc(b) ? a[e] = c.uc(b) : c.j(b) && (a[e] = c.ob(b));});return a;};c.uc = function (a) {function b(a) {return 10 > a ? "0" + a : a;}return a.getUTCFullYear() + "-" + b(a.getUTCMonth() + 1) + "-" + b(a.getUTCDate()) + "T" + b(a.getUTCHours()) + ":" + b(a.getUTCMinutes()) + ":" + b(a.getUTCSeconds());};c.s = function (a) {return function () {try {a.apply(this,
						arguments);} catch (b) {q.na("Implementation error. Please contact support@mixpanel.com.");}};};c.Cb = function (a, b) {for (var e = 0; e < b.length; e++) {a.prototype[b[e]] = c.s(a.prototype[b[e]]);}};c.ra = function (a) {var b = {};c.a(a, function (a, f) {c.Ua(a) && 0 < a.length && (b[f] = a);});return b;};c.truncate = function (a, b) {var e;"string" === typeof a ? e = a.slice(0, b) : c.isArray(a) ? (e = [], c.a(a, function (a) {e.push(c.truncate(a, b));})) : c.j(a) ? (e = {}, c.a(a, function (a, d) {e[d] = c.truncate(a, b);})) : e = a;return e;};c.ca = function () {return function (a) {function b(a,
					c) {var l = "",j = 0,h = j = "",h = 0,g = l,i = [],k = c[a];k && "object" === (typeof k === "undefined" ? "undefined" : _typeof(k)) && "function" === typeof k.toJSON && (k = k.toJSON(a));switch (typeof k === "undefined" ? "undefined" : _typeof(k)) {case "string":return e(k);case "number":return isFinite(k) ? "" + k : "null";case "boolean":case "null":return "" + k;case "object":if (!k) return "null";l += "    ";i = [];if ("[object Array]" === D.apply(k)) {h = k.length;for (j = 0; j < h; j += 1) {i[j] = b(j, k) || "null";}return h = 0 === i.length ? "[]" : l ? "[\n" + l + i.join(",\n" + l) + "\n" + g + "]" : "[" + i.join(",") + "]";}for (j in k) {H.call(k, j) && (h = b(j, k)) && i.push(e(j) + (
									l ? ": " : ":") + h);}return h = 0 === i.length ? "{}" : l ? "{" + i.join(",") + "" + g + "}" : "{" + i.join(",") + "}";}}function e(a) {var b = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,e = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" };b.lastIndex = 0;return b.test(a) ? '"' + a.replace(b, function (a) {var b = e[a];return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);}) + '"' : '"' + a + '"';}return b("",
					{ "": a });};}();c.wa = function () {function a() {switch (h) {case "t":return d("t"), d("r"), d("u"), d("e"), n;case "f":return d("f"), d("a"), d("l"), d("s"), d("e"), s;case "n":return d("n"), d("u"), d("l"), d("l"), p;}l("Unexpected '" + h + "'");}function b() {for (; h && " " >= h;) {d();}}function e() {var a,b,e = "",c;if ('"' === h) for (; d();) {if ('"' === h) return d(), e;if ("\\" === h) {if (d(), "u" === h) {for (b = c = 0; 4 > b; b += 1) {a = parseInt(d(), 16);if (!isFinite(a)) break;c = 16 * c + a;}e += String.fromCharCode(c);} else if ("string" === typeof g[h]) e += g[h];else break;} else
						e += h;}l("Bad string");}function c() {var a;a = "";"-" === h && (a = "-", d("-"));for (; "0" <= h && "9" >= h;) {a += h, d();}if ("." === h) for (a += "."; d() && "0" <= h && "9" >= h;) {a += h;}if ("e" === h || "E" === h) {a += h;d();if ("-" === h || "+" === h) a += h, d();for (; "0" <= h && "9" >= h;) {a += h, d();}}a = +a;if (isFinite(a)) return a;l("Bad number");}function d(a) {a && a !== h && l("Expected '" + a + "' instead of '" + h + "'");h = i.charAt(j);j += 1;return h;}function l(a) {throw { name: "SyntaxError", message: a, Vc: j, text: i };}var j,h,g = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f",
					n: "\n", r: "\r", t: "\t" },i,_k;_k = function k() {b();switch (h) {case "{":var j;a: {var g,i = {};if ("{" === h) {d("{");b();if ("}" === h) {d("}");j = i;break a;}for (; h;) {g = e();b();d(":");Object.hasOwnProperty.call(i, g) && l('Duplicate key "' + g + '"');i[g] = _k();b();if ("}" === h) {d("}");j = i;break a;}d(",");b();}}l("Bad object");}return j;case "[":a: {j = [];if ("[" === h) {d("[");b();if ("]" === h) {d("]");g = j;break a;}for (; h;) {j.push(_k());b();if ("]" === h) {d("]");g = j;break a;}d(",");b();}}l("Bad array");}return g;case '"':return e();case "-":return c();
						default:return "0" <= h && "9" >= h ? c() : a();}};return function (a) {i = a;j = 0;h = " ";a = _k();b();h && l("Syntax error");return a;};}();c.ib = function (a) {var b,e,f,d,l = 0,j = 0,h = "",h = [];if (!a) return a;a = c.Rc(a);do {b = a.charCodeAt(l++), e = a.charCodeAt(l++), f = a.charCodeAt(l++), d = b << 16 | e << 8 | f, b = d >> 18 & 63, e = d >> 12 & 63, f = d >> 6 & 63, d &= 63, h[j++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(b) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(f) +
					"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d);} while (l < a.length);h = h.join("");switch (a.length % 3) {case 1:h = h.slice(0, -2) + "==";break;case 2:h = h.slice(0, -1) + "=";}return h;};c.Rc = function (a) {var a = (a + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n"),b = "",e,c,d = 0,l;e = c = 0;d = a.length;for (l = 0; l < d; l++) {var j = a.charCodeAt(l),h = p;128 > j ? c++ : h = 127 < j && 2048 > j ? String.fromCharCode(j >> 6 | 192, j & 63 | 128) : String.fromCharCode(j >> 12 | 224, j >> 6 & 63 | 128, j & 63 | 128);h !== p && (c > e && (b += a.substring(e, c)), b +=
					h, e = c = l + 1);}c > e && (b += a.substring(e, a.length));return b;};c.Rb = function () {function a() {function a(b, e) {var c,d = 0;for (c = 0; c < e.length; c++) {d |= l[c] << 8 * c;}return b ^ d;}var b,c,l = [],j = 0;for (b = 0; b < t.length; b++) {c = t.charCodeAt(b), l.unshift(c & 255), 4 <= l.length && (j = a(j, l), l = []);}0 < l.length && (j = a(j, l));return j.toString(16);}function b() {for (var a = 1 * new Date(), b = 0; a == 1 * new Date();) {b++;}return a.toString(16) + b.toString(16);}return function () {var c = (screen.height * screen.width).toString(16);return b() + "-" + Math.random().toString(16).replace(".",
					"") + "-" + a() + "-" + c + "-" + b();};}();c.vb = function (a) {return (/(google web preview|baiduspider|yandexbot|bingbot|googlebot|yahoo! slurp)/i.test(a) ? n : s);};c.Qb = function (a) {var b,e,f,d = [];"undefined" === typeof b && (b = "&");c.a(a, function (a, b) {e = encodeURIComponent(a.toString());f = encodeURIComponent(b);d[d.length] = f + "=" + e;});return d.join(b);};c.pb = function (a, b) {var b = b.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"),c = RegExp("[\\?&]" + b + "=([^&#]*)").exec(a);return c === p || c && "string" !== typeof c[1] && c[1].length ? "" : decodeURIComponent(c[1]).replace(/\+/g,
				" ");};c.cookie = { get: function get(a) {for (var a = a + "=", b = k.cookie.split(";"), c = 0; c < b.length; c++) {for (var f = b[c]; " " == f.charAt(0);) {f = f.substring(1, f.length);}if (0 == f.indexOf(a)) return decodeURIComponent(f.substring(a.length, f.length));}return p;}, parse: function parse(a) {var b;try {b = c.wa(c.cookie.get(a)) || {};} catch (e) {}return b;}, set: function set(a, b, c, f, d) {var e;var l = "",j = "",h = "";f && (e = (l = (l = k.location.hostname.match(/[a-z0-9][a-z0-9\-]+\.[a-z\.]{2,6}$/i)) ? l[0] : "") ? "; domain=." + l : "", l = e);c && (j = new Date(), j.setTime(j.getTime() +
					864E5 * c), j = "; expires=" + j.toGMTString());d && (h = "; secure");k.cookie = a + "=" + encodeURIComponent(b) + j + "; path=/" + l + h;}, remove: function remove(a, b) {c.cookie.set(a, "", -1, b);} };c.N = function () {function a(a, f, d) {return function (l) {if (l = l || b(window.event)) {var j = n,h;c.wb(d) && (h = d(l));l = f.call(a, l);if (s === h || s === l) j = s;return j;}};}function b(a) {if (a) a.preventDefault = b.preventDefault, a.stopPropagation = b.stopPropagation;return a;}b.preventDefault = function () {this.returnValue = s;};b.stopPropagation = function () {this.cancelBubble =
					n;};return function (b, c, d, l) {b ? b.addEventListener && !l ? b.addEventListener(c, d, s) : (c = "on" + c, b[c] = a(b, d, b[c])) : q.error("No valid element provided to register_event");};}();c.sc = function () {function a(a, c) {return 0 <= (" " + a.className + " ").replace(b, " ").indexOf(" " + c + " ");}var b = /[\t\r\n]/g;return function (b) {if (!k.getElementsByTagName) return [];for (var b = b.split(" "), f, d = Array(k), l = 0; l < b.length; l++) {if (f = b[l].replace(/^\s+/, "").replace(/\s+$/, ""), -1 < f.indexOf("#")) {f = f.split("#");var j = f[0],d = k.getElementById(f[1]);
							if (!d || j && d.nodeName.toLowerCase() != j) return [];d = Array(d);} else if (-1 < f.indexOf(".")) {f = f.split(".");var j = f[0],h = f[1];j || (j = "*");f = [];for (var g = 0, i = 0; i < d.length; i++) {var m;m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (var o = 0; o < m.length; o++) {f[g++] = m[o];}}d = [];for (g = j = 0; g < f.length; g++) {f[g].className && c.Ua(f[g].className) && a(f[g], h) && (d[j++] = f[g]);}} else if (f.match(/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/)) {var j = RegExp.$1,q = RegExp.$2,h = RegExp.$3,r = RegExp.$4;
							j || (j = "*");f = [];for (i = g = 0; i < d.length; i++) {m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) {f[g++] = m[o];}}d = [];j = 0;switch (h) {case "=":h = function h(a) {return a.getAttribute(q) == r;};break;case "~":h = function h(a) {return a.getAttribute(q).match(RegExp("\\b" + r + "\\b"));};break;case "|":h = function h(a) {return a.getAttribute(q).match(RegExp("^" + r + "-?"));};break;case "^":h = function h(a) {return 0 == a.getAttribute(q).indexOf(r);};break;case "$":h = function h(a) {return a.getAttribute(q).lastIndexOf(r) ==
										a.getAttribute(q).length - r.length;};break;case "*":h = function h(a) {return -1 < a.getAttribute(q).indexOf(r);};break;default:h = function h(a) {return a.getAttribute(q);};}d = [];for (g = j = 0; g < f.length; g++) {h(f[g]) && (d[j++] = f[g]);}} else {j = f;f = [];for (i = g = 0; i < d.length; i++) {m = d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) {f[g++] = m[o];}}d = f;}}return d;};}();c.info = { lc: function lc() {var a = "",b = {};c.a("utm_source utm_medium utm_campaign utm_content utm_term".split(" "), function (e) {a = c.pb(k.URL, e);a.length && (b[e] = a);});return b;},
				Ec: function Ec(a) {return 0 === a.search("https?://(.*)google.([^/?]*)") ? "google" : 0 === a.search("https?://(.*)bing.com") ? "bing" : 0 === a.search("https?://(.*)yahoo.com") ? "yahoo" : 0 === a.search("https?://(.*)duckduckgo.com") ? "duckduckgo" : p;}, Fc: function Fc(a) {var b = c.info.Ec(a),e = {};if (b !== p) e.$search_engine = b, a = c.pb(a, "yahoo" != b ? "q" : "p"), a.length && (e.mp_keyword = a);return e;}, ka: function ka(a, b, e) {b = b || "";return e ? c.o(a, "Mini") ? "Opera Mini" : "Opera" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : c.o(a, "FBIOS") ? "Facebook Mobile" :
					c.o(a, "Chrome") ? "Chrome" : c.o(a, "CriOS") ? "Chrome iOS" : c.o(b, "Apple") ? c.o(a, "Mobile") ? "Mobile Safari" : "Safari" : c.o(a, "Android") ? "Android Mobile" : c.o(a, "Konqueror") ? "Konqueror" : c.o(a, "Firefox") ? "Firefox" : c.o(a, "MSIE") || c.o(a, "Trident/") ? "Internet Explorer" : c.o(a, "Gecko") ? "Mozilla" : "";}, Xa: function Xa() {return (/Windows/i.test(t) ? /Phone/.test(t) ? "Windows Mobile" : "Windows" : /(iPhone|iPad|iPod)/.test(t) ? "iOS" : /Android/.test(t) ? "Android" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : /Mac/i.test(t) ? "Mac OS X" :
						/Linux/.test(t) ? "Linux" : "");}, nb: function nb(a) {return (/iPad/.test(a) ? "iPad" : /iPod/.test(a) ? "iPod Touch" : /iPhone/.test(a) ? "iPhone" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : /Windows Phone/i.test(a) ? "Windows Phone" : /Android/.test(a) ? "Android" : "");}, Bb: function Bb(a) {a = a.split("/");return 3 <= a.length ? a[2] : "";}, qa: function qa() {return c.extend(c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera), $referrer: k.referrer, $referring_domain: c.info.Bb(k.referrer), $device: c.info.nb(t) }), { $screen_height: screen.height,
						$screen_width: screen.width, mp_lib: "web", $lib_version: "2.3.2" });}, Dc: function Dc() {return c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera) });}, Cc: function Cc(a) {return c.ra({ mp_page: a, mp_referrer: k.referrer, mp_browser: c.info.ka(t, E.vendor, window.opera), mp_platform: c.info.Xa() });} };var q = { log: function log() {if (w && !c.h(u) && u) try {u.log.apply(u, arguments);} catch (a) {c.a(arguments, function (a) {u.log(a);});}}, error: function error() {if (w && !c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u,
							a);} catch (b) {c.a(a, function (a) {u.error(a);});}}}, na: function na() {if (!c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u, a);} catch (b) {c.a(a, function (a) {u.error(a);});}}} };v.prototype.ma = C();v.prototype.Oa = C();v.prototype.Ka = C();v.prototype.Ta = function (a) {this.yb = a;return this;};v.prototype.P = function (a, b, e, f) {var d = this,g = c.sc(a);if (0 == g.length) q.error("The DOM query (" + a + ") returned 0 elements");else return c.a(g, function (a) {c.N(a, this.Ab, function (a) {var c = {},j = d.ma(e, this),g =
						d.yb.d("track_links_timeout");d.Oa(a, this, c);window.setTimeout(d.Ib(f, j, c, n), g);d.yb.P(b, j, d.Ib(f, j, c));});}, this), n;};v.prototype.Ib = function (a, b, c, f) {var f = f || s,d = this;return function () {if (!c.kc) c.kc = n, a && a(f, b) === s || d.Ka(b, c, f);};};v.prototype.ma = function (a, b) {return "function" === typeof a ? a(b) : c.extend({}, a);};c.ub(A, v);A.prototype.ma = function (a, b) {var c = A.Lc.ma.apply(this, arguments);if (b.href) c.url = b.href;return c;};A.prototype.Oa = function (a, b, c) {c.zb = 2 === a.which || a.metaKey || "_blank" === b.target;c.href =
				b.href;c.zb || a.preventDefault();};A.prototype.Ka = function (a, b) {b.zb || setTimeout(function () {window.location = b.href;}, 0);};c.ub(G, v);G.prototype.Oa = function (a, b, c) {c.element = b;a.preventDefault();};G.prototype.Ka = function (a, b) {setTimeout(function () {b.element.submit();}, 0);};m.prototype.qa = function () {var a = {};c.a(this.props, function (b, e) {c.sb(O, e) || (a[e] = b);});return a;};m.prototype.load = function () {if (!this.disabled) {var a = c.cookie.parse(this.name);a && (this.props = c.extend({}, a));}};m.prototype.Qc = function (a) {var b =
				a.upgrade,e;if (b) e = "mp_super_properties", "string" === typeof b && (e = b), b = c.cookie.parse(e), c.cookie.remove(e), c.cookie.remove(e, n), b && (this.props = c.extend(this.props, b.all, b.events));if (!a.cookie_name && "mixpanel" !== a.name && (e = "mp_" + a.token + "_" + a.name, b = c.cookie.parse(e))) c.cookie.remove(e), c.cookie.remove(e, n), this.G(b);};m.prototype.save = function () {this.disabled || (this.Yb(), c.cookie.set(this.name, c.ca(this.props), this.Pa, this.Ma, this.Db));};m.prototype.remove = function () {c.cookie.remove(this.name, s);c.cookie.remove(this.name,
				n);};m.prototype.clear = function () {this.remove();this.props = {};};m.prototype.G = function (a, b, e) {return c.j(a) ? ("undefined" === typeof b && (b = "None"), this.Pa = "undefined" === typeof e ? this.mb : e, c.a(a, function (a, c) {if (!this.props[c] || this.props[c] === b) this.props[c] = a;}, this), this.save(), n) : s;};m.prototype.Z = function (a, b) {return c.j(a) ? (this.Pa = "undefined" === typeof b ? this.mb : b, c.extend(this.props, a), this.save(), n) : s;};m.prototype.ua = function (a) {a in this.props && (delete this.props[a], this.save());};m.prototype.Yb =
			function () {var a = this.props.__cmpns,b = w ? 6E4 : 36E5;if (a) {for (var e in a) {1 * new Date() - a[e] > b && delete a[e];}c.W(a) && delete this.props.__cmpns;}};m.prototype.Pc = function () {if (!this.kb) this.G(c.info.lc()), this.kb = n;};m.prototype.Lb = function (a) {this.Z(c.info.Fc(a));};m.prototype.Za = function (a) {this.G({ $initial_referrer: a || "$direct", $initial_referring_domain: c.info.Bb(a) || "$direct" }, "");};m.prototype.wc = function () {return c.ra({ $initial_referrer: this.props.$initial_referrer, $initial_referring_domain: this.props.$initial_referring_domain });};
			m.prototype.Kb = function (a) {this.mb = this.Pa = a.cookie_expiration;this.Hc(a.disable_cookie);this.Gc(a.cross_subdomain_cookie);this.Ic(a.secure_cookie);};m.prototype.Hc = function (a) {(this.disabled = a) && this.remove();};m.prototype.Gc = function (a) {if (a !== this.Ma) this.Ma = a, this.remove(), this.save();};m.prototype.vc = function () {return this.Ma;};m.prototype.Ic = function (a) {if (a !== this.Db) this.Db = a ? n : s, this.remove(), this.save();};m.prototype.C = function (a, b) {var e = this.Ea(a),f = b[a],d = this.ga("$set"),g = this.ga("$set_once"),
				j = this.ga("$add"),h = this.ga("$append", []);"__mps" === e ? (c.extend(d, f), this.ia("$add", f)) : "__mpso" === e ? c.a(f, function (a, b) {b in g || (g[b] = a);}) : "__mpa" === e ? c.a(f, function (a, b) {b in d ? d[b] += a : (b in j || (j[b] = 0), j[b] += a);}, this) : "__mpap" === e && h.push(f);q.log("MIXPANEL PEOPLE REQUEST (QUEUED, PENDING IDENTIFY):");q.log(b);this.save();};m.prototype.ia = function (a, b) {var e = this.T(a);c.h(e) || (c.a(b, function (a, b) {delete e[b];}, this), this.save());};m.prototype.Ea = function (a) {if ("$set" === a) return "__mps";if ("$set_once" ===
				a) return "__mpso";if ("$add" === a) return "__mpa";if ("$append" === a) return "__mpap";q.error("Invalid queue:", a);};m.prototype.T = function (a) {return this.props[this.Ea(a)];};m.prototype.ga = function (a, b) {var e = this.Ea(a),b = c.h(b) ? {} : b;return this.props[e] || (this.props[e] = b);};i.prototype.Ta = function (a, b, c) {if ("undefined" === typeof c) q.error("You must name your new library: init(token, config, name)");else if ("mixpanel" === c) q.error("You must initialize the main mixpanel object right after you include the Mixpanel js snippet");else
				return a = F(a, b, c), r[c] = a, a.ha(), a;};i.prototype.Fa = function (a, b, e) {this.__loaded = n;this.config = {};this.Eb(c.extend({}, P, b, { name: e, token: a, callback_fn: ("mixpanel" === e ? e : "mixpanel." + e) + "._jsc" }));this._jsc = C();this.Ba = [];this.Ca = [];this.Aa = [];this.S = { disable_all_events: s, identify_called: s };this.cookie = new m(this.config);this.G({ distinct_id: c.Rb() }, "");};i.prototype.ha = function () {this.d("loaded")(this);this.d("track_pageview") && this.Jb();};i.prototype.Wb = function () {c.a(this.Ba, function (a) {this.Ia.apply(this,
					a);}, this);c.a(this.Ca, function (a) {this.w.apply(this, a);}, this);delete this.Ba;delete this.Ca;};i.prototype.Ia = function (a, b) {if (this.d("img")) return q.error("You can't use DOM tracking functions with img = true."), s;if (!K) return this.Ba.push([a, b]), s;var c = new a().Ta(this);return c.P.apply(c, b);};i.prototype.Ga = function (a, b) {if (c.h(a)) return p;if (I) return function (c) {a(c, b);};var e = this._jsc,f = "" + Math.floor(1E8 * Math.random()),d = this.d("callback_fn") + '["' + f + '"]';e[f] = function (c) {delete e[f];a(c, b);};return d;};
			i.prototype.w = function (a, b, e) {if (L) this.Ca.push(arguments);else {var f = this.d("verbose");b.verbose && (f = n);this.d("test") && (b.test = 1);f && (b.verbose = 1);this.d("img") && (b.img = 1);if (!I) if (e) b.callback = e;else if (f || this.d("test")) b.callback = "(function(){})";b.ip = this.d("ip") ? 1 : 0;b._ = new Date().getTime().toString();a += "?" + c.Qb(b);if ("img" in b) {var d = k.createElement("img");d.src = a;k.body.appendChild(d);} else if (I) {var g = new XMLHttpRequest();g.open("GET", a, n);g.withCredentials = n;g.onreadystatechange = function () {if (4 ===
							g.readyState) if (200 === g.status) e && (f ? e(c.wa(g.responseText)) : e(Number(g.responseText)));else {var a = "Bad HTTP status: " + g.status + " " + g.statusText;q.error(a);e && (f ? e({ status: 0, error: a }) : e(0));}};g.send(p);} else {d = k.createElement("script");d.type = "text/javascript";d.async = n;d.defer = n;d.src = a;var j = k.getElementsByTagName("script")[0];j.parentNode.insertBefore(d, j);}}};i.prototype.Da = function (a) {function b(a, b) {c.a(a, function (a) {this[a[0]].apply(this, a.slice(1));}, b);}var e,f = [],d = [],g = [];c.a(a, function (a) {a && (
					e = a[0], "function" === typeof a ? a.call(this) : c.isArray(a) && "alias" === e ? f.push(a) : c.isArray(a) && -1 != e.indexOf("track") && "function" === typeof this[e] ? g.push(a) : d.push(a));}, this);b(f, this);b(d, this);b(g, this);};i.prototype.push = function (a) {this.Da([a]);};i.prototype.disable = function (a) {"undefined" === typeof a ? this.S.pc = n : this.Aa = this.Aa.concat(a);};i.prototype.P = function (a, b, e) {if ("undefined" === typeof a) q.error("No event name provided to mixpanel.track");else if (c.vb(t) || this.S.pc || c.sb(this.Aa, a)) "undefined" !==
				typeof e && e(0);else return b = b || {}, b.token = b.Xc || this.d("token"), this.cookie.Lb(k.referrer), this.d("store_google") && this.cookie.Pc(), this.d("save_referrer") && this.cookie.Za(k.referrer), b = c.extend({}, c.info.qa(), this.cookie.qa(), b), a = c.truncate({ event: a, properties: b }, 255), b = c.ca(a), b = c.ib(b), q.log("MIXPANEL REQUEST:"), q.log(a), this.w(this.d("api_host") + "/track/", { data: b }, this.Ga(e, a)), a;};i.prototype.Jb = function (a) {if ("undefined" === typeof a) a = k.location.href;this.P("mp_page_view", c.info.Cc(a));};i.prototype.Oc =
			function () {return this.Ia.call(this, A, arguments);};i.prototype.Nc = function () {return this.Ia.call(this, G, arguments);};i.prototype.Z = function (a, b) {this.cookie.Z(a, b);};i.prototype.G = function (a, b, c) {this.cookie.G(a, b, c);};i.prototype.ua = function (a) {this.cookie.ua(a);};i.prototype.Ha = function (a, b) {var c = {};c[a] = b;this.Z(c);};i.prototype.Ra = function (a, b, c, f, d) {a != this.M() && a != this.oa("__alias") && (this.ua("__alias"), this.Ha("distinct_id", a));this.$a(this.M());this.S.qb = n;this.people.Zb(b, c, f, d);};i.prototype.M =
			function () {return this.oa("distinct_id");};i.prototype.hc = function (a, b) {if (a === this.oa("$people_distinct_id")) return q.na("Attempting to create alias for existing People user - aborting."), -2;var e = this;c.h(b) && (b = this.M());if (a !== b) return this.Ha("__alias", a), this.P("$create_alias", { alias: a, distinct_id: b }, function () {e.Ra(a);});q.error("alias matches current distinct_id - skipping api call.");this.Ra(a);return -1;};i.prototype.Ac = function (a) {this.Ha("mp_name_tag", a);};i.prototype.Eb = function (a) {c.j(a) && (
				c.extend(this.config, a), this.cookie && this.cookie.Kb(this.config), w = w || this.d("debug"));};i.prototype.d = function (a) {return this.config[a];};i.prototype.oa = function (a) {return this.cookie.props[a];};i.prototype.toString = function () {var a = this.d("name");"mixpanel" !== a && (a = "mixpanel." + a);return a;};i.prototype.$a = function (a) {if (a && !this.S.qb && !this.d("disable_notifications")) {q.log("MIXPANEL NOTIFICATION CHECK");var b = this;this.w(this.d("api_host") + "/decide/", { verbose: n, version: "1", lib: "web", token: this.d("token"),
						distinct_id: a }, this.Ga(function (a) {a.notifications && 0 < a.notifications.length && b.gb.call(b, a.notifications[0]);}));}};i.prototype.gb = function (a) {new g(a, this).show();};o.prototype.Fa = function (a) {this.c = a;};o.prototype.set = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;this.fa("save_referrer") && this.c.cookie.Za(k.referrer);d = c.extend({}, c.info.Dc(), this.c.cookie.wc(), d);f.$set = d;return this.w(f, e);};o.prototype.Fb = function (a, b, e) {var f =
				{},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$set_once = d;return this.w(f, e);};o.prototype.tb = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (isNaN(parseFloat(a)) ? q.error("Invalid increment value passed to mixpanel.people.increment - must be a number") : d[b] = a);}), e = b) : (c.h(b) && (b = 1), d[a] = b);f.$add = d;return this.w(f, e);};o.prototype.append = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" ==
					b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$append = d;return this.w(f, e);};o.prototype.Mc = function (a, b, e) {if (!c.zc(a) && (a = parseFloat(a), isNaN(a))) {q.error("Invalid value passed to mixpanel.people.track_charge - must be a number");return;}return this.append("$transactions", c.extend({ $amount: a }, b), e);};o.prototype.mc = function (a) {return this.set("$transactions", [], a);};o.prototype.oc = function () {if (this.bb()) return this.w({ $delete: this.c.M() });q.error("mixpanel.people.delete_user() requires you to call identify() first");};
			o.prototype.toString = function () {return this.c.toString() + ".people";};o.prototype.w = function (a, b) {a.$token = this.fa("token");a.$distinct_id = this.c.M();var e = c.ob(a),f = c.truncate(e, 255),e = c.ca(e),e = c.ib(e);if (!this.bb()) return this.Xb(a), c.h(b) || (this.fa("verbose") ? b({ status: -1, error: p }) : b(-1)), f;q.log("MIXPANEL PEOPLE REQUEST:");q.log(f);this.c.w(this.fa("api_host") + "/engage/", { data: e }, this.c.Ga(b, f));return f;};o.prototype.fa = function (a) {return this.c.d(a);};o.prototype.bb = function () {return this.c.S.qb ===
				n;};o.prototype.Xb = function (a) {"$set" in a ? this.c.cookie.C("$set", a) : "$set_once" in a ? this.c.cookie.C("$set_once", a) : "$add" in a ? this.c.cookie.C("$add", a) : "$append" in a ? this.c.cookie.C("$append", a) : q.error("Invalid call to _enqueue():", a);};o.prototype.Zb = function (a, b, e, f) {var d = this,g = c.extend({}, this.c.cookie.T("$set")),j = c.extend({}, this.c.cookie.T("$set_once")),h = c.extend({}, this.c.cookie.T("$add")),i = this.c.cookie.T("$append");!c.h(g) && c.j(g) && !c.W(g) && (d.c.cookie.ia("$set", g), this.set(g, function (b,
				e) {0 == b && d.c.cookie.C("$set", g);c.h(a) || a(b, e);}));!c.h(j) && c.j(j) && !c.W(j) && (d.c.cookie.ia("$set_once", j), this.Fb(j, function (a, b) {0 == a && d.c.cookie.C("$set_once", j);c.h(f) || f(a, b);}));!c.h(h) && c.j(h) && !c.W(h) && (d.c.cookie.ia("$add", h), this.tb(h, function (a, e) {0 == a && d.c.cookie.C("$add", h);c.h(b) || b(a, e);}));if (!c.h(i) && c.isArray(i) && i.length) {for (var k = i.length - 1; 0 <= k; k--) {var m = i.pop();d.append(m, function (a, b) {0 == a && d.c.cookie.C("$append", m);c.h(e) || e(a, b);});}d.c.cookie.save();}};i.Ub = function (a, b) {c.ic(this);
				this.Wa = b;this.cookie = this.Wa.cookie;this.D = c.p(a.id);this.xb = c.p(a.message_id);this.body = (c.p(a.body) || "").replace(/\n/g, "<br/>");this.nc = c.p(a.cta) || "Close";this.V = c.p(a.cta_url) || p;this.Sa = c.p(a.image_url) || p;this.X = c.p(a.type) || "takeover";this.style = c.p(a.style) || "light";this.H = c.p(a.thumb_image_url) || p;this.title = c.p(a.title) || "";this.va = c.p(a.video_url) || p;this.aa = g.Tb;this.Q = g.Sb;this.la = n;if (!this.V) this.V = "#dismiss", this.la = s;this.q = "mini" === this.X;if (!this.q) this.X = "takeover";this.Bc = !this.q ?
				g.R : g.xa;this.fb();this.pa = this.$b();this.cc();};var g = i.Ub;g.I = 200;g.u = "mixpanel-notification";g.ba = 0.6;g.B = 25;g.da = 200;g.R = 388;g.xa = 420;g.v = 85;g.ya = 5;g.F = 60;g.za = Math.round(g.F / 2);g.Tb = 595;g.Sb = 334;g.prototype.show = function () {var a = this;this.fb();this.l ? (this.bc(), this.ac(), this.dc(this.Vb)) : setTimeout(function () {a.show();}, 300);};g.prototype.Na = c.s(function () {var a = this.Jc ? this.g("video") : this.L();if (this.Mb) this.ec("bg", "visible"), this.J(a, "exiting"), setTimeout(this.eb, g.I);else {var b, c, f;this.q ? (
					b = "right", c = 20, f = -100) : (b = "top", c = g.B, f = g.da + g.B);this.ea([{ m: this.g("bg"), k: "opacity", start: g.ba, i: 0 }, { m: a, k: "opacity", start: 1, i: 0 }, { m: a, k: b, start: c, i: f }], g.I, this.eb);}});g.prototype.J = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));a.className ? ~(" " + a.className + " ").indexOf(" " + b + " ") || (a.className += " " + b) : a.className = b;});g.prototype.ec = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));if (a.className) a.className = (" " + a.className + " ").replace(" " + b + " ", "").replace(/^[\s\xA0]+/,
				"").replace(/[\s\xA0]+$/, "");});g.prototype.ea = c.s(function (a, b, c, f) {var d = this,g = s,j,h;j = 1 * new Date();var i,f = f || j;i = j - f;for (j = 0; j < a.length; j++) {h = a[j];if ("undefined" === typeof h.A) h.A = h.start;if (h.A !== h.i) {var g = n,k = h.i >= h.start ? 1 : -1;h.A = h.start + (h.i - h.start) * i / b;if ("opacity" !== h.k) h.A = Math.round(h.A);if (0 < k && h.A >= h.i || 0 > k && h.A <= h.i) h.A = h.i;}}if (g) {for (j = 0; j < a.length; j++) {h = a[j], h.m && (h.m.style[h.k] = "" + h.A + ("opacity" === h.k ? "" : "px"));}setTimeout(function () {d.ea(a, b, c, f);}, 10);} else c && c();});g.prototype.Vb =
			c.s(function () {var a = this;if (!this.Kc && !this.ab()[this.D]) this.Kc = n, this.l.appendChild(this.Y), setTimeout(function () {var b = a.L();if (a.Mb) a.q || a.J("bg", "visible"), a.J(b, "visible"), a.cb();else {var c, f, d;a.q ? (c = "right", f = -100, d = 20) : (c = "top", f = g.da + g.B, d = g.B);a.ea([{ m: a.g("bg"), k: "opacity", start: 0, i: g.ba }, { m: b, k: "opacity", start: 0, i: 1 }, { m: b, k: c, start: f, i: d }], g.I, a.cb);}}, 100), c.N(a.g("cancel"), "click", function (b) {b.preventDefault();a.Na();}), c.N(a.g("button") || a.g("mini-content"), "click", function (b) {b.preventDefault();
					a.O ? (a.Ja("$campaign_open", { $resource_type: "video" }), a.fc()) : (a.Na(), a.la && a.Ja("$campaign_open", { $resource_type: "link" }, function () {window.location.href = a.V;}));});});g.prototype.g = function (a) {return k.getElementById(g.u + "-" + a);};g.prototype.L = function () {return this.g(this.X);};g.prototype.ab = function () {return this.cookie.props.__cmpns || (this.cookie.props.__cmpns = {});};g.prototype.K = function (a, b) {return this.z[a] && this.z[a] <= b;};g.prototype.$b = function () {var a = [];this.q ? (this.H = this.H || "//cdn.mxpnl.com/site_media/images/icons/notifications/mini-news-dark.png",
				a.push(this.H)) : (this.Sa ? (a.push(this.Sa), this.rb = '<img id="img" src="' + this.Sa + '"/>') : this.rb = "", this.H ? (a.push(this.H), this.Hb = '<div id="thumbborder-wrapper"><div id="thumbborder"></div></div><img id="thumbnail" src="' + this.H + '" width="' + g.F + '" height="' + g.F + '"/><div id="thumbspacer"></div>') : this.Hb = "");return a;};g.prototype.ac = function () {var a = "",b = "",c = "";this.Y = k.createElement("div");this.Y.id = g.u + "-wrapper";if (this.q) a = '<div id="mini"><div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="mini-content"><div id="mini-icon"><div id="mini-icon-img"></div></div><div id="body"><div id="body-text"><div>' +
				this.body + '</div></div></div></div></div><div id="mini-border"></div></div>';else {var a = this.la || this.O ? "" : '<div id="button-close"></div>',f = this.O ? '<div id="button-play"></div>' : "";this.K("ie", 7) && (f = a = "");a = '<div id="takeover">' + this.Hb + '<div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="content">' + this.rb + '<div id="title">' + this.title + '</div><div id="body">' + this.body + '</div><div id="tagline"><a href="http://mixpanel.com?from=inapp" target="_blank">POWERED BY MIXPANEL</a></div></div><div id="button">' +
					a + '<a id="button-link" href="' + this.V + '">' + this.nc + "</a>" + f + "</div></div></div>";}this.Ob ? (b = "//www.youtube.com/embed/" + this.Ob + "?wmode=transparent&showinfo=0&modestbranding=0&rel=0&autoplay=1&loop=0&vq=hd1080", this.Pb && (b += "&enablejsapi=1&html5=1&controls=0", c = '<div id="video-controls"><div id="video-progress" class="video-progress-el"><div id="video-progress-total" class="video-progress-el"></div><div id="video-elapsed" class="video-progress-el"></div></div><div id="video-time" class="video-progress-el"></div></div>')) :
				this.Nb && (b = "//player.vimeo.com/video/" + this.Nb + "?autoplay=1&title=0&byline=0&portrait=0");if (this.O) this.Tc = '<iframe id="' + g.u + '-video-frame" width="' + this.aa + '" height="' + this.Q + '"  src="' + b + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen="1" scrolling="no"></iframe>', c = '<div id="video-' + (this.Qa ? "" : "no") + 'flip"><div id="video"><div id="video-holder"></div>' + c + "</div></div>";b = c + a;this.Qa && (b = (this.q ? a : "") + '<div id="flipcontainer"><div id="flipper">' + (this.q ? c : b) + "</div></div>");
				this.Y.innerHTML = ('<div id="overlay" class="' + this.X + '"><div id="campaignid-' + this.D + '"><div id="bgwrapper"><div id="bg"></div>' + b + "</div></div></div>").replace(/class=\"/g, 'class="' + g.u + "-").replace(/id=\"/g, 'id="' + g.u + "-");};g.prototype.bc = function () {this.e = "dark" === this.style ? { La: "#1d1f25", U: "#282b32", ja: "#3a4147", jb: "#4a5157", jc: "#32353c", lb: "0.4", Va: "#2a3137", ta: "#fff", Ya: "#9498a3", Gb: "#464851", sa: "#ddd" } : { La: "#fff", U: "#e7eaee", ja: "#eceff3", jb: "#f5f5f5", jc: "#e4ecf2", lb: "1.0", Va: "#fafafa", ta: "#5c6578",
					Ya: "#8b949b", Gb: "#ced9e6", sa: "#7c8598" };var a = "0px 0px 35px 0px rgba(45, 49, 56, 0.7)",b = a,e = a,f = g.F + 2 * g.ya,d = g.I / 1E3 + "s";this.q && (a = "none");var i = {};i["@media only screen and (max-width: " + (g.xa + 20 - 1) + "px)"] = { "#overlay": { display: "none" } };a = { ".flipped": { transform: "rotateY(180deg)" }, "#overlay": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", overflow: "auto", "text-align": "center", "z-index": "10000", "font-family": '"Helvetica", "Arial", sans-serif', "-webkit-font-smoothing": "antialiased", "-moz-osx-font-smoothing": "grayscale" },
					"#overlay.mini": { height: "0", overflow: "visible" }, "#overlay a": { width: "initial", padding: "0", "text-decoration": "none", "text-transform": "none", color: "inherit" }, "#bgwrapper": { position: "relative", width: "100%", height: "100%" }, "#bg": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", "min-width": 4 * this.rc + "px", "min-height": 4 * this.qc + "px", "background-color": "black", opacity: "0.0", "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)", filter: "alpha(opacity=60)", transition: "opacity " + d },
					"#bg.visible": { opacity: g.ba }, ".mini #bg": { width: "0", height: "0", "min-width": "0" }, "#flipcontainer": { perspective: "1000px", position: "absolute", width: "100%" }, "#flipper": { position: "relative", "transform-style": "preserve-3d", transition: "0.3s" }, "#takeover": { position: "absolute", left: "50%", width: g.R + "px", "margin-left": Math.round(-g.R / 2) + "px", "backface-visibility": "hidden", transform: "rotateY(0deg)", opacity: "0.0", top: g.da + "px", transition: "opacity " + d + ", top " + d }, "#takeover.visible": { opacity: "1.0", top: g.B + "px" },
					"#takeover.exiting": { opacity: "0.0", top: g.da + "px" }, "#thumbspacer": { height: g.za + "px" }, "#thumbborder-wrapper": { position: "absolute", top: -g.ya + "px", left: g.R / 2 - g.za - g.ya + "px", width: f + "px", height: f / 2 + "px", overflow: "hidden" }, "#thumbborder": { position: "absolute", width: f + "px", height: f + "px", "border-radius": f + "px", "background-color": this.e.U, opacity: "0.5" }, "#thumbnail": { position: "absolute", top: "0px", left: g.R / 2 - g.za + "px", width: g.F + "px", height: g.F + "px", overflow: "hidden", "z-index": "100", "border-radius": g.F + "px" },
					"#mini": { position: "absolute", right: "20px", top: g.B + "px", width: this.Bc + "px", height: 2 * g.v + "px", "margin-top": 20 - g.v + "px", "backface-visibility": "hidden", opacity: "0.0", transform: "rotateX(90deg)", transition: "opacity 0.3s, transform 0.3s, right 0.3s" }, "#mini.visible": { opacity: "1.0", transform: "rotateX(0deg)" }, "#mini.exiting": { opacity: "0.0", right: "-150px" }, "#mainbox": { "border-radius": "4px", "box-shadow": a, "text-align": "center", "background-color": this.e.La, "font-size": "14px", color: this.e.Ya }, "#mini #mainbox": { height: g.v +
						"px", "margin-top": g.v + "px", "border-radius": "3px", transition: "background-color " + d }, "#mini-border": { height: g.v + 6 + "px", width: g.xa + 6 + "px", position: "absolute", top: "-3px", left: "-3px", "margin-top": g.v + "px", "border-radius": "6px", opacity: "0.25", "background-color": "#fff", "z-index": "-1", "box-shadow": e }, "#mini-icon": { position: "relative", display: "inline-block", width: "75px", height: g.v + "px", "border-radius": "3px 0 0 3px", "background-color": this.e.U, background: "linear-gradient(135deg, " + this.e.jb + " 0%, " + this.e.U +
						" 100%)", transition: "background-color " + d }, "#mini:hover #mini-icon": { "background-color": this.e.Va }, "#mini:hover #mainbox": { "background-color": this.e.Va }, "#mini-icon-img": { position: "absolute", "background-image": "url(" + this.H + ")", width: "48px", height: "48px", top: "20px", left: "12px" }, "#content": { padding: "30px 20px 0px 20px" }, "#mini-content": { "text-align": "left", height: g.v + "px", cursor: "pointer" }, "#img": { width: "328px", "margin-top": "30px", "border-radius": "5px" }, "#title": { "max-height": "600px", overflow: "hidden",
						"word-wrap": "break-word", padding: "25px 0px 20px 0px", "font-size": "19px", "font-weight": "bold", color: this.e.ta }, "#body": { "max-height": "600px", "margin-bottom": "25px", overflow: "hidden", "word-wrap": "break-word", "line-height": "21px", "font-size": "15px", "font-weight": "normal", "text-align": "left" }, "#mini #body": { display: "inline-block", "max-width": "250px", margin: "0 0 0 30px", height: g.v + "px", "font-size": "16px", "letter-spacing": "0.8px", color: this.e.ta }, "#mini #body-text": { display: "table", height: g.v + "px" }, "#mini #body-text div": { display: "table-cell",
						"vertical-align": "middle" }, "#tagline": { "margin-bottom": "15px", "font-size": "10px", "font-weight": "600", "letter-spacing": "0.8px", color: "#ccd7e0", "text-align": "left" }, "#tagline a": { color: this.e.Gb, transition: "color " + d }, "#tagline a:hover": { color: this.e.sa }, "#cancel": { position: "absolute", right: "0", width: "8px", height: "8px", padding: "10px", "border-radius": "20px", margin: "12px 12px 0 0", "box-sizing": "content-box", cursor: "pointer", transition: "background-color " + d }, "#mini #cancel": { margin: "7px 7px 0 0" }, "#cancel-icon": { width: "8px",
						height: "8px", overflow: "hidden", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/cancel-x.png)", opacity: this.e.lb }, "#cancel:hover": { "background-color": this.e.ja }, "#button": { display: "block", height: "60px", "line-height": "60px", "text-align": "center", "background-color": this.e.U, "border-radius": "0 0 4px 4px", overflow: "hidden", cursor: "pointer", transition: "background-color " + d }, "#button-close": { display: "inline-block", width: "9px", height: "60px", "margin-right": "8px", "vertical-align": "top",
						"background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/close-x-" + this.style + ".png)", "background-repeat": "no-repeat", "background-position": "0px 25px" }, "#button-play": { display: "inline-block", width: "30px", height: "60px", "margin-left": "15px", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/play-" + this.style + "-small.png)", "background-repeat": "no-repeat", "background-position": "0px 15px" }, "a#button-link": { display: "inline-block", "vertical-align": "top", "text-align": "center",
						"font-size": "17px", "font-weight": "bold", overflow: "hidden", "word-wrap": "break-word", color: this.e.ta, transition: "color " + d }, "#button:hover": { "background-color": this.e.ja, color: this.e.sa }, "#button:hover a": { color: this.e.sa }, "#video-noflip": { position: "relative", top: 2 * -this.Q + "px" }, "#video-flip": { "backface-visibility": "hidden", transform: "rotateY(180deg)" }, "#video": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", top: g.B + "px", "margin-top": "100px", left: "50%", "margin-left": Math.round(-this.aa /
						2) + "px", overflow: "hidden", "border-radius": "5px", "box-shadow": b, transform: "translateZ(1px)", transition: "opacity " + d + ", top " + d }, "#video.exiting": { opacity: "0.0", top: this.Q + "px" }, "#video-holder": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", overflow: "hidden", "border-radius": "5px" }, "#video-frame": { "margin-left": "-1px", width: this.aa + "px" }, "#video-controls": { opacity: "0", transition: "opacity 0.5s" }, "#video:hover #video-controls": { opacity: "1.0" }, "#video .video-progress-el": { position: "absolute",
						bottom: "0", height: "25px", "border-radius": "0 0 0 5px" }, "#video-progress": { width: "90%" }, "#video-progress-total": { width: "100%", "background-color": this.e.La, opacity: "0.7" }, "#video-elapsed": { width: "0", "background-color": "#6cb6f5", opacity: "0.9" }, "#video #video-time": { width: "10%", right: "0", "font-size": "11px", "line-height": "25px", color: this.e.Ya, "background-color": "#666", "border-radius": "0 0 5px 0" } };this.K("ie", 8) && c.extend(a, { "* html #overlay": { position: "absolute" }, "* html #bg": { position: "absolute" }, "html, body": { height: "100%" } });
				this.K("ie", 7) && c.extend(a, { "#mini #body": { display: "inline", zoom: "1", border: "1px solid " + this.e.ja }, "#mini #body-text": { padding: "20px" }, "#mini #mini-icon": { display: "none" } });var b = "backface-visibility,border-radius,box-shadow,opacity,perspective,transform,transform-style,transition".split(","),e = ["khtml", "moz", "ms", "o", "webkit"],j;for (j in a) {for (f = 0; f < b.length; f++) {if (d = b[f], d in a[j]) for (var h = a[j][d], m = 0; m < e.length; m++) {a[j]["-" + e[m] + "-" + d] = h;}}}(function (a, b) {function c(a) {var b = "",d;for (d in a) {var e =
							d.replace(/#/g, "#" + g.u + "-").replace(/\./g, "." + g.u + "-"),b = b + ("\n" + e + " {"),e = a[d],f;for (f in e) {b += f + ":" + e[f] + ";";}b += "}";}return b;}var d = c(a) + function (a) {var b = "",d;for (d in a) {b += "\n" + d + " {" + c(a[d]) + "\n}";}return b;}(b),e = k.head || k.getElementsByTagName("head")[0] || k.documentElement,f = k.createElement("style");e.appendChild(f);f.setAttribute("type", "text/css");f.styleSheet ? f.styleSheet.cssText = d : f.textContent = d;})(a, i);};g.prototype.cc = c.s(function () {if (this.va) {var a = this;a.Pb = "postMessage" in window;k.createElement("div");
					a.V = a.va;var b = a.va.match(/(?:youtube(?:-nocookie)?\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i),c = a.va.match(/vimeo\.com\/.*?(\d+)/i);if (b) {if (a.O = n, a.Ob = b[1], a.Pb) window.onYouTubeIframeAPIReady = function () {a.g("video-frame") && a.hb();}, b = k.createElement("script"), b.src = "//www.youtube.com/iframe_api", c = k.getElementsByTagName("script")[0], c.parentNode.insertBefore(b, c);} else if (c) a.O = n, a.Nb = c[1];if (a.K("ie", 7) || a.K("firefox", 3)) a.O = s, a.la = n;}});g.prototype.cb = c.s(function () {function a(a,
				b) {var c = {};if (k.defaultView && k.defaultView.getComputedStyle) c = k.defaultView.getComputedStyle(a, p);else if (a.currentStyle) c = a.currentStyle;return c[b];}var b = this;c.N(b.g("bg"), "click", function () {b.Na();});if (this.D) {var e = this.g("overlay");e && "hidden" !== a(e, "visibility") && "none" !== a(e, "display") && (this.ab()[this.D] = 1 * new Date(), this.cookie.save(), this.Ja("$campaign_delivery"), this.Wa.people.append({ $campaigns: this.D, $notifications: { campaign_id: this.D, message_id: this.xb, type: "web", time: new Date() } }));}});
			g.prototype.dc = function (a) {var b = this;if (0 === this.pa.length) a();else {for (var c = 0, f = [], d = 0; d < this.pa.length; d++) {var g = new Image(),i = function i() {c++;c === b.pa.length && a && (a(), a = p);};g.onload = i;g.src = this.pa[d];g.complete && i();f.push(g);}this.K("ie", 7) && setTimeout(function () {var b = n;for (d = 0; d < f.length; d++) {f[d].complete || (b = s);}b && a && (a(), a = p);}, 500);}};g.prototype.eb = c.s(function () {window.clearInterval(this.gc);this.Y.style.visibility = "hidden";this.l.removeChild(this.Y);});g.prototype.fb = function () {function a(a) {if (a in
					f) return n;if (!c) for (var a = a[0].toUpperCase() + a.slice(1), a = ["O" + a, "Webkit" + a, "Moz" + a], b = 0; b < a.length; b++) {if (a[b] in f) return n;}return s;}function b(a) {return (a = E.userAgent.match(a)) && a[1];}this.z = {};this.z.chrome = b(/Chrome\/(\d+)/);this.z.firefox = b(/Firefox\/(\d+)/);this.z.ie = b(/MSIE (\d+).+/);!this.z.ie && !window.ActiveXObject && "ActiveXObject" in window && (this.z.ie = 11);if (this.l = k.body || k.getElementsByTagName("body")[0]) this.rc = Math.max(this.l.scrollWidth, k.documentElement.scrollWidth, this.l.offsetWidth,
				k.documentElement.offsetWidth, this.l.clientWidth, k.documentElement.clientWidth), this.qc = Math.max(this.l.scrollHeight, k.documentElement.scrollHeight, this.l.offsetHeight, k.documentElement.offsetHeight, this.l.clientHeight, k.documentElement.clientHeight);var c = this.z.ie,f = k.createElement("div").style;this.Mb = this.l && a("transition") && a("transform");this.Qa = (33 <= this.z.chrome || 15 <= this.z.firefox) && this.l && a("backfaceVisibility") && a("perspective") && a("transform");};g.prototype.fc = c.s(function () {function a() {window.YT &&
					window.YT.loaded && b.hb();b.Jc = n;b.L().style.visibility = "hidden";}var b = this,c = [{ m: b.L(), k: "opacity", start: 1, i: 0 }, { m: b.L(), k: "top", start: g.B, i: -500 }, { m: b.g("video-noflip"), k: "opacity", start: 0, i: 1 }, { m: b.g("video-noflip"), k: "top", start: 2 * -b.Q, i: 0 }];if (b.q) {var f = b.g("bg"),d = b.g("overlay");f.style.width = "100%";f.style.height = "100%";d.style.width = "100%";b.J(b.L(), "exiting");b.J(f, "visible");c.push({ m: b.g("bg"), k: "opacity", start: 0, i: g.ba });}b.g("video-holder").innerHTML = b.Tc;b.Qa ? (b.J("flipper", "flipped"),
				setTimeout(a, g.I)) : b.ea(c, g.I, a);});g.prototype.Ja = function (a, b, e) {this.D ? (b = b || {}, b = c.extend(b, { campaign_id: this.D, message_id: this.xb, message_type: "web_inapp", message_subtype: this.X }), this.Wa.track(a, b, e)) : e && e.call();};g.prototype.hb = c.s(function () {var a = this;if (!a.Uc) {a.Uc = n;var b = a.g("video-elapsed"),e = a.g("video-time"),f = a.g("video-progress");new window.YT.Player(g.u + "-video-frame", { events: { onReady: function onReady(d) {function g(a) {var a = Math.round(h - a),b = Math.floor(a / 60),c = Math.floor(b / 60),a = a - 60 * b;e.innerHTML =
									"-" + (c ? c + ":" : "") + ("00" + (b - 60 * c)).slice(-2) + ":" + ("00" + a).slice(-2);}var i = d.target,h = i.getDuration();g(0);a.gc = window.setInterval(function () {var a = i.getCurrentTime();b.style.width = 100 * (a / h) + "%";g(a);}, 250);c.N(f, "click", function (a) {a = Math.max(0, a.pageX - f.getBoundingClientRect().left);i.seekTo(h * a / f.clientWidth, n);});} } });}});c.toArray = c.$;c.isObject = c.j;c.JSONEncode = c.ca;c.JSONDecode = c.wa;c.isBlockedUA = c.vb;c.isEmptyObject = c.W;c.info = c.info;c.info.device = c.info.nb;c.info.browser = c.info.ka;i.prototype.init =
			i.prototype.Ta;i.prototype.disable = i.prototype.disable;i.prototype.track = i.prototype.P;i.prototype.track_links = i.prototype.Oc;i.prototype.track_forms = i.prototype.Nc;i.prototype.track_pageview = i.prototype.Jb;i.prototype.register = i.prototype.Z;i.prototype.register_once = i.prototype.G;i.prototype.unregister = i.prototype.ua;i.prototype.identify = i.prototype.Ra;i.prototype.alias = i.prototype.hc;i.prototype.name_tag = i.prototype.Ac;i.prototype.set_config = i.prototype.Eb;i.prototype.get_config = i.prototype.d;i.prototype.get_property =
			i.prototype.oa;i.prototype.get_distinct_id = i.prototype.M;i.prototype.toString = i.prototype.toString;i.prototype._check_and_handle_notifications = i.prototype.$a;i.prototype._show_notification = i.prototype.gb;m.prototype.properties = m.prototype.qa;m.prototype.update_search_keyword = m.prototype.Lb;m.prototype.update_referrer_info = m.prototype.Za;m.prototype.get_cross_subdomain = m.prototype.vc;m.prototype.clear = m.prototype.clear;o.prototype.set = o.prototype.set;o.prototype.set_once = o.prototype.Fb;o.prototype.increment =
			o.prototype.tb;o.prototype.append = o.prototype.append;o.prototype.track_charge = o.prototype.Mc;o.prototype.clear_charges = o.prototype.mc;o.prototype.delete_user = o.prototype.oc;o.prototype.toString = o.prototype.toString;c.Cb(m, ["_expire_notification_campaigns"]);c.Cb(i, ["identify", "_check_and_handle_notifications", "_show_notification"]);if (c.h(r)) q.na("'mixpanel' object not initialized. Ensure you are using the latest version of the Mixpanel JS Library along with the snippet we provide.");else if (r.__loaded ||
			r.config && r.cookie) q.error("Mixpanel library has already been downloaded at least once.");else if (1.1 > z) q.na("Version mismatch; please ensure you're using the latest version of the Mixpanel code snippet.");else {var y = {};c.a(r._i, function (a) {var b;a && c.isArray(a) && (b = a[a.length - 1], a = F.apply(this, a), y[b] = a);});var Q = function Q() {c.a(y, function (a, b) {"mixpanel" !== b && (r[b] = a);});r._ = c;};r.init = function (a, b, c) {c ? r[c] || (r[c] = y[c] = F(a, b, c), r[c].ha()) : (c = r, y.mixpanel ? c = y.mixpanel : a && (c = F(a, b, "mixpanel"), c.ha()),
					window.mixpanel = r = c, Q());};r.init();c.a(y, function (a) {a.ha();});if (k.addEventListener) "complete" == k.readyState ? x() : k.addEventListener("DOMContentLoaded", x, s);else if (k.attachEvent) {k.attachEvent("onreadystatechange", x);z = s;try {z = window.frameElement == p;} catch (R) {}if (k.documentElement.doScroll && z) {var M = function M() {try {k.documentElement.doScroll("left");} catch (a) {setTimeout(M, 1);return;}x();};M();}}c.N(window, "load", x, n);}})(window.mixpanel);
	})();

}
//else
{

}

//Google Analytics

if (typeof ga !== 'undefined') {
	// light
	switch (config.app) {
		case 'light':
			ga('create', 'UA-55863666-1', 'auto');
			break;
		case 'pro':
			ga('create', 'UA-55863666-2', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'web':
			ga('create', 'UA-58183317-1', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'app':
			ga('create', 'UA-55863666-8', 'auto');
			break;
		case 'ambieye':
			ga('create', 'UA-55863666-6', 'auto');
			break;}

	//ga('create', 'UA-55863666-2', 'auto');
	// ambieye ga('create', 'UA-55863666-6', 'auto');

	ga('require', 'displayfeatures');
	ga('send', 'pageview');
}

if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
	mixpanel.track_links("a", "click", {
		"referrer": document.referrer });

}
/**/

function trackState(name, state) {
	return;
}

function trackEvent(category, action, label, value, data) {
	if (typeof ga !== 'undefined') {
		ga('send', 'event', category, action, {
			'nonInteraction': 1,
			'label': label,
			'value': value });

	}

	var obj = {
		'category': category,
		'action': action,
		'value': value,
		'data': data };


	if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
		mixpanel.track(label, obj);
	}

	if (data) {
		trackState(category, obj);
	}
}


var gOldOnError = window.onerror;
// Override previous handler.
window.onerror = function myErrorHandler(errorMsg, url, lineNumber) {
	if (gOldOnError)
		// Call previous handler.
		return gOldOnError(errorMsg, url, lineNumber);

	// Just let default handler run.
	return false;
};

if (config.app === 'pro' || config.app === 'web') {
	// script.fail remvoed
	/*
 (function(_, __) {
 _._errs = []; var h = _.onerror; var f = function() { var a = arguments; _errs.push(a); h && h.apply(this, a)};
 var sf = __.createElement('script');sf.type = 'text/javascript';sf.async = true;sf.id = 'onscriptfail';
 sf.src = '//script.fail/inform?c2FkYWtvdkBnbWFpbC5jb20=$mnNMzeR8oEfK7OC4MOA7MZBhyn+fSI8xaWQ2qHXHCXE=';
 var s = __.getElementsByTagName('script')[0]; s.parentNode.insertBefore(sf, s);
 _.onerror = f;
 })(window, document);
 */
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

// localstorage interface

'use strict';
/*jshint multistr: true */

/*globals chrome:false */

/* exported Storage */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

Storage = function () {function Storage() {_classCallCheck(this, Storage);}_createClass(Storage, null, [{ key: 'set', value: function set(
		name, val) {var _this = this;
			return new Promise(function (resolve, reject) {
				try {
					console.log('setting ' + name + ' = ' + JSON.stringify(val));
					var obj = {};
					obj[name] = val;

					if (_this.syncAvailable()) {
						chrome.storage.sync.set(obj, resolve);
					} else {
						localStorage.setItem(name, JSON.stringify(val));
					}

					resolve(name, val); // might be different from sync
				} catch (e) {
					reject(e);
				}
			});
		} }, { key: 'get', value: function get(

		name) {var _this2 = this;
			return new Promise(function (resolve, reject) {
				if (_this2.syncAvailable()) {
					chrome.storage.sync.get(name, function (items) {
						console.log('got storage ' + name + ': ' + items[name]);
						resolve(items[name]);
					});
				} else if (localStorage) {
					var result = null;
					try {
						var b = localStorage.getItem(name);
						if (b === 'undefined') {
							result = undefined;
						} else if (b === 'null') {
							result = null;
						} else {
							result = JSON.parse(b);
						}
					} catch (e) {
						console.log('Error: ' + e);
						result = localStorage.getItem(name);
					}
					resolve(result);
				} else {
					resolve(null);
				}
			});
		} }, { key: 'syncAvailable', value: function syncAvailable()
		{
			return typeof chrome !== 'undefined' &&
			chrome.storage !== undefined &&
			chrome.storage.sync !== undefined;
		} }]);return Storage;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JhZ2UuanMiXSwibmFtZXMiOlsiU3RvcmFnZSIsIm5hbWUiLCJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5Iiwib2JqIiwic3luY0F2YWlsYWJsZSIsImNocm9tZSIsInN0b3JhZ2UiLCJzeW5jIiwic2V0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImUiLCJnZXQiLCJpdGVtcyIsInJlc3VsdCIsImIiLCJnZXRJdGVtIiwidW5kZWZpbmVkIiwicGFyc2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsc0I7O0FBRU1BLE87QUFDT0MsTSxFQUFNQyxHLEVBQUs7QUFDdEIsVUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDLFFBQUk7QUFDREMsYUFBUUMsR0FBUixDQUFZLGFBQWFOLElBQWIsR0FBb0IsS0FBcEIsR0FBNEJPLEtBQUtDLFNBQUwsQ0FBZVAsR0FBZixDQUF4QztBQUNBLFNBQUlRLE1BQU0sRUFBVjtBQUNBQSxTQUFJVCxJQUFKLElBQVlDLEdBQVo7O0FBRUEsU0FBSSxNQUFLUyxhQUFMLEVBQUosRUFBMEI7QUFDM0JDLGFBQU9DLE9BQVAsQ0FBZUMsSUFBZixDQUFvQkMsR0FBcEIsQ0FBd0JMLEdBQXhCLEVBQTZCTixPQUE3QjtBQUNBLE1BRkMsTUFFSztBQUNOWSxtQkFBYUMsT0FBYixDQUFxQmhCLElBQXJCLEVBQTJCTyxLQUFLQyxTQUFMLENBQWVQLEdBQWYsQ0FBM0I7QUFDQTs7QUFFREUsYUFBUUgsSUFBUixFQUFjQyxHQUFkLEVBWEcsQ0FXZ0I7QUFDbkIsS0FaRCxDQVlFLE9BQU1nQixDQUFOLEVBQVM7QUFDVmIsWUFBT2EsQ0FBUDtBQUNBO0FBQ0QsSUFoQk0sQ0FBUDtBQWlCQSxHOztBQUVXakIsTSxFQUFNO0FBQ2pCLFVBQU8sSUFBSUUsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2QyxRQUFJLE9BQUtNLGFBQUwsRUFBSixFQUEwQjtBQUN6QkMsWUFBT0MsT0FBUCxDQUFlQyxJQUFmLENBQW9CSyxHQUFwQixDQUF3QmxCLElBQXhCLEVBQThCLFVBQVVtQixLQUFWLEVBQWlCO0FBQzlDZCxjQUFRQyxHQUFSLENBQVksaUJBQWlCTixJQUFqQixHQUF3QixJQUF4QixHQUErQm1CLE1BQU1uQixJQUFOLENBQTNDO0FBQ0FHLGNBQVFnQixNQUFNbkIsSUFBTixDQUFSO0FBQ0EsTUFIRDtBQUlBLEtBTEQsTUFLTyxJQUFJZSxZQUFKLEVBQWtCO0FBQ3hCLFNBQUlLLFNBQVMsSUFBYjtBQUNBLFNBQUk7QUFDSCxVQUFJQyxJQUFJTixhQUFhTyxPQUFiLENBQXFCdEIsSUFBckIsQ0FBUjtBQUNBLFVBQUlxQixNQUFNLFdBQVYsRUFBdUI7QUFDdEJELGdCQUFTRyxTQUFUO0FBQ0EsT0FGRCxNQUVPLElBQUlGLE1BQU0sTUFBVixFQUFrQjtBQUN4QkQsZ0JBQVMsSUFBVDtBQUNBLE9BRk0sTUFFQTtBQUNOQSxnQkFBU2IsS0FBS2lCLEtBQUwsQ0FBV0gsQ0FBWCxDQUFUO0FBQ0E7QUFDRCxNQVRELENBU0MsT0FBTUosQ0FBTixFQUFTO0FBQ1RaLGNBQVFDLEdBQVIsQ0FBWSxZQUFZVyxDQUF4QjtBQUNBRyxlQUFTTCxhQUFhTyxPQUFiLENBQXFCdEIsSUFBckIsQ0FBVDtBQUNBO0FBQ0RHLGFBQVFpQixNQUFSO0FBQ0EsS0FoQk0sTUFnQkE7QUFDTmpCLGFBQVEsSUFBUjtBQUNBO0FBQ0QsSUF6Qk0sQ0FBUDtBQTBCQSxHO0FBQ3NCO0FBQ3RCLFVBQU8sT0FBT1EsTUFBUCxLQUFtQixXQUFuQjtBQUNIQSxVQUFPQyxPQUFQLEtBQW1CVyxTQURoQjtBQUVIWixVQUFPQyxPQUFQLENBQWVDLElBQWYsS0FBd0JVLFNBRjVCO0FBR0EsRyIsImZpbGUiOiJzdG9yYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbG9jYWxzdG9yYWdlIGludGVyZmFjZVxuXG4ndXNlIHN0cmljdCc7XG4vKmpzaGludCBtdWx0aXN0cjogdHJ1ZSAqL1xuXG4vKmdsb2JhbHMgY2hyb21lOmZhbHNlICovXG5cbi8qIGV4cG9ydGVkIFN0b3JhZ2UgKi9cblxuY2xhc3MgU3RvcmFnZSB7XG5cdHN0YXRpYyBzZXQgKG5hbWUsIHZhbCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0ICBcdGNvbnNvbGUubG9nKCdzZXR0aW5nICcgKyBuYW1lICsgJyA9ICcgKyBKU09OLnN0cmluZ2lmeSh2YWwpKTtcblx0XHRcdCAgXHR2YXIgb2JqID0ge307XG5cdFx0XHQgIFx0b2JqW25hbWVdID0gdmFsO1xuXG5cdFx0XHQgIFx0aWYgKHRoaXMuc3luY0F2YWlsYWJsZSgpKSB7XG5cdFx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQob2JqLCByZXNvbHZlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWwpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc29sdmUobmFtZSwgdmFsKTsvLyBtaWdodCBiZSBkaWZmZXJlbnQgZnJvbSBzeW5jXG5cdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGdldCAobmFtZSkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAodGhpcy5zeW5jQXZhaWxhYmxlKCkpIHtcblx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobmFtZSwgZnVuY3Rpb24gKGl0ZW1zKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2dvdCBzdG9yYWdlICcgKyBuYW1lICsgJzogJyArIGl0ZW1zW25hbWVdKTtcblx0XHRcdFx0XHRyZXNvbHZlKGl0ZW1zW25hbWVdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKGxvY2FsU3RvcmFnZSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gbnVsbDtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgYiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuXHRcdFx0XHRcdGlmIChiID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYiA9PT0gJ251bGwnKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBudWxsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBKU09OLnBhcnNlKGIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWNhdGNoKGUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBlKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXNvbHZlKHJlc3VsdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKG51bGwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHN0YXRpYyBzeW5jQXZhaWxhYmxlKCkge1xuXHRcdHJldHVybiB0eXBlb2YoY2hyb21lKSAhPT0gJ3VuZGVmaW5lZCcgICYmIFxuXHRcdFx0XHRcdFx0Y2hyb21lLnN0b3JhZ2UgIT09IHVuZGVmaW5lZCAmJiBcblx0XHRcdFx0XHRcdGNocm9tZS5zdG9yYWdlLnN5bmMgIT09IHVuZGVmaW5lZDtcblx0fVxufVxuIl19

/* jshint ignore:start */


// Include the UserVoice JavaScript SDK (only needed once on a page)
//UserVoice=window.UserVoice||[];(function(){var uv=document.createElement('script');
//uv.type='text/javascript';uv.async=true;uv.src='https://widget.uservoice.com/6ZxdF0ZIHNl8VdvcVRSm2A.js';
//var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(uv,s)})();

/*
window.UserVoice = {events:window.UserVoice||[],push:function(x){window.UserVoice.events.push(x)},account:{"campaign":"footer_poweredby","name":"API Starter","white_labeled":false,"subdomain_ssl_host":"apistarter.uservoice.com","subdomain_site_host":"apistarter.uservoice.com","subdomain_key":"apistarter","subdomain_id":235823,"client_key":"6ZxdF0ZIHNl8VdvcVRSm2A","client_options":null,"smartvote_autoprompt_enabled":true,"satisfaction_autoprompt_enabled":true,"messages":{"Loading":"Loading"},"has_ticketing_system":true,"has_feedback_system":true,"has_satisfaction":true},client_widgets:{},manifest:{"tab-left-dark":"/pkg/clients/widget2/tab-left-dark-e89fceb89af232658b40362993385936.png","tab-left-dark-no-bullhorn":"/pkg/clients/widget2/tab-left-dark-no-bullhorn-b0b7f5027c63700387f010da3385d278.png","tab-left-light":"/pkg/clients/widget2/tab-left-light-e79b3d5a5bcb9a8cb3aaba4e7c08853e.png","tab-left-light-no-bullhorn":"/pkg/clients/widget2/tab-left-light-no-bullhorn-978e55e46fb61a295c914e2b6f3d4bfe.png","tab-right-dark":"/pkg/clients/widget2/tab-right-dark-da2413549ce324fc421ae86a0e5881ee.png","tab-right-dark-no-bullhorn":"/pkg/clients/widget2/tab-right-dark-no-bullhorn-0132cc76ef9e62ce31bb84088e8c0eb0.png","tab-right-light":"/pkg/clients/widget2/tab-right-light-087cbff98d6cd97b87d4a73c4232a642.png","tab-right-light-no-bullhorn":"/pkg/clients/widget2/tab-right-light-no-bullhorn-f246ba6076ce0e74cbffa93c1328fdc4.png","tab-horizontal-dark":"/pkg/clients/widget2/tab-horizontal-dark-3efc2033e3bb06b1eefaa3431d3d47d8.png","tab-horizontal-dark-no-bullhorn":"/pkg/clients/widget2/tab-horizontal-dark-no-bullhorn-7cdf414f3f944a78dd7439dced926fd2.png","tab-horizontal-light":"/pkg/clients/widget2/tab-horizontal-light-75fca6f195066c2da966daf9e706b949.png","tab-horizontal-light-no-bullhorn":"/pkg/clients/widget2/tab-horizontal-light-no-bullhorn-e052ef0d62993c4d8f7179a5fbb4f088.png","close":"/pkg/clients/widget2/close-cd8571377d9499a984190ca453714b3b.png","pb":"/pkg/clients/widget2/powered_by-0684ee8d751bce50921b2807087eaf1c.png","screenshot":"/pkg/clients/omnibox/screenshot-e8965e1bf01616360e480f88faa08a1f.js"}};"undefined"!=typeof UserVoice&&UserVoice.showLightbox||!function(t,e,o){function i(t){O("Error: "+t+" See https://www.uservoice.com/o/javascript-sdk for more help.")}function s(t){for(var e=[],o=0;o<t.length;o++)e.push(t[o]);return e}function n(t,e,o,i,s){var n=t-e/2;return o>n-s&&(n=o+s),n+e+s>i&&(n=i-e-s),n}function r(e){if("getComputedStyle"in t){for(var i=["transitionDuration","MozTransitionDuration","WebkitTransitionDuration","OTransitionDuration","msTransitionDuration"],s=0,n=0,r=i.length;r>n;n++){var a=i[n],l=A.getComputedStyle(e)[a]||e.style[a];if(l){s=1e3*parseFloat(l);break}}if(0!==s){var p=A.data(e,"transition-timer"),d=A.data(e,"transition-timeout-at"),c=+new Date+s;A.addClass(e,"uv-is-transitioning"),e.offsetWidth,(p===o||c>d)&&(clearTimeout(p),A.data(e,"transition-timer",setTimeout(function(){A.removeClass(e,"uv-is-transitioning"),e.offsetWidth},s)),A.data(e,"transition-timeout-at",c))}}}function a(t){meta=e.createElement("meta"),meta.setAttribute("name","viewport"),meta.setAttribute("content",t),e.head.appendChild(meta)}function l(){for(var t,o=e.getElementsByTagName("meta"),i=0;i<o.length;i++)if(/viewport/i.test(o[i].getAttribute("name"))){t=o[i];break}return t}function p(){if(!Y){var t=l(),e=/user-scalable\s*=\s*(0|1|no|yes)/;if(t){I=t;var o=t.getAttribute("content");t.parentNode.removeChild(t),e.test(o)?a(o.replace(e,"user-scalable=0")):a(o+"; user-scalable=0")}else a("user-scalable=0");Y=!0}}function d(){if(Y){var t=l();t.parentNode.removeChild(t),I?e.head.appendChild(I):a("user-scalable=1"),Y=!1}}function c(t,e){return t.replace(/\#\{([^{}]*)\}/g,function(t,o){var i=e[o];return"string"==typeof i||"number"==typeof i?i:t})}function h(t){var o=e.createElement("div");return o.innerHTML=t,e.body.insertBefore(o.firstChild,e.body.firstChild),e.body.firstChild}function u(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function g(t,e){e||(e=function(t){return t});var o=[];for(var i in t)if(t.hasOwnProperty(i)){var s=e(i)+"="+e(t[i]);o.push(s)}return o.join("&")}function m(t){for(var e=Array.prototype.slice.call(arguments,1),o=e.length,i=0;o>i;i++)for(var s in e[i])e[i].hasOwnProperty(s)&&("object"==typeof t[s]&&"object"==typeof e[i][s]?m(t[s],e[i][s]):t[s]=e[i][s]);return t}function b(t,o){var i=e.createElement("style");i.type="text/css",i.media=o||"screen",i.styleSheet?i.styleSheet.cssText=t:i.appendChild(e.createTextNode(t)),e.getElementsByTagName("head")[0].appendChild(i)}function f(){X||(b("#uvTab,.uv-tray,.uv-icon,.uv-popover,.uv-bubble{display:none!important}","print"),X=!0)}function v(){j||(b(".uv-icon:hover{opacity:1}"),j=!0)}function x(){return e.getElementsByTagName("html")[0]}function y(){var o=e.documentElement,i=o&&o.clientWidth||e.body.clientWidth,s=t.innerHeight||o&&o.clientHeight||e.body.clientHeight;return{width:i,height:s}}function _(t){return((new Date).getTime()-t)/1e3/60/60/24}function w(t){return t&&(t.tab_color!==o&&(t.trigger_background_color=t.tab_color),t.tab_position!==o&&(t.trigger_position=t.tab_position)),t||{}}function k(t,e){return e&&("support"===e.mode?e.post_suggestion_enabled=!1:"feedback"===e.mode&&(e.contact_enabled=!1),delete e.mode,e.default_mode!==o&&(e.classic_default_mode=e.default_mode),w(e)),T({mode:t},e||{})}function C(){C.fired||(C.fired=!0,Q.tracker.trackExternalView(),Q.tracker.ready(),Q.scan())}var S={};S.sanitizeValue=function(t,e){var o;switch(e){case"boolean":o="true"===t||t===!0?!0:!1;break;case"timestamp":"[object Date]"===Object.prototype.toString.call(t)?o=t.getTime():isNaN(Date.parse(t))?(o=parseInt(t,10),isNaN(o)&&(o=0),44308744825>o&&(o=1e3*o)):o=Date.parse(t);break;case"int":o=parseInt(t,10),isNaN(o)&&(o=0);break;case"float":o=parseFloat(t),isNaN(o)&&(o=0);break;case"string":o=t.toString();break;default:o=t}return o},S.uTF8Encode=function(t){t=t.replace(/\x0d\x0a/g,"\n");for(var e="",o=0;o<t.length;o++){var i=t.charCodeAt(o);128>i?e+=String.fromCharCode(i):i>127&&2048>i?(e+=String.fromCharCode(192|i>>6),e+=String.fromCharCode(128|63&i)):(e+=String.fromCharCode(224|i>>12),e+=String.fromCharCode(128|63&i>>6),e+=String.fromCharCode(128|63&i))}return e},S.base64Encode=function(t){var e,o,i,s,n,r,a,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",p="",d=0;for(t=S.uTF8Encode(t);d<t.length;)e=t.charCodeAt(d++),o=t.charCodeAt(d++),i=t.charCodeAt(d++),s=e>>2,n=(3&e)<<4|o>>4,r=(15&o)<<2|i>>6,a=63&i,isNaN(o)?r=a=64:isNaN(i)&&(a=64),p=p+l.charAt(s)+l.charAt(n)+l.charAt(r)+l.charAt(a);return p},S.extend=function(t){for(var e=Array.prototype.slice.call(arguments,1),o=e.length,i=0;o>i;i++)for(var s in e[i])e[i].hasOwnProperty(s)&&(t[s]=e[i][s]);return t},S.values=function(t){var e,o=[];if(null==t)return o;for(e in t)t.hasOwnProperty(e)&&o.push(t[e]);return o},S.setCookie=function(t,o,i){i=S.extend({path:"/",domain:"",expires:new Date},i||{});var s=[t,"=",encodeURIComponent(o),"; path=",i.path,"; domain=",i.domain];return i.expires&&(i.expires.setFullYear(i.expires.getFullYear()+1),s.push("; expires="),s.push(i.expires.toUTCString())),e.cookie=s.join(""),o},S.getCookie=function(t){for(var o,i=(e.cookie||"").split(";"),s=i.length,n=0;s>n;n++)if(o=S.trim(i[n]),o.substr(0,t.length+1)===t+"=")return decodeURIComponent(o.substr(t.length+1))},S.trim=function(t){var e=String.prototype.trim;return e?e.apply(t):t.replace(/^\s+|\s+$/g,"")},S.isSpider=function(){return/(google web preview|baiduspider|yandexbot)/i.test(t.navigator.userAgent)},S.log=function(){"undefined"!=typeof console&&"undefined"!=typeof console.log&&"undefined"!=typeof console.log.apply&&console.log.apply(console,arguments)},function(){function e(t){return 10>t?"0"+t:t}function o(t){return a.lastIndex=0,a.test(t)?'"'+t.replace(a,function(t){var e=l[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+t+'"'}function i(t,e){var a,l,p,d,c,h=s,u=e[t];switch(u&&"object"==typeof u&&"function"==typeof u.toJSON&&(u=u.toJSON(t)),"function"==typeof r&&(u=r.call(e,t,u)),typeof u){case"string":return o(u);case"number":return isFinite(u)?String(u):"null";case"boolean":case"null":return String(u);case"object":if(!u)return"null";if(s+=n,c=[],"[object Array]"===Object.prototype.toString.apply(u)){for(d=u.length,a=0;d>a;a+=1)c[a]=i(a,u)||"null";return p=0===c.length?"[]":s?"[\n"+s+c.join(",\n"+s)+"\n"+h+"]":"["+c.join(",")+"]",s=h,p}if(r&&"object"==typeof r)for(d=r.length,a=0;d>a;a+=1)"string"==typeof r[a]&&(l=r[a],p=i(l,u),p&&c.push(o(l)+(s?": ":":")+p));else for(l in u)Object.prototype.hasOwnProperty.call(u,l)&&(p=i(l,u),p&&c.push(o(l)+(s?": ":":")+p));return p=0===c.length?"{}":s?"{\n"+s+c.join(",\n"+s)+"\n"+h+"}":"{"+c.join(",")+"}",s=h,p}}"object"!=typeof JSON&&(t.JSON={}),"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+e(this.getUTCMonth()+1)+"-"+e(this.getUTCDate())+"T"+e(this.getUTCHours())+":"+e(this.getUTCMinutes())+":"+e(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()});var s,n,r,a=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,l={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};"function"!=typeof JSON.stringify&&(JSON.stringify=function(t,e,o){var a;if(s="",n="","number"==typeof o)for(a=0;o>a;a+=1)n+=" ";else"string"==typeof o&&(n=o);if(r=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return i("",{"":t})})}();var U=function(t,o){function i(e,o){var s=this;this.subdomain=e,this.config=S.extend({},i.default_config,o||{}),this.babaId=a++,this.sessionCallbackName="__uvSessionData"+this.babaId,t[this.sessionCallbackName]=function(t){s.sync(t)},this.tracks=[],this.identity=null,this.session=null,this.uvts=null,this.isReady=!1,this.needsIdentityFlush=!1,this.needsSessionFlush=!1,this.firedUvts=!1,this.firedSession=!1,this.syncedSession=!0,this.cookieable=null,this.initFromCookie(),t.__babas.push(this)}function s(t){this.props={},!t===Object(t)&&(t={}),this.set(S.extend({},t,{o:(new Date).getTimezoneOffset()}))}function n(){this.store=new r,this.recurrent=this.store.get("r"),this.store.set("r",!0)}function r(){var e="x";this.storage=null;try{this.storage="sessionStorage"in t&&t.sessionStorage,this.set(e,e),this.get(e)!==e?this.storage=null:this.remove(e)}catch(o){this.storage=null}}var a=0;t.__babas=t.__babas||[],i.prototype.initFromCookie=function(){var t=S.getCookie(this.config.cookie_name);this.log("Babayaga#initFromCookie: %s",t),t&&this.setUvts(t)},i.prototype.identify=function(t){this.log("Babayaga#identify: %O",t),this.identity?this.identity.set(t):this.identity=new s(t),this.needsIdentityFlush=!0,this.flush()},i.prototype.getIdentity=function(){return this.identity?this.identity.toJSON():void 0},i.prototype.syncSession=function(){this.syncedSession=!1,this.identify({})},i.prototype.updateSession=function(t){this.log("Babayaga#updateSession: %O",t),this.needsSessionFlush=S.extend({},this.needsSessionFlush||{},this.session.set(t)),this.flush()},i.prototype.getSession=function(t){return this.session.get(t)},i.prototype.dumpSession=function(){return this.session.toJSON()},i.prototype.sync=function(t){this.log("Babayaga#sync: %O",t),t===Object(t)&&(this.session.set(t),t.uvts&&this.setUvts(t.uvts),this.syncCreatedAt(),this.fireSession())},i.prototype.syncCreatedAt=function(){var t=this.identity&&this.identity.get("created_at");t&&(this.log("Babayaga#syncCreatedAt: %O",t),this.session.set({created_at:t}))},i.prototype.fireSession=function(){this.session.isEnabled()&&(this.firedSession?this.syncedSession||("function"==typeof this.config.onSync&&this.config.onSync(),this.syncedSession=!0):("function"==typeof this.config.onSession&&this.config.onSession(),this.firedSession=!0))},i.prototype.setUvts=function(t){this.uvts=t,S.setCookie(this.config.cookie_name,t,{domain:this.cookieDomain()}),this.firedUvts||("function"==typeof this.config.onUvts&&this.config.onUvts(t),this.firedUvts=!0)},i.prototype.setConfig=function(t){this.config=S.extend(this.config,t)},i.prototype.setChannel=function(t){this.setConfig({channel:t})},i.prototype.track=function(t,e,o){var i={evt:t,props:e};o&&(i.channel=o),this.tracks.push(i),this.flush()},i.prototype.trackExternalView=function(){this.log("Babayaga#trackExternalView: %s",this.config.channel),"external"===this.config.channel&&this.track("view_page",{u:e.location.toString(),r:e.referrer})},i.prototype.flush=function(){if(this.isReady&&this.config.enabled){var t=0,e=this.tracks.length;if(this.log("Babayaga#flush: %s",e),this.uvts||this.shouldTrack())for((0===e&&this.needsIdentityFlush||this.needsSessionFlush)&&this.sendTrack({evt:"identify"});e>t;t+=1)this.sendTrack(this.tracks.shift())}},i.prototype.sendTrack=function(t){var o=[this.config.domain,"/t/",this.subdomain,"/",l[t.channel||this.config.channel]||"_","/",p[t.evt]||"_"],i={},s=!this.syncedSession||!this.session.recurrent&&!this.firedSession;this.uvts&&(o.push("/"),o.push(this.uvts)),o.push("/track.js?_="+(new Date).getTime()),o.push("&s="+(s?"0":"1")),o=o.join(""),this.needsIdentityFlush&&(i.u=this.identity.toJSON(),this.needsIdentityFlush=!1),this.needsSessionFlush===Object(this.needsSessionFlush)&&(i.u=S.extend({},i.u||{},this.needsSessionFlush),this.needsSessionFlush=!1),t.props&&S.values(t.props).length>0&&(i.e=t.props),this.log("Babayaga#sendTrack: %s, %O",o,i),i=S.values(i).length>0?encodeURIComponent(S.base64Encode(JSON.stringify(i))):null;var n,r,a;a=["&c=",this.sessionCallbackName],i&&(a.push("&d="),a.push(i)),n=e.getElementsByTagName("script")[0],r=e.createElement("script"),r.type="application/javascript",r.async=!0,r.defer=!0,r.src=o+a.join(""),n.parentNode.insertBefore(r,n)},i.prototype.ready=function(){this.log("Babayaga#ready: %s",this.isReady),this.isReady||(this.isReady=!0,this.session=new n,this.flush(),this.afterReady())},i.prototype.afterReady=function(){},i.prototype.shouldTrack=function(){return!S.isSpider()&&this.haveCookies()},i.prototype.haveCookies=function(){return null===this.cookieable&&(S.setCookie("__uvt","1",{domain:this.cookieDomain()}),this.cookieable=!!S.getCookie("__uvt"),S.setCookie("__uvt","",{domain:this.cookieDomain()})),this.log("Babayaga#haveCookies: %s",this.cookieable),this.cookieable},i.prototype.log=function(){this.config.logging_enabled&&S.log.apply(null,arguments)},i.prototype.cookieDomain=function(e){return e||t.location.hostname},s.prototype.set=function(t){var e,o;if(!t===Object(t)&&(t={}),t.account){e=t.account,delete t.account;for(o in e)e.hasOwnProperty(o)&&(t["account_"+o]=e[o])}for(o in t)s.keys.hasOwnProperty(o)&&(this.props[o]=S.sanitizeValue(t[o],s.keys[o]));return this.props},s.prototype.get=function(t){return this.props[t]},s.prototype.toJSON=function(){return this.props},s.keys={o:"int",name:"string",email:"string",id:"string",type:"string",created_at:"timestamp",account_name:"string",account_id:"string",account_monthly_rate:"float",account_ltv:"float",account_plan:"string",account_created_at:"timestamp"},n.prototype.set=function(t){var e,o={};for(e in t)n.keys.hasOwnProperty(e)&&(o[e]=S.sanitizeValue(t[e],n.keys[e]));for(e in o)o.hasOwnProperty(e)&&this.store.set(e,o[e]);return o},n.prototype.get=function(t){return this.store.get(t)},n.prototype.toJSON=function(){var t,e={};for(var i in n.keys)n.keys.hasOwnProperty(i)&&(t=this.get(i),t!==o&&(e[i]=t));return e},n.prototype.isEnabled=function(){return this.store.isEnabled()},n.keys={created_at:"timestamp",last_sat_at:"timestamp",last_smartvote_at:"timestamp",dismissed_smartvote_at:"timestamp",dismissed_sat_at:"timestamp",autoprompted_satisfaction_at:"timestamp",autoprompted_smartvote_at:"timestamp",active_days:"int",autoprompt_disabled:"boolean"},r.prototype.isEnabled=function(){return!!this.storage},r.prototype.get=function(t){if(this.storage){var e,o=this.storage.getItem(this.makeKey(t));try{e=JSON.parse(o)}catch(i){}return e}},r.prototype.set=function(t,e){this.storage&&this.storage.setItem(this.makeKey(t),JSON.stringify(e))},r.prototype.remove=function(t){this.storage&&this.storage.removeItem(this.makeKey(t))},r.prototype.makeKey=function(t){return r.namespace+t},r.namespace="__uv_";var l={external:"x",classic_widget:"w",smartvote_widget:"e",instant_answers_widget:"o",satisfaction_widget:"t",site2:"s",admin:"a"},p={view_page:"p",view_forum:"m",view_topic:"c",view_kb:"k",view_channel:"o",view_idea:"i",view_article:"f",view_comparison:"a",authenticate:"u",search_ideas:"s",search_articles:"r",vote_idea:"v",vote_article:"z",submit_ticket:"t",submit_idea:"d",subscribe_idea:"b",rate_satisfaction:"e",identify:"y",comment_idea:"h",dismiss:"w",autoprompt:"x",pick_idea:"1",view_tweet_button:"2",clicked_tweet_button:"3",posted_tweet:"4"};return i.default_config={cookie_name:"uvts",domain:"https://by.uservoice.com",channel:"external",enabled:!0,logging_enabled:!1},i}(this),z=S.base64Encode,T=S.extend,O=(S.values,S.setCookie,S.getCookie,S.lpad,S.trim,S.log),V=".uv-icon{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;cursor:pointer;position:relative;-moz-transition:all 300ms;-o-transition:all 300ms;-webkit-transition:all 300ms;transition:all 300ms;width:39px;height:39px;position:fixed;z-index:100002;opacity:0.8;-moz-transition:opacity 100ms;-o-transition:opacity 100ms;-webkit-transition:opacity 100ms;transition:opacity 100ms}.uv-icon.uv-bottom-right{bottom:10px;right:12px}.uv-icon.uv-top-right{top:10px;right:12px}.uv-icon.uv-bottom-left{bottom:10px;left:12px}.uv-icon.uv-top-left{top:10px;left:12px}.uv-icon.uv-is-selected{opacity:1}.uv-icon svg{width:39px;height:39px}.uv-popover{font-family:sans-serif;font-weight:100;font-size:13px;color:black;position:fixed;z-index:100001}.uv-popover-content{-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;background:white;position:relative;width:325px;height:325px;-moz-transition:background 200ms;-o-transition:background 200ms;-webkit-transition:background 200ms;transition:background 200ms}.uv-bottom .uv-popover-content{-moz-box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px;-webkit-box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px}.uv-top .uv-popover-content{-moz-box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px;-webkit-box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px}.uv-left .uv-popover-content{-moz-box-shadow:rgba(0,0,0,0.3) 10px 0 60px,rgba(0,0,0,0.1) 0 0 20px;-webkit-box-shadow:rgba(0,0,0,0.3) 10px 0 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) 10px 0 60px,rgba(0,0,0,0.1) 0 0 20px}.uv-right .uv-popover-content{-moz-box-shadow:rgba(0,0,0,0.3) -10px 0 60px,rgba(0,0,0,0.1) 0 0 20px;-webkit-box-shadow:rgba(0,0,0,0.3) -10px 0 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) -10px 0 60px,rgba(0,0,0,0.1) 0 0 20px}.uv-ie8 .uv-popover-content{position:relative}.uv-ie8 .uv-popover-content .uv-popover-content-shadow{display:block;background:black;content:'';position:absolute;left:-15px;top:-15px;width:100%;height:100%;filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius=15,MakeShadow=true,ShadowOpacity=0.30);z-index:-1}.uv-popover-tail{border:9px solid transparent;width:0;z-index:10;position:absolute;-moz-transition:border-top-color 200ms;-o-transition:border-top-color 200ms;-webkit-transition:border-top-color 200ms;transition:border-top-color 200ms}.uv-top .uv-popover-tail{bottom:-20px;border-top:11px solid white}.uv-bottom .uv-popover-tail{top:-20px;border-bottom:11px solid white}.uv-left .uv-popover-tail{right:-20px;border-left:11px solid white}.uv-right .uv-popover-tail{left:-20px;border-right:11px solid white}.uv-popover-loading{background:white;-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;position:absolute;width:100%;height:100%;left:0;top:0}.uv-popover-loading-text{position:absolute;top:50%;margin-top:-0.5em;width:100%;text-align:center}.uv-popover-iframe-container{height:100%}.uv-popover-iframe{-moz-border-radius:5px;-webkit-border-radius:5px;border-radius:5px;overflow:hidden}.uv-is-hidden{display:none}.uv-is-invisible{display:block !important;visibility:hidden !important}.uv-is-transitioning{display:block !important}.uv-no-transition{-moz-transition:none !important;-webkit-transition:none !important;-o-transition:color 0 ease-in !important;transition:none !important}.uv-fade{opacity:1;-moz-transition:opacity 200ms ease-out;-o-transition:opacity 200ms ease-out;-webkit-transition:opacity 200ms ease-out;transition:opacity 200ms ease-out}.uv-fade.uv-is-hidden{opacity:0}.uv-scale-top,.uv-scale-top-left,.uv-scale-top-right,.uv-scale-bottom,.uv-scale-bottom-left,.uv-scale-bottom-right,.uv-scale-right,.uv-scale-right-top,.uv-scale-right-bottom,.uv-scale-left,.uv-scale-left-top,.uv-scale-left-bottom,.uv-slide-top,.uv-slide-bottom,.uv-slide-left,.uv-slide-right{opacity:1;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;-webkit-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-top.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(-15%);-ms-transform:scale(0.8) translateY(-15%);-webkit-transform:scale(0.8) translateY(-15%);transform:scale(0.8) translateY(-15%)}.uv-scale-top-left.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(-15%) translateX(-10%);-ms-transform:scale(0.8) translateY(-15%) translateX(-10%);-webkit-transform:scale(0.8) translateY(-15%) translateX(-10%);transform:scale(0.8) translateY(-15%) translateX(-10%)}.uv-scale-top-right.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(-15%) translateX(10%);-ms-transform:scale(0.8) translateY(-15%) translateX(10%);-webkit-transform:scale(0.8) translateY(-15%) translateX(10%);transform:scale(0.8) translateY(-15%) translateX(10%)}.uv-scale-bottom.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(15%);-ms-transform:scale(0.8) translateY(15%);-webkit-transform:scale(0.8) translateY(15%);transform:scale(0.8) translateY(15%)}.uv-scale-bottom-left.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(15%) translateX(-10%);-ms-transform:scale(0.8) translateY(15%) translateX(-10%);-webkit-transform:scale(0.8) translateY(15%) translateX(-10%);transform:scale(0.8) translateY(15%) translateX(-10%)}.uv-scale-bottom-right.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateY(15%) translateX(10%);-ms-transform:scale(0.8) translateY(15%) translateX(10%);-webkit-transform:scale(0.8) translateY(15%) translateX(10%);transform:scale(0.8) translateY(15%) translateX(10%)}.uv-scale-right.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(15%);-ms-transform:scale(0.8) translateX(15%);-webkit-transform:scale(0.8) translateX(15%);transform:scale(0.8) translateX(15%)}.uv-scale-right-top.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(15%) translateY(-10%);-ms-transform:scale(0.8) translateX(15%) translateY(-10%);-webkit-transform:scale(0.8) translateX(15%) translateY(-10%);transform:scale(0.8) translateX(15%) translateY(-10%)}.uv-scale-right-bottom.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(15%) translateY(10%);-ms-transform:scale(0.8) translateX(15%) translateY(10%);-webkit-transform:scale(0.8) translateX(15%) translateY(10%);transform:scale(0.8) translateX(15%) translateY(10%)}.uv-scale-left.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(-15%);-ms-transform:scale(0.8) translateX(-15%);-webkit-transform:scale(0.8) translateX(-15%);transform:scale(0.8) translateX(-15%)}.uv-scale-left-top.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(-15%) translateY(-10%);-ms-transform:scale(0.8) translateX(-15%) translateY(-10%);-webkit-transform:scale(0.8) translateX(-15%) translateY(-10%);transform:scale(0.8) translateX(-15%) translateY(-10%)}.uv-scale-left-bottom.uv-is-hidden{opacity:0;-moz-transform:scale(0.8) translateX(-15%) translateY(10%);-ms-transform:scale(0.8) translateX(-15%) translateY(10%);-webkit-transform:scale(0.8) translateX(-15%) translateY(10%);transform:scale(0.8) translateX(-15%) translateY(10%)}.uv-slide-top.uv-is-hidden{-moz-transform:translateY(-100%);-ms-transform:translateY(-100%);-webkit-transform:translateY(-100%);transform:translateY(-100%)}.uv-slide-bottom.uv-is-hidden{-moz-transform:translateY(100%);-ms-transform:translateY(100%);-webkit-transform:translateY(100%);transform:translateY(100%)}.uv-slide-left.uv-is-hidden{-moz-transform:translateX(-100%);-ms-transform:translateX(-100%);-webkit-transform:translateX(-100%);transform:translateX(-100%)}.uv-slide-right.uv-is-hidden{-moz-transform:translateX(100%);-ms-transform:translateX(100%);-webkit-transform:translateX(100%);transform:translateX(100%)}\n",E=function(){function e(t){this.events=t,this.timer=null,this.last_hash=null}return e.prototype.listen=function(){var e=this;return"postMessage"in t&&("addEventListener"in t?t.addEventListener("message",function(t){e.dispatchEvent.apply(e,[t])},!1):t.attachEvent("onmessage",function(t){e.dispatchEvent.apply(e,[t])})),this},e.prototype.dispatchEvent=function(t){var e=t.data;try{e=JSON.parse(e)}catch(o){}if(e===Object(e))for(var i in e)e.hasOwnProperty(i)&&this.events.hasOwnProperty(i)&&this.events[i](e[i],t.source,t.origin);else this.events.hasOwnProperty(e)&&this.events[e]()},e.getHash=function(){var e=t.location.href.match(/#(.*)$/);return e?e[1]:""},e}(),F={};F.match=function(t){return t.test(navigator.userAgent)},F.match(/IEMobile/i)?F.ieMobile=!0:F.match(/msie (\d+\.\d+);/i)?(F.ie=!0,F.version=parseInt(RegExp.$1,10),F["ie"+F.version]=!0,F.ieCompatibility=7===F.version&&F.match(/Trident/i),F.ieQuirks=e.compatMode&&"BackCompat"===e.compatMode):F.match(/Trident.*rv:(\d+)/i)&&(F.ie=!0,F.version=parseInt(RegExp.$1,10),F["ie"+F.version]=!0),F.touch="ontouchstart"in t,F.mobile=F.match(/Android.*Mobile|iPhone|IEMobile/i),F.tablet=!F.mobile&&F.match(/Android|iOS/i),F.iOS="ontouchstart"in t&&F.match(/like Mac OS X/i);var I,N=function(t){return UserVoice.account.messages[t]},A=function(){var o=function(){var t,o,i;if(1===arguments.length?(t=e,o="div",i=arguments[0]):2===arguments.length?(t=arguments[0],o="div",i=arguments[1]):(t=arguments[0],o=arguments[1],i=arguments[2]),t.querySelector)return t.querySelector(o+"."+i);for(var s=t.getElementsByTagName(o),n=new RegExp("\b"+i+"\b","gmi"),r=0;r<s.length;r++)if(n.test(s[r].className))return s[r];return null},i=0;return o.uniqId=function(){return i+=1,"uv-"+i},o.identify=function(t){var e=t.getAttribute("id");return e?e:(e=o.uniqId(),t.setAttribute("id",e),e)},o.data=function(){function t(t,i,s){var n=o.identify(t);return e[n]=e[n]||{},arguments.length>2?e[n][i]=s:e[n][i]}var e={};return t}(),o.addClass=function(t,e){new RegExp("(^|\\s+)"+e+"(\\s+|$)").test(t.className)||(t.className+=(t.className?" ":"")+e)},o.removeClass=function(t,e){t.className=t.className.replace(new RegExp("(?:^|\\s+)"+e+"(?:\\s+|$)","g")," ")},o.hasClass=function(t,e){return t.className.indexOf(e)>-1},o.dimensions=function(t){var e=t.display;if("none"!==e&&null!==e)return{width:t.offsetWidth,height:t.offsetHeight};var o=t.style,i=o.visibility,s=o.position,n=o.display;o.visibility="hidden",o.position="absolute",o.display="block";var r=t.clientWidth,a=t.clientHeight;return o.display=n,o.position=s,o.visibility=i,{width:r,height:a}},o.offset=function(t){for(var e=t,o={top:0,left:0};e;)o.top+=e.offsetTop,o.left+=e.offsetLeft,e=e.offsetParent;return o},o.on=function(e,o,i){"addEventListener"in e?e.addEventListener(o,i,!1):e.attachEvent("on"+o,function(){return i.call(e,t.event)})},o.off=function(t,e,o){"removeEventListener"in t?t.removeEventListener(e,o,!1):t.detachEvent(e,o)},o.one=function(t,e,i){var s=function(){i(arguments),o.off(t,e,s)};o.on(t,e,s)},o.ready=function(o){if(e.addEventListener)"complete"===e.readyState?o():(e.addEventListener("DOMContentLoaded",o,!1),t.addEventListener("load",o,!1));else if(e.attachEvent){e.attachEvent("onreadystatechange",o),t.attachEvent("onload",o);var i=!1;try{i=null===t.frameElement}catch(s){}e.documentElement.doScroll&&i}},o.element=function(t){return t.nodeName?t:e.getElementById(t.substr(1))},o.getComputedStyle=function(e){var o=t.getComputedStyle(e);return o?o:{}},o}(),Y=!1,X=!1,j=!1,D=["https:"===e.location.protocol?"https://":"http://","widget.uservoice.com"].join(""),M={"tab-light-bottom-right":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid red;border-bottom:none;-moz-border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:10px;bottom:0;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-bottom-right":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid #FFF;border-bottom:none;-moz-border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:10px;bottom:0;z-index:9999;background-color:##{color};","tab-light-top-right":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid red;border-top:none;-moz-border-radius:0 0 4px 4px;-webkit-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:10px;top:0;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-top-right":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid #FFF;border-top:none;-moz-border-radius:0 0 4px 4px;-webkit-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:10px;top:0;z-index:9999;background-color:##{color};","tab-light-bottom-left":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid red;border-bottom:none;-moz-border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:10px;bottom:0;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-bottom-left":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid #FFF;border-bottom:none;-moz-border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:10px;bottom:0;z-index:9999;background-color:##{color};","tab-light-top-left":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid red;border-top:none;-moz-border-radius:0 0 4px 4px;-webkit-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:10px;top:0;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-top-left":"background:red url(#{bgImage}) 0 50% no-repeat;border:1px solid #FFF;border-top:none;-moz-border-radius:0 0 4px 4px;-webkit-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:10px;top:0;z-index:9999;background-color:##{color};","tab-light-middle-left":"background:red url(#{bgImage}) 50% 0 no-repeat;border:1px solid red;border-left:none;-moz-border-radius:0 4px 4px 0;-webkit-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:0;top:50%;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-middle-left":"background:red url(#{bgImage}) 50% 0 no-repeat;border:1px solid #FFF;border-left:none;-moz-border-radius:0 4px 4px 0;-webkit-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;left:0;top:50%;z-index:9999;background-color:##{color};","tab-light-middle-right":"background:red url(#{bgImage}) 50% 0 no-repeat;border:1px solid red;border-right:none;-moz-border-radius:4px 0 0 4px;-webkit-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px;-moz-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.9) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:0;top:50%;z-index:9999;background-color:##{color};border-color:##{color};","tab-dark-middle-right":"background:red url(#{bgImage}) 50% 0 no-repeat;border:1px solid #FFF;border-right:none;-moz-border-radius:4px 0 0 4px;-webkit-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:0;top:50%;z-index:9999;background-color:##{color};","link-vertical":"display:block;padding:39px 5px 10px 5px;text-decoration:none;","link-horizontal":"display:block;padding:6px 10px 2px 42px;text-decoration:none;","link-vertical-no-bullhorn":"display:block;padding:10px 5px 10px 5px;text-decoration:none;","link-horizontal-no-bullhorn":"display:block;padding:6px 10px 2px 10px;text-decoration:none;"},P="    html.uvw-dialog-open object,    html.uvw-dialog-open iframe,    html.uvw-dialog-open embed {      visibility: hidden;    }    html.uvw-dialog-open iframe.uvw-dialog-iframe {      visibility: visible;    }    ",L=function(){function t(t){this.template='<div id="uvTab" style="#{tabStyle}"><a id="uvTabLabel" style="background-color: transparent; #{linkStyle}" href="javascript:return false;"><img src="#{imgSrc}" alt="#{tab_label}" style="border:0; background-color: transparent; padding:0; margin:0;" /></a></div>',this.widgets=[],this.options=t,this.processOptions()
}return t.prototype.push=function(t){this.widget=t,this.widgets.push(t)},t.prototype.pop=function(){1!==this.widgets.length&&(this.widgets.pop(),this.widget=this.widgets[this.widgets.length-1])},t.prototype.render=function(){this.el&&this.el.parentNode&&this.el.parentNode.removeChild(this.el);var t=new Image,e=this;A.on(t,"load",function(){e.createElement(),e.show(),Q.pendingAutoprompt&&(Q.pendingAutoprompt=!1,Q.autoprompt())}),t.src=this.options.imgSrc,f()},t.prototype.createElement=function(){var t=this.el=h(c(this.template,this.options)),e=t.getElementsByTagName("a")[0],o=this;A.addClass(t,"uv-tab uv-slide-"+this.edge),this.dimensions=A.dimensions(t),this.hide(!1),this.rotation&&(t.style.marginTop=["-",Math.round(this.dimensions.height/2),"px"].join("")),A.on(e,"click",function(t){return t.preventDefault&&t.preventDefault(),o.visibleWidget?o.visibleWidget.hide():o.widget.show(),!1})},t.prototype.remove=function(){this.el&&(this.widget.hide(),this.hide())},t.prototype.hide=function(t){t=t===o?!0:t,t&&r(this.el),A.addClass(this.el,"uv-is-hidden"),this.el.offsetWidth},t.prototype.show=function(){r(this.el),A.removeClass(this.el,"uv-is-hidden"),this.el.offsetWidth},t.prototype.processOptions=function(){var t={trigger_position:"right",trigger_background_color:"CC6D00",tab_label:"feedback",tab_inverted:!1},e=T({},t,this.options);e.trigger_position.match(/^((top|bottom|middle)-(left|right)|left|right)$/)||(e.trigger_position=t.trigger_position),e.trigger_position.match(/^(right|left)$/)&&(e.trigger_position="middle-"+e.trigger_position),"string"==typeof e.trigger_background_color&&e.trigger_background_color.match(/^#/)&&(e.trigger_background_color=e.trigger_background_color.substring(1));var o=/([^\-]+)-([^\-]+)/.exec(e.trigger_position),i=o[1],s=o[2],n="middle"===o[1]?90:0,r=UserVoice.account.white_labeled?"-no-bullhorn":"",a=["tab-",e.inverted?"light-":"dark-",e.trigger_position].join(""),l=[n?"link-vertical":"link-horizontal",r].join(""),p=[D,"/dcache","/widget/feedback-tab.png?t=",encodeURIComponent(e.tab_label),"&c=",e.tab_inverted?encodeURIComponent(e.trigger_background_color):"ffffff","&r=",encodeURIComponent(n),e.tab_inverted?"&i=yes":""].join(""),d=e.trigger_position.replace(/middle-/,"").replace(/(bottom|top)-(right|left)/,"horizontal");d=["tab-",d,e.tab_inverted?"-light":"-dark",r].join(""),d=[D,UserVoice.manifest[d]].join(""),e.bgImage=d,e.imgSrc=p,e.tab_label=u(e.tab_label),a=M[a],l=M[l],(F.ie6||F.ieQuirks)&&(a+="position:absolute !important;","top"===i?a+="top: expression(((document.documentElement.scrollTop || document.body.scrollTop) + (!this.offsetHeight && 0)) + 'px');":"middle"===i?a+="top: expression(((document.documentElement.scrollTop || document.body.scrollTop) + ((((document.documentElement.clientHeight || document.body.clientHeight) + (!this.offsetHeight && 0)) / 2) >> 0)) + 'px');":"bottom"===i&&(a+="top: expression(((document.documentElement.scrollTop || document.body.scrollTop) + (document.documentElement.clientHeight || document.body.clientHeight) - this.offsetHeight) + 'px');")),e.tabStyle=c(a,{color:e.trigger_background_color,bgImage:e.bgImage}),e.linkStyle=l,"top"===i?this.edge="top":"bottom"===i?this.edge="bottom":"left"===s?this.edge="left":"right"===s&&(this.edge="right"),this.rotation=n,this.options=e},t}(),W=function(){function i(){}return i.template='      <div class="uv-popover-content">        <div class="uv-popover-iframe-container"></div>        <div class="uv-popover-loading"><div class="uv-popover-loading-text">'+N("Loading")+'&#8230;</div></div>        <!-- shadow for ie8 -->        <div class="uv-popover-content-shadow"></div>      </div>    ',i.prototype.show=function(t){t=t===o?!0:t,Q.hideActive(),Q.active=this,this.el||this.render(),this.trigger&&(this.trigger.visibleWidget=this),this.trigger&&this.trigger.popoverWillShow&&this.trigger.popoverWillShow(),t?this.animateIn():A.removeClass(this.el,"uv-is-hidden"),this.iframe.poke({show:!0}),this.iframe.poke({focus:null})},i.prototype.hide=function(t){if(t=t===o?!0:t,Q.active=null,this.el||this.render(),this.trigger&&(this.trigger.visibleWidget=null),this.trigger&&this.trigger.popoverWillHide&&this.trigger.popoverWillHide(),t?this.animateOut():A.addClass(this.el,"uv-is-hidden"),this.temp){var e=this.el;setTimeout(function(){e.parentNode.removeChild(e)},500)}},i.prototype.toggle=function(t){this.el||this.render(),this.visible()?this.hide(t):this.show(t)},i.prototype.animateIn=function(){this.position(),r(this.el),A.removeClass(this.el,"uv-is-hidden"),this.el.offsetWidth,this.createIframe()},i.prototype.preload=function(){this.el||this.render(),this.createIframe(!0)},i.prototype.animateOut=function(){r(this.el),A.addClass(this.el,"uv-is-hidden")},i.prototype.visible=function(){return!A.hasClass(this.el,"uv-is-hidden")&&!this.preloading},i.prototype.paneOpened=function(t,e){e.needsReload&&(this.needsReload=!0)},i.prototype.position=function(){this.preloading&&(A.addClass(this.el,"uv-is-hidden"),this.el.style.left="",this.preloading=!1);var t=this.visible();A.addClass(this.el,"uv-no-transition"),t||(A.addClass(this.el,"uv-is-invisible"),this.el.style.left="-1000px"),A.removeClass(this.el,"uv-scale-\\S+"),this.el.offsetWidth,this.calculatePosition(),this.el.offsetWidth,t||A.removeClass(this.el,"uv-is-invisible"),A.removeClass(this.el,"uv-no-transition"),this.el.offsetWidth},i.prototype.createIframe=function(e){var o=A(this.el,"uv-popover-iframe-container"),i=A(this.el,"uv-popover-loading"),s=this;(!this.iframe||this.needsReload)&&(this.iframe&&(o.removeChild(this.iframe.el),this.needsReload=!1),e&&(A.removeClass(this.el,"uv-is-hidden"),this.el.style.left="-10000px",this.preloading=!0),this.iframe=new $("popover",this.options.widgetType,T({height:"100%"},UserVoice.globalOptions,this.options)),this.iframe.render(),A.addClass(this.iframe.el,"uv-popover-iframe"),o.appendChild(this.iframe.el),F.ie8&&A.addClass(this.el,"uv-ie8"),A.on(t,"resize",function(){s.visible()&&s.calculatePosition()}),i&&i.parentNode&&(this.iframe.loaded||F.ie&&F.version<10?i.parentNode.removeChild(i):A.one(this.iframe.el,"load",function(){s.preloading&&(A.addClass(s.el,"uv-is-hidden"),s.el.style.left="",s.preloading=!1),i.parentNode.removeChild(i)})))},i.prototype.createElement=function(t){var o=this.el=e.createElement("div");o.innerHTML=this.template,o.setAttribute("data-html2canvas-ignore",!0),this.options.width&&!F.mobile&&(A(o,"uv-popover-content").style.width=this.options.width),this.options.height&&!F.mobile&&(A(o,"uv-popover-content").style.height=this.options.height),A.addClass(this.el,"uv-popover uv-is-hidden"),t.appendChild(o)},i}(),B=function(){function o(t){this.template=W.template,this.options=t,f()}return o.prototype=T({},W.prototype),o.prototype.render=function(){this.createElement(e.body)},o.prototype.show=function(){var e,o,i;F.mobile&&p(),W.prototype.show.apply(this,arguments),F.match(/iPhone OS 7/)&&(e=this,i=function(){e.visible()&&(o!==y().height?(t.scrollBy(0),o=y().height,setTimeout(i,80)):setTimeout(i,800))},i())},o.prototype.hide=function(){W.prototype.hide.apply(this,arguments),F.mobile&&(d(),this.needsReload=!0)},o.prototype.calculatePosition=function(){var e=this.options.position.match(/^(top|bottom)-(left|right)$/)?this.options.position:"bottom-right",o=/(\w+)-(\w+)/.exec(e);if(this.el.style.zIndex=100003,F.mobile){var i=A(this.el,"uv-popover-content"),s=t.innerWidth,n=325,r=10,a=s/(n+2*r),l=Math.round(a*r);i.style.width="100%",i.style.height="100%",this.el.style.position="fixed",this.el.style.top=l+"px",this.el.style.left=l+"px",this.el.style.bottom=l+"px",this.el.style.right=l+"px"}else{var r=20;this.el.style.left="",this.el.style[o[1]]=r+"px",this.el.style[o[2]]=r+"px"}A.addClass(this.el,"uv-"+("bottom"===o[1]?"top":"bottom")),A.addClass(this.el,"uv-scale-"+e)},o}(),R=function(){function t(t,e){this.template=W.template+'<div class="uv-popover-tail"></div>',this.options=t,this.trigger=e,f()}return t.prototype=T({},W.prototype),t.prototype.render=function(){this.target="self"===this.options.target?this.trigger.el:A.element(this.options.target),Q.systemTrigger&&this.target===Q.systemTrigger.el?(this.container=this.target,this.isContained=!0):this.container=e.body,this.createElement(this.container)},t.prototype.paneOpened=function(t,e){W.prototype.paneOpened.apply(this,arguments),this.setTailColor(e.backgroundColor)},t.prototype.defaultPosition=function(){var t=this.target,o=A.offset(t),i=A.dimensions(t),s=t.currentStyle?t.currentStyle.position:A.getComputedStyle(t,null).position,n=100;return"fixed"!==s&&(o.top-=e.body.scrollTop,o.left-=e.body.scrollLeft),o.top<n?"bottom":o.top+i.height+n>y().height?"top":o.left<n?"right":o.left+i.width+n>y().width?"left":o.top>o.top+i.height-y().height?"bottom":"top"},t.prototype.calculatePosition=function(){var t=A(this.el,"uv-popover-tail"),e=this.target,o="automatic"===this.options.position?this.defaultPosition():this.options.position,i="top"===o?"bottom":"right"===o?"left":"left"===o?"right":"top",s="top"===o||"bottom"===o?"left":"top",r="left"===s?"width":"height",a="left"===s?"top":"left",l="width"===r?"height":"width",p=A.dimensions(this.el),d=A.dimensions(e),c=A.offset(e),h=n(c[s]+d[r]/2,p[r],0,y()[r],10),u=n(c[s]-h+d[r]/2,A.dimensions(t)[r],0,p[r],15),g=1*(u-A.dimensions(t)[r]/2)/p[r],m=1/3>=g?"left"===s?"-left":"-top":2/3>=g?"":"left"===s?"-right":"-bottom",b=e.currentStyle?e.currentStyle.position:A.getComputedStyle(e,null).position;this.currentPosition=o,this.el.style.position="fixed"!==b||this.isContained?"absolute":"fixed",this.el.style[s]=h-(this.isContained?c[s]:0)+"px",t.style[s]=u+"px",A.removeClass(this.el,"uv-(bottom|top|left|right)"),A.addClass(this.el,"uv-"+o),A.addClass(this.el,"uv-scale-"+i+m),"top"===o||"left"===o?this.el.style[a]=(this.isContained?0:c[a])-p[l]-14+"px":("bottom"===o||"right"===o)&&(this.el.style[a]=(this.isContained?0:c[a])+d[l]+14+"px")},t.prototype.setTailColor=function(t){"transparent"!==t&&("#ffffff"===t||"rgb(255, 255, 255)"===t||"white"===t||""===t?A.removeClass(this.el,"uv-reversed"):A.addClass(this.el,"uv-reversed"),A(this.el,"uv-popover-content").style.backgroundColor=t,A(this.el,"uv-popover-tail").style["border"+this.currentPosition[0].toUpperCase()+this.currentPosition.slice(1)+"Color"]=t)},t}(),J=function(){function t(t){var e={trigger_background_color:"rgba(46, 49, 51, 0.6)",trigger_position:"bottom-right"};this.options=T({},e,t),this.options.trigger_position.match(/^(bottom|top)-(left|right)$/)||(this.options.trigger_position=e.trigger_position),this.widgets=[],F.touch||v(),f()}return t.icon_images={contact:'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\r\n	 width="39px" height="39px" viewBox="0 0 39 39" enable-background="new 0 0 39 39" xml:space="preserve">\r\n<g>\r\n	<path class="uv-bubble-background" fill="rgba(46, 49, 51, 0.6)" d="M31.425,34.514c-0.432-0.944-0.579-2.007-0.591-2.999c4.264-3.133,7.008-7.969,7.008-13.409\r\n		C37.842,8.658,29.594,1,19.421,1S1,8.658,1,18.105c0,9.446,7.932,16.79,18.105,16.79c1.845,0,3.94,0.057,5.62-0.412\r\n		c0.979,1.023,2.243,2.3,2.915,2.791c3.785,2.759,7.571,0,7.571,0S32.687,37.274,31.425,34.514z"/>\r\n	<g>\r\n		<g>\r\n			<path class="uv-bubble-foreground" fill="#FFFFFF" d="M16.943,19.467c0-3.557,4.432-3.978,4.432-6.058c0-0.935-0.723-1.721-2.383-1.721\r\n				c-1.508,0-2.773,0.725-3.709,1.87l-2.441-2.743c1.598-1.9,4.01-2.924,6.602-2.924c3.891,0,6.271,1.959,6.271,4.765\r\n				c0,4.4-5.037,4.732-5.037,7.265c0,0.481,0.243,0.994,0.574,1.266l-3.316,0.965C17.303,21.459,16.943,20.522,16.943,19.467z\r\n				 M16.943,26.19c0-1.326,1.114-2.441,2.44-2.441c1.327,0,2.442,1.115,2.442,2.441c0,1.327-1.115,2.441-2.442,2.441\r\n				C18.058,28.632,16.943,27.518,16.943,26.19z"/>\r\n		</g>\r\n	</g>\r\n</g>\r\n</svg>\r\n',feedback:'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n	 width="39px" height="39px" viewBox="0 0 39 39" enable-background="new 0 0 39 39" xml:space="preserve">\n<g>\n	<path class="uv-bubble-background" fill="rgba(46, 49, 51, 0.6)"  d="M31.425,34.514c-0.432-0.944-0.579-2.007-0.591-2.999c4.264-3.133,7.008-7.969,7.008-13.409\n		C37.842,8.658,29.594,1,19.421,1S1,8.658,1,18.105c0,9.446,7.932,16.79,18.105,16.79c1.845,0,3.94,0.057,5.62-0.412\n		c0.979,1.023,2.243,2.3,2.915,2.791c3.785,2.759,7.571,0,7.571,0S32.687,37.274,31.425,34.514z"/>\n</g>\n<g>\n	<g>\n		<path class="uv-bubble-foreground" fill="#FFFFFF" d="M24.951,9.07c-0.83-0.836-1.857-1.453-2.976-1.786C21.337,7.096,20.672,7,20,7\n			c-1.87,0-3.628,0.736-4.952,2.07C13.728,10.403,13,11.864,13,13.751l0.03,0.648c0.086,0.972,0.368,1.896,0.834,2.752\n			c0.776,1.399,2.367,2.849,2.637,4.993l0.163,0.972C16.809,23.703,17.105,24,17.549,24h5.054c0.445,0,0.742-0.297,0.884-0.884\n			l0.014-0.972c0.268-2.144,1.802-3.593,2.657-4.993c0.443-0.855,0.725-1.779,0.811-2.752L27,13.751\n			C26.999,11.864,26.271,10.405,24.951,9.07z M17.101,26.554h5.741v-1.66h-5.741V26.554z M18.392,28.668h3.216l0.414-0.83h-4.101\n			L18.392,28.668z"/>\n	</g>\n</g>\n</svg>\n',post_suggestion:'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n	 width="39px" height="39px" viewBox="0 0 39 39" enable-background="new 0 0 39 39" xml:space="preserve">\n<g>\n	<path class="uv-bubble-background" fill="rgba(46, 49, 51, 0.6)"  d="M31.425,34.514c-0.432-0.944-0.579-2.007-0.591-2.999c4.264-3.133,7.008-7.969,7.008-13.409\n		C37.842,8.658,29.594,1,19.421,1S1,8.658,1,18.105c0,9.446,7.932,16.79,18.105,16.79c1.845,0,3.94,0.057,5.62-0.412\n		c0.979,1.023,2.243,2.3,2.915,2.791c3.785,2.759,7.571,0,7.571,0S32.687,37.274,31.425,34.514z"/>\n</g>\n<g>\n	<g>\n		<path class="uv-bubble-foreground" fill="#FFFFFF" d="M24.951,9.07c-0.83-0.836-1.857-1.453-2.976-1.786C21.337,7.096,20.672,7,20,7\n			c-1.87,0-3.628,0.736-4.952,2.07C13.728,10.403,13,11.864,13,13.751l0.03,0.648c0.086,0.972,0.368,1.896,0.834,2.752\n			c0.776,1.399,2.367,2.849,2.637,4.993l0.163,0.972C16.809,23.703,17.105,24,17.549,24h5.054c0.445,0,0.742-0.297,0.884-0.884\n			l0.014-0.972c0.268-2.144,1.802-3.593,2.657-4.993c0.443-0.855,0.725-1.779,0.811-2.752L27,13.751\n			C26.999,11.864,26.271,10.405,24.951,9.07z M17.101,26.554h5.741v-1.66h-5.741V26.554z M18.392,28.668h3.216l0.414-0.83h-4.101\n			L18.392,28.668z"/>\n	</g>\n</g>\n</svg>\n',smartvote:'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n	 width="39px" height="39px" viewBox="0 0 39 39" enable-background="new 0 0 39 39" xml:space="preserve">\n<g>\n	<path class="uv-bubble-background" fill="rgba(46, 49, 51, 0.6)"  d="M31.425,34.514c-0.432-0.944-0.579-2.007-0.591-2.999c4.264-3.133,7.008-7.969,7.008-13.409\n		C37.842,8.658,29.594,1,19.421,1S1,8.658,1,18.105c0,9.446,7.932,16.79,18.105,16.79c1.845,0,3.94,0.057,5.62-0.412\n		c0.979,1.023,2.243,2.3,2.915,2.791c3.785,2.759,7.571,0,7.571,0S32.687,37.274,31.425,34.514z"/>\n</g>\n<g>\n	<g>\n		<path class="uv-bubble-foreground" fill="#FFFFFF" d="M24.951,9.07c-0.83-0.836-1.857-1.453-2.976-1.786C21.337,7.096,20.672,7,20,7\n			c-1.87,0-3.628,0.736-4.952,2.07C13.728,10.403,13,11.864,13,13.751l0.03,0.648c0.086,0.972,0.368,1.896,0.834,2.752\n			c0.776,1.399,2.367,2.849,2.637,4.993l0.163,0.972C16.809,23.703,17.105,24,17.549,24h5.054c0.445,0,0.742-0.297,0.884-0.884\n			l0.014-0.972c0.268-2.144,1.802-3.593,2.657-4.993c0.443-0.855,0.725-1.779,0.811-2.752L27,13.751\n			C26.999,11.864,26.271,10.405,24.951,9.07z M17.101,26.554h5.741v-1.66h-5.741V26.554z M18.392,28.668h3.216l0.414-0.83h-4.101\n			L18.392,28.668z"/>\n	</g>\n</g>\n</svg>\n',satisfaction:'<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\r\n	 width="39px" height="39px" viewBox="0 0 39 39" enable-background="new 0 0 39 39" xml:space="preserve">\r\n<g>\r\n	<path class="uv-bubble-background" fill="rgba(46, 49, 51, 0.6)" d="M31.425,34.514c-0.432-0.944-0.579-2.007-0.591-2.999c4.264-3.133,7.008-7.969,7.008-13.409\r\n		C37.842,8.658,29.594,1,19.421,1S1,8.658,1,18.105c0,9.446,7.932,16.79,18.105,16.79c1.845,0,3.94,0.057,5.62-0.412\r\n		c0.979,1.023,2.243,2.3,2.915,2.791c3.785,2.759,7.571,0,7.571,0S32.687,37.274,31.425,34.514z"/>\r\n</g>\r\n<g>\r\n	<g>\r\n		<path class="uv-bubble-foreground" fill="#FFFFFF" d="M13.501,19.25c0.308,0.3,0.501,0.891,0.427,1.314l-1.02,5.95c-0.073,0.423,0.18,0.604,0.56,0.404\r\n			l5.338-2.806c0.381-0.2,1.004-0.2,1.385,0l5.338,2.806c0.38,0.201,0.633,0.018,0.561-0.404l-1.02-5.95\r\n			C25,20.141,25.191,19.55,25.499,19.25l4.321-4.21c0.308-0.3,0.211-0.596-0.215-0.658l-5.968-0.868\r\n			c-0.426-0.062-0.93-0.427-1.119-0.813l-2.673-5.412c-0.19-0.385-0.501-0.385-0.691,0l-2.671,5.412\r\n			c-0.191,0.385-0.695,0.75-1.12,0.813l-5.967,0.868c-0.426,0.062-0.523,0.358-0.215,0.658L13.501,19.25z"/>\r\n	</g>\r\n</g>\r\n</svg>\r\n'},t.icon_images_ie8={contact:"//widget.uservoice.com/omnibox/icons/question_mark_bubble_icon.png",feedback:"//widget.uservoice.com/omnibox/icons/lightbulb_bubble_icon.png",post_suggestion:"//widget.uservoice.com/omnibox/icons/lightbulb_bubble_icon.png",smartvote:"//widget.uservoice.com/omnibox/icons/lightbulb_bubble_icon.png",satisfaction:"//widget.uservoice.com/omnibox/icons/star_bubble_icon.png"},t.prototype.remove=function(){this.widget.hide();try{e.body.removeChild(this.el)}catch(t){}},t.prototype.push=function(t){this.widget=t,this.widgets.push(t)},t.prototype.pop=function(){1!==this.widgets.length&&(this.widgets.pop(),this.widget=this.widgets[this.widgets.length-1])},t.prototype.render=function(){var e=this,o="classic_widget"===this.widget.options.mode?"contact":this.widget.options.mode;this.el||this.createElement();var i=t.icon_images[o];if(F.ie8){var s=t.icon_images_ie8[o];s+="?trigger_color="+encodeURIComponent(this.options.trigger_color),s+="&trigger_background_color="+encodeURIComponent(this.options.trigger_background_color),s+="&icon_version=4",i="<img src='"+s+"'/>"}this.el.innerHTML=i,F.ie8||(this.options.trigger_color&&(A(this.el,"path","uv-bubble-foreground").style.fill=this.options.trigger_color),this.options.trigger_background_color&&(A(this.el,"path","uv-bubble-background").style.fill=this.options.trigger_background_color)),A.on(this.el,"click",function(){e.visibleWidget?e.visibleWidget.hide():e.widget.show()}),F.touch||F.ie&&!(F.ie&&F.version>9)||A.one(e.el,"mousemove",function(){e.widget.preload()})},t.prototype.createElement=function(){var t=this.el=e.createElement("div");t.setAttribute("data-html2canvas-ignore",!0),A.addClass(this.el,"uv-icon uv-"+this.options.trigger_position),F.ie8&&A.addClass(this.el,"uv-ie8"),e.body.appendChild(this.el)},t.prototype.popoverWillShow=function(){A.addClass(this.el,"uv-is-selected")},t.prototype.popoverWillHide=function(){A.removeClass(this.el,"uv-is-selected")},t}(),H=function(){function t(t,e){this.el=t,this.options=e,A.data(this.el,"trigger",this)}return t.prototype.render=function(){var t=this;this.clickHandler=function(e){return t.options.trigger_prevent_default_enabled&&e.preventDefault&&e.preventDefault(),t.widget.toggle(),t.options.trigger_prevent_default_enabled?!1:void 0},A.on(this.el,"click",this.clickHandler),F.touch||F.ie&&!(F.ie&&F.version>9)||A.one(this.el,"mousemove",function(){t.removed||t.widget.preload()})},t.prototype.remove=function(){this.removed=!0,A.off(this.el,"click",this.clickHandler)},t}(),$=function(){function i(t,e,o){this.options=T({css:"display: block; background: transparent; padding: none; margin: none; border: none; width: #{width}; height: #{height}",cdn:"omnibox"===e,embed_type:t,type:e,width:"100%",height:"100%"},o),this.options.mode.match(/contact|instant/)?this.options.mode="contact":this.options.mode.match(/post_idea|post_suggestion/)?this.options.mode="feedback":"satisfaction"===this.options.mode&&(this.options.survey_lockout=!1),this.pokes=[],this.loaded=!1,this.setLocation(),this.src=[this.location.baseUrl,this.queryString()].join("?"),this.sendUserData(),i.all.push(this)}return i.all=[],i.prototype.setLocation=function(){var t="https";if(this.options.cdn){var e="widget.uservoice.com";this.location={host:e,protocol:t,baseUrl:[t,"://",e,"/",this.options.type,"/",encodeURIComponent(this.options.locale||"0"),"/",encodeURIComponent(this.options.accent_color||"0"),"/",UserVoice.account.client_key].join("")}}else this.location={host:UserVoice.account.subdomain_ssl_host,protocol:t,baseUrl:t+"://"+UserVoice.account.subdomain_ssl_host+"/clients/widgets/"+this.options.type};this.location.origin=[this.location.protocol,"://",this.location.host].join("")},i.prototype.doLoad=function(){this.loaded=!0,this.poke()},i.prototype.poke=function(e){if(e&&("object"==typeof e&&(e=JSON.stringify(e)),this.pokes.push(e)),this.loaded&&this.el&&this.el.contentWindow){for(var o=this.el.contentWindow,i=0,s=this.pokes.length;s>i;i++)if("postMessage"in t)o.postMessage(this.pokes[i],this.location.origin);else try{o.location.href=[this.src,(+new Date).toString()+"&"+this.pokes[i]].join("#")}catch(n){}this.pokes=[]}},i.prototype.render=function(){this.loaded=!1,this.options.startIframeLoad=+new Date;var t=this.el=e.createElement("iframe"),o=this,i={height:this.options.height,width:this.options.width},s=c(this.options.css,i);if(t.attachEvent?t.attachEvent("onload",function(){o.doLoad()}):t.onload=function(){o.doLoad()},t.name="uvw-iframe-"+this.options.id,A.addClass(t,"uvw-dialog-iframe"),F.ie?t.style.setAttribute("cssText",s,0):t.setAttribute("style",s),t.setAttribute("allowtransparency","true"),t.setAttribute("frameBorder","0"),t.frameBorder=0,!(F.ie&&F.version<9)){t.style.visibility="hidden";var n=t.onload;t.onload=function(){"function"==typeof n&&n(),t.style.visibility="visible"}}return t.src=this.src,t},i.prototype.queryString=function(){var e={},i=["sess","mode","locale","link_color","topic_id","forum_id","article_id","suggestion_id","feedback_tab_name","support_tab_name","contact_us","email","status_ids","smartvote_status_ids","states","category_ids","smartvote_category_ids","survey_lockout","primary_color","accent_color","trigger_color","trigger_background_color","header","border","custom_template_id","design_settings_id","mixpanel_channel","allow_tests","demo","startIframeLoad","org_name","post_idea_title","contact_title","smartvote_title","context","embed_type","trigger_method","menu","screenshot_enabled","mobile","twitter_demo","twitter_demo_username","twitter_demo_message","twitter_demo_satisfaction_thanks_mode","twitter_demo_satisfaction_thanks_message","permalinks_enabled","strings","instant_answers","smartvote","satisfaction","contact_enabled","feedback_enabled"];"classic_widget"===this.options.type&&i.push("sso");for(var s=0;s<i.length;s++){var n=i[s],r=this.options[n];r===o&&(r=this.options["__"+n]),r!==o&&("string"==typeof r&&n.match(/color/)&&r.match(/^#/)&&(r=r.substring(1)),"object"==typeof r&&(r=JSON.stringify(r)),e[n]=r)}this.options.post_idea_enabled!==o&&(this.options.post_suggestion_enabled=this.options.post_idea_enabled);var a=this.options.ticket_custom_fields||this.options.custom_fields;a&&"object"==typeof a&&(e.custom_fields=z(JSON.stringify(a)));var l=this.options.strings||{};return l&&"object"==typeof l&&(e.strings=z(JSON.stringify(l))),e.smartvote_status_ids&&(e.status_ids=e.smartvote_status_ids,delete e.smartvote_status_ids),e.smartvote_category_ids&&(e.category_ids=e.smartvote_category_ids,delete e.smartvote_category_ids),this.options.menu_enabled!==o&&(e.menu=this.options.menu_enabled),this.options.smartvote_enabled!==o&&(e.smartvote=this.options.smartvote_enabled),this.options.satisfaction_enabled!==o&&(e.satisfaction=this.options.satisfaction_enabled),this.options.post_suggestion_enabled!==o&&(e.feedback_enabled=this.options.post_suggestion_enabled),"classic_widget"===this.options.type&&(this.options.classic_default_mode!==o&&(e.default_mode=this.options.classic_default_mode),e.mode=this.options.contact_enabled?this.options.post_suggestion_enabled?"full":"support":"feedback"),e.referrer=t.location.href,g(e,function(t){try{t=decodeURIComponent(t)}catch(e){}return encodeURIComponent(t)})},i.prototype.sendUserData=function(){if(Q.uvts&&this.poke({setUvts:Q.uvts}),Q.email&&this.poke({setEmail:Q.email}),Q.sso&&this.poke({setSSO:Q.sso}),Q.external_user_ids&&Q.external_user_ids.length)for(var t=0;t<Q.external_user_ids.length;t++)this.poke({addExternalUserId:Q.external_user_ids[t]})},i.sendUserData=function(){for(var t=0;t<this.all.length;t++)this.all[t].sendUserData()},i}(),q=function(){function t(t,e){var o=A.dimensions(t).height,i={trigger_method:"embed",height:10>o?"325px":"100%",contact_enabled:!0,post_suggestion_enabled:!0,smartvote_enabled:!0,feedback_enabled:!0},s=Q.processModeOptions(T(i,UserVoice.globalOptions,e)),n=new $("inline",s.widgetType,s),r=t.currentStyle?t.currentStyle.position:A.getComputedStyle(t,null).position;for("static"===r&&(t.style.position="relative");t.firstChild;)t.removeChild(t.firstChild);t.appendChild(n.render()),n.poke({show:!0})}return t}(),K=function(){function o(t){this.iframe=new $("lightbox",t.widgetType,T({css:"display: block; border: none; -moz-border-radius: 3px; -webkit-border-radius: 3px; height: 100%; padding: none; position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%;-webkit-transform: translate3d(0,0,0);"},t)),this.template='<div class="uvOverlay1" id="uvw-overlay-#{id}" style="position: relative; visibility:hidden; z-index: 100003;"><div id="uvw-overlay-background-#{id}" style="background: #000; -ms-filter: alpha(opacity=75); filter: alpha(opacity=75); opacity: .75; position: fixed; top: 0; right: 0; bottom: 0; left: 0;"></div><div class="uvOverlay2" style="height: 100%; overflow: auto; position: fixed; top: 0; right: 0; bottom: 0; left: 0;"><div class="uvOverlay3" style="height: 100%; min-height: 550px; min-width: 900px; position: relative; width: 100%;"><div id="#{dialog_id}" style="-webkit-box-shadow: rgba(0,0,0,.5) 0 5px 5px; height: 500px; margin: -250px 0 0 -444px; position: absolute; top: 50%; left: 50%; width: 888px;"><div id="#{dialog_close_id}" title="Close Dialog" style="z-index: 100004; background: transparent url('+D+UserVoice.manifest.close+') 0 0 no-repeat; height: 48px; margin: 0; padding: 0; position: absolute; top: -22px; right: -24px; width: 48px;"><button style="background: none; border: none; -moz-box-shadow: none; -webkit-box-shadow: none; box-shadow: none; cursor: pointer; height: 30px; margin: 6px 0 0 9px; padding: 0; width: 30px; text-indent: -9000px;">Close Dialog</button></div>'+'<div id="#{dialog_content_id}" style="position:static; width:100%; height:100%"></div>'+(UserVoice.account.campaign?'<a id="uvw-dialog-powered-by-#{id}" href="http://www.uservoice.com/powered-by?uv_experience=classic&amp;uv_company_name='+UserVoice.account.name+"&amp;uv_contact_url="+UserVoice.account.subdomain_site_host+"&amp;utm_campaign="+UserVoice.account.campaign+"&amp;utm_medium=widget2&amp;utm_source="+UserVoice.account.subdomain_ssl_host+'" target="_blank" style="background: url('+D+UserVoice.manifest.pb+') 0 0 no-repeat; font-size: 11px; height: 20px; position: absolute; bottom: -25px; right: 10px; text-indent: -9000px; width: 150px;">Powered by UserVoice</a>':"")+"</div></div></div></div>",this.id=A.uniqId(),this.dialog_id="uvw-dialog-"+this.id,this.dialog_close_id="uvw-dialog-close-"+this.id,this.dialog_content_id="uvw-dialog-content-"+this.id,this.options=t}return o.prototype.toggle=function(){this.show()},o.prototype.show=function(){F.ie6||F.touch||F.ieMobile||F.iOS||F.ieQuirks?t.open(this.iframe.src,"uservoice_widget","height=500,width=888,resizable=yes,scrollbars=1"):(this.initPopup(),this.overlay.style.visibility="visible",this.overlay.style.display="block",this.dialog.focus(),A.addClass(x(),"uvw-dialog-open"))},o.prototype.preload=function(){},o.prototype.hide=function(){this.iframe.poke("reset"),this.overlay&&(this.overlay.style.display="none"),A.removeClass(x(),"uvw-dialog-open")},o.prototype.initPopup=function(){if(this.overlay||(b(P),this.overlay=h(c(this.template,this))),this.iframe.poke("opened"),!this.dialog||this.dialog.getAttribute("data-widget-key")!==this.id){for(this.iframe.render(),this.dialogContent=e.getElementById(this.dialog_content_id);this.dialogContent.firstChild;)this.dialogContent.removeChild(this.dialogContent.firstChild);this.dialogContent.appendChild(this.iframe.el),this.dialog=e.getElementById(this.dialog_id),this.dialog.setAttribute("data-widget-key",this.id);var t=this;A.on(e.getElementById(this.dialog_close_id),"click",function(){return t.hide()})}},o}(),Q=function(){var i={session:!1,syncedSession:!1};return i.setUvts=function(t){i.uvts=t,$.sendUserData()},i.setEmail=function(t){i.email=t,$.sendUserData()},i.setSSO=function(t){i.sso=t,$.sendUserData()},i.addExternalUserId=function(t){i.external_user_ids||(i.external_user_ids=[]),i.external_user_ids.push(t),$.sendUserData()},i.setSession=function(){i.session=!0,i.pendingAutoprompt&&(i.pendingAutoprompt=!1,i.autoprompt())},i.syncSession=function(){i.syncedSession=!0,i.pendingAutoprompt&&(i.pendingAutoprompt=!1,i.autoprompt())},i.tracker=new U(UserVoice.account.subdomain_id,{channel:e.location.host===UserVoice.account.subdomain_site_host?"site2":"external",onUvts:i.setUvts,onSession:i.setSession,onSync:i.syncSession}),i.autoprompt=function(){if(F.mobile)return this.pendingAutoprompt=!1,void 0;if(this.session===!1||this.systemTrigger&&this.systemTrigger.el===o)return this.pendingAutoprompt=!0,void 0;var t=this.tracker.dumpSession(),e=this.shouldShowSatisfactionPrompt(t),s=this.shouldShowSmartVotePrompt(t);if(e||s){if(this.syncedSession===!1)return this.pendingAutoprompt=!0,this.tracker.syncSession(),void 0;e&&(i.recordAutoprompt("satisfaction"),this.tracker.updateSession({dismissed_sat_at:(new Date).getTime()}),i.pushSystemWidget({mode:"satisfaction"}),i.showAutoprompt({mode:"satisfaction"}),this.tracker.track("autoprompt",{},"satisfaction_widget")),s&&(i.recordAutoprompt("smartvote"),this.tracker.updateSession({dismissed_smartvote_at:(new Date).getTime()}),i.showAutoprompt({mode:"smartvote"}),this.tracker.track("autoprompt",{},"smartvote_widget"))}},i.shouldShowSatisfactionPrompt=function(t){if(!UserVoice.account.satisfaction_autoprompt_enabled)return!1;if(t.autoprompt_disabled)return!1;var e=((new Date).getTime(),Math.max(t.created_at||0,this.lastSatisfactionPrompt(t))),o=this.lastSmartvotePrompt(t);return 0!==e?_(e)>=60&&(0===o||_(o)>=21):!1},i.shouldShowSmartVotePrompt=function(t){if(!UserVoice.account.smartvote_autoprompt_enabled)return!1;if(t.autoprompt_disabled)return!1;var e=((new Date).getTime(),this.lastSmartvotePrompt(t)),o=this.lastSatisfactionPrompt(t);return 0!==e?_(e)>=42&&(0===o||_(o)>=21):7===t.active_days&&(0===o||_(o)>=21)},i.lastSatisfactionPrompt=function(t){return Math.max(t.last_sat_at||0,t.dismissed_sat_at||0,t.autoprompted_satisfaction_at||0)},i.lastSmartvotePrompt=function(t){return Math.max(t.last_smartvote_at||0,t.dismissed_smartvote_at||0,t.autoprompted_smartvote_at||0)},i.scan=function(){var t,o=s(e.getElementsByTagName("*"));t=function(t,e,o){var s=t.getAttribute(e);t.hasAttribute&&t.hasAttribute(e)&&!t.getAttribute("data-uv-scanned")&&(t.setAttribute("data-uv-scanned","true"),o(t,s,i.extractOptions(t)))};for(var n=0;n<o.length;n++){var r=o[n];t(r,"data-uv-inline",this.renderInline),t(r,"data-uv-embed",this.renderInline),t(r,"data-uv-lightbox",this.linkToLightbox),t(r,"data-uv-show",this.linkToPopover),t(r,"data-uv-trigger",this.linkToPopover)}},i.renderInline=function(t,e,o){"classic_widget"===e?new q(t,k(e,o)):new q(t,T({mode:e,contact_enabled:!0,post_suggestion_enabled:!0,smartvote_enabled:!0,feedback_enabled:!0},o))},i.linkToLightbox=function(t,e,o){i.createCustomTrigger(t,T({target:"lightbox"},k(e,o)))},i.linkToPopover=function(t,e,o){i.createCustomTrigger(t,T({mode:e},o))},i.extractOptions=function(t){for(var e={},o=0;o<t.attributes.length;o++){var i=t.attributes[o],s=i.value;i.specified&&i.name.match(/^data-uv-/)&&(s.match(/^(true|false)$/)&&(s="true"===s),e[i.name.replace(/^data-uv-/,"").replace(/-/g,"_")]=s)}return e},i.processModeOptions=function(t){return t.contact_enabled&&!UserVoice.account.has_ticketing_system&&(t.contact_enabled=!1),t.feedback_enabled&&!UserVoice.account.has_feedback_system&&(t.feedback_enabled=!1),t.smartvote_enabled&&!UserVoice.account.has_feedback_system&&(t.smartvote_enabled=!1),t.satisfaction_enabled&&!UserVoice.account.has_satisfaction&&(t.satisfaction_enabled=!1),t.mode=t.mode||(t.contact_enabled?"contact":t.smartvote_enabled?"smartvote":"post_suggestion"),t.mode.match(/instant/)&&(t.mode="contact"),"post_idea"===t.mode&&(t.mode="post_suggestion"),t.widgetType="classic_widget"===t.mode?t.mode:"omnibox",UserVoice.account.has_ticketing_system||"contact"!==t.mode||(t.mode="post_suggestion"),UserVoice.account.has_satisfaction||"satisfaction"!==t.mode||(t.mode="post_suggestion"),UserVoice.account.has_feedback_system||"post_suggestion"!==t.mode&&"smartvote"!==t.mode||(t.mode="contact"),t
},i.active=null,i.hideActive=function(){i.active&&i.active.hide()},i.createCustomTrigger=function(t,e){var o=new H(t,T({trigger_prevent_default_enabled:!0},UserVoice.globalOptions,e)),s=i.createWidget(T({trigger_method:"custom_trigger"},e),o);return e&&e.autoprompt&&(i.autopromptOptions=T({target:t},Widget.autopromptOptions||{})),o.widget=s,o.render(),o},i.createSystemTrigger=function(t){var e=T({trigger_color:"white"},UserVoice.globalOptions,t||{}),o=e.trigger_style||"icon",s="icon"===o?new J(e):new L(e),n=i.createWidget(T({trigger_method:"pin"},t),s);if(!(F.ie&&F.version<8&&"icon"===o))return s.push(n),s.render(),s},i.createWidget=function(t,e){var o={target:"self",contact_enabled:!0,post_suggestion_enabled:!0,smartvote_enabled:!0,feedback_enabled:!0},s=i.processModeOptions(T(o,UserVoice.globalOptions,t));return F.mobile&&(s.mobile=!0),"lightbox"===s.target||"classic_widget"===s.mode?new K(s,e):s.target===!1||"self"===s.target&&!e?(s.position=s.position||"bottom-right",new B(s,e)):(s.position&&s.position.match(/^(automatic|top|bottom|left|right)$/)||(s.position="automatic"),F.mobile?new B(s,e):new R(s,e))},i.showWidget=function(t){i.createWidget(T({temp:!0},t),i.systemTrigger).show()},i.showAutoprompt=function(t){i.showWidget(T({trigger_method:"autoprompt"},i.autopromptOptions||{},t))},i.pushSystemWidget=function(t){i.systemTrigger&&i.systemTrigger.push(i.createWidget(t,i.systemTrigger))},i.recordAutoprompt=function(t){var o=i.tracker.getIdentity()||{},s={"audit[prompt_type]":t,"audit[uvts]":i.uvts,"audit[session_data]":JSON.stringify(i.tracker.dumpSession()),"audit[external_user_id]":o.id,"audit[email]":o.email},n=e.getElementsByTagName("script")[0],r=e.createElement("script");r.type="application/javascript",r.async=!0,r.defer=!0,r.src=("https:"===e.location.protocol?"https://":"http://")+UserVoice.account.subdomain_ssl_host+"/clients/widgets/omnibox/autoprompts/create.json?"+g(s),n.parentNode.insertBefore(r,n)},i.includeCss=function(){b(V)},new E({openPane:function(t){i.active&&i.active.paneOpened(t[0],t[1])},close:function(){i.active&&i.active.hide()},dismiss:function(){i.active&&i.active.hide()},voteSubmitted:function(){i.tracker.updateSession({last_smartvote_at:(new Date).getTime()})},ratingSubmitted:function(){i.systemTrigger&&i.systemTrigger.pop(),i.tracker.updateSession({last_sat_at:(new Date).getTime()})},captureScreenshot:function(o,i,s){("http://widget.uservoice.com"===s||"https://widget.uservoice.com"===s)&&(t.html2canvas_onload_options={onrendered:function(t){var e=t.toDataURL("image/png");if(e){var n=e.split(",",2)[1];i.postMessage(JSON.stringify({identifier:o,content_type:"image/png",base64data:n,width:t.width,height:t.height}),s)}}},function(){var t=e.createElement("script");t.type="text/javascript",t.async=!0,t.src="//assets.uvcdn.com"+UserVoice.manifest.screenshot+"?"+o;var i=e.getElementsByTagName("head")[0];i.appendChild(t)}())}}).listen(),i}();UserVoice.globalOptions={},UserVoice.push=function(t){var e=t[0],o=t.slice(1);"function"==typeof UserVoice[e]&&UserVoice[e].apply(null,o)},UserVoice.set=function(t,e){if("object"==typeof t)UserVoice.globalOptions=m(UserVoice.globalOptions,t),t.sso&&Q.setSSO(t.sso);else{var o={};o[t]=e,UserVoice.set(o)}},UserVoice.embed=function(){var t=arguments[0],e=arguments[1],s=arguments[2];return("string"!=typeof t||"#"===t[0])&&(e=arguments[0],s=arguments[1],t=null),e===o?i("please specify where to embed it."):(Q.renderInline(A.element(e),t,s),void 0)},UserVoice.addTrigger=function(t,e){if(t&&t.nodeName||"string"==typeof t){if(F.ie&&F.version<8)return;Q.createCustomTrigger(A.element(t),e)}else e=t||{},Q.systemTrigger&&Q.systemTrigger.remove(),Q.systemTrigger=Q.createSystemTrigger(w(e))},UserVoice.show=function(t){"string"==typeof arguments[0]&&(t=T({mode:arguments[0]},arguments[1]||{})),Q.showWidget(T({trigger_method:"show"},t||{}))},UserVoice.hide=function(){Q.hideActive()},UserVoice.removeTrigger=function(t){t?A.data(A.element(t),"trigger").remove():(Q.systemTrigger.remove(),Q.systemTrigger=null)},UserVoice.autoprompt=function(t){Q.autopromptOptions=t,Q.autoprompt()},UserVoice.identify=function(t){Q.tracker.identify(t),t&&t.email&&Q.setEmail(t.email)},UserVoice.track=function(t,e){Q.tracker.track(t,e)},UserVoice.footprint=function(t){Q.tracker.setConfig({enabled:t})},UserVoice.scan=function(){Q.scan()},UserVoice.addExternalUserId=function(t){Q.addExternalUserId(t)},UserVoice.setOption=UserVoice.setOptions=UserVoice.set,UserVoice.setSSO=function(t){UserVoice.set("sso",t)},UserVoice.setCustomFields=function(t){UserVoice.set("ticket_custom_fields",t)},UserVoice.setLocale=function(t){UserVoice.set("locale",t)},UserVoice.showPrompt=UserVoice.showPopover=UserVoice.show,UserVoice.showLightbox=function(t,e){Q.showWidget(T({target:"lightbox"},k(t,e)))},UserVoice.hideLightbox=function(){},UserVoice.showIcon=UserVoice.pin=function(t,e){e&&(e.trigger_position=e.position,e.position="automatic"),UserVoice.addTrigger(T({mode:t,trigger_style:"icon"},e||{}))},UserVoice.showTab=function(t,e){UserVoice.addTrigger(T({trigger_style:"tab"},k(t,e)))},Q.includeCss();for(var Z=0;Z<UserVoice.events.length;Z++)UserVoice.push(UserVoice.events[Z]);Q.scan(),A.ready(C)}(window,document);
*/
/* jshint ignore:end */"use strict";
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict'; /**
               * Color utility functions, exposed as an AMD module.
               * No external dependencies.
               * Special thanks for the RGB to CIE conversion code goes out to the Q42 team 
               * for their Q42.HueApi work. Dank u!
               * More info: https://github.com/Q42/Q42.HueApi.
               *
               * https://github.com/bjohnso5/hue-hacking
               * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

/*globals define:false */
/*exported colors*/
var colors = function colors() {

    'use strict';

    /**
                   * Represents a CIE 1931 XY coordinate pair.
                   *
                   * @param {Number} X coordinate.
                   * @param {Number} Y coordinate.
                   * @constructor
                   */
    var XYPoint = function XYPoint(x, y) {
        this.x = x;
        this.y = y;
    },

    Red = new XYPoint(0.675, 0.322),
    Lime = new XYPoint(0.4091, 0.518),
    Blue = new XYPoint(0.167, 0.04),

    /**
                                      * Parses a valid hex color string and returns the Red RGB integer value.
                                      *
                                      * @param {String} Hex color string.
                                      * @return {Number} Red integer value.
                                      */
    hexToRed = function hexToRed(hex) {
        return parseInt(hex.substring(0, 2), 16);
    },

    /**
        * Parses a valid hex color string and returns the Green RGB integer value.
        *
        * @param {String} Hex color string.
        * @return {Number} Green integer value.
        */
    hexToGreen = function hexToGreen(hex) {
        return parseInt(hex.substring(2, 4), 16);
    },

    /**
        * Parses a valid hex color string and returns the Blue RGB integer value.
        *
        * @param {String} Hex color string.
        * @return {Number} Blue integer value.
        */
    hexToBlue = function hexToBlue(hex) {
        return parseInt(hex.substring(4, 6), 16);
    },

    /**
        * Converts a valid hex color string to an RGB array.
        *
        * @param {String} Hex color String (e.g. FF00FF)
        * @return {Array} Array containing R, G, B values
        */
    hexToRGB = function hexToRGB(h) {
        var rgb = [hexToRed(h), hexToGreen(h), hexToBlue(h)];
        return rgb;
    },

    /**
        * Generates a random number between 'from' and 'to'.
        *
        * @param {Number} Number representing the start of a range.
        * @param {Number} Number representing the end of a range.
        */
    randomFromInterval = function randomFromInterval(from /* Number */, to /* Number */) {
        return Math.floor(Math.random() * (to - from + 1) + from);
    },

    /**
        * Return a random Integer in the range of 0 to 255, representing an RGB
        * color value.
        *
        * @return {number} Integer between 0 and 255.
        */
    randomRGBValue = function randomRGBValue() {
        return randomFromInterval(0, 255);
    },

    /**
        * Returns the cross product of two XYPoints.
        *
        * @param {XYPoint} Point 1.
        * @param {XYPoint} Point 2.
        * @return {Number} Cross-product of the two XYPoints provided.
        */
    crossProduct = function crossProduct(p1, p2) {
        return p1.x * p2.y - p1.y * p2.x;
    },

    /**
        * Check if the provided XYPoint can be recreated by a Hue lamp.
        *
        * @param {XYPoint} XYPoint to check.
        * @return {boolean} Flag indicating if the point is within reproducible range.
        */
    checkPointInLampsReach = function checkPointInLampsReach(p) {
        var v1 = new XYPoint(Lime.x - Red.x, Lime.y - Red.y),
        v2 = new XYPoint(Blue.x - Red.x, Blue.y - Red.y),

        q = new XYPoint(p.x - Red.x, p.y - Red.y),

        s = crossProduct(q, v2) / crossProduct(v1, v2),
        t = crossProduct(v1, q) / crossProduct(v1, v2);

        return s >= 0.0 && t >= 0.0 && s + t <= 1.0;
    },

    /**
        * Find the closest point on a line. This point will be reproducible by a Hue lamp.
        *
        * @param {XYPoint} The point where the line starts.
        * @param {XYPoint} The point where the line ends.
        * @param {XYPoint} The point which is close to the line.
        * @return {XYPoint} A point that is on the line, and closest to the XYPoint provided.
        */
    getClosestPointToPoint = function getClosestPointToPoint(A, B, P) {
        var AP = new XYPoint(P.x - A.x, P.y - A.y),
        AB = new XYPoint(B.x - A.x, B.y - A.y),
        ab2 = AB.x * AB.x + AB.y * AB.y,
        apab = AP.x * AB.x + AP.y * AB.y,
        t = apab / ab2;

        if (t < 0.0) {
            t = 0.0;
        } else if (t > 1.0) {
            t = 1.0;
        }

        return new XYPoint(A.x + AB.x * t, A.y + AB.y * t);
    },

    /**
        * Returns the distance between two XYPoints.
        *
        * @param {XYPoint} The first point.
        * @param {XYPoint} The second point.
        * @param {Number} The distance between points one and two.
        */
    getDistanceBetweenTwoPoints = function getDistanceBetweenTwoPoints(one, two) {
        var dx = one.x - two.x, // horizontal difference
        dy = one.y - two.y; // vertical difference

        return Math.sqrt(dx * dx + dy * dy);
    },

    /**
        * Returns an XYPoint object containing the closest available CIE 1931
        * coordinates based on the RGB input values.
        *
        * @param {Number} RGB red value, integer between 0 and 255.
        * @param {Number} RGB green value, integer between 0 and 255.
        * @param {Number} RGB blue value, integer between 0 and 255.
        * @return {XYPoint} CIE 1931 XY coordinates, corrected for reproducibility.
        */
    getXYPointFromRGB = function getXYPointFromRGB(red, green, blue) {

        var r = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92,
        g = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92,
        b = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92,

        X = r * 0.4360747 + g * 0.3850649 + b * 0.0930804,
        Y = r * 0.2225045 + g * 0.7168786 + b * 0.0406169,
        Z = r * 0.0139322 + g * 0.0971045 + b * 0.7141733,

        cx = X / (X + Y + Z),
        cy = Y / (X + Y + Z);

        cx = isNaN(cx) ? 0.0 : cx;
        cy = isNaN(cy) ? 0.0 : cy;

        //Check if the given XY value is within the colourreach of our lamps.
        var xyPoint = new XYPoint(cx, cy),
        inReachOfLamps = checkPointInLampsReach(xyPoint);

        if (!inReachOfLamps) {

            //Color is unreproducible, find the closest point on each line in the CIE 1931 'triangle'.
            var pAB = getClosestPointToPoint(Red, Lime, xyPoint),
            pAC = getClosestPointToPoint(Blue, Red, xyPoint),
            pBC = getClosestPointToPoint(Lime, Blue, xyPoint),

            // Get the distances per point and see which point is closer to our Point.
            dAB = getDistanceBetweenTwoPoints(xyPoint, pAB),
            dAC = getDistanceBetweenTwoPoints(xyPoint, pAC),
            dBC = getDistanceBetweenTwoPoints(xyPoint, pBC),

            lowest = dAB,
            closestPoint = pAB;

            if (dAC < lowest) {
                lowest = dAC;
                closestPoint = pAC;
            }
            if (dBC < lowest) {
                lowest = dBC;
                closestPoint = pBC;
            }

            // Change the xy value to a value which is within the reach of the lamp.
            cx = closestPoint.x;
            cy = closestPoint.y;
        }

        return new XYPoint(cx, cy);
    };

    /**
        * Publicly accessible functions exposed as API.
        */
    return {
        /**
              * Converts hexadecimal colors represented as a String to approximate
              * CIE 1931 coordinates. May not produce accurate values.
              *
              * @param {String} Value representing a hexadecimal color value
              * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
              */
        hexToCIE1931: function hexToCIE1931(h) {
            var rgb = hexToRGB(h);
            return this.rgbToCIE1931(rgb[0], rgb[1], rgb[2]);
        },

        /**
            * Converts red, green and blue integer values to approximate CIE 1931
            * x and y coordinates. Algorithm from: 
            * http://www.easyrgb.com/index.php?X=MATH&H=02#text2. May not produce
            * accurate values.
            *
            * @param {Number} red Integer in the 0-255 range.
            * @param {Number} green Integer in the 0-255 range.
            * @param {Number} blue Integer in the 0-255 range.
            * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
            */
        rgbToCIE1931: function rgbToCIE1931(red, green, blue) {
            var point = getXYPointFromRGB(red, green, blue);
            return [point.x, point.y];
        },

        /**
            * Returns the approximate CIE 1931 x,y coordinates represented by the 
            * supplied hexColor parameter, or of a random color if the parameter
            * is not passed.
            *
            * @param {String} hexColor String representing a hexidecimal color value.
            * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
            */
        getCIEColor: function getCIEColor(hexColor /* String */) {
            var hex = hexColor || null,
            xy = [];
            if (null !== hex) {
                xy = this.hexToCIE1931(hex);
            } else {
                var r = randomRGBValue(),
                g = randomRGBValue(),
                b = randomRGBValue();
                xy = this.rgbToCIE1931(r, g, b);
            }
            return xy;
        },
        hexFullRed: 'FF0000',
        hexFullGreen: '00FF00',
        hexFullBlue: '0000FF',
        hexFullWhite: 'FFFFFF' };

};

if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {
    define(colors);
} else {
    window.colors = colors();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/*exported Palettes */
'use strict';

// fill solid palette
var Palettes = {
    'Empty': [],

    'Kelvin degrees': [
    { name: 'Candle', color: '#FF9329' },
    { name: '40W Tungsten', color: '#FFC58F' },
    { name: '100W Tungsten', color: '#FFD6AA' },
    { name: 'Halogen', color: '#FFF1E0' },
    { name: 'Carbon Arc', color: '#FFFAF4' },
    { name: 'High Noon Sun', color: '#FFFFFB' },
    { name: 'Direct Sunlight', color: '#FFFFFF' },
    { name: 'Overcast Sky', color: '#C9E2FF' },
    { name: 'Clear Blue Sky', color: '#409CFF' }],

    'Fluorescents': [
    { name: 'Warm Fluorescent', color: '#FFF4E5' },
    { name: 'Standard Fluorescent', color: '#F4FFFA' },
    { name: 'Cool White Fluorescent', color: '#D4EBFF' },
    { name: 'Full Spectrum Fluorescent', color: '#FFF4F2' },
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' },
    { name: 'Pink Fluorescent', color: '#ffc0cb' }],

    'Valentines': [
    { name: 'February 14', color: '#820081' },
    { name: 'Feelings', color: '#FE59C2' },
    { name: 'Joy', color: '#FE40B9' },
    { name: 'Hearts', color: '#FE1CAC' },
    { name: 'Attitude', color: '#390039' },
    { name: 'Pink Fluorescent', color: '#ffc0cb' }],

    'Rainbow': [
    '#3400E5',
    '#7200E2',
    '#AD00DF',
    '#DD00D2',
    '#DA0094',
    '#D80058',
    '#D5001C',
    '#D31C00',
    '#D05500',
    '#CE8C00',
    '#CBC200',
    '#9BC900',
    '#63C600',
    '#2DC400',
    '#00C108',
    '#00BF3C'],

    'RomanticRed': [
    // '#4c0000',
    // '#660000',
    // '#7f0000',
    // '#990000',
    // '#b20000',
    // '#cc0000',
    // '#e50000',
    '#ff0000',
    '#ff1919',
    '#ff3232',
    '#ff4c4c',
    '#ff6666',
    '#ff7f7f',
    '#ff9999',
    '#ffb2b2'
    // '#ffcccc',
    // '#ffe5e5',
    // '#ffffff'
    ],
    'Sunrise': [
    '#FF8E74',
    '#FFB376',
    '#FFDF80',
    '#FFFA90',
    '#CBF2FF'],

    'Thanksgiving': [
    '#FFC300',
    '#FF6200',
    '#FF0000',
    '#CD0500',
    '#690F00'],

    'TurkeyFeast': [
    '#DE7600',
    '#BF7117',
    '#965811',
    '#9E4A0E',
    '#663715'],

    'TurkeyDinner': [
    { name: 'Salad', color: '#456905' },
    { name: 'Tabasco', color: '#B2A509' },
    { name: 'Turkey Girll', color: '#E0E610' },
    { name: 'Salmon', color: '#FE6823' },
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' },
    { name: 'Catch a turkey', color: '#AA5B00' }],

    'Police': [
    '#0000FF',
    '#FF0000',
    '#0000FF',
    '#0000FF',
    '#FF0000'],

    'Christmas': [
    '#FF3333',
    '#FFFFFF',
    '#FFFE99',
    '#33FF33'],

    'NewYears': [
    '#5B1D99',
    '#0074B4',
    '#00B34C',
    '#FFD41F',
    '#FC6E3D'],

    'Broadway': [
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99'],

    'America': [
    { name: 'White', color: '#FFFFFF' },
    { name: 'Old Glory Red', color: '#B22234' },
    { name: 'Old Glory Blue', color: '#404BC1' }],

    'Lightning': [
    { name: 'Lightning', color: '#E5F8FF' },
    { name: 'Dark night', color: '#050AF9' },
    { name: 'Dark night', color: '#070A8E' },
    { name: 'Dark night', color: '#0A0EC8' },
    { name: 'Dark night', color: '#0A0DAE' },
    { name: 'Dark night', color: '#2125D2' }] };
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//var Timer = {};
'use strict';
/*exported Sequence */
var Sequence = {
	All: function All(time) {
		return true;
	},
	Sequence: function Sequence(timer) {

	},
	Random: function Random(time) {

	} };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcXVlbmNlLmpzIl0sIm5hbWVzIjpbIlNlcXVlbmNlIiwiQWxsIiwidGltZSIsInRpbWVyIiwiUmFuZG9tIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxXQUFXO0FBQ2RDLE1BQUssYUFBU0MsSUFBVCxFQUFlO0FBQ25CLFNBQU8sSUFBUDtBQUNBLEVBSGE7QUFJZEYsV0FBVSxrQkFBU0csS0FBVCxFQUFlOztBQUV4QixFQU5hO0FBT2RDLFNBQVEsZ0JBQVNGLElBQVQsRUFBZTs7QUFFdEIsRUFUYSxFQUFmIiwiZmlsZSI6InNlcXVlbmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy92YXIgVGltZXIgPSB7fTtcbid1c2Ugc3RyaWN0Jztcbi8qZXhwb3J0ZWQgU2VxdWVuY2UgKi9cbnZhciBTZXF1ZW5jZSA9IHtcblx0QWxsOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdFNlcXVlbmNlOiBmdW5jdGlvbih0aW1lcil7XG5cdFx0XG5cdH0sIFxuXHRSYW5kb206IGZ1bmN0aW9uKHRpbWUpIHtcblxuXHR9XG59OyJdfQ==

/*
  Ambient Class  
  (c) 2014, Dmitry Sadakov, all rights reserved
*/

'use strict';
/*globals ColorThief, chrome, colorUtil*/
/*exported Ambient*/


var Ambient = function () {

	var dominantColors = [],
	updateHandlers = [],
	publicMethods = {},
	lastUpdate = null;

	// fields
	publicMethods.on = false;
	publicMethods.updateImage = false;
	publicMethods.changeBrightness = false;
	publicMethods.enablePrimary = false;
	publicMethods.mode = 'eye-ambient';

	function parseBrightness(color) {
		var helper = colorUtil();
		if (publicMethods.changeBrightness) {
			return helper.getBrightness(color);
		} else {
			return undefined;
		}
	}

	function onImageUpdated(image) {
		if (image === undefined) {
			return;
		}
		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			chrome.runtime.lastError = null;
		} else {
			var img = new Image();
			img.src = image;
			img.onload = function () {
				// get main colors
				var colorThief = new ColorThief();
				if (img && img.width == 0) {
					return; // this is an error
				}
				var colors = colorThief.getPalette(img, 8);
				if (!colors) {
					return;
				}

				lastUpdate = new Date();

				dominantColors = [];
				var helper = colorUtil();

				if (publicMethods.enablePrimary) {
					var primary = helper.rgbToHex(
					colors[0][0],
					colors[0][1],
					colors[0][2]);

					var bri = parseBrightness(primary);

					// thrice for ui.
					var color = { color: primary, bri: bri };
					dominantColors.push(color);
					dominantColors.push(color);
					dominantColors.push(color);

				} else {
					colors.forEach(function (color) {
						var hex = helper.rgbToHex(
						color[0],
						color[1],
						color[2]);

						var b = parseBrightness(hex);
						dominantColors.push({ color: hex, bri: b });
					});
				}
			};

			updateHandlers.forEach(function (handler) {
				handler(dominantColors, image);
			});
		}

		// do it again
		setTimeout(retryRequestImage, getDelay() * 500);
	}

	function retryRequestImage() {
		if (publicMethods.on || publicMethods.updateImage) {
			try {
				requestImage();
			} catch (e) {
				setTimeout(retryRequestImage, 1000);
				console.log(e);
			}
		}
	}

	function requestImage() {
		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			return;
		}
		if (typeof chrome !== 'undefined' &&
		chrome.tabs !== undefined &&
		chrome.tabs.captureVisibleTab !== undefined) {
			chrome.tabs.captureVisibleTab({ quality: 1 }, onImageUpdated);
			return true;
		}
		return false;
	}

	function getDelay() {
		switch (publicMethods.mode) {
			case 'eye-ambient':
				return 10;
			case 'eye-work':
				return 5;
			case 'eye-movie':
				return 1;
			case 'eye-gaming':
				return 0;
			default:
				return 1;}

	}

	publicMethods.definedBrightness = function () {
		if (publicMethods.changeBrightness === false) {
			return 255; // always bright
		}
		return undefined;
	};
	publicMethods.run = function () {
		return requestImage();
	};
	publicMethods.onUpdate = function (func) {
		updateHandlers = []; // clear for now, memory might go unused on multi-timed open popup
		updateHandlers.push(func);
	};
	// in seconds
	publicMethods.getDelay = function () {
		return getDelay();
	};
	publicMethods.getDominantColors = function (colorCount) {
		if (new Date() - lastUpdate > getDelay() * 1000) {// if more than delay
			retryRequestImage();
		}
		return dominantColors;
	};

	return publicMethods;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals $:false, Palettes:false, Ambient */
/*exported scenes */

'use strict';

var scenes = {
    'RelaxedRandom': {
        interval: 2000,
        Palette: Palettes.RomanticRed,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Romantic Red': {
        interval: 2000,
        Palette: Palettes.RomanticRed,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Valentines': {
        interval: 2000,
        Palette: Palettes.Valentines,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Christmas': {
        interval: 5000,
        Palette: Palettes.Christmas,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette, 5);
        },
        index: 0 },

    'New Years Fireworks': {
        interval: 500,
        Palette: Palettes.NewYears,
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);
        },
        index: 0 },

    '4th of July': {
        interval: 500,
        Palette: Palettes.America,
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);
        },
        index: 0 },

    'Broadway': {
        interval: 500,
        Palette: Palettes.Broadway,
        update: function update(lampIds) {
            scenes.Broadway.index++;
            if (scenes.Broadway.index >= lampIds.length) {
                scenes.Broadway.index = 0;
            }
            return scenes.one(lampIds, this.Palette, scenes.Broadway.index, 0);
        },
        index: 0 },

    'Police': {
        interval: 200,
        Palette: Palettes.Police,
        update: function update(lampIds) {
            scenes.Police.index++;
            if (scenes.Police.index >= this.Palette.length) {
                scenes.Police.index = 0;
            }
            return scenes.cycle(lampIds, this.Palette, scenes.Police.index, 0);
        },
        index: 0 },

    'Sunrise': {
        interval: 5000,
        Palette: Palettes.Sunrise,
        update: function update(lampIds) {
            scenes.Sunrise.index++;
            if (scenes.Sunrise.index >= this.Palette.length) {
                scenes.Sunrise.index = 0;
            }
            return scenes.cycle(lampIds, this.Palette, scenes.Sunrise.index, 5);
        },
        index: 0 },

    'Disco': {
        interval: 200,
        Palette: Palettes.Rainbow,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Thanksgiving': {
        interval: 2000,
        Palette: Palettes.Thanksgiving,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'TurkeyFeast': {
        interval: 5000,
        Palette: Palettes.TurkeyFeast,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'TurkeyDinner': {
        interval: 1000,
        Palette: Palettes.TurkeyDinner,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Lightning': {
        interval: 500,
        Palette: Palettes.Lightning,
        update: function update(lampIds) {
            return scenes.lightning(lampIds, this.Palette);
        } },

    'Ambient': {
        interval: 1000,
        Palette: Palettes.Empty,
        update: function update(lampIds) {
            var lightStates = [];

            var dominantColors = Ambient.getDominantColors();
            $.each(lampIds, function (index, val) {
                while (dominantColors.length <= index) {
                    index -= dominantColors.length;
                }
                var c = dominantColors[index];
                lightStates.push({
                    lamp: val,
                    color: c.color,
                    bri: c.bri,
                    transitionTime: Ambient.getDelay() * 10 });
            });
            return lightStates;
        } },

    makeArray: function makeArray(lampIds) {
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];
        }
        return lampIds;
    },
    one: function one(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        var lightStates = [];
        $.each(lampIds, function (index, val) {
            if (index === cycleIndex) {
                lightStates.push({ lamp: val, color: palette[1], transitionTime: transitionTime * 10 });
            } else {
                lightStates.push({ lamp: val, color: palette[0], transitionTime: transitionTime * 10 });
            }
        });

        return lightStates;
    },
    chain: function chain(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var chain = cycleIndex;
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        $.each(lampIds, function (index, val) {
            chain++;
            if (palette.length <= chain) {
                chain = 0; // need to circle back if length larger
            }
            var co = palette[chain];
            lightStates.push({ lamp: val, color: co, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    cycle: function cycle(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var color = palette[cycleIndex];
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        $.each(lampIds, function (index, val) {
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    randomPallete: function randomPallete(lampIds, palette, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        var lightStates = [];
        $.each(lampIds, function (index, val) {
            var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    findScene: function findScene(name) {
        for (var key in scenes) {
            if (key.toLowerCase() === name.toLowerCase()) {
                return key;
            }
        }
        return null;
    },
    fireworks: function fireworks(lampIds, palette) {
        var lightStates = [];

        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            if (Math.random() > 0.6) {
                var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
                lightStates.push({ lamp: val, color: color, bri: 255, transitionTime: 0 });
            } else {
                var random = Math.floor(Math.random() * (15 - 6 + 1) + 6);
                lightStates.push({ lamp: val, bri: -255, transitionTime: random });
            }
        }
        return lightStates;
    },
    lightning: function lightning(lampIds, palette) {
        var lightStates = [];

        var isLightning = Math.random() < 0.1;
        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            var color = palette[Math.round(Math.random() * (palette.length - 2)) + 1]; // random after the first
            if (isLightning) {
                var bri = Math.round(Math.random() * 100) + 155;
                lightStates.push({ lamp: val, color: color, bri: bri, transitionTime: 0 });
            } else {
                lightStates.push({ lamp: val, color: color, bri: -255, transitionTime: 3 });
            }

        }
        return lightStates;
    } };
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals scenes */
/*exported sceneCommander */

'use strict';

var sceneCommander = function sceneCommander($, hue) {
    var logger = null,
    scene = null,
    sceneTimer = null,
    sceneStart = function sceneStart(sceneName, lampIds)
    {
        sceneStop();
        log('Starting scene ' + sceneName);
        var sceneKey = scenes.findScene(sceneName);
        if (sceneKey === null) {
            // might be programmed into the bridge already:
            var state = hue.getState();
            if (state.scenes[sceneName] !== undefined) {
                hue.startScene(sceneName);
            }
        } else {
            scene = scenes[sceneKey];
            if (scene.interval === 0) {
                // one time hit
                setTimeout(sceneUpdate, 10);
            } else
            {
                // counter
                sceneTimer = setInterval(function intervaledSceneUpdate() {
                    sceneUpdate(lampIds);
                }, Math.round(scene.interval * lampIds.length / 3));
                sceneUpdate(lampIds); // start now.
            }
        }
    },
    sceneStop = function sceneStop() {
        log('Stop scenes');
        clearInterval(sceneTimer);
        scene = null;
    },

    sceneUpdate = function sceneUpdate(lampIds) {
        log('Updating scenes');
        if (scene === null) {
            clearInterval(sceneTimer);
        } else {
            var lightStates = scene.update(lampIds);
            $(lightStates).each(function setSceneState(index, state) {
                var time = state.transitionTime;
                if (state.color !== undefined) {
                    var co = state.color.color !== undefined ? state.color.color : state.color;
                    log('setting color: ' + state.lamp + ' = ' + co);
                    hue.setColor(state.lamp, co.substring(1), time, state.bri);
                } else if (state.bri !== undefined) {
                    hue.brighten(state.lamp, state.bri, time);
                }
            });
        }
    },
    log = function log(text) {
        if (logger !== null) {
            logger(text);
        }
    };


    return {
        executing: function executing() {
            return scene; // null if none
        },
        sceneExists: function sceneExists(sceneName) {
            return scenes[sceneName] !== undefined;
        },
        start: function start(sceneName, actors) {
            sceneStart(sceneName, actors);
        },
        stop: function stop() {
            sceneStop();
        },
        palette: function palette(colors) {
            scenes.RelaxedRandom.Palette = colors;
        },
        setLogger: function setLogger(logHandler) {
            logger = logHandler;
        } };

};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjZW5lQ29tbWFuZGVyLmpzIl0sIm5hbWVzIjpbInNjZW5lQ29tbWFuZGVyIiwiJCIsImh1ZSIsImxvZ2dlciIsInNjZW5lIiwic2NlbmVUaW1lciIsInNjZW5lU3RhcnQiLCJzY2VuZU5hbWUiLCJsYW1wSWRzIiwic2NlbmVTdG9wIiwibG9nIiwic2NlbmVLZXkiLCJzY2VuZXMiLCJmaW5kU2NlbmUiLCJzdGF0ZSIsImdldFN0YXRlIiwidW5kZWZpbmVkIiwic3RhcnRTY2VuZSIsImludGVydmFsIiwic2V0VGltZW91dCIsInNjZW5lVXBkYXRlIiwic2V0SW50ZXJ2YWwiLCJpbnRlcnZhbGVkU2NlbmVVcGRhdGUiLCJNYXRoIiwicm91bmQiLCJsZW5ndGgiLCJjbGVhckludGVydmFsIiwibGlnaHRTdGF0ZXMiLCJ1cGRhdGUiLCJlYWNoIiwic2V0U2NlbmVTdGF0ZSIsImluZGV4IiwidGltZSIsInRyYW5zaXRpb25UaW1lIiwiY29sb3IiLCJjbyIsImxhbXAiLCJzZXRDb2xvciIsInN1YnN0cmluZyIsImJyaSIsImJyaWdodGVuIiwidGV4dCIsImV4ZWN1dGluZyIsInNjZW5lRXhpc3RzIiwic3RhcnQiLCJhY3RvcnMiLCJzdG9wIiwicGFsZXR0ZSIsImNvbG9ycyIsIlJlbGF4ZWRSYW5kb20iLCJQYWxldHRlIiwic2V0TG9nZ2VyIiwibG9nSGFuZGxlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQTtBQUNBOztBQUVBOztBQUVBLElBQUlBLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBVUMsQ0FBVixFQUFhQyxHQUFiLEVBQWtCO0FBQ25DLFFBQUlDLFNBQVMsSUFBYjtBQUNJQyxZQUFRLElBRFo7QUFFSUMsaUJBQWEsSUFGakI7QUFHSUMsaUJBQWEsU0FBYkEsVUFBYSxDQUFTQyxTQUFULEVBQW9CQyxPQUFwQjtBQUNiO0FBQ0NDO0FBQ0dDLFlBQUksb0JBQW9CSCxTQUF4QjtBQUNBLFlBQUlJLFdBQVdDLE9BQU9DLFNBQVAsQ0FBaUJOLFNBQWpCLENBQWY7QUFDQSxZQUFJSSxhQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0EsZ0JBQUlHLFFBQVFaLElBQUlhLFFBQUosRUFBWjtBQUNBLGdCQUFJRCxNQUFNRixNQUFOLENBQWFMLFNBQWIsTUFBNEJTLFNBQWhDLEVBQTJDO0FBQ3ZDZCxvQkFBSWUsVUFBSixDQUFlVixTQUFmO0FBQ0g7QUFDSixTQU5ELE1BTU87QUFDSEgsb0JBQVFRLE9BQU9ELFFBQVAsQ0FBUjtBQUNBLGdCQUFJUCxNQUFNYyxRQUFOLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3pCO0FBQ0FDLDJCQUFXQyxXQUFYLEVBQXdCLEVBQXhCO0FBQ0EsYUFIRDtBQUlLO0FBQ0o7QUFDQWYsNkJBQWFnQixZQUFZLFNBQVNDLHFCQUFULEdBQWlDO0FBQ25ERixnQ0FBWVosT0FBWjtBQUNILGlCQUZTLEVBRVBlLEtBQUtDLEtBQUwsQ0FBV3BCLE1BQU1jLFFBQU4sR0FBaUJWLFFBQVFpQixNQUF6QixHQUFrQyxDQUE3QyxDQUZPLENBQWI7QUFHR0wsNEJBQVlaLE9BQVosRUFMQyxDQUtxQjtBQUM1QjtBQUNEO0FBQ0osS0E1Qkw7QUE2QklDLGdCQUFZLFNBQVpBLFNBQVksR0FBVTtBQUNsQkMsWUFBSSxhQUFKO0FBQ0FnQixzQkFBY3JCLFVBQWQ7QUFDQUQsZ0JBQVEsSUFBUjtBQUNILEtBakNMOztBQW1DSWdCLGtCQUFjLFNBQWRBLFdBQWMsQ0FBU1osT0FBVCxFQUFpQjtBQUMzQkUsWUFBSSxpQkFBSjtBQUNBLFlBQUdOLFVBQVUsSUFBYixFQUFtQjtBQUNmc0IsMEJBQWNyQixVQUFkO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsZ0JBQUlzQixjQUFjdkIsTUFBTXdCLE1BQU4sQ0FBYXBCLE9BQWIsQ0FBbEI7QUFDQVAsY0FBRTBCLFdBQUYsRUFBZUUsSUFBZixDQUFvQixTQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QmpCLEtBQTlCLEVBQXFDO0FBQ3JELG9CQUFJa0IsT0FBT2xCLE1BQU1tQixjQUFqQjtBQUNBLG9CQUFJbkIsTUFBTW9CLEtBQU4sS0FBZ0JsQixTQUFwQixFQUErQjtBQUM5Qix3QkFBSW1CLEtBQUtyQixNQUFNb0IsS0FBTixDQUFZQSxLQUFaLEtBQXNCbEIsU0FBdEIsR0FBa0NGLE1BQU1vQixLQUFOLENBQVlBLEtBQTlDLEdBQXNEcEIsTUFBTW9CLEtBQXJFO0FBQ0d4Qix3QkFBSSxvQkFBb0JJLE1BQU1zQixJQUExQixHQUFpQyxLQUFqQyxHQUF5Q0QsRUFBN0M7QUFDQWpDLHdCQUFJbUMsUUFBSixDQUFhdkIsTUFBTXNCLElBQW5CLEVBQXlCRCxHQUFHRyxTQUFILENBQWEsQ0FBYixDQUF6QixFQUEwQ04sSUFBMUMsRUFBZ0RsQixNQUFNeUIsR0FBdEQ7QUFDSCxpQkFKRCxNQUlPLElBQUl6QixNQUFNeUIsR0FBTixLQUFjdkIsU0FBbEIsRUFBNkI7QUFDaENkLHdCQUFJc0MsUUFBSixDQUFhMUIsTUFBTXNCLElBQW5CLEVBQXlCdEIsTUFBTXlCLEdBQS9CLEVBQW9DUCxJQUFwQztBQUNIO0FBQ0osYUFURDtBQVVIO0FBQ0osS0FwREw7QUFxREl0QixVQUFNLFNBQU5BLEdBQU0sQ0FBVStCLElBQVYsRUFBZTtBQUNqQixZQUFJdEMsV0FBVyxJQUFmLEVBQXFCO0FBQ2pCQSxtQkFBT3NDLElBQVA7QUFDSDtBQUNKLEtBekRMOzs7QUE0REEsV0FBTztBQUNOQyxtQkFBVyxxQkFBVTtBQUNwQixtQkFBT3RDLEtBQVAsQ0FEb0IsQ0FDTjtBQUNkLFNBSEs7QUFJSHVDLHFCQUFhLHFCQUFTcEMsU0FBVCxFQUFvQjtBQUN0QyxtQkFBT0ssT0FBT0wsU0FBUCxNQUFzQlMsU0FBN0I7QUFDTSxTQU5FO0FBT0g0QixlQUFPLGVBQVNyQyxTQUFULEVBQW9Cc0MsTUFBcEIsRUFBNEI7QUFDeEN2Qyx1QkFBV0MsU0FBWCxFQUFzQnNDLE1BQXRCO0FBQ00sU0FURTtBQVVIQyxjQUFNLGdCQUFXO0FBQ3RCckM7QUFDTSxTQVpFO0FBYUhzQyxpQkFBUyxpQkFBU0MsTUFBVCxFQUFpQjtBQUN0QnBDLG1CQUFPcUMsYUFBUCxDQUFxQkMsT0FBckIsR0FBK0JGLE1BQS9CO0FBQ0gsU0FmRTtBQWdCSEcsbUJBQVcsbUJBQVNDLFVBQVQsRUFBcUI7QUFDNUJqRCxxQkFBU2lELFVBQVQ7QUFDSCxTQWxCRSxFQUFQOztBQW9CSCxDQWpGRCIsImZpbGUiOiJzY2VuZUNvbW1hbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2NlbmUgQ29tbWFuZGVyXG4gKiBEZXBlbmRlbmNpZXM6XG4gKiAgICAtIGpRdWVyeSAxLjguM1xuICogICAgLSBjb2xvcnMuanMgKHBhY2thZ2VkIGFsb25nc2lkZSB0aGlzIGZpbGUpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRG1pdHJ5IFNhZGFrb3YsIEFsbCByaWdodHMgcmVzZXJ2ZWQuICovXG5cbi8qZ2xvYmFscyBzY2VuZXMgKi9cbi8qZXhwb3J0ZWQgc2NlbmVDb21tYW5kZXIgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2NlbmVDb21tYW5kZXIgPSBmdW5jdGlvbiAoJCwgaHVlKSB7IFxuICAgIHZhciBsb2dnZXIgPSBudWxsLFxuICAgICAgICBzY2VuZSA9IG51bGwsXG4gICAgICAgIHNjZW5lVGltZXIgPSBudWxsLFxuICAgICAgICBzY2VuZVN0YXJ0ID0gZnVuY3Rpb24oc2NlbmVOYW1lLCBsYW1wSWRzKSBcbiAgICAgICAge1xuICAgICAgICBcdHNjZW5lU3RvcCgpOyBcbiAgICAgICAgICAgIGxvZygnU3RhcnRpbmcgc2NlbmUgJyArIHNjZW5lTmFtZSk7XG4gICAgICAgICAgICB2YXIgc2NlbmVLZXkgPSBzY2VuZXMuZmluZFNjZW5lKHNjZW5lTmFtZSk7XG4gICAgICAgICAgICBpZiAoc2NlbmVLZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBtaWdodCBiZSBwcm9ncmFtbWVkIGludG8gdGhlIGJyaWRnZSBhbHJlYWR5OlxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGh1ZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zY2VuZXNbc2NlbmVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGh1ZS5zdGFydFNjZW5lKHNjZW5lTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2VuZSA9IHNjZW5lc1tzY2VuZUtleV07XG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lLmludGVydmFsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgXHQvLyBvbmUgdGltZSBoaXRcbiAgICAgICAgICAgICAgICBcdHNldFRpbWVvdXQoc2NlbmVVcGRhdGUsIDEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXHQvLyBjb3VudGVyXG4gICAgXHQgICAgICAgICAgICBzY2VuZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gaW50ZXJ2YWxlZFNjZW5lVXBkYXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVVcGRhdGUobGFtcElkcyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIE1hdGgucm91bmQoc2NlbmUuaW50ZXJ2YWwgKiBsYW1wSWRzLmxlbmd0aCAvIDMpKTsgXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lVXBkYXRlKGxhbXBJZHMpOyAvLyBzdGFydCBub3cuXG4gICAgXHQgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2NlbmVTdG9wID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvZygnU3RvcCBzY2VuZXMnKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2NlbmVUaW1lcik7XG4gICAgICAgICAgICBzY2VuZSA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2NlbmVVcGRhdGUgPSBmdW5jdGlvbihsYW1wSWRzKXtcbiAgICAgICAgICAgIGxvZygnVXBkYXRpbmcgc2NlbmVzJyk7XG4gICAgICAgICAgICBpZihzY2VuZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2NlbmVUaW1lcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsaWdodFN0YXRlcyA9IHNjZW5lLnVwZGF0ZShsYW1wSWRzKTtcbiAgICAgICAgICAgICAgICAkKGxpZ2h0U3RhdGVzKS5lYWNoKGZ1bmN0aW9uIHNldFNjZW5lU3RhdGUoaW5kZXgsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gc3RhdGUudHJhbnNpdGlvblRpbWU7IFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBcdHZhciBjbyA9IHN0YXRlLmNvbG9yLmNvbG9yICE9PSB1bmRlZmluZWQgPyBzdGF0ZS5jb2xvci5jb2xvciA6IHN0YXRlLmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCdzZXR0aW5nIGNvbG9yOiAnICsgc3RhdGUubGFtcCArICcgPSAnICsgY28pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHVlLnNldENvbG9yKHN0YXRlLmxhbXAsIGNvLnN1YnN0cmluZygxKSwgdGltZSwgc3RhdGUuYnJpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5icmkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHVlLmJyaWdodGVuKHN0YXRlLmxhbXAsIHN0YXRlLmJyaSwgdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9nID0gZnVuY3Rpb24gKHRleHQpe1xuICAgICAgICAgICAgaWYgKGxvZ2dlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlcih0ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gXG4gICAgcmV0dXJuIHtcbiAgICBcdGV4ZWN1dGluZzogZnVuY3Rpb24oKXtcbiAgICBcdFx0cmV0dXJuIHNjZW5lOyAvLyBudWxsIGlmIG5vbmVcbiAgICBcdH0sXG4gICAgICAgIHNjZW5lRXhpc3RzOiBmdW5jdGlvbihzY2VuZU5hbWUpIHtcblx0XHRcdHJldHVybiBzY2VuZXNbc2NlbmVOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogZnVuY3Rpb24oc2NlbmVOYW1lLCBhY3RvcnMpIHtcblx0XHRcdHNjZW5lU3RhcnQoc2NlbmVOYW1lLCBhY3RvcnMpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcblx0XHRcdHNjZW5lU3RvcCgpO1xuICAgICAgICB9LFxuICAgICAgICBwYWxldHRlOiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgICAgIHNjZW5lcy5SZWxheGVkUmFuZG9tLlBhbGV0dGUgPSBjb2xvcnM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldExvZ2dlcjogZnVuY3Rpb24obG9nSGFuZGxlcikge1xuICAgICAgICAgICAgbG9nZ2VyID0gbG9nSGFuZGxlcjtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl19

"use strict";

/// supports three types of dates from the hue bridge: alarm or timer.
// timers are split up:
// date-time strings 2014-09-20T19:35:26 + randomized time 20h
// Weekly reoccurences at a specific time: W032/T19:45:00 repeats Tuesday at 7:45 pm.
// alarm
var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var HueTime = function () {
  function HueTime(input) {_classCallCheck(this, HueTime);

    this.dateTime = null;
    this.timerTime = null;
    this.randomizedTime = null;
    this.recurringDay = null;
    this.numberOfRecurrences = null;

    this.humanTime = '';
    this.humanDate = '';
    this.humanRandomTime = '';
    this.humanRepeats = '';

    this.hueString = null;

    if (input) this.parse(input);
  }_createClass(HueTime, [{ key: 'recurringDayName', value: function recurringDayName(


















    bitmask) {
      var obj = HueTime.Recurrings;
      var res = '';
      var weekend = (obj.weekend & bitmask) == obj.weekend;
      var weekday = (obj.weekday & bitmask) == obj.weekday;
      if ((obj.day & bitmask) == obj.day) return 'day';

      for (var prop in obj) {
        if (obj[prop] > 0 && (
        obj[prop] == obj.weekday || !weekday && 2 < obj[prop] && obj[prop] <= 64 ||
        obj[prop] == obj.weekend || !weekend && obj[prop] <= 2) &&
        (obj[prop] & bitmask) == obj[prop]) {
          res += ', ' + prop;
        }
      }
      if (res.length > 0) return res.substr(2);
      return 'Never';
    } }, { key: 'parse', value: function parse(

    input) {
      // if starts with W, R, 
      if (!input) return;
      var parser = input.substring(0, 1);
      switch (parser) {
        case 'W':
          //days recurring (optional random time)
          var match = /W(\d{1,3})\/T([0-9:]+)(A([0-9:]+))?/g.exec(input);
          if (match[1]) this.recurringDay = Number(match[1]);
          if (match[2]) this.timerTime = match[2];
          if (match[4]) this.randomizedTime = match[4];
          break;

        case 'R':
        case 'P':
          // timers (optional recurrences and random time)
          var match = /(R(\d{2})?\/)?PT([0-9:]+)(A([0-9:]+))?/g.exec(input);
          if (match[2]) {
            this.numberOfRecurrences = Number(match[2]);
          } else if (match[1]) {
            this.numberOfRecurrences = 0; // infinate loop
          }
          if (match[3]) this.timerTime = match[3];
          if (match[5]) this.randomizedTime = match[5];
          break;

        default:
          // usual date time with optional random time
          var match = /([0-9\-]+)T([0-9:]+)(A([0-9:]+))?/g.exec(input);
          // straight date: var matches = new Date(input).toISOString().slice(0,-5);
          if (match[1] && match[2]) this.dateTime = match[1] + 'T' + match[2]; // [YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]
          if (match[4]) this.randomizedTime = match[4]; // [YYYY]:[MM]:[DD]T[hh]:[mm]:[ss]A[hh]:[mm]:[ss]
          break;}


      if (this.dateTime) {
        this.m = moment.utc(this.dateTime).local();
        this.humanDate = this.m.format("MMMM Do YYYY");
      }
      if (this.timerTime) {
        this.m = moment.utc(this.timerTime, 'hh:mm:ss').local();
      }
      this.humanTime = this.m.format("h:mm A");
      this.sortkey = this.m.valueOf();

      if (this.randomizedTime) {
        //huetime.m.subtract(moment.duration('00:09:00').asMilliseconds() / 2 )
        var d = moment.duration(this.randomizedTime, 'hh:mm:ss');
        this.humanRandomTime = d.asMinutes() + ' min';
        this.humanTime = this.m.subtract(d.asMilliseconds() / 2).format("h:mm A");
        this.sortkey = this.m.subtract(d.asMilliseconds() / 2).valueOf();
        this.humanTime += ' ~ ' + this.m.add(d).format("h:mm A");
      }

      this.humanRepeats = this.humanReoccurences(this);
      this.hueString = this.toString();

      var input = input;
      var s = this.humanTime + '; ' + this.humanDate + ' ' + this.humanRepeats;

    } }, { key: 'humanReoccurences', value: function humanReoccurences(

    hueTime) {
      var rep = '';
      if (hueTime.recurringDay) {
        rep = hueTime.recurringDayName(this.recurringDay) + ' ';
      }
      if (hueTime.numberOfRecurrences) {
        rep = hueTime.numberOfRecurrences + ' time';
        if (hueTime.numberOfRecurrences > 1) {
          rep += 's ';
        }
      }
      return rep;
    } }, { key: 'pad', value: function pad(

    n, width, z) {
      z = z || '0';
      n = n + '';
      return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
    } }, { key: 'toString', value: function toString()

    {
      var returnValue = null;
      if (this.recurringDay) //recurrenceday
        {
          returnValue = 'W' + this.pad(this.recurringDay, 3) + '/T' + this.timerTime;
        } else
      if (this.timerTime) // timertime only when in timers and weekdays
        {
          returnValue = 'PT' + this.timerTime;

          //Recurrences (only with timers)
          if (this.numberOfRecurrences)
          {
            returnValue = 'R' + this.numberOfRecurrences + '/' + returnValue;
          } else if (this.numberOfRecurrences === 0) {
            returnValue = 'R/' + returnValue;
          }
        } else

      {
        returnValue = this.dateTime;
      }

      if (this.randomizedTime) {
        returnValue += 'A' + this.randomizedTime;
      }

      return returnValue;
    } }, { key: 'toHumanString', value: function toHumanString()

    {
      return this.humanTime + '; ' + this.humanDate + ' ' + this.humanRepeats;
    } }], [{ key: 'Recurrings', get: function get() {// bitmap 0MTWTFSS 
      return { 'Monday': 64, 'Tuesday': 32, 'Wednesday': 16, 'Thursday': 8, 'Friday': 4, 'Saturday': 2, 'Sunday': 1, 'weekday': 124, 'weekend': 3, 'every day': 127, 'never': 0 };} }]);return HueTime;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Copyright (c) 2015 Dmitry Sadakov; All rights reserve
*/

'use strict';

/*globals trackState,AjaxLite */
/*exported HueDiscoverer */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

MeetHueLookup = function () {
    function MeetHueLookup(AjaxLite) {_classCallCheck(this, MeetHueLookup);
        this.AjaxLite = AjaxLite;
    }_createClass(MeetHueLookup, [{ key: 'discover', value: function discover()
        {var _this = this;
            return new Promise(function (resolveCallback, reject) {
                console.log('Requesting https://discovery.meethue.com.');
                var nupnp = 'https://discovery.meethue.com';
                _this.AjaxLite.ajax({
                    url: nupnp,
                    dataType: 'json',
                    success: function success(data) {
                        trackState('nunpnp', data);
                        if (data !== null && data.length > 0) {
                            var ips = [];
                            data.forEach(function (bridgeInfo, index) {
                                var bridgeIP = bridgeInfo.internalipaddress;
                                if (bridgeIP !== '0.0.0.0') {
                                    ips.push(bridgeIP);
                                }
                            });
                            resolveCallback(ips);
                        } else {
                            console.log('meethue portal did not return');
                            reject([]);
                        }
                    },
                    error: function error(err) {
                        reject(err);
                    } });

            });
        } }]);return MeetHueLookup;}();var


BruteForcer = function () {function BruteForcer() {_classCallCheck(this, BruteForcer);}_createClass(BruteForcer, null, [{ key: 'ips', value: function ips()
        {
            var ips = [];
            var i = 0;
            for (i = 1; i < 8; i++) {ips.push('10.0.1.' + i);} // mac: 10.0.1.1-20
            for (i = 1; i < 8; i++) {ips.push('192.168.0.' + i);} // win: 192.168.0.1-20
            for (i = 0; i < 8; i++) {ips.push('192.168.0.' + (100 + i));} // win: 192.168.1.100-120
            for (i = 1; i < 8; i++) {ips.push('192.168.1.' + i);} // win: 192.168.1.1-20

            return ips;
        } }]);return BruteForcer;}();var


HueBridge = function () {_createClass(HueBridge, [{ key: 'status', value: function status()

        {
            return this.status;
        } }]);

    function HueBridge($, storage, bridgeIP, appName, lastUsername, onNeedAuthorization, onAuthorized, onError, retryCount) {_classCallCheck(this, HueBridge);
        // todo: remove storage from HueBridge
        this.$ = $;

        // defaults
        if (!lastUsername) {
            lastUsername = '123-bogus';
        }
        this.ip = bridgeIP;
        this.appname = appName;
        this.username = lastUsername;

        this.baseUrl = 'http://' + this.ip + '/api';
        this.baseApiUrl = this.baseUrl + '/' + this.username;
        this.status = 'init'; // found, notauthorized, ready, error

        this.timeoutAuthCounter = 0;
        this.retryCount = retryCount || 0;

        this.onNeedAuthorization = onNeedAuthorization;
        this.onAuthorized = onAuthorized;
        this.onError = onError;

    }_createClass(HueBridge, [{ key: 'log', value: function log(

        text) {
            var message = 'hueBridge (' + this.ip + '): ' + text;
            console.log(message);
        } }, { key: 'getLightState', value: function getLightState(
        successCallback) {var _this2 = this;
            try {
                var options = {
                    dataType: 'json',
                    url: this.baseApiUrl + '/lights',
                    success: function success(data) {
                        _this2.timeoutAuthCounter = 0;
                        _this2.onGotLightState(data, successCallback);
                    },
                    error: function error(data) {return _this2.onAuthError(data);},
                    timeout: 2000 };

                this.$.ajax(options);
            } catch (err) {
                this.onAuthError(err);
            }
        } }, { key: 'getBridgeState', value: function getBridgeState(
        successCallback) {var _this3 = this;
            try {
                var options = {
                    dataType: 'json',
                    url: this.baseApiUrl,
                    success: function success(data) {return _this3.onGotBridgeState(data, successCallback);}, // lighter bag of data
                    error: function error(data) {return _this3.onAuthError(data);},
                    timeout: 5000 };

                this.$.ajax(options);
            } catch (err) {
                this.onAuthError(err);
            }
        } }, { key: 'onAuthError', value: function onAuthError(
        err) {
            if (err.statusText === 'timeout' || err.status === 0) {
                this.timeoutAuthCounter++;
                this.log('Bridge error timeout: ' + this.ip);
                if (this.timeoutAuthCounter >= this.retryCount) {
                    this.timeoutAuthCounter = 0;
                    if (this.retryCount !== 0) {
                        this.log('too many timeouts with IP ' + this.baseUrl);
                    }
                    this.onError(this.ip, 'Timeout', 'Too many timeouts on: ' + this.baseUrl);
                } else {
                    this.log('timeout on auth: ' + err.statusText + ' retry #' + this.timeoutAuthCounter);
                    this.getBridgeState(); // retry
                }
            } else {//if (err.statusText !== 'error') {
                this.log('error on auth: ' + err.statusText);
                this.status = 'error';
                this.onError(this.ip, 'Error', 'Unknown error: ' + err.statusText);
            } // what now?
        } }, { key: 'onGotLightState', value: function onGotLightState(
        data, successCallback) {
            for (var i = 1; i < 100; i++) {
                if (data.hasOwnProperty(i.toString()) && data[i.toString()].hasOwnProperty('manufacturername')) {
                    // indeed a light response.
                    data = { 'lights': data };
                }
            }
            this.onGotBridgeState(data, successCallback);
        } }, { key: 'onGotBridgeState', value: function onGotBridgeState(
        data, successCallback) {
            if (Array.isArray(data)) {
                data = data[0]; // take first
            }
            this.timeoutAuthCounter = 0;
            if (data.hasOwnProperty('error'))
            {
                if (data.error.description === 'unauthorized user') {
                    this.log('Not authorized with bridge ' + this.ip + ', registering...');
                    this.retryCounter++;
                    this.status = 'found';
                    // bridgeAuth
                    this.addUser();
                } else {
                    this.status = 'error';
                    this.onError(this.ip, 'Error', 'Error: ' + data.error.description);
                }
            } else
            if (data.hasOwnProperty('lights'))
            {
                this.status = 'ready';
                this.log('Bridge ready ' + this.ip);
                this.retryCounter = 0;
                (successCallback || this.onAuthorized)(this, this.ip, this.username, 'Ready', data);
            }
        } }, { key: 'addUser', value: function addUser()
        {var _this4 = this;
            this.log('adding user...');
            var dataString = JSON.stringify({ devicetype: this.appname }); // no username - bridge generates it
            this.log(dataString);
            this.$.ajax({
                url: this.baseUrl,
                type: 'POST',
                data: dataString,
                success: function success(data) {return _this4.onAddUserResponse(data);},
                error: function error(data) {return _this4.unauthorized();} });

        } }, { key: 'onAddUserResponse', value: function onAddUserResponse(
        response) {
            this.log(JSON.stringify(response));
            if (response[0].hasOwnProperty('error'))
            {
                this.unauthorized(response);
            } else
            if (response[0].hasOwnProperty('success'))
            {
                this.username = response[0].success.username;
                this.baseApiUrl = this.baseUrl + '/' + this.username;
                this.status = 'ready';
                this.log('Authorization successful');
                // request success message from actual bridge:
                this.getBridgeState();
            }
        } }, { key: 'unauthorized', value: function unauthorized(
        response) {
            if (!response) {
                this.onError(this.ip, 'Error', 'Request cancelled');
            } else
            if (response[0].error.description === 'link button not pressed') {
                this.status = 'needauthorization';
                this.onNeedAuthorization(this.ip, this.username, 'NeedAuthorization', response); // changed signature
                this.onError(this.ip, 'Error', 'Need authentication: ' + response[0].error.description);
            } else {
                this.status = 'error';
                this.onError(this.ip, 'Error', 'Error: ' + response[0].error.description);
            }
        } }, { key: 'ip', value: function ip()
        {
            return this.ip;
        } }, { key: 'username', value: function username()
        {
            return this.username;
        } }, { key: 'getStatus', value: function getStatus()
        {
            return this.status;
        } }]);return HueBridge;}();var




HueDiscoverer = function () {
    function HueDiscoverer(AjaxLite, storage, appname, onNeedAuthorization) {_classCallCheck(this, HueDiscoverer);
        this.AjaxLite = AjaxLite;
        this.storage = storage;
        this.appname = appname;
        this.onNeedAuthorization = onNeedAuthorization;
        this.self = this;
    }_createClass(HueDiscoverer, [{ key: 'bridgeThenable', value: function bridgeThenable(
        ip) {var _this5 = this;
            var bridgeThenable = new Promise(function (resolve, reject) {
                if (!ip) {
                    reject(ip);
                    return;
                }

                var bridge = null;

                function onResolve(ip, status, message) {
                    resolve(bridge, ip, status, message);
                }
                function onReject(ip, status, message) {
                    reject(bridge, ip, status, message);
                }

                bridge = new HueBridge(_this5.AjaxLite, _this5.storage, ip, _this5.appname, _this5.username,
                _this5.onNeedAuthorization,
                function (ip, status, message) {return onResolve(bridge, status, message);},
                function (ip, status, message) {return onReject(bridge, status, message);});
                bridge.getLightState();
            });
            return bridgeThenable;
        } }, { key: 'start', value: function start(
        ip) {var _this6 = this;var brute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            function getIP() {
                return this.storage.get('lastBridgeIp');
            }
            function getUsername() {
                return this.storage.get('lastUsername');
            }
            function saveIP(ip) {
                this.ip = ip;
            }
            return new Promise(function (resolve, reject) {

                var promise = _this6.self.storage.get('lastBridgeIp').
                then(function (ip) {
                    _this6.self.ip = ip;
                    return _this6.self.storage.get('lastUsername');
                }).
                then(function (val) {return _this6.self.username = val;}).
                then(function () {
                    var promises = [];
                    if (ip) {
                        promises.push(_this6.self.bridgeThenable(ip)); // from arguments
                    }
                    if (_this6.self.ip) {
                        promises.push(_this6.self.bridgeThenable(_this6.self.ip)); // from storage
                    }
                    return promises.length != 0 ? Promise.any(promises) : Promise.reject();
                }).
                catch(function () {
                    var promises = [];
                    var meethuePromise = new Promise(function (resolve, reject) {
                        return new MeetHueLookup(_this6.self.AjaxLite).discover().then(function (ips) {
                            var bridges = [];var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
                                for (var _iterator = ips[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var i = _step.value;
                                    bridges.push(_this6.self.bridgeThenable(i));
                                }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}
                            Promise.any(bridges).then(function (bridges) {return resolve(bridges[0]);}, function () {return reject();});
                        }, function () {return reject();});
                    });
                    promises.push(meethuePromise);

                    if (brute === true) {
                        var ips = BruteForcer.ips();var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {
                            for (var _iterator2 = ips[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var i = _step2.value;
                                if (i !== _this6.self.ip && i !== ip) {
                                    promises.push(_this6.self.bridgeThenable(i)); // 84 requests
                                }
                            }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}
                    }
                    return Promise.any(promises);
                }).
                then(function (bridges) {
                    _this6.self.storage.set('lastBridgeIp', bridges[0].ip);
                    _this6.self.storage.set('lastUsername', bridges[0].username);
                    resolve(bridges[0]);
                }).
                catch(function () {
                    reject();
                });

                //resolve();
                return promise;
            });
        } }]);return HueDiscoverer;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh1ZURpc2NvdmVyLmpzIl0sIm5hbWVzIjpbIk1lZXRIdWVMb29rdXAiLCJBamF4TGl0ZSIsIlByb21pc2UiLCJyZXNvbHZlQ2FsbGJhY2siLCJyZWplY3QiLCJjb25zb2xlIiwibG9nIiwibnVwbnAiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidHJhY2tTdGF0ZSIsImRhdGEiLCJsZW5ndGgiLCJpcHMiLCJmb3JFYWNoIiwiYnJpZGdlSW5mbyIsImluZGV4IiwiYnJpZGdlSVAiLCJpbnRlcm5hbGlwYWRkcmVzcyIsInB1c2giLCJlcnJvciIsImVyciIsIkJydXRlRm9yY2VyIiwiaSIsIkh1ZUJyaWRnZSIsInN0YXR1cyIsIiQiLCJzdG9yYWdlIiwiYXBwTmFtZSIsImxhc3RVc2VybmFtZSIsIm9uTmVlZEF1dGhvcml6YXRpb24iLCJvbkF1dGhvcml6ZWQiLCJvbkVycm9yIiwicmV0cnlDb3VudCIsImlwIiwiYXBwbmFtZSIsInVzZXJuYW1lIiwiYmFzZVVybCIsImJhc2VBcGlVcmwiLCJ0aW1lb3V0QXV0aENvdW50ZXIiLCJ0ZXh0IiwibWVzc2FnZSIsInN1Y2Nlc3NDYWxsYmFjayIsIm9wdGlvbnMiLCJvbkdvdExpZ2h0U3RhdGUiLCJvbkF1dGhFcnJvciIsInRpbWVvdXQiLCJvbkdvdEJyaWRnZVN0YXRlIiwic3RhdHVzVGV4dCIsImdldEJyaWRnZVN0YXRlIiwiaGFzT3duUHJvcGVydHkiLCJ0b1N0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsImRlc2NyaXB0aW9uIiwicmV0cnlDb3VudGVyIiwiYWRkVXNlciIsImRhdGFTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZGV2aWNldHlwZSIsInR5cGUiLCJvbkFkZFVzZXJSZXNwb25zZSIsInVuYXV0aG9yaXplZCIsInJlc3BvbnNlIiwiSHVlRGlzY292ZXJlciIsInNlbGYiLCJicmlkZ2VUaGVuYWJsZSIsInJlc29sdmUiLCJicmlkZ2UiLCJvblJlc29sdmUiLCJvblJlamVjdCIsImdldExpZ2h0U3RhdGUiLCJicnV0ZSIsImdldElQIiwiZ2V0IiwiZ2V0VXNlcm5hbWUiLCJzYXZlSVAiLCJwcm9taXNlIiwidGhlbiIsInZhbCIsInByb21pc2VzIiwiYW55IiwiY2F0Y2giLCJtZWV0aHVlUHJvbWlzZSIsImRpc2NvdmVyIiwiYnJpZGdlcyIsInNldCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTs7QUFFQTtBQUNBLDJCOztBQUVNQSxhO0FBQ0YsMkJBQVlDLFFBQVosRUFBc0I7QUFDbEIsYUFBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDSCxLO0FBQ1U7QUFDUCxtQkFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsZUFBRCxFQUFrQkMsTUFBbEIsRUFBNkI7QUFDNUNDLHdCQUFRQyxHQUFSLENBQVksMkNBQVo7QUFDQSxvQkFBSUMsUUFBUSwrQkFBWjtBQUNBLHNCQUFLTixRQUFMLENBQWNPLElBQWQsQ0FBbUI7QUFDZkMseUJBQUtGLEtBRFU7QUFFZkcsOEJBQVUsTUFGSztBQUdmQyw2QkFBUyx1QkFBUTtBQUNiQyxtQ0FBVyxRQUFYLEVBQXFCQyxJQUFyQjtBQUNBLDRCQUFJQSxTQUFTLElBQVQsSUFBaUJBLEtBQUtDLE1BQUwsR0FBYyxDQUFuQyxFQUFzQztBQUNsQyxnQ0FBSUMsTUFBTSxFQUFWO0FBQ0FGLGlDQUFLRyxPQUFMLENBQWEsVUFBU0MsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEI7QUFDckMsb0NBQUlDLFdBQVdGLFdBQVdHLGlCQUExQjtBQUNBLG9DQUFJRCxhQUFhLFNBQWpCLEVBQTRCO0FBQ3hCSix3Q0FBSU0sSUFBSixDQUFTRixRQUFUO0FBQ0g7QUFDSiw2QkFMRDtBQU1BaEIsNENBQWdCWSxHQUFoQjtBQUNILHlCQVRELE1BU087QUFDSFYsb0NBQVFDLEdBQVIsQ0FBWSwrQkFBWjtBQUNBRixtQ0FBTyxFQUFQO0FBQ0g7QUFDSixxQkFsQmM7QUFtQmZrQiwyQkFBTyxvQkFBTztBQUNWbEIsK0JBQU9tQixHQUFQO0FBQ0gscUJBckJjLEVBQW5COztBQXVCSCxhQTFCTSxDQUFQO0FBMkJILFM7OztBQUdDQyxXO0FBQ1U7QUFDUixnQkFBSVQsTUFBTSxFQUFWO0FBQ0EsZ0JBQUlVLElBQUksQ0FBUjtBQUNBLGlCQUFJQSxJQUFJLENBQVIsRUFBV0EsSUFBSSxDQUFmLEVBQWtCQSxHQUFsQixFQUF1QixDQUFFVixJQUFJTSxJQUFKLENBQVMsWUFBWUksQ0FBckIsRUFBMEIsQ0FIM0MsQ0FHNEM7QUFDcEQsaUJBQUlBLElBQUksQ0FBUixFQUFXQSxJQUFJLENBQWYsRUFBa0JBLEdBQWxCLEVBQXVCLENBQUVWLElBQUlNLElBQUosQ0FBUyxlQUFlSSxDQUF4QixFQUE2QixDQUo5QyxDQUkrQztBQUN2RCxpQkFBSUEsSUFBSSxDQUFSLEVBQVdBLElBQUksQ0FBZixFQUFrQkEsR0FBbEIsRUFBdUIsQ0FBRVYsSUFBSU0sSUFBSixDQUFTLGdCQUFnQixNQUFJSSxDQUFwQixDQUFULEVBQW1DLENBTHBELENBS3FEO0FBQzdELGlCQUFJQSxJQUFJLENBQVIsRUFBV0EsSUFBSSxDQUFmLEVBQWtCQSxHQUFsQixFQUF1QixDQUFFVixJQUFJTSxJQUFKLENBQVMsZUFBZUksQ0FBeEIsRUFBNkIsQ0FOOUMsQ0FNK0M7O0FBRXpELG1CQUFPVixHQUFQO0FBQ0QsUzs7O0FBR0NXLFM7O0FBRU87QUFDTCxtQkFBTyxLQUFLQyxNQUFaO0FBQ0gsUzs7QUFFRCx1QkFBWUMsQ0FBWixFQUFlQyxPQUFmLEVBQXdCVixRQUF4QixFQUFrQ1csT0FBbEMsRUFBMkNDLFlBQTNDLEVBQXlEQyxtQkFBekQsRUFBOEVDLFlBQTlFLEVBQTRGQyxPQUE1RixFQUFxR0MsVUFBckcsRUFBaUg7QUFDN0c7QUFDQSxhQUFLUCxDQUFMLEdBQVNBLENBQVQ7O0FBRUE7QUFDQSxZQUFJLENBQUNHLFlBQUwsRUFBbUI7QUFDZkEsMkJBQWUsV0FBZjtBQUNIO0FBQ0QsYUFBS0ssRUFBTCxHQUFVakIsUUFBVjtBQUNBLGFBQUtrQixPQUFMLEdBQWVQLE9BQWY7QUFDQSxhQUFLUSxRQUFMLEdBQWdCUCxZQUFoQjs7QUFFQSxhQUFLUSxPQUFMLEdBQWUsWUFBWSxLQUFLSCxFQUFqQixHQUFzQixNQUFyQztBQUNBLGFBQUtJLFVBQUwsR0FBa0IsS0FBS0QsT0FBTCxHQUFlLEdBQWYsR0FBcUIsS0FBS0QsUUFBNUM7QUFDQSxhQUFLWCxNQUFMLEdBQWMsTUFBZCxDQWQ2RyxDQWN2Rjs7QUFFdEIsYUFBS2Msa0JBQUwsR0FBMEIsQ0FBMUI7QUFDQSxhQUFLTixVQUFMLEdBQWtCQSxjQUFjLENBQWhDOztBQUVBLGFBQUtILG1CQUFMLEdBQTJCQSxtQkFBM0I7QUFDQSxhQUFLQyxZQUFMLEdBQW9CQSxZQUFwQjtBQUNBLGFBQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFFSCxLOztBQUVJUSxZLEVBQU07QUFDUCxnQkFBSUMsVUFBVSxnQkFBZ0IsS0FBS1AsRUFBckIsR0FBMEIsS0FBMUIsR0FBa0NNLElBQWhEO0FBQ0FyQyxvQkFBUUMsR0FBUixDQUFZcUMsT0FBWjtBQUNILFM7QUFDY0MsdUIsRUFBZ0I7QUFDM0IsZ0JBQUc7QUFDQyxvQkFBSUMsVUFBVTtBQUNWbkMsOEJBQVUsTUFEQTtBQUVWRCx5QkFBSyxLQUFLK0IsVUFBTCxHQUFrQixTQUZiO0FBR1Y3Qiw2QkFBUyx1QkFBUTtBQUNmLCtCQUFLOEIsa0JBQUwsR0FBMEIsQ0FBMUI7QUFDQSwrQkFBS0ssZUFBTCxDQUFxQmpDLElBQXJCLEVBQTBCK0IsZUFBMUI7QUFDRCxxQkFOUztBQU9WdEIsMkJBQU8sNkJBQVEsT0FBS3lCLFdBQUwsQ0FBaUJsQyxJQUFqQixDQUFSLEVBUEc7QUFRVm1DLDZCQUFTLElBUkMsRUFBZDs7QUFVQSxxQkFBS3BCLENBQUwsQ0FBT3BCLElBQVAsQ0FBWXFDLE9BQVo7QUFDSCxhQVpELENBWUMsT0FBT3RCLEdBQVAsRUFBWTtBQUNULHFCQUFLd0IsV0FBTCxDQUFpQnhCLEdBQWpCO0FBQ0g7QUFDSixTO0FBQ2VxQix1QixFQUFnQjtBQUM1QixnQkFBRztBQUNDLG9CQUFJQyxVQUFVO0FBQ1ZuQyw4QkFBVSxNQURBO0FBRVZELHlCQUFLLEtBQUsrQixVQUZBO0FBR1Y3Qiw2QkFBUywrQkFBUSxPQUFLc0MsZ0JBQUwsQ0FBc0JwQyxJQUF0QixFQUE0QitCLGVBQTVCLENBQVIsRUFIQyxFQUdxRDtBQUMvRHRCLDJCQUFPLDZCQUFRLE9BQUt5QixXQUFMLENBQWlCbEMsSUFBakIsQ0FBUixFQUpHO0FBS1ZtQyw2QkFBUyxJQUxDLEVBQWQ7O0FBT0EscUJBQUtwQixDQUFMLENBQU9wQixJQUFQLENBQVlxQyxPQUFaO0FBQ0gsYUFURCxDQVNDLE9BQU90QixHQUFQLEVBQVk7QUFDVCxxQkFBS3dCLFdBQUwsQ0FBaUJ4QixHQUFqQjtBQUNIO0FBQ0osUztBQUNZQSxXLEVBQUk7QUFDYixnQkFBSUEsSUFBSTJCLFVBQUosS0FBbUIsU0FBbkIsSUFBZ0MzQixJQUFJSSxNQUFKLEtBQWUsQ0FBbkQsRUFBc0Q7QUFDbEQscUJBQUtjLGtCQUFMO0FBQ0EscUJBQUtuQyxHQUFMLENBQVMsMkJBQTJCLEtBQUs4QixFQUF6QztBQUNBLG9CQUFJLEtBQUtLLGtCQUFMLElBQTJCLEtBQUtOLFVBQXBDLEVBQWdEO0FBQzVDLHlCQUFLTSxrQkFBTCxHQUEwQixDQUExQjtBQUNBLHdCQUFJLEtBQUtOLFVBQUwsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDdkIsNkJBQUs3QixHQUFMLENBQVMsK0JBQStCLEtBQUtpQyxPQUE3QztBQUNIO0FBQ0QseUJBQUtMLE9BQUwsQ0FBYSxLQUFLRSxFQUFsQixFQUFzQixTQUF0QixFQUFpQywyQkFBMkIsS0FBS0csT0FBakU7QUFDSCxpQkFORCxNQU1PO0FBQ0gseUJBQUtqQyxHQUFMLENBQVMsc0JBQXNCaUIsSUFBSTJCLFVBQTFCLEdBQXVDLFVBQXZDLEdBQW9ELEtBQUtULGtCQUFsRTtBQUNBLHlCQUFLVSxjQUFMLEdBRkcsQ0FFb0I7QUFDMUI7QUFDSixhQWJELE1BYU8sQ0FBRTtBQUNMLHFCQUFLN0MsR0FBTCxDQUFTLG9CQUFvQmlCLElBQUkyQixVQUFqQztBQUNBLHFCQUFLdkIsTUFBTCxHQUFjLE9BQWQ7QUFDQSxxQkFBS08sT0FBTCxDQUFhLEtBQUtFLEVBQWxCLEVBQXNCLE9BQXRCLEVBQStCLG9CQUFvQmIsSUFBSTJCLFVBQXZEO0FBQ0gsYUFsQlksQ0FrQlg7QUFDTCxTO0FBQ2dCckMsWSxFQUFNK0IsZSxFQUFpQjtBQUNwQyxpQkFBSSxJQUFJbkIsSUFBSSxDQUFaLEVBQWVBLElBQUksR0FBbkIsRUFBd0JBLEdBQXhCLEVBQTZCO0FBQ3pCLG9CQUFJWixLQUFLdUMsY0FBTCxDQUFvQjNCLEVBQUU0QixRQUFGLEVBQXBCLEtBQXFDeEMsS0FBS1ksRUFBRTRCLFFBQUYsRUFBTCxFQUFtQkQsY0FBbkIsQ0FBa0Msa0JBQWxDLENBQXpDLEVBQWdHO0FBQzVGO0FBQ0F2QywyQkFBTyxFQUFDLFVBQVdBLElBQVosRUFBUDtBQUNIO0FBQ0o7QUFDRCxpQkFBS29DLGdCQUFMLENBQXNCcEMsSUFBdEIsRUFBNEIrQixlQUE1QjtBQUNILFM7QUFDaUIvQixZLEVBQU0rQixlLEVBQWlCO0FBQ3JDLGdCQUFJVSxNQUFNQyxPQUFOLENBQWMxQyxJQUFkLENBQUosRUFBeUI7QUFDckJBLHVCQUFPQSxLQUFLLENBQUwsQ0FBUCxDQURxQixDQUNMO0FBQ25CO0FBQ0QsaUJBQUs0QixrQkFBTCxHQUEwQixDQUExQjtBQUNBLGdCQUFJNUIsS0FBS3VDLGNBQUwsQ0FBb0IsT0FBcEIsQ0FBSjtBQUNBO0FBQ0ksb0JBQUl2QyxLQUFLUyxLQUFMLENBQVdrQyxXQUFYLEtBQTJCLG1CQUEvQixFQUFvRDtBQUNoRCx5QkFBS2xELEdBQUwsQ0FBUyxnQ0FBK0IsS0FBSzhCLEVBQXBDLEdBQXlDLGtCQUFsRDtBQUNBLHlCQUFLcUIsWUFBTDtBQUNBLHlCQUFLOUIsTUFBTCxHQUFjLE9BQWQ7QUFDQTtBQUNBLHlCQUFLK0IsT0FBTDtBQUNILGlCQU5ELE1BTU87QUFDSCx5QkFBSy9CLE1BQUwsR0FBYyxPQUFkO0FBQ0EseUJBQUtPLE9BQUwsQ0FBYSxLQUFLRSxFQUFsQixFQUFzQixPQUF0QixFQUErQixZQUFZdkIsS0FBS1MsS0FBTCxDQUFXa0MsV0FBdEQ7QUFDSDtBQUNKLGFBWkQ7QUFhSyxnQkFBSTNDLEtBQUt1QyxjQUFMLENBQW9CLFFBQXBCLENBQUo7QUFDTDtBQUNJLHFCQUFLekIsTUFBTCxHQUFjLE9BQWQ7QUFDQSxxQkFBS3JCLEdBQUwsQ0FBUyxrQkFBa0IsS0FBSzhCLEVBQWhDO0FBQ0EscUJBQUtxQixZQUFMLEdBQW9CLENBQXBCO0FBQ0EsaUJBQUNiLG1CQUFtQixLQUFLWCxZQUF6QixFQUF1QyxJQUF2QyxFQUE2QyxLQUFLRyxFQUFsRCxFQUFzRCxLQUFLRSxRQUEzRCxFQUFxRSxPQUFyRSxFQUE4RXpCLElBQTlFO0FBQ0g7QUFDSixTO0FBQ1M7QUFDTixpQkFBS1AsR0FBTCxDQUFTLGdCQUFUO0FBQ0EsZ0JBQUlxRCxhQUFhQyxLQUFLQyxTQUFMLENBQWUsRUFBQ0MsWUFBWSxLQUFLekIsT0FBbEIsRUFBZixDQUFqQixDQUZNLENBRXdEO0FBQzlELGlCQUFLL0IsR0FBTCxDQUFTcUQsVUFBVDtBQUNBLGlCQUFLL0IsQ0FBTCxDQUFPcEIsSUFBUCxDQUFZO0FBQ1JDLHFCQUFLLEtBQUs4QixPQURGO0FBRVJ3QixzQkFBTSxNQUZFO0FBR1JsRCxzQkFBTThDLFVBSEU7QUFJUmhELHlCQUFTLCtCQUFRLE9BQUtxRCxpQkFBTCxDQUF1Qm5ELElBQXZCLENBQVIsRUFKRDtBQUtSUyx1QkFBTyw2QkFBUSxPQUFLMkMsWUFBTCxFQUFSLEVBTEMsRUFBWjs7QUFPSCxTO0FBQ2tCQyxnQixFQUFVO0FBQ3pCLGlCQUFLNUQsR0FBTCxDQUFTc0QsS0FBS0MsU0FBTCxDQUFlSyxRQUFmLENBQVQ7QUFDQSxnQkFBSUEsU0FBUyxDQUFULEVBQVlkLGNBQVosQ0FBMkIsT0FBM0IsQ0FBSjtBQUNBO0FBQ0kscUJBQUthLFlBQUwsQ0FBa0JDLFFBQWxCO0FBQ0gsYUFIRDtBQUlLLGdCQUFJQSxTQUFTLENBQVQsRUFBWWQsY0FBWixDQUEyQixTQUEzQixDQUFKO0FBQ0w7QUFDSSxxQkFBS2QsUUFBTCxHQUFnQjRCLFNBQVMsQ0FBVCxFQUFZdkQsT0FBWixDQUFvQjJCLFFBQXBDO0FBQ0EscUJBQUtFLFVBQUwsR0FBa0IsS0FBS0QsT0FBTCxHQUFlLEdBQWYsR0FBcUIsS0FBS0QsUUFBNUM7QUFDQSxxQkFBS1gsTUFBTCxHQUFjLE9BQWQ7QUFDQSxxQkFBS3JCLEdBQUwsQ0FBUywwQkFBVDtBQUNBO0FBQ0EscUJBQUs2QyxjQUFMO0FBQ0g7QUFDSixTO0FBQ2FlLGdCLEVBQVM7QUFDbkIsZ0JBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ1gscUJBQUtoQyxPQUFMLENBQWEsS0FBS0UsRUFBbEIsRUFBc0IsT0FBdEIsRUFBK0IsbUJBQS9CO0FBQ0gsYUFGRDtBQUdBLGdCQUFJOEIsU0FBUyxDQUFULEVBQVk1QyxLQUFaLENBQWtCa0MsV0FBbEIsS0FBa0MseUJBQXRDLEVBQWlFO0FBQzdELHFCQUFLN0IsTUFBTCxHQUFjLG1CQUFkO0FBQ0EscUJBQUtLLG1CQUFMLENBQXlCLEtBQUtJLEVBQTlCLEVBQWtDLEtBQUtFLFFBQXZDLEVBQWlELG1CQUFqRCxFQUFzRTRCLFFBQXRFLEVBRjZELENBRW9CO0FBQ2pGLHFCQUFLaEMsT0FBTCxDQUFhLEtBQUtFLEVBQWxCLEVBQXNCLE9BQXRCLEVBQStCLDBCQUEwQjhCLFNBQVMsQ0FBVCxFQUFZNUMsS0FBWixDQUFrQmtDLFdBQTNFO0FBQ0gsYUFKRCxNQUlRO0FBQ0oscUJBQUs3QixNQUFMLEdBQWMsT0FBZDtBQUNBLHFCQUFLTyxPQUFMLENBQWEsS0FBS0UsRUFBbEIsRUFBc0IsT0FBdEIsRUFBK0IsWUFBWThCLFNBQVMsQ0FBVCxFQUFZNUMsS0FBWixDQUFrQmtDLFdBQTdEO0FBQ0g7QUFDSixTO0FBQ0k7QUFDRCxtQkFBTyxLQUFLcEIsRUFBWjtBQUNILFM7QUFDVztBQUNSLG1CQUFPLEtBQUtFLFFBQVo7QUFDSCxTO0FBQ1c7QUFDUixtQkFBTyxLQUFLWCxNQUFaO0FBQ0gsUzs7Ozs7QUFLQ3dDLGE7QUFDRiwyQkFBWWxFLFFBQVosRUFBc0I0QixPQUF0QixFQUErQlEsT0FBL0IsRUFBd0NMLG1CQUF4QyxFQUE2RDtBQUN6RCxhQUFLL0IsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxhQUFLNEIsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsYUFBS1EsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsYUFBS0wsbUJBQUwsR0FBMkJBLG1CQUEzQjtBQUNBLGFBQUtvQyxJQUFMLEdBQVksSUFBWjtBQUNILEs7QUFDZWhDLFUsRUFBRztBQUNmLGdCQUFJaUMsaUJBQWlCLElBQUluRSxPQUFKLENBQVksVUFBQ29FLE9BQUQsRUFBVWxFLE1BQVYsRUFBcUI7QUFDbEQsb0JBQUksQ0FBQ2dDLEVBQUwsRUFBUztBQUNMaEMsMkJBQU9nQyxFQUFQO0FBQ0E7QUFDSDs7QUFFRCxvQkFBSW1DLFNBQVMsSUFBYjs7QUFFQSx5QkFBU0MsU0FBVCxDQUFtQnBDLEVBQW5CLEVBQXVCVCxNQUF2QixFQUErQmdCLE9BQS9CLEVBQXVDO0FBQ25DMkIsNEJBQVFDLE1BQVIsRUFBZ0JuQyxFQUFoQixFQUFvQlQsTUFBcEIsRUFBNEJnQixPQUE1QjtBQUNIO0FBQ0QseUJBQVM4QixRQUFULENBQWtCckMsRUFBbEIsRUFBc0JULE1BQXRCLEVBQThCZ0IsT0FBOUIsRUFBc0M7QUFDbEN2QywyQkFBT21FLE1BQVAsRUFBZW5DLEVBQWYsRUFBbUJULE1BQW5CLEVBQTJCZ0IsT0FBM0I7QUFDSDs7QUFFRDRCLHlCQUFTLElBQUk3QyxTQUFKLENBQWMsT0FBS3pCLFFBQW5CLEVBQTZCLE9BQUs0QixPQUFsQyxFQUEyQ08sRUFBM0MsRUFBK0MsT0FBS0MsT0FBcEQsRUFBNkQsT0FBS0MsUUFBbEU7QUFDTCx1QkFBS04sbUJBREE7QUFFTCwwQkFBQ0ksRUFBRCxFQUFLVCxNQUFMLEVBQWFnQixPQUFiLFVBQXlCNkIsVUFBVUQsTUFBVixFQUFrQjVDLE1BQWxCLEVBQTBCZ0IsT0FBMUIsQ0FBekIsRUFGSztBQUdMLDBCQUFDUCxFQUFELEVBQUtULE1BQUwsRUFBYWdCLE9BQWIsVUFBeUI4QixTQUFTRixNQUFULEVBQWlCNUMsTUFBakIsRUFBeUJnQixPQUF6QixDQUF6QixFQUhLLENBQVQ7QUFJQTRCLHVCQUFPRyxhQUFQO0FBQ0gsYUFwQm9CLENBQXJCO0FBcUJBLG1CQUFPTCxjQUFQO0FBQ0gsUztBQUNLakMsVSxFQUFtQix1QkFBZnVDLEtBQWUsdUVBQVAsS0FBTztBQUNyQixxQkFBU0MsS0FBVCxHQUFrQjtBQUNkLHVCQUFPLEtBQUsvQyxPQUFMLENBQWFnRCxHQUFiLENBQWlCLGNBQWpCLENBQVA7QUFDSDtBQUNELHFCQUFTQyxXQUFULEdBQXdCO0FBQ3BCLHVCQUFPLEtBQUtqRCxPQUFMLENBQWFnRCxHQUFiLENBQWlCLGNBQWpCLENBQVA7QUFDSDtBQUNELHFCQUFTRSxNQUFULENBQWlCM0MsRUFBakIsRUFBcUI7QUFDakIscUJBQUtBLEVBQUwsR0FBVUEsRUFBVjtBQUNIO0FBQ0QsbUJBQU8sSUFBSWxDLE9BQUosQ0FBWSxVQUFDb0UsT0FBRCxFQUFVbEUsTUFBVixFQUFxQjs7QUFFcEMsb0JBQUk0RSxVQUFVLE9BQUtaLElBQUwsQ0FBVXZDLE9BQVYsQ0FBa0JnRCxHQUFsQixDQUFzQixjQUF0QjtBQUNiSSxvQkFEYSxDQUNSLFVBQUM3QyxFQUFELEVBQVE7QUFDViwyQkFBS2dDLElBQUwsQ0FBVWhDLEVBQVYsR0FBZUEsRUFBZjtBQUNBLDJCQUFPLE9BQUtnQyxJQUFMLENBQVV2QyxPQUFWLENBQWtCZ0QsR0FBbEIsQ0FBc0IsY0FBdEIsQ0FBUDtBQUNILGlCQUphO0FBS2JJLG9CQUxhLENBS1IsVUFBQ0MsR0FBRCxVQUFTLE9BQUtkLElBQUwsQ0FBVTlCLFFBQVYsR0FBcUI0QyxHQUE5QixFQUxRO0FBTWJELG9CQU5hLENBTVIsWUFBTTtBQUNSLHdCQUFJRSxXQUFXLEVBQWY7QUFDQSx3QkFBSS9DLEVBQUosRUFBTztBQUNIK0MsaUNBQVM5RCxJQUFULENBQWMsT0FBSytDLElBQUwsQ0FBVUMsY0FBVixDQUF5QmpDLEVBQXpCLENBQWQsRUFERyxDQUMwQztBQUNoRDtBQUNELHdCQUFJLE9BQUtnQyxJQUFMLENBQVVoQyxFQUFkLEVBQWlCO0FBQ2IrQyxpQ0FBUzlELElBQVQsQ0FBYyxPQUFLK0MsSUFBTCxDQUFVQyxjQUFWLENBQXlCLE9BQUtELElBQUwsQ0FBVWhDLEVBQW5DLENBQWQsRUFEYSxDQUMwQztBQUMxRDtBQUNELDJCQUFPK0MsU0FBU3JFLE1BQVQsSUFBbUIsQ0FBbkIsR0FBdUJaLFFBQVFrRixHQUFSLENBQVlELFFBQVosQ0FBdkIsR0FBK0NqRixRQUFRRSxNQUFSLEVBQXREO0FBQ0gsaUJBZmE7QUFnQmJpRixxQkFoQmEsQ0FnQlAsWUFBTTtBQUNULHdCQUFJRixXQUFXLEVBQWY7QUFDQSx3QkFBSUcsaUJBQWlCLElBQUlwRixPQUFKLENBQVksVUFBQ29FLE9BQUQsRUFBU2xFLE1BQVQsRUFBb0I7QUFDakQsK0JBQU8sSUFBSUosYUFBSixDQUFrQixPQUFLb0UsSUFBTCxDQUFVbkUsUUFBNUIsRUFBc0NzRixRQUF0QyxHQUFpRE4sSUFBakQsQ0FBc0QsVUFBQ2xFLEdBQUQsRUFBUztBQUNsRSxnQ0FBSXlFLFVBQVUsRUFBZCxDQURrRTtBQUVsRSxxREFBYXpFLEdBQWIsOEhBQWtCLEtBQVZVLENBQVU7QUFDZCtELDRDQUFRbkUsSUFBUixDQUFhLE9BQUsrQyxJQUFMLENBQVVDLGNBQVYsQ0FBeUI1QyxDQUF6QixDQUFiO0FBQ0gsaUNBSmlFO0FBS2xFdkIsb0NBQVFrRixHQUFSLENBQVlJLE9BQVosRUFBcUJQLElBQXJCLENBQTBCLFVBQUNPLE9BQUQsVUFBYWxCLFFBQVFrQixRQUFRLENBQVIsQ0FBUixDQUFiLEVBQTFCLEVBQTRELG9CQUFNcEYsUUFBTixFQUE1RDtBQUNILHlCQU5NLEVBTUosb0JBQU1BLFFBQU4sRUFOSSxDQUFQO0FBT0gscUJBUm9CLENBQXJCO0FBU0ErRSw2QkFBUzlELElBQVQsQ0FBY2lFLGNBQWQ7O0FBRUEsd0JBQUlYLFVBQVUsSUFBZCxFQUFvQjtBQUNoQiw0QkFBSTVELE1BQU1TLFlBQVlULEdBQVosRUFBVixDQURnQjtBQUVoQixrREFBYUEsR0FBYixtSUFBa0IsS0FBVlUsQ0FBVTtBQUNkLG9DQUFJQSxNQUFNLE9BQUsyQyxJQUFMLENBQVVoQyxFQUFoQixJQUFzQlgsTUFBTVcsRUFBaEMsRUFBb0M7QUFDaEMrQyw2Q0FBUzlELElBQVQsQ0FBYyxPQUFLK0MsSUFBTCxDQUFVQyxjQUFWLENBQXlCNUMsQ0FBekIsQ0FBZCxFQURnQyxDQUNZO0FBQy9DO0FBQ0osNkJBTmU7QUFPbkI7QUFDRCwyQkFBT3ZCLFFBQVFrRixHQUFSLENBQVlELFFBQVosQ0FBUDtBQUNILGlCQXRDYTtBQXVDYkYsb0JBdkNhLENBdUNSLFVBQUNPLE9BQUQsRUFBYTtBQUNqQiwyQkFBS3BCLElBQUwsQ0FBVXZDLE9BQVYsQ0FBa0I0RCxHQUFsQixDQUFzQixjQUF0QixFQUFzQ0QsUUFBUSxDQUFSLEVBQVdwRCxFQUFqRDtBQUNBLDJCQUFLZ0MsSUFBTCxDQUFVdkMsT0FBVixDQUFrQjRELEdBQWxCLENBQXNCLGNBQXRCLEVBQXNDRCxRQUFRLENBQVIsRUFBV2xELFFBQWpEO0FBQ0FnQyw0QkFBUWtCLFFBQVEsQ0FBUixDQUFSO0FBQ0QsaUJBM0NhO0FBNENiSCxxQkE1Q2EsQ0E0Q1AsWUFBTTtBQUNUakY7QUFDSCxpQkE5Q2EsQ0FBZDs7QUFnREE7QUFDQSx1QkFBTzRFLE9BQVA7QUFDSCxhQXBETSxDQUFQO0FBcURILFMiLCJmaWxlIjoiaHVlRGlzY292ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSBEbWl0cnkgU2FkYWtvdjsgQWxsIHJpZ2h0cyByZXNlcnZlXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qZ2xvYmFscyB0cmFja1N0YXRlLEFqYXhMaXRlICovXG4vKmV4cG9ydGVkIEh1ZURpc2NvdmVyZXIgKi9cblxuY2xhc3MgTWVldEh1ZUxvb2t1cCB7XG4gICAgY29uc3RydWN0b3IoQWpheExpdGUpIHtcbiAgICAgICAgdGhpcy5BamF4TGl0ZSA9IEFqYXhMaXRlO1xuICAgIH1cbiAgICBkaXNjb3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlQ2FsbGJhY2ssIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3RpbmcgaHR0cHM6Ly9kaXNjb3ZlcnkubWVldGh1ZS5jb20uJyk7XG4gICAgICAgICAgICB2YXIgbnVwbnAgPSAnaHR0cHM6Ly9kaXNjb3ZlcnkubWVldGh1ZS5jb20nO1xuICAgICAgICAgICAgdGhpcy5BamF4TGl0ZS5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IG51cG5wLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrU3RhdGUoJ251bnBucCcsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpcHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihicmlkZ2VJbmZvLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBicmlkZ2VJUCA9IGJyaWRnZUluZm8uaW50ZXJuYWxpcGFkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyaWRnZUlQICE9PSAnMC4wLjAuMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBzLnB1c2goYnJpZGdlSVApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxiYWNrKGlwcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbWVldGh1ZSBwb3J0YWwgZGlkIG5vdCByZXR1cm4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChbXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBCcnV0ZUZvcmNlciB7XG4gICAgc3RhdGljIGlwcygpe1xuICAgICAgICB2YXIgaXBzID0gW107XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgZm9yKGkgPSAxOyBpIDwgODsgaSsrKSB7IGlwcy5wdXNoKCcxMC4wLjEuJyArIGkpOyB9IC8vIG1hYzogMTAuMC4xLjEtMjBcbiAgICAgICAgZm9yKGkgPSAxOyBpIDwgODsgaSsrKSB7IGlwcy5wdXNoKCcxOTIuMTY4LjAuJyArIGkpOyB9IC8vIHdpbjogMTkyLjE2OC4wLjEtMjBcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgODsgaSsrKSB7IGlwcy5wdXNoKCcxOTIuMTY4LjAuJyArICgxMDAraSkpOyB9IC8vIHdpbjogMTkyLjE2OC4xLjEwMC0xMjBcbiAgICAgICAgZm9yKGkgPSAxOyBpIDwgODsgaSsrKSB7IGlwcy5wdXNoKCcxOTIuMTY4LjEuJyArIGkpOyB9IC8vIHdpbjogMTkyLjE2OC4xLjEtMjBcbiAgICAgIFxuICAgICAgcmV0dXJuIGlwcztcbiAgICB9XG59XG5cbmNsYXNzIEh1ZUJyaWRnZSB7XG5cbiAgICBzdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigkLCBzdG9yYWdlLCBicmlkZ2VJUCwgYXBwTmFtZSwgbGFzdFVzZXJuYW1lLCBvbk5lZWRBdXRob3JpemF0aW9uLCBvbkF1dGhvcml6ZWQsIG9uRXJyb3IsIHJldHJ5Q291bnQpIHtcbiAgICAgICAgLy8gdG9kbzogcmVtb3ZlIHN0b3JhZ2UgZnJvbSBIdWVCcmlkZ2VcbiAgICAgICAgdGhpcy4kID0gJDtcblxuICAgICAgICAvLyBkZWZhdWx0c1xuICAgICAgICBpZiAoIWxhc3RVc2VybmFtZSkge1xuICAgICAgICAgICAgbGFzdFVzZXJuYW1lID0gJzEyMy1ib2d1cyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pcCA9IGJyaWRnZUlQO1xuICAgICAgICB0aGlzLmFwcG5hbWUgPSBhcHBOYW1lO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gbGFzdFVzZXJuYW1lO1xuXG4gICAgICAgIHRoaXMuYmFzZVVybCA9ICdodHRwOi8vJyArIHRoaXMuaXAgKyAnL2FwaSc7XG4gICAgICAgIHRoaXMuYmFzZUFwaVVybCA9IHRoaXMuYmFzZVVybCArICcvJyArIHRoaXMudXNlcm5hbWU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gJ2luaXQnOyAvLyBmb3VuZCwgbm90YXV0aG9yaXplZCwgcmVhZHksIGVycm9yXG4gICAgICAgIFxuICAgICAgICB0aGlzLnRpbWVvdXRBdXRoQ291bnRlciA9IDA7XG4gICAgICAgIHRoaXMucmV0cnlDb3VudCA9IHJldHJ5Q291bnQgfHwgMDtcblxuICAgICAgICB0aGlzLm9uTmVlZEF1dGhvcml6YXRpb24gPSBvbk5lZWRBdXRob3JpemF0aW9uO1xuICAgICAgICB0aGlzLm9uQXV0aG9yaXplZCA9IG9uQXV0aG9yaXplZDtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gb25FcnJvcjtcblxuICAgIH1cblxuICAgIGxvZyAodGV4dCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdodWVCcmlkZ2UgKCcgKyB0aGlzLmlwICsgJyk6ICcgKyB0ZXh0O1xuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG4gICAgZ2V0TGlnaHRTdGF0ZSAoc3VjY2Vzc0NhbGxiYWNrKXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuYmFzZUFwaVVybCArICcvbGlnaHRzJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudGltZW91dEF1dGhDb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgIHRoaXMub25Hb3RMaWdodFN0YXRlKGRhdGEsc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBkYXRhID0+IHRoaXMub25BdXRoRXJyb3IoZGF0YSksXG4gICAgICAgICAgICAgICAgdGltZW91dDogMjAwMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuJC5hamF4KG9wdGlvbnMpO1xuICAgICAgICB9Y2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5vbkF1dGhFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEJyaWRnZVN0YXRlIChzdWNjZXNzQ2FsbGJhY2spe1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIHVybDogdGhpcy5iYXNlQXBpVXJsLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGRhdGEgPT4gdGhpcy5vbkdvdEJyaWRnZVN0YXRlKGRhdGEsIHN1Y2Nlc3NDYWxsYmFjayksIC8vIGxpZ2h0ZXIgYmFnIG9mIGRhdGFcbiAgICAgICAgICAgICAgICBlcnJvcjogZGF0YSA9PiB0aGlzLm9uQXV0aEVycm9yKGRhdGEpLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLiQuYWpheChvcHRpb25zKTtcbiAgICAgICAgfWNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMub25BdXRoRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkF1dGhFcnJvciAoZXJyKXtcbiAgICAgICAgaWYgKGVyci5zdGF0dXNUZXh0ID09PSAndGltZW91dCcgfHwgZXJyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0QXV0aENvdW50ZXIrKztcbiAgICAgICAgICAgIHRoaXMubG9nKCdCcmlkZ2UgZXJyb3IgdGltZW91dDogJyArIHRoaXMuaXApO1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZW91dEF1dGhDb3VudGVyID49IHRoaXMucmV0cnlDb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZW91dEF1dGhDb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXRyeUNvdW50ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKCd0b28gbWFueSB0aW1lb3V0cyB3aXRoIElQICcgKyB0aGlzLmJhc2VVcmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IodGhpcy5pcCwgJ1RpbWVvdXQnLCAnVG9vIG1hbnkgdGltZW91dHMgb246ICcgKyB0aGlzLmJhc2VVcmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZygndGltZW91dCBvbiBhdXRoOiAnICsgZXJyLnN0YXR1c1RleHQgKyAnIHJldHJ5ICMnICsgdGhpcy50aW1lb3V0QXV0aENvdW50ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0QnJpZGdlU3RhdGUoKTsgLy8gcmV0cnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy9pZiAoZXJyLnN0YXR1c1RleHQgIT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCdlcnJvciBvbiBhdXRoOiAnICsgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuaXAsICdFcnJvcicsICdVbmtub3duIGVycm9yOiAnICsgZXJyLnN0YXR1c1RleHQpO1xuICAgICAgICB9IC8vIHdoYXQgbm93P1xuICAgIH1cbiAgICBvbkdvdExpZ2h0U3RhdGUgKGRhdGEsIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGkudG9TdHJpbmcoKSkgJiYgZGF0YVtpLnRvU3RyaW5nKCldLmhhc093blByb3BlcnR5KCdtYW51ZmFjdHVyZXJuYW1lJykpIHtcbiAgICAgICAgICAgICAgICAvLyBpbmRlZWQgYSBsaWdodCByZXNwb25zZS5cbiAgICAgICAgICAgICAgICBkYXRhID0geydsaWdodHMnIDogZGF0YX07XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Hb3RCcmlkZ2VTdGF0ZShkYXRhLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkdvdEJyaWRnZVN0YXRlIChkYXRhLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhWzBdOyAvLyB0YWtlIGZpcnN0XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1lb3V0QXV0aENvdW50ZXIgPSAwO1xuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZXJyb3InKSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3IuZGVzY3JpcHRpb24gPT09ICd1bmF1dGhvcml6ZWQgdXNlcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZygnTm90IGF1dGhvcml6ZWQgd2l0aCBicmlkZ2UgJysgdGhpcy5pcCArICcsIHJlZ2lzdGVyaW5nLi4uJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXRyeUNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICdmb3VuZCc7XG4gICAgICAgICAgICAgICAgLy8gYnJpZGdlQXV0aFxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVXNlcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuaXAsICdFcnJvcicsICdFcnJvcjogJyArIGRhdGEuZXJyb3IuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2xpZ2h0cycpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICdyZWFkeSc7XG4gICAgICAgICAgICB0aGlzLmxvZygnQnJpZGdlIHJlYWR5ICcgKyB0aGlzLmlwKTtcbiAgICAgICAgICAgIHRoaXMucmV0cnlDb3VudGVyID0gMDtcbiAgICAgICAgICAgIChzdWNjZXNzQ2FsbGJhY2sgfHwgdGhpcy5vbkF1dGhvcml6ZWQpKHRoaXMsIHRoaXMuaXAsIHRoaXMudXNlcm5hbWUsICdSZWFkeScsIGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFVzZXIgKCl7XG4gICAgICAgIHRoaXMubG9nKCdhZGRpbmcgdXNlci4uLicpO1xuICAgICAgICB2YXIgZGF0YVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHtkZXZpY2V0eXBlOiB0aGlzLmFwcG5hbWUgfSk7IC8vIG5vIHVzZXJuYW1lIC0gYnJpZGdlIGdlbmVyYXRlcyBpdFxuICAgICAgICB0aGlzLmxvZyhkYXRhU3RyaW5nKTtcbiAgICAgICAgdGhpcy4kLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiB0aGlzLmJhc2VVcmwsXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICBkYXRhOiBkYXRhU3RyaW5nLFxuICAgICAgICAgICAgc3VjY2VzczogZGF0YSA9PiB0aGlzLm9uQWRkVXNlclJlc3BvbnNlKGRhdGEpLFxuICAgICAgICAgICAgZXJyb3I6IGRhdGEgPT4gdGhpcy51bmF1dGhvcml6ZWQoKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25BZGRVc2VyUmVzcG9uc2UgKHJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMubG9nKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG4gICAgICAgIGlmIChyZXNwb25zZVswXS5oYXNPd25Qcm9wZXJ0eSgnZXJyb3InKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy51bmF1dGhvcml6ZWQocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlWzBdLmhhc093blByb3BlcnR5KCdzdWNjZXNzJykpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudXNlcm5hbWUgPSByZXNwb25zZVswXS5zdWNjZXNzLnVzZXJuYW1lO1xuICAgICAgICAgICAgdGhpcy5iYXNlQXBpVXJsID0gdGhpcy5iYXNlVXJsICsgJy8nICsgdGhpcy51c2VybmFtZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gJ3JlYWR5JztcbiAgICAgICAgICAgIHRoaXMubG9nKCdBdXRob3JpemF0aW9uIHN1Y2Nlc3NmdWwnKTtcbiAgICAgICAgICAgIC8vIHJlcXVlc3Qgc3VjY2VzcyBtZXNzYWdlIGZyb20gYWN0dWFsIGJyaWRnZTpcbiAgICAgICAgICAgIHRoaXMuZ2V0QnJpZGdlU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bmF1dGhvcml6ZWQgKHJlc3BvbnNlKXtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuaXAsICdFcnJvcicsICdSZXF1ZXN0IGNhbmNlbGxlZCcpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKHJlc3BvbnNlWzBdLmVycm9yLmRlc2NyaXB0aW9uID09PSAnbGluayBidXR0b24gbm90IHByZXNzZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICduZWVkYXV0aG9yaXphdGlvbic7XG4gICAgICAgICAgICB0aGlzLm9uTmVlZEF1dGhvcml6YXRpb24odGhpcy5pcCwgdGhpcy51c2VybmFtZSwgJ05lZWRBdXRob3JpemF0aW9uJywgcmVzcG9uc2UpOyAvLyBjaGFuZ2VkIHNpZ25hdHVyZVxuICAgICAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuaXAsICdFcnJvcicsICdOZWVkIGF1dGhlbnRpY2F0aW9uOiAnICsgcmVzcG9uc2VbMF0uZXJyb3IuZGVzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2UgIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIHRoaXMub25FcnJvcih0aGlzLmlwLCAnRXJyb3InLCAnRXJyb3I6ICcgKyByZXNwb25zZVswXS5lcnJvci5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXAgKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmlwO1xuICAgIH1cbiAgICB1c2VybmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJuYW1lO1xuICAgIH1cbiAgICBnZXRTdGF0dXMgKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgICB9XG5cbn1cblxuXG5jbGFzcyBIdWVEaXNjb3ZlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcihBamF4TGl0ZSwgc3RvcmFnZSwgYXBwbmFtZSwgb25OZWVkQXV0aG9yaXphdGlvbikge1xuICAgICAgICB0aGlzLkFqYXhMaXRlID0gQWpheExpdGU7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgICAgIHRoaXMuYXBwbmFtZSA9IGFwcG5hbWU7XG4gICAgICAgIHRoaXMub25OZWVkQXV0aG9yaXphdGlvbiA9IG9uTmVlZEF1dGhvcml6YXRpb247XG4gICAgICAgIHRoaXMuc2VsZiA9IHRoaXM7XG4gICAgfVxuICAgIGJyaWRnZVRoZW5hYmxlIChpcCl7XG4gICAgICAgIHZhciBicmlkZ2VUaGVuYWJsZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICghaXApIHtcbiAgICAgICAgICAgICAgICByZWplY3QoaXApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGJyaWRnZSA9IG51bGw7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVzb2x2ZShpcCwgc3RhdHVzLCBtZXNzYWdlKXtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGJyaWRnZSwgaXAsIHN0YXR1cywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBvblJlamVjdChpcCwgc3RhdHVzLCBtZXNzYWdlKXtcbiAgICAgICAgICAgICAgICByZWplY3QoYnJpZGdlLCBpcCwgc3RhdHVzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJpZGdlID0gbmV3IEh1ZUJyaWRnZSh0aGlzLkFqYXhMaXRlLCB0aGlzLnN0b3JhZ2UsIGlwLCB0aGlzLmFwcG5hbWUsIHRoaXMudXNlcm5hbWUsIFxuICAgICAgICAgICAgICAgIHRoaXMub25OZWVkQXV0aG9yaXphdGlvbiwgXG4gICAgICAgICAgICAgICAgKGlwLCBzdGF0dXMsIG1lc3NhZ2UpID0+IG9uUmVzb2x2ZShicmlkZ2UsIHN0YXR1cywgbWVzc2FnZSksIFxuICAgICAgICAgICAgICAgIChpcCwgc3RhdHVzLCBtZXNzYWdlKSA9PiBvblJlamVjdChicmlkZ2UsIHN0YXR1cywgbWVzc2FnZSkpO1xuICAgICAgICAgICAgYnJpZGdlLmdldExpZ2h0U3RhdGUoKTtcbiAgICAgICAgfSk7IFxuICAgICAgICByZXR1cm4gYnJpZGdlVGhlbmFibGU7XG4gICAgfSBcbiAgICBzdGFydChpcCwgYnJ1dGUgPSBmYWxzZSkge1xuICAgICAgICBmdW5jdGlvbiBnZXRJUCAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldCgnbGFzdEJyaWRnZUlwJyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlcm5hbWUgKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQoJ2xhc3RVc2VybmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNhdmVJUCAoaXApIHtcbiAgICAgICAgICAgIHRoaXMuaXAgPSBpcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuc2VsZi5zdG9yYWdlLmdldCgnbGFzdEJyaWRnZUlwJylcbiAgICAgICAgICAgIC50aGVuKChpcCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZi5pcCA9IGlwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGYuc3RvcmFnZS5nZXQoJ2xhc3RVc2VybmFtZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCh2YWwpID0+IHRoaXMuc2VsZi51c2VybmFtZSA9IHZhbClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoaXApe1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuc2VsZi5icmlkZ2VUaGVuYWJsZShpcCkpOyAvLyBmcm9tIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxmLmlwKXtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLnNlbGYuYnJpZGdlVGhlbmFibGUodGhpcy5zZWxmLmlwKSk7IC8vIGZyb20gc3RvcmFnZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZXMubGVuZ3RoICE9IDAgPyBQcm9taXNlLmFueShwcm9taXNlcykgOiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG1lZXRodWVQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWVldEh1ZUxvb2t1cCh0aGlzLnNlbGYuQWpheExpdGUpLmRpc2NvdmVyKCkudGhlbigoaXBzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnJpZGdlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpIG9mIGlwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZXMucHVzaCh0aGlzLnNlbGYuYnJpZGdlVGhlbmFibGUoaSkpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYW55KGJyaWRnZXMpLnRoZW4oKGJyaWRnZXMpID0+IHJlc29sdmUoYnJpZGdlc1swXSksICgpID0+IHJlamVjdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgKCkgPT4gcmVqZWN0KCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobWVldGh1ZVByb21pc2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJydXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpcHMgPSBCcnV0ZUZvcmNlci5pcHMoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpIG9mIGlwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHRoaXMuc2VsZi5pcCAmJiBpICE9PSBpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5zZWxmLmJyaWRnZVRoZW5hYmxlKGkpKTsgLy8gODQgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbnkocHJvbWlzZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChicmlkZ2VzKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZi5zdG9yYWdlLnNldCgnbGFzdEJyaWRnZUlwJywgYnJpZGdlc1swXS5pcCk7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZi5zdG9yYWdlLnNldCgnbGFzdFVzZXJuYW1lJywgYnJpZGdlc1swXS51c2VybmFtZSk7XG4gICAgICAgICAgICAgIHJlc29sdmUoYnJpZGdlc1swXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pOyBcblxuICAgICAgICAgICAgLy9yZXNvbHZlKCk7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4iXX0=

/**
 * Dmitry Sadakov's Philips Hue api wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright 2014 Dmitry Sadakov, All rights reserved.
 * original: https://github.com/bjohnso5/hue-hacking
 * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

'use strict';

/*globals colorUtil:false, HueDiscoverer, AjaxLite, Storage, HueBridge
              */
/*trackEvent*/
/*exported  hue, 
                           findActors, 
                           findGroupIdByName 
               */

// extract hueBridge class (with ip, username, authentication logic)
// todo: remove authentication logic - forward to bridge class
// on start check setup (ip & username) and do fast start.

var hue = function hue($, colors) {

    var discover = null;
    var discoverStatus = 'init';


    var bridge = null,
    bridgeIP = '', // Hue bridge's IP address 
    appname = 'lightswitch-v5', // API key registered with hue bridge
    username = '',
    status = { status: 'init', text: 'Initializing...' }, // system status
    state = null, // bridge state

    // defaults
    baseUrl = 'http://' + bridgeIP + '/api',
    baseApiUrl = null, //baseUrl + '/' + appname,
    lightApiUrl = null, // baseApiUrl + '/lights',
    lastResult = null,
    numberOfLamps = 3, // defaulted to the # of lamps included in the starter kit, update if you've connected additional bulbs

    // lamp states:
    shortFlashType = 'select',
    longFlashType = 'lselect',
    offState = { on: false },
    onState = { on: true },
    shortFlashState = { alert: shortFlashType },
    longFlashState = { alert: longFlashType },
    transitionTime = null,
    errorCounter = 0;

    //discover = hueDiscoverer(appname, onNeedAuthorization, onIpAuthorized, onError, onComplete);
    discover = new HueDiscoverer(AjaxLite, Storage, appname, onNeedAuthorization);

    var statusInit = { status: 'init', text: 'Initializing...' };
    var statusNeedAuth = { status: 'Authenticating', text: 'Bridge found. Press the bridge button...' };

    function onNeedAuthorization(ip) {
        statusNeedAuth.text = 'Bridge found at ' + ip + '.<br >Press the bridge button...';
        onStatus(statusNeedAuth);
        discoverStatus = 'auth';
    }

    function onBridgeError(err) {
        console.log('onBridgeError' + err);
        onError(err);
    }

    function onIpAuthorized(bridgeAuthorized, ip, usernameArg, message, data) {

        //if(bridge === null || !(ip === bridge.ip() && username === bridge.username())) {
        bridge = new HueBridge(
        AjaxLite,
        Storage,
        bridgeAuthorized.ip,
        appname,
        bridgeAuthorized.username,
        onNeedAuthorization,
        onIpAuthorized,
        onBridgeError,
        10);
        discoverStatus = 'ok';

        bridgeIP = bridge.ip;
        username = bridge.username;
        updateURLs();

        //} 

        if (data === undefined) {
            bridge.getBridgeState();
        } else {
            onNewState(data); // safe to delete
        }
    }

    function onDiscoverError(ip, msg, text) {
        //onStatus(statusNoBridge);
        if (status !== null) {
            if (status.status !== statusNeedAuth.status) {
                updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');
            } else {
                // discover:
                setTimeout(function () {return rediscover();}, 2000);
            }
        }
    }

    function rediscover(ip) {
        discover.start(ip).then(function (bridge, ip, username, message, data) {
            onIpAuthorized(bridge, ip, username, message, data);
        },
        function (ip, msg, text) {
            onDiscoverError(ip, msg, text);
        });

        updateStatus(statusInit.status, statusInit.text);
    }

    function onError(ip, msg, text) {
        updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');
    }

    var onLampError = function onLampError(err) {
        // do nothing for now.
        errorCounter++;
    },
    /**
        * Reconstruct the baseUrl and baseApiUrl members when configuration is updated.
        */
    updateURLs = function updateURLs() {
        baseUrl = 'http://' + bridgeIP + '/api';
        baseApiUrl = baseUrl + '/' + username;
        lightApiUrl = baseApiUrl + '/lights';
    },
    /**
        * Sets the response to the lastResult member for use. Currently unused.
        *
        * @param {String} Response data as a String
        * @param {String} Status text
        * @param {jqXHR} jQuery XmlHttpResponse object
        */
    apiSuccess = function apiSuccess(data, successText, jqXHR) {
        lastResult = data;
        log(JSON.stringify(lastResult));
    },

    /**
        * Convenience function to perform an asynchronous HTTP PUT with the
        * provided JSON data.
        *
        * @param {String} url The URL to send the PUT request to.
        * @param {Function} callback The function to invoke on a successful response.
        * @param {Object} data The JSON data.
        * @return {Object} The JSON data.
        */
    putJSON = function putJSON(url, callback, error, data) {
        var options = {
            type: 'PUT',
            url: url,
            success: callback,
            error: error || onLampError,
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;
    },

    postJSON = function postJSON(url, callback, error, data) {
        var options = {
            type: 'POST',
            url: url,
            success: callback,
            error: error || onLampError,
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;
    },

    del = function del(url, callback, error, data) {
        var options = {
            type: 'DELETE',
            url: url,
            success: callback,
            error: error || onLampError };

        $.ajax(options);
        log(JSON.stringify(options));
    },

    /**
        * Convenience function used to query the state of a Hue lamp or other
        * bridge-administered resource.
        *
        * @param {String} destination URL to send HTTP GET request to.
        * @param {Function} success Callback function to invoke on successful response.
        * @return {Object} JSON bulb configuration data.
        */
    get = function get(destination, _success, error) {
        var callback = _success || null;
        callback = null === callback ? apiSuccess : _success;

        $.ajax({
            dataType: 'json',
            url: destination,
            success: function success(data) {
                _success(data);
            },
            error: error,
            timeout: 2000 });

    },

    /**
        * Convenience function used to build a state URL for a provided Hue lamp
        * index.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp.
        * @return {String} URL to put state to a lamp.
        */
    buildStateURL = function buildStateURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex + '/state';
    },

    /**
        * Convenience function used to build a state URL for a provided Hue lamp
        * group.
        *
        * @param {Number} groupIndex 0-based index of the lamp group.
        * @return {String} URL to trigger a group action.
        */
    buildGroupActionURL = function buildGroupActionURL(groupIndex /* {Number} */) {
        return baseApiUrl + '/groups/' + groupIndex + '/action';
    },

    buildGroupURL = function buildGroupURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/groups/' + key;
        }
        return baseApiUrl + '/groups';
    },
    buildSceneURL = function buildSceneURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/scenes/' + key;
        }
        return baseApiUrl + '/scenes';
    },
    /**
        * Convenience function used to initiate an HTTP PUT request to modify 
        * state.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
        * @param {String} data String containing the JSON state object to commit to the lamp.
        * @param {Function} success Callback function to invoke on successful response.
        * @return {Object} JSON bulb state data.
        */
    put = function put(lampIndex, data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;
        return putJSON(buildStateURL(lampIndex), callback, error, data);
    },

    /**
        * Convenience function used to initiate an HTTP PUT request to modify state of a group of lamps.
        *
        * @param {Number} Index of the lamp group to modify
        * @param {Object} Object containing desired lamp state
        * @return {Object} JSON bulb group state data.
        */
    putGroupAction = function putGroupAction(groupIndex /* {Number} */, action /* String */) {
        var callback = apiSuccess;
        var error = log;
        return putJSON(buildGroupActionURL(groupIndex), callback, error, action);
    },

    postGroup = function postGroup(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name, lights: lampIds };
        return postJSON(buildGroupURL(), callback, error, state);
    },
    deleteGroup = function deleteGroup(key) {
        var callback = apiSuccess;
        var error = log;
        return del(buildGroupURL(key), callback, error);
    },
    getRandomInt = function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    putScene = function putScene(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name + ' on 0', lights: lampIds };
        var key = getRandomInt(100000000, 999999999) + '-on-0';
        return putJSON(buildSceneURL(key), callback, error, state);
    },

    _startSchedule = function _startSchedule(id) {
        if (state !== null) {
            // build schedule command, execute:
            var schedule = state.schedules[id];
            if (schedule) {
                var cmd = schedule.command;
                if (cmd.method.toLowerCase() === 'put') {
                    var url = baseUrl + cmd.address.substring('/api'.length);
                    putJSON(url, apiSuccess, log, cmd.body);
                }
            }
        } else {
            // error
        }
    },
    /*
       updateScene = function(key, name, lampIds) {
           var callback = apiSuccess;
           var error = log;
           var state = {name: name, lights: lampIds };
           return putJSON(buildSceneURL(key), callback, error, state);
       },*/
    /*
                    // http://www.developers.meethue.com/documentation/schedules-api-0#31_get_all_schedules
                    getSchedules = function () {
                       return get(buildSchedulesURL(lampIndex), function(data) {
                            // success
                            if (data.state === undefined) {
                                // fail
                                return;
                            }
                            success(data.state.bri);
                        }, function(err){
                            err = null;
                            // fail
                        });
                   },
            
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#32_create_schedule
                # TODO: strip whitespace from command
                @createSchedule = (name="schedule", description="", command, time, status="enabled", autodelete=false) ->
                  _setup().then ->
                    body = {
                      "name": name
                      "description": description
                      "command": command
                      "time": time
                      "status": status
                      "autodelete": autodelete
                    }
                    _apiCall "post", ["schedules"], body
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#33_get_schedule_attributes
                @getScheduleAttributes = (id) ->
                  _setup().then ->
                    _apiCall "get", ["schedules", id]
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#34_set_schedule_attributes
                @setScheduleAttributes = (id, name=null, description=null, command=null, time=null, status=null, autodelete=null) ->
                  _setup().then ->
                    body = {}
                    body.name = name if name
                    body.description = description if description
                    body.command = command if command
                    body.status = status if status
                    body.autodelete = autodelete if autodelete != null
                    _apiCall "put", ["schedules", id], body
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#35_delete_schedule
                @deleteSchedule = (id) ->
                  _setup().then ->
                    _apiCall "delete", ["schedules", id]
            
            */

    /**
                * Convenience function used to initiate HTTP PUT requests to modify state
                * of all connected Hue lamps.
                *
                * @param {String} data String containing the JSON state object to commit to the lamps.
                * @param {Function} success Callback function to invoke on successful response.
                * @return {Object} JSON object containing state to apply to lamp.
                */
    putAll = function putAll(data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;

        for (var i = 0; i < numberOfLamps; ++i) {
            putJSON(buildStateURL(i + 1), callback, error, data);
        }
        return data;
    },

    /**
        * Convenience function used to build a URL to query a lamp's status.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp.
        * @return {String} URL to query a specific lamp.
        */
    buildLampQueryURL = function buildLampQueryURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex;
    },

    /** 
        * Builds a JSON state object for the CIE 1931 color coordinates provided.
        * If the transitionTime property has been set, it is also included in the
        * JSON object.
        *
        * @param {Number[]} CIE 1931 X,Y color coordinates.
        * @return {Object} State object containing CIE X,Y coordinates.
        */
    buildXYState = function buildXYState(xyCoords /* Number[] */, brightness, transitionTimeOverride) {
        var stateObj = { xy: xyCoords };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;
        }
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    /** 
        * Builds a JSON state object for the hue, saturation, and brightness provided.
        * @param {Number} hue from 0 to 65535.
        * @param {Number} sat from 0 to 255.
        * @param {Number} bri from 0 to 255.
        * @return {Object} State object containing CIE X,Y coordinates.
        */
    buildHueSatState = function buildHueSatState(hue, sat, brightness, transitionTimeOverride) {
        var stateObj = { hue: hue, sat: sat };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;
        }
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },
    addTransitionTime = function addTransitionTime(stateObj, transitionTimeOverride) {
        if (typeof transitionTime === 'number') {
            stateObj.transitiontime = transitionTime;
        }
        if (typeof transitionTimeOverride === 'number') {
            stateObj.transitiontime = transitionTimeOverride;
        }
    },
    buildSceneState = function buildSceneState(sceneKey, transitionTimeOverride) {
        var stateObj = { scene: sceneKey };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    /**
        * Returns the brightness of the lamp at lampIndex.
        *
        * @param {Number} lampIndex 1-based index of the lamp to query.
        * @return {Number} Brightness of the lamp at lampIndex. 0 - 255.
        */
    getBrightness = function getBrightness(lampIndex /* Number */, success) {
        get(buildLampQueryURL(lampIndex), function (data) {
            // success
            if (data.state === undefined) {
                // fail
                return;
            }
            success(data.state.bri);
        }, function (err) {
            err = null;
            // fail
        });
        //return lampState.state.bri;
    },

    /**
        * Builds a JSON state object used to set the brightness of a Hue lamp to
        * the value of the brightness parameter.
        *
        * @param {Number} brightness Integer value between 0 and 255. Note that 0
        * is not equivalent to the lamp's off state.
        * @return {Object} JSON object used to set brightness.
        */
    buildBrightnessState = function buildBrightnessState(brightness, transitionTimeOverride) {
        var stateObj = { bri: Number(brightness) };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    adjustBrightness = function adjustBrightness(lampId, brightness, success) {
        brightness = Number(brightness);
        getBrightness(lampId, function (currentBrightness) {
            var adjustedBrightness = currentBrightness + brightness;
            var newBrightness = adjustedBrightness < 255 ? adjustedBrightness : 254;
            newBrightness = adjustedBrightness > 0 ? adjustedBrightness : 0;
            success(Math.round(newBrightness));
        });
    },
    getLightState = function getLightState() {
        bridge.getLightState(onLightUpdate);
    },
    onLightUpdate = function onLightUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state.lights = data.lights;
        }
    },
    onBridgeUpdate = function onBridgeUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state = data;
            onNewState(data);
        }
    },
    getBridgeState = function getBridgeState() {
        bridge.getBridgeState(onBridgeUpdate);
    },
    onNewState = function onNewState(data) {
        //log('Authorized');
        /* jshint ignore:start */
        if (!(typeof testData === 'undefined')) {
            data = testData;
        }
        /* jshint ignore:end */

        // cache state
        state = data;
        // re-create virtual All group:
        var lampIds = $.map(state.lights, function (lamp, key) {
            return key;
        });
        state.groups['0'] = {
            name: 'All',
            lights: lampIds,
            type: 'LightGroup',
            action: {} };


        //log('hue: saving state - ' + JSON.stringify(data));

        numberOfLamps = Object.keys(data.lights).length;
        var message = 'No  lights found';
        if (numberOfLamps === 0) {
            message = 'No lights found.';
        } else if (numberOfLamps === 1) {
            message = 'One light found.';
        } else {
            message = '' + numberOfLamps + ' lights found.';
        }

        log('Updating Status - ok...');
        updateStatus('OK', message);
    },

    /**
        * Log to console
        */
    updateStatus = function updateStatus(inStatus, text, data) {
        var newStatus = { status: inStatus, text: text, data: data };
        onStatus(newStatus);
    },
    onStatus = function onStatus(newStatus) {
        if (JSON.stringify(status) !== JSON.stringify(newStatus)) {
            console.log('hue: status change, ' + newStatus.status + ', text: ' + newStatus.text + ', data: ' + newStatus.data);
            status = newStatus;
        }
    },
    log = function log(text) {
        console.log('hue: ' + text);
        if (typeof logHandler !== 'undefined') {
            logHandler(text);
        }
    },
    _setHueSatState = function _setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
        var state = buildHueSatState(hue, sat, bri, transitiontime);
        put(lampIndex, state);
    },
    _setXYState = function _setXYState(lampIndex /* Number */, xy, transitiontime, bri) {
        var state = buildXYState(xy, bri, transitiontime);
        put(lampIndex, state);
    };

    return {
        /** 
              * Flash the lamp at lampIndex for a short time. 
              *	
              * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
              * @return {Object} JSON object containing lamp state.
              */
        flash: function flash(lampIndex /* Number */) {
            return put(lampIndex, shortFlashState);
        },
        /** 
            * Flash all connected lamps for a short time.
            *
            * @return {Object} JSON object containing lamp state.
            */
        flashAll: function flashAll() {
            return putAll(shortFlashState);
        },
        /** 
            * Flash the lamp at lampIndex for a long time.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
            * @return {Object} JSON object containing lamp state.
            */
        longFlash: function longFlash(lampIndex /* Number */) {
            return put(lampIndex, longFlashState);
        },
        /** 
            * Flash all connected lamps for a long time.
            *
            * @return {Object} JSON object containing lamp state.
            */
        longFlashAll: function longFlashAll() {
            return putAll(longFlashState);
        },
        /** 
            * Set the lamp at lampIndex to the approximate CIE x,y equivalent of 
            * the provided hex color.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to colorize.
            * @param {String} color String representing a hexadecimal color value.
            * @return {Object} JSON object containing lamp state.
            */
        setColor: function setColor(lampIndex /* Number */, color /* String */, transitiontime, brightness) {
            var xy = colors.getCIEColor(color);
            if (typeof brightness === 'number') {
                if (brightness < 0) {// min
                    // adjust it:
                    var bri = colorUtil().getBrightness(color);
                    adjustBrightness(lampIndex, bri, function (bri) {
                        _setXYState(lampIndex, xy, transitiontime, bri);
                    });
                    return;
                }
                _setXYState(lampIndex, xy, transitiontime, brightness);

            } else {
                _setXYState(lampIndex, xy, transitiontime, null);
            }
        },
        setXYState: function setXYState(lampIndex, xy, transitiontime, bri) {
            _setXYState(lampIndex, xy, transitiontime, bri);
        },
        /** 
            * Sets state for the hue, saturation, and brightness provided.
            * @param {Number} hue from 0 to 65535.
            * @param {Number} sat from 0 to 255.
            * @param {Number} bri from 0 to 255.
            * @return {Object} State object containing CIE X,Y coordinates.
            */
        setHueSatState: function setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
            _setHueSatState(lampIndex, hue, sat, bri, transitiontime);
        },

        /**
            * Sets all connected lamps to the approximate CIE x,y equivalent of 
            * the provided hex color.
            *
            * @param {String} color String representing a hexadecimal color value.
            * @return {Object} JSON object containing lamp state.
            */
        setAllColors: function setAllColors(color /* String */) {
            var xy = colors.getCIEColor(color);
            colorUtil().getBrightness(color, function (bri) {
                var state = buildXYState(xy, bri);
                putGroupAction(0, state);
            });
        },
        createGroup: function createGroup(name, lights) {
            return postGroup(name, lights);
        },
        removeGroup: function removeGroup(key) {
            return deleteGroup(key);
        },
        createScene: function createScene(name, lights) {
            return putScene(name, lights);
        },
        /** 
            * Turn on scene by key
            */
        startScene: function startScene(sceneKey) {
            var state = buildSceneState(sceneKey);
            return putGroupAction(0, state);
            //var scene = hue.getState().scenes[sceneKey];
            //if (scene !== undefined) {
            //var state = buildSceneState(sceneKey);
            //$.each(scene.lights, function(index, val){
            //    put(val, state);
            //});       
            //}
        },
        startSchedule: function startSchedule(id) {
            return _startSchedule(id);
        },
        /**
            * Turn off the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to turn off.
            * @return {Object} JSON object containing lamp state.
            */
        turnOff: function turnOff(lampIndex /* Number */) {
            return put(lampIndex, offState);
        },
        /** 
            * Turn on the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to turn on.
            * @return {Object} JSON object containing lamp state.
            */
        turnOn: function turnOn(lampIndex /* Number */) {
            return put(lampIndex, onState);
        },
        /** 
            * Turn off all connected lamps.
            *
            * @return {Object} JSON object containing lamp state.
            */
        turnOffAll: function turnOffAll() {
            if (status.status === 'OK') {status.data = false;}
            return putGroupAction(0, offState);
        },
        /** 
            * Turn on all connected lamps.
            *
            * @return {Object} JSON object containing lamp state.
            */
        turnOnAll: function turnOnAll() {
            if (status.status === 'OK') {status.data = true;}
            return putGroupAction(0, onState);
        },
        /**
            * Set the brightness of the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing lamp state.
            */
        setBrightness: function setBrightness(lampIndex /* Number */, brightness /* Number */, transitiontime /* Number */) {
            var state = buildBrightnessState(brightness, transitiontime);
            return put(lampIndex, state);
        },
        /**
            * Set the brightness of all connected lamps.
            *
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing all lamp state.
            */
        setAllBrightness: function setAllBrightness(brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(0, state);
        },
        /**
            * Set the brightness of an indexed group of lamps.
            *
            * @param {Number} groupIndex 0-based lamp group index.
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing group state.
            */
        setGroupBrightness: function setGroupBrightness(groupIndex /* Number */, brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(groupIndex, state);
        },
        /**
            * Dim the lamp at lampIndex by decrement.
            * 
            * @param {Number} lampIndex 1-based lamp index.
            * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
            * @return {Object} JSON object containing lamp state.
            */
        dim: function dim(lampIndex /* Number */, decrement /* Number */, transitiontime) {
            decrement = decrement || -10; // default to 10 if decrement not provided.
            adjustBrightness(lampIndex, decrement, function (newBrightness) {
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));
            });
        },
        /**
            * Dim all lamps by decrement.
            * 
            * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
            * @return {Object[]} JSON objects containing lamp states.
            */
        dimAll: function dimAll(decrement /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.dim(i + 1, decrement);
            }
            return states;
        },
        /**
            * Brighten the lamp at lampIndex by increment.
            *
            * @param {Number} lampIndex 1-based lamp index.
            * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
            * @return {Object} JSON object containing lamp state.
            */
        brighten: function brighten(lampIndex, increment, transitiontime) {
            increment = increment || 10;
            adjustBrightness(lampIndex, increment, function (newBrightness) {
                //this.setBrightness(lampIndex, newBrightness, transitiontime);
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));
            });
        },
        /**
            * Brighten all lamps by increment.
            *
            * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
            * @return {Object[]} JSON objects containing lamp states.
            */
        brightenAll: function brightenAll(increment /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.brighten(i + 1, increment);
            }
            return states;
        },
        /** 
            * Return the value of the configured transitionTime property.
            *
            * @return {Number} Value of the transitionTime property. Null by default if not
            * set.
            */
        getTransitionTime: function getTransitionTime() {
            return transitionTime;
        },
        /**
            * Set the value of the transitionTime property.
            *
            * @param {Number} time Lamp color transition time in approximate milliseconds.
            */
        setTransitionTime: function setTransitionTime(time /* Number */) {
            transitionTime = time;
        },
        /**
            * Find bridges  findBridge() a upnp, then scan, then predefined typical ips. 
            */
        //findBridge: function(onerror) {
        // deprecated, use discover 
        //},
        /**
         * Set the number of lamps available to control.
         *
         * @param {Number} The total number of lamps available to interact with. Default is 3.
         */
        setNumberOfLamps: function setNumberOfLamps(numLamps /* Number */) {
            if (typeof numLamps === 'number') {
                numberOfLamps = numLamps;
            }
        },
        setLogger: function setLogger(func) {
            console.log('new subscriber to log change registered;');
            logHandler = func;
        },
        getState: function getState() {
            return state;
        },
        getStatus: function getStatus() {
            return status;
        },
        refresh: function refresh() {
            getBridgeState();
        },
        heartbeat: function heartbeat() {
            getLightState();
        },
        getLampIds: function getLampIds(actors) {
            // parse actors
            //actors
            if (actors === null) {
                return []; // no lamps
            }
            if (actors.substring(0, 'group-'.length) === 'group-')
            {
                var group = actors.substring('group-'.length);
                if (state.groups[group] === undefined) {
                    // error.
                    return [];
                }
                return state.groups[group].lights;
            }
            return [actors]; // lights: prefix not used, just return array of number.
        },
        discover: function discover(ip) {
            rediscover(ip);
        } };

};


function findActors(key) {
    return findGroupIdByName(key);
}

function findGroupIdByName(name) {
    if (name.toLowerCase() === 'all') {
        return '0'; // special case group-0 is all.
    }
    var state = window.hue.getState();
    if (state !== null) {
        for (var group in state.groups) {
            if (state.groups[group].name.toLowerCase() === name.toLowerCase()) {
                return group;
            }
        }
    }
    return null;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Color Util
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

'use strict';

/*exported colorUtil */
var colorUtil = function colorUtil() {


    function colourNameToHex(colour)
    {
        var colours = {
            'aliceblue': '#f0f8ff',
            'antiquewhite': '#faebd7',
            'aqua': '#00ffff',
            'aquamarine': '#7fffd4',
            'azure': '#f0ffff',
            'beige': '#f5f5dc',
            'bisque': '#ffe4c4',
            'black': '#000000',
            'blanchedalmond': '#ffebcd',
            'blue': '#0000ff',
            'blueviolet': '#8a2be2',
            'brown': '#a52a2a',
            'burlywood': '#deb887',
            'cadetblue': '#5f9ea0',
            'chartreuse': '#7fff00',
            'chocolate': '#d2691e',
            'coral': '#ff7f50',
            'cornflowerblue': '#6495ed',
            'cornsilk': '#fff8dc',
            'crimson': '#dc143c',
            'cyan': '#00ffff',
            'darkblue': '#00008b',
            'darkcyan': '#008b8b',
            'darkgoldenrod': '#b8860b',
            'darkgray': '#a9a9a9',
            'darkgreen': '#006400',
            'darkkhaki': '#bdb76b',
            'darkmagenta': '#8b008b',
            'darkolivegreen': '#556b2f',
            'darkorange': '#ff8c00',
            'darkorchid': '#9932cc',
            'darkred': '#8b0000',
            'darksalmon': '#e9967a',
            'darkseagreen': '#8fbc8f',
            'darkslateblue': '#483d8b',
            'darkslategray': '#2f4f4f',
            'darkturquoise': '#00ced1',
            'darkviolet': '#9400d3',
            'deeppink': '#ff1493',
            'deepskyblue': '#00bfff',
            'dimgray': '#696969',
            'dodgerblue': '#1e90ff',
            'firebrick': '#b22222',
            'floralwhite': '#fffaf0',
            'forestgreen': '#228b22',
            'fuchsia': '#ff00ff',
            'gainsboro': '#dcdcdc',
            'ghostwhite': '#f8f8ff',
            'gold': '#ffd700',
            'goldenrod': '#daa520',
            'gray': '#808080',
            'green': '#008000',
            'greenyellow': '#adff2f',
            'honeydew': '#f0fff0',
            'hotpink': '#ff69b4',
            'indianred ': '#cd5c5c',
            'indigo': '#4b0082',
            'ivory': '#fffff0',
            'khaki': '#f0e68c',
            'lavender': '#e6e6fa',
            'lavenderblush': '#fff0f5',
            'lawngreen': '#7cfc00',
            'lemonchiffon': '#fffacd',
            'lemon': '#fffacd',
            'lightblue': '#add8e6',
            'lightcoral': '#f08080',
            'lightcyan': '#e0ffff',
            'lightgoldenrodyellow': '#fafad2',
            'lightgrey': '#d3d3d3',
            'lightgreen': '#90ee90',
            'lightpink': '#ffb6c1',
            'lightsalmon': '#ffa07a',
            'lightseagreen': '#20b2aa',
            'lightskyblue': '#87cefa',
            'lightslategray': '#778899',
            'lightsteelblue': '#b0c4de',
            'lightyellow': '#ffffe0',
            'lime': '#00ff00',
            'limegreen': '#32cd32',
            'linen': '#faf0e6',
            'magenta': '#ff00ff',
            'maroon': '#800000',
            'mediumaquamarine': '#66cdaa',
            'mediumblue': '#0000cd',
            'mediumorchid': '#ba55d3',
            'mediumpurple': '#9370d8',
            'mediumseagreen': '#3cb371',
            'mediumslateblue': '#7b68ee',
            'mediumspringgreen': '#00fa9a',
            'mediumturquoise': '#48d1cc',
            'mediumvioletred': '#c71585',
            'midnightblue': '#191970',
            'mintcream': '#f5fffa',
            'mistyrose': '#ffe4e1',
            'moccasin': '#ffe4b5',
            'navajowhite': '#ffdead',
            'navy': '#000080',
            'oldlace': '#fdf5e6',
            'olive': '#808000',
            'olivedrab': '#6b8e23',
            'orange': '#ffa500',
            'orangered': '#ff4500',
            'orchid': '#da70d6',
            'palegoldenrod': '#eee8aa',
            'palegreen': '#98fb98',
            'paleturquoise': '#afeeee',
            'palevioletred': '#d87093',
            'papayawhip': '#ffefd5',
            'peachpuff': '#ffdab9',
            'peru': '#cd853f',
            'pink': '#ffc0cb',
            'plum': '#dda0dd',
            'powderblue': '#b0e0e6',
            'purple': '#800080',
            'red': '#ff0000',
            'rosybrown': '#bc8f8f',
            'royalblue': '#4169e1',
            'saddlebrown': '#8b4513',
            'salmon': '#fa8072',
            'sandybrown': '#f4a460',
            'seagreen': '#2e8b57',
            'seashell': '#fff5ee',
            'sienna': '#a0522d',
            'silver': '#c0c0c0',
            'skyblue': '#87ceeb',
            'slateblue': '#6a5acd',
            'slategray': '#708090',
            'snow': '#fffafa',
            'springgreen': '#00ff7f',
            'steelblue': '#4682b4',
            'tan': '#d2b48c',
            'teal': '#008080',
            'thistle': '#d8bfd8',
            'tomato': '#ff6347',
            'turquoise': '#40e0d0',
            'violet': '#ee82ee',
            'wheat': '#f5deb3',
            'white': '#ffffff',
            'whitesmoke': '#f5f5f5',
            'yellow': '#ffff00',
            'yellowgreen': '#9acd32',

            'minty': '#98FF98',
            'coldwhite': '#FFF4E5',
            'warmwhite': '#D4EBFF' };


        // if key exists
        if (typeof colours[colour.toLowerCase()] !== 'undefined') {
            return colours[colour.toLowerCase()];
        }

        return false;
    }

    function isColorHex(hex) {
        var isColor = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
        if (isColor) {
            return true;
        }
        return false;
    }

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }

    function hexToRgb(hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });

        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16) } :
        null;
    }
    /*
      //Converts to color HSB object (code from here 
      // http://www.csgnetwork.com/csgcolorsel4.html 
      //with some improvements)
      function rgb2hsb(r, g, b) {    
          r /= 255; g /= 255; b /= 255; // Scale to unity.   
          var minVal = Math.min(r, g, b),
          maxVal = Math.max(r, g, b),
          delta = maxVal - minVal,
          HSB = {hue:0, sat:0, bri:maxVal},
          del_R, del_G, del_B;
           if( delta !== 0 ) {
              HSB.sat = delta / maxVal;
              del_R = (((maxVal - r) / 6) + (delta / 2)) / delta;
              del_G = (((maxVal - g) / 6) + (delta / 2)) / delta;
              del_B = (((maxVal - b) / 6) + (delta / 2)) / delta;
               if (r === maxVal) {HSB.hue = del_B - del_G;}
              else if (g === maxVal) {HSB.hue = (1 / 3) + del_R - del_B;}
              else if (b === maxVal) {HSB.hue = (2 / 3) + del_G - del_R;}
               if (HSB.hue < 0) {HSB.hue += 1;}
              if (HSB.hue > 1) {HSB.hue -= 1;}
          }
           HSB.hue *= 360;
          HSB.sat *= 100;
          HSB.bri *= 100;
           return HSB;
      }
      */






    return {
        getColor: function getColor(command) {
            //log('get color: ' + command);

            var foundColor = colourNameToHex(command);
            if (foundColor !== false) {
                return foundColor;
            }

            var isColor = isColorHex(command);
            if (isColor) {
                return command;
            }
            return false;
        },
        getBrightness: function getBrightness(hex) {
            var rgb = hexToRgb(hex);
            return Math.round(0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b);
        },
        rgbToHex: function rgbToHex(r, g, b) {
            return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
        } };

};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Philips Hue Commander wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals trackEvent, $, findActors */
/*exported 
                                           hueCommander,
                                           executeCommand,
                                           activatedScene
                                        */

'use strict';

var hueCommander = function hueCommander($, hue, colorUtil, sceneCmd) {

    var logger = null,
    actorId = null,
    stateCache = null,
    executeCommand = function executeCommand(command) {
        log('executing command: ' + command + ' on actor: ' + actorId);
        trackEvent('huecommander', 'command', command);

        if (actorId === null) {
            // by default set all group
            var groupAll = findActors('All');
            if (groupAll === null) {
                actorId = 'group-1';
            } else {
                actorId = 'group-' + groupAll;
            }
        }

        if (command === undefined) {
            return;
        }
        if (command === 'brighten' || command === 'up') {
            //hue.brightenAll(Math.floor(255 / 3));
            executeOnActors(function (bulb) {
                hue.brighten(bulb, Math.floor(255 / 3));
            });
        }
        if (command === 'darken' || command === 'dim' || command === 'dim down' || command === 'down') {
            //hue.brightenAll(Math.floor(-255 / 3));
            executeOnActors(function (bulb) {
                hue.dim(bulb, -Math.floor(255 / 3));
            });
        }
        if (command === 'on') {
            executeOnActors(function (bulb) {
                hue.turnOn(bulb);
            });
            return;
        }
        if (command === 'off') {
            executeOnActors(function (bulb) {
                hue.turnOff(bulb);
            });
            return;
        }
        var json = parseJson(command);
        if (json !== null)
        {
            // hue, sat, bri command:
            if ('hue' in json) {
                executeOnActors(function (bulb) {
                    hue.setHueSatState(bulb, json.hue, json.sat, json.bri, json.time);
                });
                return;
            } else if ('bri' in json) {
                executeOnActors(function (bulb) {
                    hue.setBrightness(bulb, json.bri);
                });
                return;
            }
            //else if('color' in json) {
            //    hue.setColor(color.substring(1));
            //}
        }
        var bri = detectBrightness(command);
        if (bri !== null) {
            executeOnActors(function (bulb) {
                hue.setBrightness(bulb, bri);
            });
            return;
        }
        var color = colorUtil.getColor(command);
        if (color !== false) {
            executeOnActors(function (bulb) {
                hue.setColor(bulb, color.substring(1));
            });
            return;
        }

        if (command === 'scene:stop') {
            sceneCmd.stop();
            restoreState();
            return 'stop';
        } else {
            if (command.lastIndexOf('scene:', 0) === 0) {
                var sceneName = command.substring(6);
                var lampids = hue.getLampIds(actorId);

                saveState();

                sceneCmd.start(sceneName, lampids);
                return sceneName;
            } else if (command.lastIndexOf('schedule:', 0) === 0) {
                var scheduleId = command.substring('schedule:'.length);
                hue.startSchedule(scheduleId);
                return;
            }

        }
    },
    parseJson = function parseJson(cmd) {
        try {
            if (cmd.startsWith('{')) {
                return JSON.parse(cmd);
            }
        }
        catch (ex)
        {
            log('Bad command:' + cmd + ' ex:' + ex.message);
        }
        return null;
    },
    saveState = function saveState() {
        if (stateCache === null) {
            stateCache = getActorStatesInternal();
            log('Saved state' + JSON.stringify(stateCache));
        }
    },
    restoreState = function restoreState() {
        if (stateCache !== null) {
            var newstate = stateCache;
            stateCache = null;
            log('Restoring state' + JSON.stringify(newstate));
            $.each(newstate, function (key, value) {
                hue.setXYState(value.key, value.state.xy, 0, value.state.bri);
            });
            hue.heartbeat(); // force refresh from bridge
        }
    },
    executeOnActors = function executeOnActors(func) {
        sceneCmd.stop();
        restoreState();

        var lampIds = hue.getLampIds(actorId);
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];
        }
        $.each(lampIds, function (index, val) {
            func(val, index);
        });
    },
    detectBrightness = function detectBrightness(command) {
        if (command === undefined) {
            return null;
        }
        if (command.startsWith('bri:')) {
            return command.substring('bri:'.length);
        }
        return null;
    },
    log = function log(text) {
        if (logger !== null) {
            logger(text);
        }
    },
    getActorStatesInternal = function getActorStatesInternal() {
        var lampIds = hue.getLampIds(actorId);
        var state = window.hue.getState();
        var actorStates = [];
        if (state.lights !== null) {
            for (var i in state.lights) {
                var lamp = state.lights[i];
                lamp.key = i;
                if (lampIds.indexOf(i) !== -1) {
                    actorStates.push(lamp);
                }
            }
        }
        return actorStates;
    },
    getActorBrightnessInternal = function getActorBrightnessInternal() {
        var bri = 0;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            if (lamp.state.bri > bri) {
                bri = lamp.state.bri;
            }
        });
        return bri;
    },
    getActorTurnedOn = function getActorTurnedOn() {
        var on = false;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            on = on || lamp.state.on;
        });
        return on;
    },
    _discover = function _discover(ip) {
        hue.discover(ip);
    },
    _heartbeat = function _heartbeat() {
        hue.heartbeat();
    },
    _createGroup = function _createGroup(name, lampIds) {
        hue.createGroup(name, lampIds);
    },
    _removeGroup = function _removeGroup(key) {
        hue.removeGroup(key);
    },
    _createScene = function _createScene(key) {
        var lampIds = hue.getLampIds(actorId);
        hue.createScene(key, lampIds);
    },
    _refresh = function _refresh() {
        hue.refresh();
    },
    _flash = function _flash(key) {
        hue.flash(key);
    },
    _getState = function _getState() {
        var state = hue.getState();
        state.actorId = actorId;
        return state;
    },
    _getStatus = function _getStatus() {
        return hue.getStatus();
    },
    _palette = function _palette(colors) {
        return sceneCmd.palette(colors);
    };



    return {
        setActor: function setActor(actor) {
            actorId = actor;
            return actorId;
        },
        getActor: function getActor(actor) {
            return actorId;
        },
        getActorBrightness: function getActorBrightness() {
            return {
                bri: getActorBrightnessInternal(),
                on: getActorTurnedOn() };

        },
        getActorStates: function getActorStates() {
            return getActorStatesInternal();
        },
        command: function command(commandText) {
            return executeCommand(commandText);
        },
        setLogger: function setLogger(logHandler) {
            logger = logHandler;
        },
        discover: function discover(ip) {
            _discover(ip);
        },
        heartbeat: function heartbeat() {
            _heartbeat();
        },
        createGroup: function createGroup(group) {
            //name, lampIds){
            _createGroup(group.name, group.lampIds);
        },
        removeGroup: function removeGroup(key) {
            _removeGroup(key);
        },
        createScene: function createScene(name) {
            //name, lampIds){
            _createScene(name);
        },
        refresh: function refresh() {
            _refresh();
        },
        flash: function flash(key) {
            _flash(key);
        },
        getState: function getState() {
            return _getState();
        },
        getStatus: function getStatus() {
            return _getStatus();
        },
        palette: function palette(colors) {
            return _palette(colors);
        },
        parse: function parse(cmd) {
            return this[cmd.hueCommand.command](cmd.hueCommand.args);
        } };

};


function executeCommand(command) {
    window.hueCommander.command(command);
    //activatedScene('stop');
    return false;
}

function activatedScene(key) {
    $('#scenes button').removeClass('active');
    $('.scene').removeClass('active');
    $('#scenes button[id="' + key + '"]').addClass('active');
    $('.scene[data-scene="' + key + '"]').addClass('active');
}

function activatedSchedule(key) {
    $('#schedule button').removeClass('active');
    $('.schedule').removeClass('active');
    $('#schedule button[id="schedule-' + key + '"]').addClass('active');
    $('.schedule[data-schedule="' + key + '"]').addClass('active');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

// Dmitry Sadakov 2015 Voice module
/*globals 
    SpeechSynthesisUtterance: false,
    trackEvent
*/
/*exported voice, voiceCommander, huevoice, voiceCmd */
'use strict';

var voice = function voice() {

    var recognition = null;
    var callback = null;
    var errfunc = null;
    var endfunc = null;

    function _speak(text) {
        if ('speechSynthesis' in window) {
            var speech = new SpeechSynthesisUtterance();
            speech.lang = 'en-US';
            speech.text = text;
            window.speechSynthesis.speak(speech);
        }
    }

    function available() {
        var SpeechRecognition = window.SpeechRecognition ||
        window.webkitSpeechRecognition ||
        window.mozSpeechRecognition ||
        window.msSpeechRecognition ||
        window.oSpeechRecognition;
        return SpeechRecognition;
    }

    function _recognize(callbackFunc, err, onend) {
        callback = callbackFunc;
        errfunc = err;
        endfunc = onend;

        var SpeechRecognition = available();
        if (SpeechRecognition !== undefined) {
            if (recognition === null) {
                recognition = new SpeechRecognition();
            } else {
                return recognition;
            }
        } else
        {
            console.error('Your browser does not support the Web Speech API');
            _speak('Voice not supported');
            return null;
        }
        recognition.lang = 'en-US';
        recognition.continuous = true;
        recognition.interimResults = false;
        recognition.onresult = onSpeechResult;
        recognition.onstart = onStarted;
        recognition.onerror = onErrored;
        recognition.onend = onEnd;
        return recognition;
    }

    function onStarted() {
        console.log('voice started');
        trackEvent('voice', 'started');
    }

    function onErrored(err) {
        console.log('voice error: ' + err);
        if (errfunc) {
            errfunc(err);
        }
        trackEvent('voice', 'error', err.message);
    }

    function onEnd() {
        console.log('voice end');
        //recognition.start();
        if (endfunc) {
            endfunc();
        }
    }

    function onSpeechResult(e) {
        var text = '';
        for (var i = e.resultIndex; i < e.results.length; ++i) {
            text += e.results[i][0].transcript;
        }

        console.log('voice:' + text);
        trackEvent('voice', 'speech', text);

        if (callback) {
            callback(text);
        }
    }

    function _start() {
        if (recognition) {
            recognition.start();
        }
    }

    function _stop() {
        if (recognition) {
            recognition.stop();
        }
    }

    function _abort() {
        if (recognition) {
            recognition.abort();
        }
    }

    return {
        speak: function speak(text) {
            return _speak(text);
        },
        recognize: function recognize(func, errfunc, endfunc) {
            return _recognize(func, errfunc, endfunc);
        },
        start: function start() {
            return _start();
        },
        stop: function stop() {
            return _stop();
        },
        abort: function abort() {
            return _abort();
        },
        notAvailable: function notAvailable() {
            return available() === undefined;
        } };

};


var reaction = function reaction() {
    var items = [];
    var filters = [];
    var otherwise = null;

    function _on(regex, func) {
        items.push([regex, func]);
    }

    function filterAdd(func) {
        filters.push(func);
    }

    function _setDefault(func) {
        otherwise = func;
    }

    function _react(text) {
        var textIn = text;
        for (var index in filters) {
            text = filters[index](text);
        }

        var obj = { 'voice': true, 'text': textIn, 'text-reaction': text, match: false };
        for (var item in items) {
            if (items[item][0].test(text)) {
                console.log('filtered text: "' + textIn + '" -> "' + text + '" matched: ' + items[item][0]);
                obj.match = items[item][0];
                trackEvent('voice', 'reaction', text, textIn, obj);
                var args = items[item][0].exec(text);
                args.unshift(text);
                var func = items[item][1];
                func.apply(null, args);
                return;
            }
        }
        console.log('filtered text: "' + textIn + '" -> "' + text + '", no match');
        trackEvent('voice', 'reaction', text, textIn, obj);
        if (otherwise) {
            otherwise.apply(null, [text]);
        }
    }

    return {
        on: function on(text, func) {
            _on(text, func);
        },
        react: function react(text) {
            _react(text);
        },
        setDefault: function setDefault(text) {
            _setDefault(text);
        },
        filter: function filter(func) {
            filterAdd(func);
        } };

};

var voiceCommander = function voiceCommander(voiceFunc) {
    var voiceCallback = voiceFunc;

    function lightCmdParser() {
        var cmds = new reaction();
        cmds.filter(removeDeterminers);
        cmds.filter(replaceLightSynonyms);
        cmds.filter(replaceSceneSynonyms);
        cmds.filter(replaceCommandSynonyms);

        cmds.on(/make it look like (?:a )?(.+)/, sceneCmd);
        cmds.on(/(?:start |stop )(?:dynamic )?([a-z ]+)(?: scene| lights)?(?: in )([a-z ]+)/, toggleSceneCmd);
        cmds.on(/(start|stop)(?: dynamic)?(?: scene| lights)?/, toggleSceneCmd);
        cmds.on(/(?:set|up|dim) ([a-z ]+) to ([a-z0-9%]*)(?: brightness)?/, inverseCmd);
        cmds.on(/(?:set|up|dim) to ([a-z0-9%]*)(?: brightness)?/, voiceCmd);
        cmds.on(/(on|off|up|dim)+? ([a-z]+)+/, voiceCmd);
        cmds.on(/([a-z0-9% ]*) brightness/, inverseCmd);
        cmds.on(/([a-z]+) (on|off|up|dim|dimmer)+?/, inverseCmd);
        cmds.on(/(on|off|up|dim|dimmer)+ ([a-z]+)/, voiceCmd);
        cmds.on(/(on|off|up|down|dim|lower|higher)/, voiceCmd);
        cmds.setDefault(function (text) {
            voiceCallback(text);
        });
        return cmds;
    }

    function removeDeterminers(text) {
        return text.replace(/the |my /g, '');
    }

    function replaceLightSynonyms(text) {
        return text.replace(/bulbs |lamps |lights | lights?/g, '');
    }

    function replaceCommandSynonyms(text) {
        text = text.replace(/ percent/g, '%');
        text = text.replace(/maximum/g, '100%');
        text = text.replace(/minimum/g, '1%');
        text = text.replace(/turn /g, '');
        text = text.replace(/dim down|down|dimmer/g, 'dim');
        text = text.replace(/animate|continue/g, 'start');
        text = text.replace(/brighten|lighten/g, 'up');
        return text;
    }

    function replaceSceneSynonyms(text) {
        return text.replace(/animation|theme/g, 'scene');
    }

    function voiceCmd(text, match, action, actor) {
        if (voiceCallback) {
            voiceCallback(text, match, action, actor);
        }
    }

    //function inverseSceneCmd(text, match, actor, action) {
    //  voiceCmd(text, match, 'scene:' + action, actor);
    //}

    function toggleSceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);
    }

    function inverseCmd(text, match, actor, action) {
        voiceCmd(text, match, action, actor);
    }

    function sceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);
    }

    return lightCmdParser();
};



/*   voice commands */
var huevoice = null;

/*
                     function voiceError(err){
                       var mic = $('#voice-mic');
                       mic.removeClass('active');
                       console.error(err);
                     }
                     
                     function voiceEnd(){
                       var mic = $('#voice-mic');
                       mic.removeClass('active');
                       console.log('voice end');
                     }*/


function voiceCmd(text, match, action, actor) {
    if (window.voiceCmdFunc) {
        window.voiceCmdFunc(text, match, action, actor);
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Philips Hue app
 */

'use strict';

/* globals chrome */
/*exported hueProxy
                     */

var hueProxy = function hueProxy(hueCommander) {

    function sendToMothership(obj, args, callback) {
        if (hueCommander) {
            var result = hueCommander.parse(obj, args);
            if (result && callback) {
                callback(result);
            }
        } else {
            //var editorExtensionId = 'bkjobgdhkjdholiipmcdbaefnoacfkcc';
            var editorExtensionIdProd = 'ahcbfmbmpojngalhbkkggbfamgmkneoo';
            //chrome.runtime.sendMessage(editorExtensionId, obj, callback);
            chrome.runtime.sendMessage(editorExtensionIdProd, obj, callback);
        }
    }

    function hueCommand(command, args, callback) {
        if (typeof args === 'function') {
            // reorder arguments if second is skipped
            callback = args;
            args = undefined;
        }
        var obj = {
            hueCommand: {
                command: command,
                args: args } };


        sendToMothership(obj, args, callback);
    }

    return {
        cmd: hueCommand,
        sendToMothership: sendToMothership };

};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh1ZVByb3h5LmpzIl0sIm5hbWVzIjpbImh1ZVByb3h5IiwiaHVlQ29tbWFuZGVyIiwic2VuZFRvTW90aGVyc2hpcCIsIm9iaiIsImFyZ3MiLCJjYWxsYmFjayIsInJlc3VsdCIsInBhcnNlIiwiZWRpdG9yRXh0ZW5zaW9uSWRQcm9kIiwiY2hyb21lIiwicnVudGltZSIsInNlbmRNZXNzYWdlIiwiaHVlQ29tbWFuZCIsImNvbW1hbmQiLCJ1bmRlZmluZWQiLCJjbWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUE7O0FBRUE7QUFDQTs7O0FBR0EsSUFBSUEsV0FBVyxTQUFYQSxRQUFXLENBQVNDLFlBQVQsRUFBdUI7O0FBRWxDLGFBQVNDLGdCQUFULENBQTBCQyxHQUExQixFQUErQkMsSUFBL0IsRUFBcUNDLFFBQXJDLEVBQThDO0FBQzFDLFlBQUlKLFlBQUosRUFBa0I7QUFDZCxnQkFBSUssU0FBU0wsYUFBYU0sS0FBYixDQUFtQkosR0FBbkIsRUFBd0JDLElBQXhCLENBQWI7QUFDQSxnQkFBSUUsVUFBVUQsUUFBZCxFQUF3QjtBQUNwQkEseUJBQVNDLE1BQVQ7QUFDSDtBQUNKLFNBTEQsTUFLTztBQUNIO0FBQ0EsZ0JBQUlFLHdCQUF3QixrQ0FBNUI7QUFDQTtBQUNBQyxtQkFBT0MsT0FBUCxDQUFlQyxXQUFmLENBQTJCSCxxQkFBM0IsRUFBa0RMLEdBQWxELEVBQXVERSxRQUF2RDtBQUNIO0FBQ0o7O0FBRUQsYUFBU08sVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkJULElBQTdCLEVBQW1DQyxRQUFuQyxFQUE2QztBQUN6QyxZQUFJLE9BQU9ELElBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDN0I7QUFDQUMsdUJBQVdELElBQVg7QUFDQUEsbUJBQU9VLFNBQVA7QUFDSDtBQUNELFlBQUlYLE1BQU07QUFDTlMsd0JBQVk7QUFDUkMseUJBQVNBLE9BREQ7QUFFUlQsc0JBQU1BLElBRkUsRUFETixFQUFWOzs7QUFNQUYseUJBQWlCQyxHQUFqQixFQUFzQkMsSUFBdEIsRUFBNEJDLFFBQTVCO0FBQ0g7O0FBRUQsV0FBTztBQUNIVSxhQUFLSCxVQURGO0FBRUhWLDBCQUFrQkEsZ0JBRmYsRUFBUDs7QUFJSCxDQW5DRCIsImZpbGUiOiJodWVQcm94eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG1pdHJ5IFNhZGFrb3YncyBQaGlsaXBzIEh1ZSBhcHBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbHMgY2hyb21lICovXG4vKmV4cG9ydGVkIGh1ZVByb3h5XG4qL1xuXG52YXIgaHVlUHJveHkgPSBmdW5jdGlvbihodWVDb21tYW5kZXIpIHtcblxuICAgIGZ1bmN0aW9uIHNlbmRUb01vdGhlcnNoaXAob2JqLCBhcmdzLCBjYWxsYmFjayl7XG4gICAgICAgIGlmIChodWVDb21tYW5kZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBodWVDb21tYW5kZXIucGFyc2Uob2JqLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy92YXIgZWRpdG9yRXh0ZW5zaW9uSWQgPSAnYmtqb2JnZGhramRob2xpaXBtY2RiYWVmbm9hY2ZrY2MnO1xuICAgICAgICAgICAgdmFyIGVkaXRvckV4dGVuc2lvbklkUHJvZCA9ICdhaGNiZm1ibXBvam5nYWxoYmtrZ2diZmFtZ21rbmVvbyc7XG4gICAgICAgICAgICAvL2Nocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKGVkaXRvckV4dGVuc2lvbklkLCBvYmosIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKGVkaXRvckV4dGVuc2lvbklkUHJvZCwgb2JqLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodWVDb21tYW5kKGNvbW1hbmQsIGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YoYXJncykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIHJlb3JkZXIgYXJndW1lbnRzIGlmIHNlY29uZCBpcyBza2lwcGVkXG4gICAgICAgICAgICBjYWxsYmFjayA9IGFyZ3M7XG4gICAgICAgICAgICBhcmdzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBodWVDb21tYW5kOiB7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogY29tbWFuZCxcbiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNlbmRUb01vdGhlcnNoaXAob2JqLCBhcmdzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY21kOiBodWVDb21tYW5kLFxuICAgICAgICBzZW5kVG9Nb3RoZXJzaGlwOiBzZW5kVG9Nb3RoZXJzaGlwXG4gICAgfTtcbn07Il19

/**
 * Dmitry Sadakov"s Philips Hue api wrapper popup page
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved.
 */

'use strict';
/*jshint multistr: true */

/*globals $:false,
                                     chrome:false,
                                     hueCommander:true,
                                     hue:false,
                                     sceneCommander:false,
                                     Palettes:false,
                                     scenes:false,
                                     trackEvent:false,
                                     trackState,
                                     colorUtil:false,
                                     ga:false
                                     Ambient:false,
                           		      config:false,
                                     voice: true,
                                     huevoice: true,
                                     findActors,
                                     activatedScene,
                                     voiceCommander,
                                     hueProxy
                           
                           */

/* exported voiceCmdFunc */

var heartbeat = null; // setInterval(hue.heartbeat, 1000); // dies with closed popup.

var sceneCmd = null;
var ambieye = null;
var heartbeatInterval = 10000;

var hubStartTime = new Date().getTime();


/* search */
var clPalettes = null;
var skip = 0;

var manualIpInputAnimation = null;

var gravity = {
  active: false,
  a: 0,
  b: 0,
  g: 0,
  x: 0,
  y: 0,
  z: 0,
  hue: 0,
  bri: 0,
  sat: 255,
  north: 0,
  northhue: false,
  timer: null,
  delaySend: null };



var hideCircleTimer = null;

var delayedSend = null;

var circle = $('#picker-circle');

$(document).ready(function () {

  initGlobals();

  initSlider();
  initSubscribe();
  initSearch();
  initManualBridge();
  initGroupCreation();
  initSceneCreation();

  // todo: safe to remove?
  if (window.hue.status === 'OK') {
    $('#lightswitch').prop('checked', window.hue.status.data);
  }

  $('.voice-control').hide();

  initLightswitch();
  initPalettes();
  initPickers();
  initGravity();

  initAmbientEye();
  initCloseMinimize();

  initDateTimePickers();


  //$('footer a').click(handleSystemLink);
  $('.nativeclick').click(handleSystemLink);

});

// Wait for device API libraries to load
document.addEventListener('deviceready', onDeviceReady, false);
var isDevice = false;
// device APIs are available
//
function onDeviceReady() {
  //var ref = window.open('http://apache.org', '_blank', 'location=yes');
  // onclick="window.open('http://bit.ly/lightpro','_blank');"
  isDevice = true;
}


function handleSystemLink(a) {
  /*jshint validthis:true */

  var url = $(this).attr('href');
  //var url = a.target.href;
  //if (a.target.href === undefined) {
  //  url = $(a.target).attr('href');
  //}

  // windows 7 app defines winapp:
  if (window.winapp !== undefined) {
    window.winapp.handleUrl(url);
    return false;
  }

  if (typeof navigator.app !== 'undefined' && navigator.app.loadUrl != undefined) {
    navigator.app.loadUrl(url, { openExternal: true });
  } else if (isDevice) {
    window.open(url, '_system', 'location=yes');
  } else {
    window.open(url, '_blank', 'location=yes');
  }

  return false;
}

function amExtension() {
  return typeof chrome !== 'undefined' && chrome.extension !== undefined;
}

function initGlobals() {


  $('body').addClass(config.app);
  //config.ambieye
  $('.config-moods').toggle(config.scenes);
  $('.config-colors').toggle(config.scenes);
  $('.config-search').toggle(config.search);
  $('.config-ambieye').toggle(config.ambieye);
  $('.config-feedback').toggle(config.feedback);

  if (config.app !== 'app') {
    /* jshint ignore:start */
    // Set colors
    /*
    UserVoice.push(['set', {
      target : '#uservoice',
      accent_color: '#448dd6',
      trigger_color: 'white',
      trigger_background_color: 'rgba(46, 49, 51, 0.6)',
      strings: {
        post_suggestion_body: ''
        //post_suggestion_title: '',
        //post_suggestion_details_title: ''
       }
    }]);
    */

    /* jshint ignore:end */
  }

  var background = null;
  if (window.externalBackground !== undefined) {
    log('loading as page with external background reference');
    background = window.externalhuebk;
  } else if (amExtension()) {
    log('loading as chrome extention popup');
    background = chrome.extension.getBackgroundPage();
  }

  $('#https-proxy').hide();

  if (location.protocol === 'https:') {
    /* todo: disfunctional probably */
    // page is secure, hue commander needs to use proxy to LPS.
    window.hueProxy = hueProxy();

    $('#https-proxy').show();

    ambieye = window.Ambient;
    window.hue = hue(window.jQuery, window.colors);
    sceneCmd = sceneCommander(window.jQuery, window.hue);
    window.hueCommander = hueCommander(window.jQuery, window.hue, colorUtil(), sceneCmd);

  } else if (background !== null) {
    window.hue = background.hue;
    sceneCmd = background.sceneCmd;
    ambieye = background.Ambient;
    huevoice = background.voice();
    hueCommander = background.hueCommander;
    window.hueProxy = hueProxy(window.hueCommander);
    tryEnableEye();
    ambieye.onUpdate(updatePreviewColors);
    $('#ambieyepermissions').click(initRequestEye);

  } else {
    log('loading as no chrome, running standalone');
    // same as in background.js:
    window.hue = hue(window.jQuery, window.colors);
    sceneCmd = sceneCommander(window.jQuery, window.hue);
    ambieye = window.Ambient;
    window.hueCommander = hueCommander(window.jQuery, window.hue, colorUtil(), sceneCmd);
    window.hueProxy = hueProxy(window.hueCommander);
    ambieye.onUpdate(updatePreviewColors);

    hueProxy.cmd('discover');
  }

  log('client: binding to status change.');

  requestStatus();

  $('.switch').hide();
  $('#controls').hide();
  $('.successsubscribe').hide();

  setInitialHeight();
}

function initDateTimePickers() {
  $('.datepicker').pickadate({
    selectMonths: true, // Creates a dropdown to control month
    selectYears: 2 // Creates a dropdown of 2 years to control year
  });

  $('.timepicker').pickatime({
    default: 'now', // Set default time
    fromnow: 0, // set default time to * milliseconds from now (using with default = 'now')
    twelvehour: true, // Use AM/PM or 24-hour format
    donetext: 'OK', // text for done-button
    cleartext: 'Clear', // text for clear-button
    canceltext: 'Cancel', // Text for cancel-button
    autoclose: true, // automatic close timepicker
    ampmclickable: true, // make AM PM clickable
    aftershow: function aftershow() {} //Function for after opening timepicker
  });


  $("#schedule-repeats").click(toggleRepeatable);
  toggleRepeatable();

  $('.btn-day').click(function () {
    $(this).toggleClass('btn-flat');
  });

  $('select').material_select();

}

function toggleRepeatable() {
  var repeatable = $('#schedule-repeats').is(':checked');
  if (repeatable) {
    $('#schedule-days').slideDown('slow');
    $('#schedule-exact-date').slideUp('slow');
  } else {
    $('#schedule-days').slideUp('slow');
    $('#schedule-exact-date').slideDown('slow');
  }
}

var hueStatusRequestInterval = null;

function requestStatus() {
  window.hueProxy.cmd('getStatus', onHueStatusUpdate);
  if (!hueStatusRequestInterval) {
    hueStatusRequestInterval = setInterval(requestStatus, 500);
  }
}

function onHueStatusUpdate(status) {
  if (status) {
    onStatus(status);
  }
}

function initRequestEye() {
  requestAmbientPermissionOnClient(function (granted) {
    if (granted) {
      tryEnableEye();
    }
  });
}

function setInitialHeight() {

  if (config.app === 'web') {
    // do nothing
  } else if (config.app === 'app') {
    setHeight(160, 0);
  } else {
    setHeight(150, 0);
  }
}

function initSlider() {

  //$('#brightness-control').rangepicker().on('slideStop', function(slideEvt){
  $('#brightness-control').BootstrapSlider().on('slideStop', function (slideEvt) {
    var val = slideEvt.value;
    log('new brightness: ' + val);
    hueProxy.cmd('command', 'bri:' + val);
  });

}

function enableBrightness(on) {
  //$('#toggle-ambientweb').attr('disabled', !on);
  //eyeEnabled(on);
}

function initSubscribe() {
  /* email subscribe form */
  $('.subscribe-form').submit(function (e) {
    var $this = $(this);
    $.ajax({
      type: 'POST', // GET & url for json slightly different
      url: 'https://APIStarter.us9.list-manage.com/subscribe/post-json?u=83c6f205a4379f5136e187d52&amp;id=cad0da3b8a&c=?',
      data: $this.serialize(),
      dataType: 'jsonp',
      contentType: 'application/json; charset=utf-8',
      error: function error() {
        errorShake('.subscribe-form');
      },
      success: function success(data) {
        if (data.result !== 'success') {
          errorShake('.subscribe-form');
        } else {
          // It worked, so hide form and display thank-you message.
          $('.subscribe-form').removeClass('error');
          $('.subscribe-form').addClass('ok');
          $('.successsubscribe').show();
          $('.subscribe-form').hide();
        }
      } });

    return false;
  });
}

function errorShake(id) {
  $(id).addClass('error');
  $(id).addClass('shake');
  $(id).bind('oanimationend animationend webkitAnimationEnd', function () {
    $(id).removeClass('shake');
  });
}

/* search */
function initSearch() {
  $('#colorsearch').keyup(function (e) {
    if (e.keyCode === 13) {
      skip = 0;
      doSearch('top');
    }
  });

  $('button#search').click(function () {
    skip = 0;
    doSearch('top');
  });

  $('a[href="#search?top"]').click(function () {
    doSearch('top');
  });

  $('a[href$="#search?new"]').click(function () {
    doSearch('new');
  });

  $('a[href$="#search?random"]').click(function () {
    doSearch('random');
  });
}

function doSearch(type) {
  $('#search-loading').show();
  if (type === 'random') {
    skip = 0;
  }
  $.getJSON('https://colorlovers.herokuapp.com/api/palettes/' + type + '?jsonCallback=?', {
    keywords: $('#colorsearch').val(),
    resultOffset: skip,
    numResults: 7 },
  function (allPalettes) {
    $('#search-loading').hide();
    clPalettes = allPalettes;
    showPalettes(clPalettes);
    $('a[href$="#search?back"]').off('click');
    $('a[href$="#search?back"]').click(function () {
      skip -= 7;
      doSearch(type, skip);
    });
    $('a[href$="#search?next"]').off('click');
    $('a[href$="#search?next"]').click(function () {
      skip += 7;
      doSearch(type, skip);
    });
  });
}


function executeHrefCommand() {
  /*jshint validthis:true */
  var command = $(this).attr('href');
  window.hueProxy.cmd('command', command);
  return false;
}

function showPalettes(palettes) {

  var results = $('.search-results');
  results.empty();
  $.each(palettes, function (k, v) {
    var result = $('<div class="palette"> \
                      <div class="colors"></div> \
                      <div class="palette-name"></div>  \
                    </div>');

    v.colors.forEach(function (co) {
      $('.colors', result).append($('<a></a>').
      addClass('color').
      attr('href', '#' + co).
      css({ backgroundColor: '#' + co }).
      click(executeHrefCommand));
    });

    $('.palette-name', result).text(v.title);

    $(result).click(function () {
      scenes.RelaxedRandom.Palette = v.colors.map(function (n) {return '#' + n;});
      hueProxy.cmd('palette', scenes.RelaxedRandom.Palette);
      hueProxy.cmd('command', 'scene:RelaxedRandom');
      activatedScene('RelaxedRandom');
    });

    results.append(result);
  });
}


function log(text) {
  console.log(text);
}



/* bridge ip */
function initManualBridge() {
  $('#manualbridgeip .input').keyup(function (e) {
    if (e.keyCode === 13) {
      tryBridge();
    }
  });

  $('#manualbridgeip button').click(tryBridge);

  $('#manualbridgeip').hide();

}



function tryBridge() {
  var ip = $('#manualbridgeip input').val();
  tryIP(ip, function () {
    // on fail
    $('#manualbridgeip').
    addClass('shake').
    bind('oanimationend animationend webkitAnimationEnd', function () {
      $('#manualbridgeip').removeClass('shake');
    });


  });
}

function tryIP(ip, error) {
  try {
    $.ajax({
      dataType: 'json',
      url: 'http://' + ip + '/api/123-bogus',
      success: function success() {
        hueProxy.cmd('discover', ip);
      },
      error: error,
      timeout: 2000 });

  }
  catch (err) {
    // do nothing.
  }
}


function showManualBridge() {
  if (!$('#manualbridgeip').hasClass('fade3')) {
    $('#manualbridgeip').addClass('fade3').show();
    if (config.app === 'web') {
      // do nothing
    } else if (config.app === 'light' || config.app === 'app') {
      setHeight(170, 400);
    } else {
      setHeight(160, 400);
    }
    $('.switch').fadeOut(600, function () {
      $('#connectStatus').fadeIn(600);
    });
    hideControls();
  }

  setTimeout(function () {
    hueProxy.cmd('discover');
  }, 2000);
}

var cachedStatus = null;
function onStatus(status) {
  if (JSON.stringify(status) !== JSON.stringify(cachedStatus)) {
    cachedStatus = status;
  } else {
    // same status, ignore onStatus call.
    return;
  }
  console.log('client: status changed - ' + status.status);

  if (status.status === 'BridgeNotFound') {
    onBridgeNotFound();

    return;
  }
  if (manualIpInputAnimation !== null) {
    clearInterval(manualIpInputAnimation);
    manualIpInputAnimation = null;
  }

  if (status.status === 'OK') {
    onBridgeConnected(status);
  } else if (status.status === 'init' || status.status === 'Authenticating') {
    onBridgeInit(status);
  } else {
    onBridgeDisconnected(status);
  }
}

function stopHeartbeat() {
  if (heartbeat !== null) {
    log('Clearing heartbeat');
    clearInterval(heartbeat);
  }
}

function startHeartbeat() {
  log('Starting heartbeat');
  heartbeat = setInterval(hueHeartbeat, heartbeatInterval);
}

function hueHeartbeat() {
  hueProxy.cmd('heartbeat');
}

function onBridgeNotFound(status) {
  $('#connectStatus').html('<div class="intro-text"><a class="amazonlink nativeclick" href="http://bit.ly/lightswitchhue" target="_blank">Philips Hue bridge</a> not found.</div>');
  manualIpInputAnimation = setTimeout(showManualBridge, 2000);
  stopHeartbeat();
}

function onBridgeConnected(status) {

  $('#connectStatus').html('<div class="intro-text">' + status.text + '</div>');
  $('#manualbridgeip').hide();
  $('#https-proxy').hide();

  $('#lightswitch').prop('disabled', false);

  // time to screen
  var hubEndTime = new Date().getTime();
  var timeSpent = hubEndTime - hubStartTime;

  log('Tracking event OK');
  ga('send', 'timing', 'status-ok', 'Ping hub', timeSpent, 'Philips Hue Hub');

  $('#connectStatus').fadeOut(600, onSuccessfulInit);
  $('#lightswitch').prop('checked', status.data);

  stopHeartbeat();
  startHeartbeat();
}

function onBridgeInit(status) {
  $('#connectStatus').html('<div class="intro-text">' + status.text + '</div>');
}

function onBridgeDisconnected(status) {
  stopHeartbeat();

  log('Hiding elements, bridge not found');
  $('#connectStatus').html('<div class="intro-text">' + status.text + '</div>');
  $('#lightswitch').prop('disabled', true);
  $('#lightswitch').prop('checked', false);

  //$('body').removeClass('on');
  $('#controls').fadeOut(600);
  $('.tab-content').hide();
  setInitialHeight();

  $('.switch').fadeOut(600, function () {
    $('#connectStatus').fadeIn(600);
  });
}

function onSuccessfulInit() {
  if (config.tabs === true) {
    if (config.app === 'web') {
      // do nothing
    }if (config.app === 'app') {
      setHeight(445, 400);
    } else {
      setHeight(435, 400);
    }
  }
  $('.switch').fadeIn(600, showControls);

  //$('body').addClass('on');
  requestSettings();

  // successfully started, unless All group was not set correctly, then no actors are set.
  //var autostartScene = $.QueryString.autostartscene;

  var lochash = location.hash.substr(1),
  autostartScene = lochash.substr(lochash.indexOf('autostartscene=')).
  split('&')[0].
  split('=')[1];
  if (autostartScene && scenes[autostartScene] !== undefined) {
    $('.nav-tabs a[href="#moods"]').tab('show');
    activateSceneByKey(autostartScene);
  }

}

function setHeight(height, transitionTime) {
  //height = $('wrapper').height();
  $('html').animate({ height: height }, transitionTime);
  $('body').animate({ height: height }, transitionTime);
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.window) {
    setTimeout(function () {
      if (chrome.app.window !== undefined) {
        var wind = chrome.app.window.current();
        wind.innerBounds.height = height;
        wind.innerBounds.width = 320;
      }
    }, 500); // wait until animations are done.
  }
}

function updateActorUI(actorId) {

  $('button').removeClass('active');
  $('button[id=' + actorId + ']').addClass('active');
  $('select.actor-select option[value="' + actorId + '"]').attr("selected", "selected");
  $('select.actor-select').material_select();

  hueProxy.cmd('getActorStates', updateActorControls);
}

function updateActorControls(actors) {
  var on = false;
  var bri = 0;
  //var names = '';
  $.each(actors, function (key, lamp) {
    on = on || lamp && lamp.state && lamp.state.on && lamp.state.reachable;
    if (lamp && lamp.state && lamp.state.bri > bri) {
      bri = lamp.state.bri;
    }
    //names = names + ', ' + lamp.name;
  });

  $('#lightswitch').prop('checked', on);
  enableBrightness(on);
  $('#brightness-control').val(bri);
  $('#brightness-control').change(); // update ui

  //names = names.substring(2);
  //$("#config-actor").text('Actors: ' + names);
}

function initGroupCreation() {
  $('#create-group').hide();
  $('#make-group').click(function () {
    $('#create-group').slideToggle();
    return false;
  });
  $('#add-group').click(function () {
    var name = $('#group-name input').val();
    if (name === '') {
      errorShake('#group-name');
      return;
    }
    $('#group-name').removeClass('error');
    var lampIds = $('#group-add-lamps .lamp-select.active').map(function () {
      return this.id;
    }).get();
    if (lampIds.length === 0) {
      errorShake('#group-add-lamps');
      return;
    }
    $('#group-add-lamps').removeClass('error');
    // add group
    $('#group-name input').val('');
    hueProxy.cmd('createGroup', { name: name, lampIds: lampIds });
    // reset
    delayedRefresh();
  });
}

function initSceneCreation() {
  $('#create-scene').hide();
  $('#make-scene').click(function () {
    $('#create-scene').slideToggle();
    return false;
  });


  $('#add-scene').click(function () {
    var name = $('#scene-name input').val();
    if (name === '') {
      errorShake('#scene-name');
      return;
    }
    $('#scene-name').removeClass('error');
    $('#scene-name input').val('');
    hueProxy.cmd('createScene', name);
    // reset
    delayedRefresh();
  });

  $('#create-schedule').hide();
  $('#make-schedule').click(function () {
    $('#create-schedule').slideToggle();
    return false;
  });
  //$('#add-schedule').click(function(){
  //});

}

function createActorBtn(key, name) {
  var btn = $('<button type="button" class="actor"></button>').text(name).attr('id', key);
  return btn;
}

function actorSelectChanged(event) {
  var key = event.target.selectedOptions[0].value;
  setActor(key);
  $("#config-actor").text($(event.target.selectedOptions[0]).html());
  return false;
}

function actorClick(event) {
  var key = event.target.id;
  $('button').removeClass('active');
  $('button[id=' + key + ']').addClass('active');
  $('select.actor-select').val(key);
  $('select.actor-select').material_select();
  setActor(key);
  $("#config-actor").text($(event.target).html());
  return false;
}

function flashLamp(event) {
  var key = event.target.id;
  hueProxy.cmd('flash', key);
  return false;
}

function setActor(key) {
  hueProxy.cmd('setActor', key, updateActorUI);
}

function delayedRefresh() {
  setTimeout(function () {
    hueProxy.cmd('refresh');
    setTimeout(requestSettings, 2000);
  }, 2000);
}

function removeGroupClick() {
  /*jshint validthis:true */
  var key = this.id;
  hueProxy.cmd('removeGroup', key);
  delayedRefresh();

  $(this).hide('slow');
}

function activateSceneClick(event) {
  var key = event.target.id;
  activateSceneByKey(key);
}

function activateScheduleClick(event) {
  var key = event.target.id;
  activateScheduleByKey(key);
}


function activateSceneByKey(key) {
  hueProxy.cmd('command', 'scene:' + key, activatedScene);
}

function activateScheduleByKey(key) {
  hueProxy.cmd('command', 'schedule:' + key, activatedSchedule);
}

function toggleActiveClick(event) {
  $(event.target).toggleClass('active');
}

function requestSettings() {
  hueProxy.cmd('getState', null, fillSettings); // will get previous state
}

function fillSettings(state) {
  //var state =window.hueProxy.getState();
  // safari ios compatibility issues:
  var i = 0,
  key = null,
  value = null,
  btn = null,
  selector = null;

  if (!state) {
    //setTimeout(requestSettings, 1000); // reset UI in a bit.
    return;
  }

  if (state.lights !== null && state.lights !== undefined) {
    trackState('config', state);
    /*
                                 trackEvent('settings', 'init', 'version', state.config.swversion);
                                 trackEvent('settings', 'init', 'ip', state.config.ipaddress);
                                 trackEvent('settings', 'init', 'portal', state.config.portalconnection);
                                 trackEvent('settings', 'init', 'zigbeechannel', state.config.zigbeechannel);
                                 trackEvent('settings', 'init', 'lightcount', state.lights.length);
                                 trackEvent('settings', 'init', 'groupcount', state.groups.length);
                                 trackEvent('settings', 'init', 'scenecount', state.scenes.length);
                                 */

    $('#lamps').empty();
    $('#group-add-lamps').empty();
    $('#groups').empty();
    $('#scenes').empty();
    $('#schedules').empty();
    $('select.actor-select').empty();

    $('#group-remove').empty();

    //arr.sort(function (v,v1) { return v.f > v1.f ; })
    for (i in state.lights) {
      state.lights[i].key = i;
    }

    var allOn = false;
    var lightsReachable = [];
    var lightsUnreachable = [];

    for (i in state.lights) {
      key = i;
      value = state.lights[i];
      if (value.state === undefined) {
        continue;
      }
      if (value.state.reachable) {
        lightsReachable.push(value);
      } else {
        lightsUnreachable.push(value);
      }
      allOn = allOn || value.state.reachable || value.state.on;
    }
    var lightsAll = lightsReachable.concat(lightsUnreachable);


    addActorSelectCaption('<option value="" disabled>Groups:</option>');

    for (i in state.groups) {
      key = i;
      value = state.groups[i];
      //log('Groups: ' + key  + ', name: ' + value.name + ', # lights: ' + value.lights.length);
      displayGroup(key, value.name, key !== '0');
    }

    addActorSelectCaption('<option value="" disabled>Lights:</option>');

    //$.each(state.lights, function(key, value) {
    for (i in lightsAll) {
      //key = i;
      value = state.lights[lightsAll[i].key];

      if (value.state === undefined) {
        continue;
      }

      //log('Lights: ' + key  + ', name: ' +
      //  value.name + ', reachable: ' +
      //  value.state.reachable +
      //  ', on: ' + value.state.on);

      /* value: "{"state":
           {"on":true,
           "bri":248,
           "hue":14910,
           "sat":144,
           "effect":"none",
           "xy":[0.4358,0.4044],
           "ct":369,
           "alert":"select",
           "colormode":"xy",
           "reachable":false
          },
          "type":"Extended color light",
          "name":"Kitchen",
          "modelid":"LCT001",
          "manufacturername":"Philips",
          "uniqueid":"00:17:88:01:00:bd:88:d3-0b",
          "swversion":"66013452",
          "pointsymbol":{"1":"0f00f0ffff000033330000333300003333000044",
          "2":"none","3":"none","4":"none","5":"none","6":"none","7":"none","8":"none"}
          }"
      */
      btn = createActorBtn(value.key, value.name);
      btn.click(actorClick);
      btn.click(flashLamp);
      $('#lamps').append(btn);

      addActorSelect(value.key, value.name);

      selector = createActorBtn(value.key, value.name);
      selector.addClass('lamp-select');
      selector.click(flashLamp);
      selector.click(toggleActiveClick);
      $('#group-add-lamps').append(selector);

      var desc = "";


      if (value.state.reachable) {
        var b = Math.round(value.state.bri / 256 * 100);
        if (b == 99) b = 100;
        desc = 'hsl: ' + Math.round(value.state.hue / 65535 * 359) + '\xB0,\n                       ' +
        Math.round(value.state.sat / 256 * 100) + '%,\n                       ' +
        b + '%. ';
      }
      //groups: lights: 0: "1"
      //name: "All"
      var color = 'hsla(\n                       ' +
      Math.round(value.state.hue * 1000 / 65535 * 359) / 1000 + ',\n                       ' +
      Math.round(value.state.sat * 1000 / 256 * 100) / 1000 + '%,\n                       ' + (
      Math.round(value.state.bri * 1000 / 256 * 100) / 1000 + 1) + '%, 1)';

      //desc = "";

      var item = '<div class="item">\n                <i class="hueicon hue-' +
      value.modelid + '"></i>\n                <div class="switch no-drag">\n                  <input id="toggle-light-' +

      value.key + '" class="cmn-toggle cmn-toggle-round" type="checkbox"\n                    checked="' + (
      value.state.on ? "checked" : "") + '" ' + (value.state.reachable ? "" : "disabled") + '>\n                  <label for="toggle-light-' +
      value.key + '"></label>\n                </div>\n                <div class="title">' +

      value.name + ' <i>' + (value.state.reachable ? "" : "offline") + '</i></div>\n                <div class="desc">' +
      desc + '</div>\n              </div>';


      btn = $(item).attr('id', value.key);
      btn.click(toggleActiveClick);
      $('#lights-list').append(btn);

    }



    if (typeof chrome !== 'undefined' && chrome.browserAction !== undefined) {
      var path = 'images/lightswitch.logo.on.128.png';
      if (allOn) {
        if (config.app === 'eye') {
          path = 'images/ambieye-ico-on.png';
        } else {
          path = 'images/lightswitch.logo.on.128.png';
        }
      } else {
        if (config.app === 'eye') {
          path = 'images/ambieye-ico.png';
        } else {
          path = 'images/lightswitch.logo.128.png';
        }
      }
      chrome.browserAction.setIcon({ path: path });
    }


    for (i in state.scenes) {
      key = i;
      value = state.scenes[i];

      //log('Scenes: ' + key  + ', name: ' + value.name + ', # lights: ' + value.lights.length);

      if (value.name.endsWith(' on 0'))
      {
        var normalName = value.name.substring(0, value.name.length - ' on 0'.length);
        if ($('#scenes button:contains("' + normalName + '")').length === 0) {
          btn = $('<button type="button" class="savedscene"></button>').text(normalName).attr('id', key);
          btn.click(activateSceneClick);
          $('#scenes').append(btn);
        }
      }
    }

    var scheduleLines = [];

    for (i in state.schedules) {
      key = i;
      value = state.schedules[i];

      // round button
      var btn = $('<button type="button" class="schedule savedscene"></button>').text(value.description + ' (' + value.name + ')').attr('id', key);
      btn.click(activateScheduleClick);
      $('#schedules').append(btn);


      // row
      var desc = '';

      if (value.name === '') {
        desc = '<b>' + value.description + '</b>';
      } else {
        desc = '<b>' + value.name + '</b>';
        if (value.description !== '') {
          desc += ', ' + value.description;
        }
      }

      value.type = value.starttime ? "bell-o" : "clock";
      value.type = value.autodelete ? "bomb" : value.type;

      value.scenename = '';
      value.action = '';
      value.fade = '';

      if (value.command.body.scene && state.scenes[value.command.body.scene]) {
        value.scene = state.scenes[value.command.body.scene];

        var parts = value.scene.name.replace('1 lights', '1 light').split(' ');
        var last = parts.pop();
        if (!isNaN(last)) {
          value.fade = ' in ' + last + ' minutes';
          last = parts.pop();
        }
        if (isNaN(last) && last == 'on' || last == 'off') {
          value.action = last;
        }
        //value.scenename =  value.scene.name.replace(/\s(on|off)\s\d+/g,'');
        value.scenename = parts.join(' ');
      }

      var huetime = new HueTime(value.localtime || value.time);
      value.huetime = huetime;
      var sortKey = "z " + huetime.sortkey;

      if (value.starttime) {
        var starttime = new HueTime(value.starttime);
        //var ms = moment.duration(huetime.timerTime).asMilliseconds();
        //huetime = starttime;
        var mins = moment.duration(huetime.timerTime).asMinutes();
        if (mins == 1) mins += " min";else mins += " mins";
        //huetime.humanTime = moment.utc(ms).format("HH:mm:ss");
        huetime.humanTime = mins;
        sortKey = "a " + starttime.sortkey;
      }

      huetime.humanTime = huetime.humanTime.replace('AM', '<i>am</i>');
      huetime.humanTime = huetime.humanTime.replace('PM', '<i>pm</i>');
      huetime.humanTime = huetime.humanTime.replace(' mins', ' <i>mins</i>');
      huetime.humanTime = huetime.humanTime.replace(' min', ' <i>min</i>');
      value.huetime = huetime;

      var scheduleItem = '<div class="item">\n              <i class="fa fa-' +
      value.type + '"></i>\n              <div class="switch no-drag">\n                <input id="enable-schedule-' +

      key + '" class="cmn-toggle cmn-toggle-round" type="checkbox"\n                  ' + (
      value.status != "disabled" ? "checked='checked'" : "") + '">\n                <label for="enable-schedule-' +
      key + '"></label>\n              </div>\n              <div class="title ' +

      value.type + '" data-time="' + value.huetime.m.format() + '">' + value.huetime.humanTime + '</div>\n              <div class="desc">' +
      value.name + ' <i>' + value.description + '</i></div>\n              <div class="desc">' +
      value.huetime.humanDate + ' <i>' + (value.huetime.humanRepeats ? 'repeats ' + value.huetime.humanRepeats : '') + '</i></div>\n              <div class="desc"><b>' +
      value.scenename + '</b> ' + value.action + ' <i>' + value.fade + '</i></div>\n            </div>';


      btn = $(scheduleItem).attr('id', key);
      btn.click(activateScheduleClick);

      scheduleLines.push({ key: sortKey, obj: btn });


    }
    scheduleLines.sort(function (item1, item2) {
      return item1.key.localeCompare(item2.key);
    });

    scheduleLines.forEach(function (item) {
      $('#schedules-list').append(item.obj);
    });

    $('select.actor-select').change(actorSelectChanged);
    $('select.actor-select').material_select();


    $('#bridge #config-ip').text('IP: ' + state.config.ipaddress + ' (v' + state.config.apiversion + ')');
    $('#bridge #config-swversion').text('Version: ' + state.config.swversion);
    $('#bridge #config-portal').text('Portal: ' + state.config.portalconnection);
    $('#bridge #config-zigbeechannel').text('Zigbee: ' + state.config.zigbeechannel);

    log('Config: ' + state.config.name +
    ', version: ' + state.config.swversion +
    ', ip: ' + state.config.ipaddress +
    ', portal: ' + state.config.portalconnection +
    ', zigbeechannel:' + state.config.zigbeechannel);

    if (state.actorId == null) {
      hueProxy.cmd('setActor', state.actorId || 'group-0', updateActorUI);
    } else {
      updateActorUI(state.actorId);
    }
  }
}

function displayGroup(key, name, removable) {
  var btn = createActorBtn('group-' + key, name);
  btn.click(actorClick);
  $('#groups').append(btn);

  if (removable) {
    var selector = createActorBtn(key, name);
    selector.click(removeGroupClick);
    selector.append('&nbsp;');
    selector.append($('<li class="fa fa-remove"></li>'));
    $('#group-remove').append(selector);
  }

  //addActorSelect(key, name);
  var selectable = $('<option value="' + ('group-' + key) + '" data-icon="" class="left circle">' + name + '</option>');
  $('select.actor-select').append(selectable);
}

function addActorSelectCaption(html) {
  $('select.actor-select').append($(html));
}
function addActorSelect(key, name) {
  var selectable = $('<option value="' + key + '" data-icon="" class="left circle">' + name + '</option>');
  $('select.actor-select').append(selectable);
}

if (typeof String.prototype.endsWith !== 'function') {
  String.prototype.endsWith = function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };
}

function hideControls() {
  $('.tab-content').hide(0);
  $('.main-menu.tabs').fadeOut(600);
  $('#controls').fadeOut(600, showTabContent);
}

function showControls() {
  $('#connectStatus').hide(0);
  $('.tab-content').hide(0);
  if (config.tabs === true) {
    $('.main-menu.tabs').fadeIn(600);
    $('#controls').fadeIn(600, showTabContent);
  }
}
function showTabContent() {
  $('.tab-content').fadeIn(600, function () {
    $('ul.tabs').tabs('select_tab', 'home');
    //$('ul.tabs').tabs();
    initVoice();
  });

}

function initLightswitch() {
  $('#lightswitch').click(function (e) {
    var turnOn = $('#lightswitch').is(':checked');
    enableBrightness(turnOn);
    window.hueProxy.cmd('command', turnOn ? 'on' : 'off');
    trackEvent(e.target.id, 'clicked');
  });
}

function initPalettes() {
  $('#solid-palette div ').each(function (name, colorsElement) {
    colorsElement = $(colorsElement);
    var paletteName = colorsElement.data('palette');
    if (Palettes[paletteName] !== null) {
      colorsElement.addClass('palette');
      colorsElement.append($('<div class="colors"> \
                        </div> \
                        <div class="colors-name"></div>  \
                    </div>'));
      $('.colors-name', colorsElement).text(paletteName);
      Palettes[paletteName].forEach(function (co) {
        var ec = $('<a href="" class="color"></a>');

        var color = typeof co === 'string' ? co : co.color;

        $(ec).attr('href', color);
        $(ec).attr('title', typeof co.name === 'undefined' ? color : co.name);
        $(ec).css({ backgroundColor: color });
        $(ec).click(executeHrefCommand);

        $('.colors', colorsElement).append(ec);
      });
    }
  });

  $('.scene').each(function (index, sceneElement) {
    sceneElement = $(sceneElement);
    var sceneName = sceneElement.data('scene');
    if (scenes[sceneName] !== undefined) {

      var colorsElement = $('<div class="colors"></div>');
      var colors = scenes[sceneName].Palette;
      colors.forEach(function (co) {
        var ec = $('<div class="color"></div>');
        var color = typeof co === 'string' ? co : co.color;
        $(ec).css({ backgroundColor: color });
        $(ec).attr('title', typeof co.name === 'undefined' ? color : co.name);
        colorsElement.append(ec);
      });

      var e = $('<div class="scene-name"></div>');
      e.text(sceneName);

      sceneElement.append(colorsElement);
      sceneElement.append(e);
    }
  });

  $('.scene').click(function (element) {
    var key = $(this).data('scene');
    if (!$(this).hasClass('active')) {
      hueProxy.cmd('command', 'scene:' + key, activatedScene);
    } else {
      // deactivate all
      hueProxy.cmd('command', 'scene:stop', activatedScene);
    }
    return false;
  });


  $('.command').click(executeHrefCommand); // buttons

}



// color wheel:

// create canvas and context objects
function placeImage(picker, imgsrc) {
  var canvas = document.getElementById(picker);
  var ctx = canvas.getContext('2d');

  // drawing active image
  var image = new Image();
  // select desired colorwheel
  image.src = imgsrc;
  image.onload = function () {
    ctx.drawImage(image, 0, 0, image.width, image.height); // draw the image on the canvas
  };
}


/* gravity */
function round(n) {
  var num = n.toFixed(2);
  if (n >= 0) {
    num = '+' + num;
  }
  return num;
}

function initGravity() {
  $('.north-enabled').hide();
  $('.ground-enabled').hide();

  $('#toggle-gravity').click(function (e) {
    var active = $('#toggle-gravity').is(':checked');
    gravity.active = active;
    $('.north-enabled').toggle(active);
    if (!active || gravity.timer !== null) {
      clearInterval(gravity.timer);
      gravity.timer = null;
    } else {
      //gravity.timer = setInterval(gravityUpdate, 300);
      gravity.timer = setTimeout(gravityUpdate, 300);
    }
  });
  $('#toggle-north').click(function (e) {
    var active = $('#toggle-north').is(':checked');
    gravity.northhue = active;
  });


  $(window).on('orientationchange', function (e) {
    $('#orien').text(window.orientation);
    if (window.orientation === '') {
      $('#orien').text('0');
    }
    log('orientation: ' + window.orientation);
  });
}

function enableGravity(on) {
  if (on) {
    window.ondeviceorientation = onDeviceOrientation;
    window.ondevicemotion = onDeviceMotion;
  } else {
    window.ondeviceorientation = null;
    window.ondevicemotion = null;
  }
}

function onDeviceOrientation(e) {
  if (e.beta === null) {
    $('.north-enabled').hide();
    return; // windows has beta null.
  }
  $('#orienA').text(round(e.alpha || 0));
  $('#orienB').text(round(e.beta));
  $('#orienG').text(round(e.gamma));

  gravity.north = e.webkitCompassHeading || e.alpha || 0;
  /*if (e.webkitCompassHeading !== undefined) {
                                                            //var n = e.webkitCompassHeading - 180;
                                                            //if (n < 0) {
                                                            //  n += 360;
                                                            //}
                                                            gravity.north = e.webkitCompassHeading;
                                                          } else {
                                                            gravity.north = e.alpha || 0;
                                                          }*/

  $('#north').text(gravity.north);
  gravity.a = e.alpha;
  gravity.b = e.beta;
  gravity.g = e.gamma;

}

function onDeviceMotion(event) {
  if (event.accelerationIncludingGravity.x === null) {
    $('.ground-enabled').hide();
    return; // windows has beta null.
  } else {
    $('.ground-enabled').show();
  }

  var accelerationX = event.accelerationIncludingGravity.x;
  var accelerationY = event.accelerationIncludingGravity.y;
  var accelerationZ = event.accelerationIncludingGravity.z;
  var deg = window.orientation;
  if (deg === 90) {
    // x is -9
    var y = accelerationY;
    accelerationY = accelerationX;
    accelerationX = -y;
  } else if (deg === -90) {
    // x is +9
    var te = accelerationY;
    accelerationY = -accelerationX;
    accelerationX = te;
  }
  // y is usually -9
  $('#varx').text(round(accelerationX));
  $('#vary').text(round(accelerationY));
  $('#varz').text(round(accelerationZ));

  gravity.x = accelerationX;
  gravity.y = accelerationY;
  gravity.z = accelerationZ;

}

function gravityUpdate() {
  if (gravity.active) {
    var yCoef = null;
    var xCoef = null;
    if (gravity.a === 0) {
      // mac books?
      yCoef = Math.abs(gravity.y);
    } else {
      // iphones
      yCoef = 10 - Math.abs(gravity.y);
    }

    xCoef = gravity.x;

    if (!gravity.northhue) {
      gravity.sat = Math.round(yCoef / 10 * 255);
      gravity.hue += Math.round(xCoef / 10 * 65535 * 0.05);
      gravity.bri = 255; // max
    } else {
      gravity.sat = Math.round(yCoef / 10 * 255);
      gravity.hue = Math.round(gravity.north / 360 * 65535);
      gravity.bri = 255; //Math.round((xCoef / 10) * 255);
    }
    while (gravity.hue < 0) {
      gravity.hue += 65535;
    }
    while (65535 < gravity.hue) {
      gravity.hue -= 65535;
    }


    var json = {
      hue: gravity.hue,
      sat: gravity.sat,
      bri: gravity.bri };


    $('#hue').text(round(gravity.hue));
    $('#sat').text(round(gravity.sat));
    $('#bri').text(round(gravity.bri));

    var cmd = JSON.stringify(json);
    log('Setting gravity:  ' + cmd);
    hueProxy.cmd('command', cmd);

    var color = 'hsl(' +
    Math.round(360 * (json.hue / 65535)) + ', ' +
    Math.round(100 * json.sat / 255) + '%, ' +
    Math.round(100 - 50 * json.bri / 255) + '%)';
    $('#rgbVal').css({ backgroundColor: color });

    activatedScene('stop');

    setTimeout(gravityUpdate, 500);
  }
}

function initPickers() {

  placeImage('picker', 'images/colorbox-100.png');
  placeImage('picker2', 'images/colorwheel-100.png');
  //placeImage('#picker', 'img/colorwhell2.png');

  //$('#picker').click(function(e) { // click event handler
  $('#picker, #picker2, #picker3').on({
    'touchmove': throttleCmd,
    'mousemove': touchMove,
    'mouseover': mouseStart,
    'touchstart': touchStart,
    'mouseout': touchOut
    //'touchout': touchOut
  });
  $('#picker, #picker2, #picker3').click(throttleCmd);

  circle.hide();
}

var currentHex = null;
function throttleCmd(e) {
  currentHex = getColor(e);
  if (delayedSend !== null) {
    clearTimeout(delayedSend);
  }
  if (hideCircleTimer !== null) {
    clearTimeout(hideCircleTimer);
  }
  delayedSend = setTimeout(onDelaySend, 500);
}

function onDelaySend() {
  hueProxy.cmd('command', currentHex);
  activatedScene('stop');
  hideCircleDelayed();
}

// hide circle delayed
function hideCircleDelayed() {
  if (hideCircleTimer !== null) {
    clearTimeout(hideCircleTimer);
  }
  hideCircleTimer = setTimeout(hideCircle, 1000);
}

function hideCircle() {
  circle.stop(true).fadeOut();
}

function touchOut(e) {
  getColor(e);
  //hideCircleDelayed();
  hideCircleTimer = null;
  hideCircle();
  console.log('touchout');
}
function touchMove(e) {
  getColor(e);
}

function mouseStart(e) {
  if (!circle.is(':visible') || circle.is(':animated')) {
    circle.stop(true).show().fadeIn();
  }
}
function touchStart(e) {
  mouseStart(e);
  throttleCmd(e);
}

function getColor(e) {

  e.preventDefault();
  // get coordinates of current position
  var canvasOffset = $(e.target).offset();

  if (e.pageX === undefined) {
    e = e.originalEvent;
  }

  var touches = e.changedTouches;
  if (touches === undefined) {
    touches = e.targetTouches;
  }

  if (e.pageX === undefined) {
    e = e.originalEvent;
  }
  log('touch event e.pageX:' + e.pageX);
  log('touch event touches:' + touches);

  var x = e.offsetX;
  var y = e.offsetY;

  if (touches !== undefined && touches.length > 0) {
    x = touches[0].offsetX;
    y = touches[0].offsetY;
    log('touches[0]:' + touches[0]);
  }


  var canvasX = Math.floor(x); //- canvasOffset.left);
  var canvasY = Math.floor(y); //- canvasOffset.top);
  var pixel = null;

  var ctx = document.getElementById(e.target.id).getContext('2d');
  var imageData = ctx.getImageData(canvasX, canvasY, 1, 1);
  pixel = imageData.data;

  // show picker circle

  // hide on white
  if (pixel[0] === 0 && pixel[1] === 0 && pixel[2] === 0) {
    //circle.fadeOut();
    //hideCircleDelayed();
    return;
  }
  var pixelColor = 'rgb(' + pixel[0] + ', ' + pixel[1] + ', ' + pixel[2] + ')';
  //$('.preview').css('backgroundColor', pixelColor);

  var left = x - 10 + e.target.offsetLeft;
  circle.css({
    backgroundColor: pixelColor,
    //top: e.pageY - 50,
    //left: e.pageX -10
    top: y - 50 + e.target.offsetTop,
    left: left });


  // update controls
  //$('#rVal').val(pixel[0]);
  //$('#gVal').val(pixel[1]);
  //$('#bVal').val(pixel[2]);
  //$('#rgbVal').text(pixel[0]+','+pixel[1]+','+pixel[2]);

  var dColor = pixel[2] + 256 * pixel[1] + 65536 * pixel[0];
  var hex = '#' + ('0000' + dColor.toString(16)).substr(-6);
  //$('#hexVal').val();
  $('#rgbVal').css({ backgroundColor: hex });
  return hex;
}

/* ambient eye tab on show */

function initAmbientEye() {
  $('.tabs.main-menu').on('click', function (e) {

    circle.hide();
    log('in tab: ' + e.target.hash);

    trackEvent('click', 'tab', e.target.hash);

    if (e.target.hash === '#eye')
    {
      tryEnableEye();
    } else {
      ambieye.updateImage = false;
    }

    if (e.target.hash === '#search' && clPalettes === null)
    {
      doSearch('new');
    }

    enableGravity(e.target.hash === '#colors');

  });

  $('#toggle-ambientweb').click(toggleAmbience);
  $('#toggle-eye-brightness').click(toggleEyeBrightness);
  $('#toggle-eye-primary').click(toggleEyePrimary);
  $('#eye-mode-group button').click(toggleEyeMode);

  $('#eye-mode-group button').removeClass('active');
  $('#eye-mode-group #' + ambieye.mode).addClass('active');
}


function toggleAmbience(e) {
  var active = $('#toggle-ambientweb').is(':checked');
  ambieye.on = active;
  if (active) {
    hueProxy.cmd('command', 'scene:Ambient', activatedScene);
  } else {
    hueProxy.cmd('command', 'scene:none', activatedScene);
  }
}

function toggleEyeBrightness(e) {
  var active = $('#toggle-eye-brightness').is(':checked');
  ambieye.changeBrightness = active;
}

function toggleEyePrimary(e) {
  var active = $('#toggle-eye-primary').is(':checked');
  ambieye.enablePrimary = active;
}

function toggleEyeMode(e) {
  ambieye.mode = e.currentTarget.id;
  $('#eye-mode-group button').removeClass('active');
  $('#eye-mode-group #' + ambieye.mode).addClass('active');
}

function tryEnableEye() {
  // check permissions for access to <all_tabs>
  if (amExtension()) {
    log('loading as chrome extention popup');
    hasAllUrlAccess(function (granted) {
      ambieye.updateImage = granted;
      $('#ambieyepermissions').toggle(!granted);
      $('#toggle-ambientweb').prop('checked', ambieye.on);
      eyeEnabled(granted);
      var alreadyOn = ambieye.on;
      if (!alreadyOn) {
        alreadyOn = ambieye.run();
      }
    });
  } else {
    $('#' + ambieye.mode).button('toggle');
    eyeEnabled(false);
  }
}

function eyeEnabled(granted) {
  $('#toggle-ambientweb').attr('disabled', !granted);
  $('#toggle-eye-brightness').attr('disabled', !granted);
  $('#toggle-eye-primary').attr('disabled', !granted);
  $('#eye-mode-group button').removeClass('active');
  $('#eye-mode-group #' + ambieye.mode).addClass('active');
  $('#toggle-eye-brightness').prop('checked', ambieye.changeBrightness);
  $('#toggle-eye-primary').prop('checked', ambieye.enablePrimary);
}

function hasAllUrlAccess(success, mayRequest) {
  chrome.permissions.contains({
    permissions: ['tabs'],
    origins: ['<all_urls>'] },
  function (granted) {
    success(granted);
  });
}

function requestAmbientPermissionOnClient(callback) {
  // Permissions must be requested from inside a user gesture, like a button's click handler.
  chrome.permissions.request({
    permissions: ['tabs'],
    origins: ['<all_urls>'] },
  function (granted) {
    if (granted) {
      callback(granted);
    } else {
      callback(granted);
    }

  });
}

function updatePreviewColors(colors, image) {
  $('.preview-box').each(function (index, value) {
    if (colors[index]) {
      $(value).css('background-color', colors[index].color);
    }
  });

  $('#ambientpreview').attr('src', image);
}

function initCloseMinimize() {
  $('#close-app').click(function () {
    window.close();
  });

  $('#minimize-app').click(function () {
    chrome.app.window.current().minimize();
  });
}


function initVoice() {
  if (huevoice === null) {
    huevoice = voice(hue);
  }
  if (huevoice.notAvailable() || config.voice === false) {
    $('.voice-control').hide();
  } else {
    $('.voice-control').fadeIn();
  }

  $('#voice-mic').click(toggleVoice);
}


function toggleVoiceOnWebpage() {
  var mic = $('#voice-mic');
  mic.toggleClass('active');
  var parser = voiceCommander(voiceCmdFunc);
  if (mic.hasClass('active')) {
    if (huevoice.recognize(parser.react, voiceError, voiceEnd)) {
      huevoice.speak('Enabling voice commands');
      huevoice.start();
    }
  } else {
    huevoice.speak('Voice commands disabled');
    huevoice.stop();
  }
}

function voiceError(err) {
  var mic = $('#voice-mic');
  mic.removeClass('active');
  console.error(err);
  //sendToMothership({voiceErr: err});
}

function voiceEnd() {
  var mic = $('#voice-mic');
  mic.removeClass('active');
  console.log('voice end');
  //sendToMothership({voiceEnd: true});
}

function toggleVoice() {
  if (amExtension()) {
    //launch window if not launched
    chrome.tabs.create({
      url: 'https://ambieye.com/voice.html' },
    function (tab) {
      // tab id
    });
    return false;
  } else {
    // from page, same page.
    toggleVoiceOnWebpage();
  }
  return false;
}

function voiceCmdFunc(text, match, action, actor) {
  try {
    $('#voice-feedback').html('');
    $('#voice-feedback').html('<i class="voice-fade ">' + text + '</i>');
    //voiceFeedback(text,match, action, actor);

    if (actor !== undefined) {
      var actorId = findActors(actor);
      if (actorId !== null) {
        setActor('group-' + actorId);
      } else {
        huevoice.speak('Cannot find the ' + actor + ' lights');
        return;
      }
    }
    // canExecute(action)
    if ($.inArray(action, ['on', 'off', 'dim', 'dim down', 'up', 'brighten', 'lighten', 'down', 'light up']) >= 0 || action.match('^scene:')) {
      window.hueProxy.cmd('command', action);
    }
  } catch (err) {
    console.log(err);
    // nothing
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=main.min.20160220.js.map
