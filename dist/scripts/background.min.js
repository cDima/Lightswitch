"use strict";var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function (a, b) {"object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);} : b(a);}("undefined" != typeof window ? window : undefined, function (a, b) {var c = [],d = c.slice,e = c.concat,f = c.push,g = c.indexOf,h = {},i = h.toString,j = h.hasOwnProperty,k = {},l = "1.11.1",m = function m(a, b) {return new m.fn.init(a, b);},n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o = /^-ms-/,p = /-([\da-z])/gi,q = function q(a, b) {return b.toUpperCase();};m.fn = m.prototype = { jquery: l, constructor: m, selector: "", length: 0, toArray: function toArray() {return d.call(this);}, get: function get(a) {return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);}, pushStack: function pushStack(a) {var b = m.merge(this.constructor(), a);return b.prevObject = this, b.context = this.context, b;}, each: function each(a, b) {return m.each(this, a, b);}, map: function map(a) {return this.pushStack(m.map(this, function (b, c) {return a.call(b, c, b);}));}, slice: function slice() {return this.pushStack(d.apply(this, arguments));}, first: function first() {return this.eq(0);}, last: function last() {return this.eq(-1);}, eq: function eq(a) {var b = this.length,c = +a + (0 > a ? b : 0);return this.pushStack(c >= 0 && b > c ? [this[c]] : []);}, end: function end() {return this.prevObject || this.constructor(null);}, push: f, sort: c.sort, splice: c.splice }, m.extend = m.fn.extend = function () {var a,b,c,d,e,f,g = arguments[0] || {},h = 1,i = arguments.length,j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {if (null != (e = arguments[h])) for (d in e) {a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));}}return g;}, m.extend({ expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {throw new Error(a);}, noop: function noop() {}, isFunction: function isFunction(a) {return "function" === m.type(a);}, isArray: Array.isArray || function (a) {return "array" === m.type(a);}, isWindow: function isWindow(a) {return null != a && a == a.window;}, isNumeric: function isNumeric(a) {return !m.isArray(a) && a - parseFloat(a) >= 0;}, isEmptyObject: function isEmptyObject(a) {var b;for (b in a) {return !1;}return !0;}, isPlainObject: function isPlainObject(a) {var b;if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;try {if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;} catch (c) {return !1;}if (k.ownLast) for (b in a) {return j.call(a, b);}for (b in a) {}return void 0 === b || j.call(a, b);}, type: function type(a) {return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? h[i.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);}, globalEval: function globalEval(b) {b && m.trim(b) && (a.execScript || function (b) {a.eval.call(a, b);})(b);}, camelCase: function camelCase(a) {return a.replace(o, "ms-").replace(p, q);}, nodeName: function nodeName(a, b) {return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();}, each: function each(a, b, c) {var d,e = 0,f = a.length,g = r(a);if (c) {if (g) {for (; f > e; e++) {if (d = b.apply(a[e], c), d === !1) break;}} else for (e in a) {if (d = b.apply(a[e], c), d === !1) break;}} else if (g) {for (; f > e; e++) {if (d = b.call(a[e], e, a[e]), d === !1) break;}} else for (e in a) {if (d = b.call(a[e], e, a[e]), d === !1) break;}return a;}, trim: function trim(a) {return null == a ? "" : (a + "").replace(n, "");}, makeArray: function makeArray(a, b) {var c = b || [];return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;}, inArray: function inArray(a, b, c) {var d;if (b) {if (g) return g.call(b, a, c);for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) {if (c in b && b[c] === a) return c;}}return -1;}, merge: function merge(a, b) {var c = +b.length,d = 0,e = a.length;while (c > d) {a[e++] = b[d++];}if (c !== c) while (void 0 !== b[d]) {a[e++] = b[d++];}return a.length = e, a;}, grep: function grep(a, b, c) {for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {d = !b(a[f], f), d !== h && e.push(a[f]);}return e;}, map: function map(a, b, c) {var d,f = 0,g = a.length,h = r(a),i = [];if (h) for (; g > f; f++) {d = b(a[f], f, c), null != d && i.push(d);} else for (f in a) {d = b(a[f], f, c), null != d && i.push(d);}return e.apply([], i);}, guid: 1, proxy: function proxy(a, b) {var c, e, f;return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function e() {return a.apply(b || this, c.concat(d.call(arguments)));}, e.guid = a.guid = a.guid || m.guid++, e) : void 0;}, now: function now() {return +new Date();}, support: k }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {h["[object " + b + "]"] = b.toLowerCase();});function r(a) {var b = a.length,c = m.type(a);return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;}var s = function (a) {var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u = "sizzle" + -new Date(),v = a.document,w = 0,x = 0,y = gb(),z = gb(),A = gb(),B = function B(a, b) {return a === b && (l = !0), 0;},C = "undefined",D = 1 << 31,E = {}.hasOwnProperty,F = [],G = F.pop,H = F.push,I = F.push,J = F.slice,K = F.indexOf || function (a) {for (var b = 0, c = this.length; c > b; b++) {if (this[b] === a) return b;}return -1;},L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M = "[\\x20\\t\\r\\n\\f]",N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O = N.replace("w", "w#"),P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]",Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)",R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),S = new RegExp("^" + M + "*," + M + "*"),T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),V = new RegExp(Q),W = new RegExp("^" + O + "$"),X = { ID: new RegExp("^#(" + N + ")"), CLASS: new RegExp("^\\.(" + N + ")"), TAG: new RegExp("^(" + N.replace("w", "w*") + ")"), ATTR: new RegExp("^" + P), PSEUDO: new RegExp("^" + Q), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"), bool: new RegExp("^(?:" + L + ")$", "i"), needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i") },Y = /^(?:input|select|textarea|button)$/i,Z = /^h\d$/i,$ = /^[^{]+\{\s*\[native \w/,_ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab = /[+~]/,bb = /'|\\/g,cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),db = function db(a, b, c) {var d = "0x" + b - 65536;return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);};try {I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;} catch (eb) {I = { apply: F.length ? function (a, b) {H.apply(a, J.call(b));} : function (a, b) {var c = a.length,d = 0;while (a[c++] = b[d++]) {}a.length = c - 1;} };}function fb(a, b, d, e) {var f, h, j, k, l, o, r, s, w, x;if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || "string" != typeof a) return d;if (1 !== (k = b.nodeType) && 9 !== k) return [];if (p && !e) {if (f = _.exec(a)) if (j = f[1]) {if (9 === k) {if (h = b.getElementById(j), !h || !h.parentNode) return d;if (h.id === j) return d.push(h), d;} else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;} else {if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;}if (c.qsa && (!q || !q.test(a))) {if (s = r = u, w = b, x = 9 === k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;while (l--) {o[l] = s + qb(o[l]);}w = ab.test(a) && ob(b.parentNode) || b, x = o.join(",");}if (x) try {return I.apply(d, w.querySelectorAll(x)), d;} catch (y) {} finally {r || b.removeAttribute("id");}}}return i(a.replace(R, "$1"), b, d, e);}function gb() {var a = [];function b(c, e) {return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;}return b;}function hb(a) {return a[u] = !0, a;}function ib(a) {var b = n.createElement("div");try {return !!a(b);} catch (c) {return !1;} finally {b.parentNode && b.parentNode.removeChild(b), b = null;}}function jb(a, b) {var c = a.split("|"),e = a.length;while (e--) {d.attrHandle[c[e]] = b;}}function kb(a, b) {var c = b && a,d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);if (d) return d;if (c) while (c = c.nextSibling) {if (c === b) return -1;}return a ? 1 : -1;}function lb(a) {return function (b) {var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;};}function mb(a) {return function (b) {var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;};}function nb(a) {return hb(function (b) {return b = +b, hb(function (c, d) {var e,f = a([], c.length, b),g = f.length;while (g--) {c[e = f[g]] && (c[e] = !(d[e] = c[e]));}});});}function ob(a) {return a && _typeof(a.getElementsByTagName) !== C && a;}c = fb.support = {}, f = fb.isXML = function (a) {var b = a && (a.ownerDocument || a).documentElement;return b ? "HTML" !== b.nodeName : !1;}, m = fb.setDocument = function (a) {var b,e = a ? a.ownerDocument || a : v,g = e.defaultView;return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function () {m();}, !1) : g.attachEvent && g.attachEvent("onunload", function () {m();})), c.attributes = ib(function (a) {return a.className = "i", !a.getAttribute("className");}), c.getElementsByTagName = ib(function (a) {return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length;}), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length;}), c.getById = ib(function (a) {return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;}), c.getById ? (d.find.ID = function (a, b) {if (_typeof(b.getElementById) !== C && p) {var c = b.getElementById(a);return c && c.parentNode ? [c] : [];}}, d.filter.ID = function (a) {var b = a.replace(cb, db);return function (a) {return a.getAttribute("id") === b;};}) : (delete d.find.ID, d.filter.ID = function (a) {var b = a.replace(cb, db);return function (a) {var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode("id");return c && c.value === b;};}), d.find.TAG = c.getElementsByTagName ? function (a, b) {return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;} : function (a, b) {var c,d = [],e = 0,f = b.getElementsByTagName(a);if ("*" === a) {while (c = f[e++]) {1 === c.nodeType && d.push(c);}return d;}return f;}, d.find.CLASS = c.getElementsByClassName && function (a, b) {return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;}, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {a.innerHTML = "<select msallowclip=''><option selected=''></option></select>", a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"), a.querySelectorAll(":checked").length || q.push(":checked");}), ib(function (a) {var b = e.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");})), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", Q);}), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {var c = 9 === a.nodeType ? a.documentElement : a,d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));} : function (a, b) {if (b) while (b = b.parentNode) {if (b === a) return !0;}return !1;}, B = b ? function (a, b) {if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);} : function (a, b) {if (a === b) return l = !0, 0;var c,d = 0,f = a.parentNode,g = b.parentNode,h = [a],i = [b];if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;if (f === g) return kb(a, b);c = a;while (c = c.parentNode) {h.unshift(c);}c = b;while (c = c.parentNode) {i.unshift(c);}while (h[d] === i[d]) {d++;}return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;}, e) : n;}, fb.matches = function (a, b) {return fb(a, null, null, b);}, fb.matchesSelector = function (a, b) {if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;} catch (e) {}return fb(b, n, null, [a]).length > 0;}, fb.contains = function (a, b) {return (a.ownerDocument || a) !== n && m(a), t(a, b);}, fb.attr = function (a, b) {(a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;}, fb.error = function (a) {throw new Error("Syntax error, unrecognized expression: " + a);}, fb.uniqueSort = function (a) {var b,d = [],e = 0,f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {while (b = a[f++]) {b === a[f] && (e = d.push(f));}while (e--) {a.splice(d[e], 1);}}return k = null, a;}, e = fb.getText = function (a) {var b,c = "",d = 0,f = a.nodeType;if (f) {if (1 === f || 9 === f || 11 === f) {if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {c += e(a);}} else if (3 === f || 4 === f) return a.nodeValue;} else while (b = a[d++]) {c += e(b);}return c;}, d = fb.selectors = { cacheLength: 50, createPseudo: hb, match: X, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);}, CHILD: function CHILD(a) {return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && fb.error(a[0]), a;}, PSEUDO: function PSEUDO(a) {var b,c = !a[6] && a[2];return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));} }, filter: { TAG: function TAG(a) {var b = a.replace(cb, db).toLowerCase();return "*" === a ? function () {return !0;} : function (a) {return a.nodeName && a.nodeName.toLowerCase() === b;};}, CLASS: function CLASS(a) {var b = y[a + " "];return b || (b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) && y(a, function (a) {return b.test("string" == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute("class") || "");});}, ATTR: function ATTR(a, b, c) {return function (d) {var e = fb.attr(d, a);return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;};}, CHILD: function CHILD(a, b, c, d, e) {var f = "nth" !== a.slice(0, 3),g = "last" !== a.slice(-4),h = "of-type" === b;return 1 === d && 0 === e ? function (a) {return !!a.parentNode;} : function (b, c, i) {var j,k,l,m,n,o,p = f !== g ? "nextSibling" : "previousSibling",q = b.parentNode,r = h && b.nodeName.toLowerCase(),s = !i && !h;if (q) {if (f) {while (p) {l = b;while (l = l[p]) {if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;}o = p = "only" === a && !o && "nextSibling";}return !0;}if (o = [g ? q.firstChild : q.lastChild], g && s) {k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {if (1 === l.nodeType && ++m && l === b) {k[a] = [w, n, m];break;}}} else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;}return m -= e, m === d || m % d === 0 && m / d >= 0;}};}, PSEUDO: function PSEUDO(a, b) {var c,e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {var d,f = e(a, b),g = f.length;while (g--) {d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);}}) : function (a) {return e(a, 0, c);}) : e;} }, pseudos: { not: hb(function (a) {var b = [],c = [],d = h(a.replace(R, "$1"));return d[u] ? hb(function (a, b, c, e) {var f,g = d(a, null, e, []),h = a.length;while (h--) {(f = g[h]) && (a[h] = !(b[h] = f));}}) : function (a, e, f) {return b[0] = a, d(b, null, f, c), !c.pop();};}), has: hb(function (a) {return function (b) {return fb(a, b).length > 0;};}), contains: hb(function (a) {return function (b) {return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;};}), lang: hb(function (a) {return W.test(a || "") || fb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), function (b) {var c;do {if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");} while ((b = b.parentNode) && 1 === b.nodeType);return !1;};}), target: function target(b) {var c = a.location && a.location.hash;return c && c.slice(1) === b.id;}, root: function root(a) {return a === o;}, focus: function focus(a) {return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);}, enabled: function enabled(a) {return a.disabled === !1;}, disabled: function disabled(a) {return a.disabled === !0;}, checked: function checked(a) {var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;}, selected: function selected(a) {return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;}, empty: function empty(a) {for (a = a.firstChild; a; a = a.nextSibling) {if (a.nodeType < 6) return !1;}return !0;}, parent: function parent(a) {return !d.pseudos.empty(a);}, header: function header(a) {return Z.test(a.nodeName);}, input: function input(a) {return Y.test(a.nodeName);}, button: function button(a) {var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;}, text: function text(a) {var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());}, first: nb(function () {return [0];}), last: nb(function (a, b) {return [b - 1];}), eq: nb(function (a, b, c) {return [0 > c ? c + b : c];}), even: nb(function (a, b) {for (var c = 0; b > c; c += 2) {a.push(c);}return a;}), odd: nb(function (a, b) {for (var c = 1; b > c; c += 2) {a.push(c);}return a;}), lt: nb(function (a, b, c) {for (var d = 0 > c ? c + b : c; --d >= 0;) {a.push(d);}return a;}), gt: nb(function (a, b, c) {for (var d = 0 > c ? c + b : c; ++d < b;) {a.push(d);}return a;}) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {d.pseudos[b] = lb(b);}for (b in { submit: !0, reset: !0 }) {d.pseudos[b] = mb(b);}function pb() {}pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {var c,e,f,g,h,i,j,k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {(!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(R, " ") }), h = h.slice(c.length));for (g in d.filter) {!(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));}if (!c) break;}return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);};function qb(a) {for (var b = 0, c = a.length, d = ""; c > b; b++) {d += a[b].value;}return d;}function rb(a, b, c) {var d = b.dir,e = c && "parentNode" === d,f = x++;return b.first ? function (b, c, f) {while (b = b[d]) {if (1 === b.nodeType || e) return a(b, c, f);}} : function (b, c, g) {var h,i,j = [w, f];if (g) {while (b = b[d]) {if ((1 === b.nodeType || e) && a(b, c, g)) return !0;}} else while (b = b[d]) {if (1 === b.nodeType || e) {if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];if (i[d] = j, j[2] = a(b, c, g)) return !0;}}};}function sb(a) {return a.length > 1 ? function (b, c, d) {var e = a.length;while (e--) {if (!a[e](b, c, d)) return !1;}return !0;} : a[0];}function tb(a, b, c) {for (var d = 0, e = b.length; e > d; d++) {fb(a, b[d], c);}return c;}function ub(a, b, c, d, e) {for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {(f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));}return g;}function vb(a, b, c, d, e, f) {return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {var j,k,l,m = [],n = [],o = g.length,p = f || tb(b || "*", h.nodeType ? [h] : h, []),q = !a || !f && b ? p : ub(p, m, a, h, i),r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {j = ub(r, n), d(j, [], h, i), k = j.length;while (k--) {(l = j[k]) && (r[n[k]] = !(q[n[k]] = l));}}if (f) {if (e || a) {if (e) {j = [], k = r.length;while (k--) {(l = r[k]) && j.push(q[k] = l);}e(null, r = [], j, i);}k = r.length;while (k--) {(l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));}}} else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);});}function wb(a) {for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = rb(function (a) {return a === b;}, h, !0), l = rb(function (a) {return K.call(b, a) > -1;}, h, !0), m = [function (a, c, d) {return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));}]; f > i; i++) {if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {for (e = ++i; f > e; e++) {if (d.relative[a[e].type]) break;}return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));}m.push(c);}}return sb(m);}function xb(a, b) {var c = b.length > 0,e = a.length > 0,f = function f(_f, g, h, i, k) {var l,m,o,p = 0,q = "0",r = _f && [],s = [],t = j,u = _f || e && d.find.TAG("*", k),v = w += null == t ? 1 : Math.random() || .1,x = u.length;for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {if (e && l) {m = 0;while (o = a[m++]) {if (o(l, g, h)) {i.push(l);break;}}k && (w = v);}c && ((l = !o && l) && p--, _f && r.push(l));}if (p += q, c && q !== p) {m = 0;while (o = b[m++]) {o(r, s, g, h);}if (_f) {if (p > 0) while (q--) {r[q] || s[q] || (s[q] = G.call(i));}s = ub(s);}I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);}return k && (w = v, j = t), r;};return c ? hb(f) : f;}return h = fb.compile = function (a, b) {var c,d = [],e = [],f = A[a + " "];if (!f) {b || (b = g(a)), c = b.length;while (c--) {f = wb(b[c]), f[u] ? d.push(f) : e.push(f);}f = A(a, xb(e, d)), f.selector = a;}return f;}, i = fb.select = function (a, b, e, f) {var i,j,k,l,m,n = "function" == typeof a && a,o = !f && g(a = n.selector || a);if (e = e || [], 1 === o.length) {if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;n && (b = b.parentNode), a = a.slice(j.shift().value.length);}i = X.needsContext.test(a) ? 0 : j.length;while (i--) {if (k = j[i], d.relative[l = k.type]) break;if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;break;}}}return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;}, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {return 1 & a.compareDocumentPosition(n.createElement("div"));}), ib(function (a) {return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");}) || jb("type|href|height|width", function (a, b, c) {return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);}), c.attributes && ib(function (a) {return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");}) || jb("value", function (a, b, c) {return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;}), ib(function (a) {return null == a.getAttribute("disabled");}) || jb(L, function (a, b, c) {var d;return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;}), fb;}(a);m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;var t = m.expr.match.needsContext,u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,v = /^.[^:#\[\.,]*$/;function w(a, b, c) {if (m.isFunction(b)) return m.grep(a, function (a, d) {return !!b.call(a, d, a) !== c;});if (b.nodeType) return m.grep(a, function (a) {return a === b !== c;});if ("string" == typeof b) {if (v.test(b)) return m.filter(b, a, c);b = m.filter(b, a);}return m.grep(a, function (a) {return m.inArray(a, b) >= 0 !== c;});}m.filter = function (a, b, c) {var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {return 1 === a.nodeType;}));}, m.fn.extend({ find: function find(a) {var b,c = [],d = this,e = d.length;if ("string" != typeof a) return this.pushStack(m(a).filter(function () {for (b = 0; e > b; b++) {if (m.contains(d[b], this)) return !0;}}));for (b = 0; e > b; b++) {m.find(a, d[b], c);}return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c;}, filter: function filter(a) {return this.pushStack(w(this, a || [], !1));}, not: function not(a) {return this.pushStack(w(this, a || [], !0));}, is: function is(a) {return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;} });var x,y = a.document,z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A = m.fn.init = function (a, b) {var c, d;if (!a) return this;if ("string" == typeof a) {if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);if (c[1]) {if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b)) for (c in b) {m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);}return this;}if (d = y.getElementById(c[2]), d && d.parentNode) {if (d.id !== c[2]) return x.find(a);this.length = 1, this[0] = d;}return this.context = y, this.selector = a, this;}return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));};A.prototype = m.fn, x = m(y);var B = /^(?:parents|prev(?:Until|All))/,C = { children: !0, contents: !0, next: !0, prev: !0 };m.extend({ dir: function dir(a, b, c) {var d = [],e = a[b];while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) {1 === e.nodeType && d.push(e), e = e[b];}return d;}, sibling: function sibling(a, b) {for (var c = []; a; a = a.nextSibling) {1 === a.nodeType && a !== b && c.push(a);}return c;} }), m.fn.extend({ has: function has(a) {var b,c = m(a, this),d = c.length;return this.filter(function () {for (b = 0; d > b; b++) {if (m.contains(this, c[b])) return !0;}});}, closest: function closest(a, b) {for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++) {for (c = this[d]; c && c !== b; c = c.parentNode) {if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {f.push(c);break;}}}return this.pushStack(f.length > 1 ? m.unique(f) : f);}, index: function index(a) {return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;}, add: function add(a, b) {return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));}, addBack: function addBack(a) {return this.add(null == a ? this.prevObject : this.prevObject.filter(a));} });function D(a, b) {do {a = a[b];} while (a && 1 !== a.nodeType);return a;}m.each({ parent: function parent(a) {var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;}, parents: function parents(a) {return m.dir(a, "parentNode");}, parentsUntil: function parentsUntil(a, b, c) {return m.dir(a, "parentNode", c);}, next: function next(a) {return D(a, "nextSibling");}, prev: function prev(a) {return D(a, "previousSibling");}, nextAll: function nextAll(a) {return m.dir(a, "nextSibling");}, prevAll: function prevAll(a) {return m.dir(a, "previousSibling");}, nextUntil: function nextUntil(a, b, c) {return m.dir(a, "nextSibling", c);}, prevUntil: function prevUntil(a, b, c) {return m.dir(a, "previousSibling", c);}, siblings: function siblings(a) {return m.sibling((a.parentNode || {}).firstChild, a);}, children: function children(a) {return m.sibling(a.firstChild);}, contents: function contents(a) {return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);} }, function (a, b) {m.fn[a] = function (c, d) {var e = m.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);};});var E = /\S+/g,F = {};function G(a) {var b = F[a] = {};return m.each(a.match(E) || [], function (a, c) {b[c] = !0;}), b;}m.Callbacks = function (a) {a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);var b,c,d,e,f,g,h = [],i = !a.once && [],j = function j(l) {for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) {if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {c = !1;break;}}b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());},k = { add: function add() {if (h) {var d = h.length;!function f(b) {m.each(b, function (b, c) {var d = m.type(c);"function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c);});}(arguments), b ? e = h.length : c && (g = d, j(c));}return this;}, remove: function remove() {return h && m.each(arguments, function (a, c) {var d;while ((d = m.inArray(c, h, d)) > -1) {h.splice(d, 1), b && (e >= d && e--, f >= d && f--);}}), this;}, has: function has(a) {return a ? m.inArray(a, h) > -1 : !(!h || !h.length);}, empty: function empty() {return h = [], e = 0, this;}, disable: function disable() {return h = i = c = void 0, this;}, disabled: function disabled() {return !h;}, lock: function lock() {return i = void 0, c || k.disable(), this;}, locked: function locked() {return !i;}, fireWith: function fireWith(a, c) {return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this;}, fire: function fire() {return k.fireWith(this, arguments), this;}, fired: function fired() {return !!d;} };return k;}, m.extend({ Deferred: function Deferred(a) {var b = [["resolve", "done", m.Callbacks("once memory"), "resolved"], ["reject", "fail", m.Callbacks("once memory"), "rejected"], ["notify", "progress", m.Callbacks("memory")]],c = "pending",d = { state: function state() {return c;}, always: function always() {return e.done(arguments).fail(arguments), this;}, then: function then() {var a = arguments;return m.Deferred(function (c) {m.each(b, function (b, f) {var g = m.isFunction(a[b]) && a[b];e[f[1]](function () {var a = g && g.apply(this, arguments);a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);});}), a = null;}).promise();}, promise: function promise(a) {return null != a ? m.extend(a, d) : d;} },e = {};return d.pipe = d.then, m.each(b, function (a, f) {var g = f[2],h = f[3];d[f[1]] = g.add, h && g.add(function () {c = h;}, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {return e[f[0] + "With"](this === e ? d : this, arguments), this;}, e[f[0] + "With"] = g.fireWith;}), d.promise(e), a && a.call(e, e), e;}, when: function when(a) {var b = 0,c = d.call(arguments),e = c.length,f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,g = 1 === f ? a : m.Deferred(),h = function h(a, b, c) {return function (e) {b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);};},i,j,k;if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;}return f || g.resolveWith(k, c), g.promise();} });var H;m.fn.ready = function (a) {return m.ready.promise().done(a), this;}, m.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(a) {a ? m.readyWait++ : m.ready(!0);}, ready: function ready(a) {if (a === !0 ? ! --m.readyWait : !m.isReady) {if (!y.body) return setTimeout(m.ready);m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")));}} });function I() {y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J));}function J() {(y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready());}m.ready.promise = function (b) {if (!H) if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready);else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);else {y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);var c = !1;try {c = null == a.frameElement && y.documentElement;} catch (d) {}c && c.doScroll && !function e() {if (!m.isReady) {try {c.doScroll("left");} catch (a) {return setTimeout(e, 50);}I(), m.ready();}}();}return H.promise(b);};var K = "undefined",L;for (L in m(k)) {break;}k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function () {var a, b, c, d;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));}), function () {var a = y.createElement("div");if (null == k.deleteExpando) {k.deleteExpando = !0;try {delete a.test;} catch (b) {k.deleteExpando = !1;}}a = null;}(), m.acceptData = function (a) {var b = m.noData[(a.nodeName + " ").toLowerCase()],c = +a.nodeType || 1;return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b;};var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N = /([A-Z])/g;function O(a, b, c) {if (void 0 === c && 1 === a.nodeType) {var d = "data-" + b.replace(N, "-$1").toLowerCase();if (c = a.getAttribute(d), "string" == typeof c) {try {c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c;} catch (e) {}m.data(a, b, c);} else c = void 0;}return c;}function P(a) {var b;for (b in a) {if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;}return !0;}function Q(a, b, d, e) {if (m.acceptData(a)) {var f,g,h = m.expando,i = a.nodeType,j = i ? m.cache : a,k = i ? a[h] : a[h] && h;
      if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: m.noop }), ("object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;}}function R(a, b, c) {if (m.acceptData(a)) {var d,e,f = a.nodeType,g = f ? m.cache : a,h = f ? a[m.expando] : m.expando;if (g[h]) {if (b && (d = c ? g[h] : g[h].data)) {m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length;while (e--) {delete d[b[e]];}if (c ? !P(d) : !m.isEmptyObject(d)) return;}(c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);}}}m.extend({ cache: {}, noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function hasData(a) {return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);}, data: function data(a, b, c) {return Q(a, b, c);}, removeData: function removeData(a, b) {return R(a, b);}, _data: function _data(a, b, c) {return Q(a, b, c, !0);}, _removeData: function _removeData(a, b) {return R(a, b, !0);} }), m.fn.extend({ data: function data(a, b) {var c,d,e,f = this[0],g = f && f.attributes;if (void 0 === a) {if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {c = g.length;while (c--) {g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));}m._data(f, "parsedAttrs", !0);}return e;}return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {m.data(this, a);}) : arguments.length > 1 ? this.each(function () {m.data(this, a, b);}) : f ? O(f, a, m.data(f, a)) : void 0;}, removeData: function removeData(a) {return this.each(function () {m.removeData(this, a);});} }), m.extend({ queue: function queue(a, b, c) {var d;return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;}, dequeue: function dequeue(a, b) {b = b || "fx";var c = m.queue(a, b),d = c.length,e = c.shift(),f = m._queueHooks(a, b),g = function g() {m.dequeue(a, b);};"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();}, _queueHooks: function _queueHooks(a, b) {var c = b + "queueHooks";return m._data(a, c) || m._data(a, c, { empty: m.Callbacks("once memory").add(function () {m._removeData(a, b + "queue"), m._removeData(a, c);}) });} }), m.fn.extend({ queue: function queue(a, b) {var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {var c = m.queue(this, a, b);m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);});}, dequeue: function dequeue(a) {return this.each(function () {m.dequeue(this, a);});}, clearQueue: function clearQueue(a) {return this.queue(a || "fx", []);}, promise: function promise(a, b) {var c,d = 1,e = m.Deferred(),f = this,g = this.length,h = function h() {--d || e.resolveWith(f, [f]);};"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) {c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));}return h(), e.promise(b);} });var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T = ["Top", "Right", "Bottom", "Left"],U = function U(a, b) {return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);},V = m.access = function (a, b, c, d, e, f, g) {var h = 0,i = a.length,j = null == c;if ("object" === m.type(c)) {e = !0;for (h in c) {m.access(a, b, h, c[h], !0, f, g);}} else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {return j.call(m(a), c);})), b)) for (; i > h; h++) {b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));}return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;},W = /^(?:checkbox|radio)$/i;!function () {var a = y.createElement("input"),b = y.createElement("div"),c = y.createDocumentFragment();if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function () {k.noCloneEvent = !1;}), b.cloneNode(!0).click()), null == k.deleteExpando) {k.deleteExpando = !0;try {delete b.test;} catch (d) {k.deleteExpando = !1;}}}(), function () {var b,c,d = y.createElement("div");for (b in { submit: !0, change: !0, focusin: !0 }) {c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);}d = null;}();var X = /^(?:input|select|textarea)$/i,Y = /^key/,Z = /^(?:mouse|pointer|contextmenu)|click/,$ = /^(?:focusinfocus|focusoutblur)$/,_ = /^([^.]*)(?:\.(.+)|)$/;function ab() {return !0;}function bb() {return !1;}function cb() {try {return y.activeElement;} catch (a) {}}m.event = { global: {}, add: function add(a, b, c, d, e) {var f,g,h,i,j,k,l,n,o,p,q,r = m._data(a);if (r) {c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {return (typeof m === "undefined" ? "undefined" : _typeof(m)) === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);}, k.elem = a), b = (b || "").match(E) || [""], h = b.length;while (h--) {f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && m.expr.match.needsContext.test(e), namespace: p.join(".") }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);}a = null;}}, remove: function remove(a, b, c, d, e) {var f,g,h,i,j,k,l,n,o,p,q,r = m.hasData(a) && m._data(a);if (r && (k = r.events)) {b = (b || "").match(E) || [""], j = b.length;while (j--) {if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;while (f--) {g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));}i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);} else for (o in k) {m.event.remove(a, o + b[j], c, d, !0);}}m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));}}, trigger: function trigger(b, c, d, e) {var f,g,h,i,k,l,n,o = [d || y],p = j.call(b, "type") ? b.type : b,q = j.call(b, "namespace") ? b.namespace.split(".") : [];if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {if (!e && !k.noBubble && !m.isWindow(d)) {for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) {o.push(h), l = h;}l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);}n = 0;while ((h = o[n++]) && !b.isPropagationStopped()) {b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());}if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {l = d[g], l && (d[g] = null), m.event.triggered = p;try {d[p]();} catch (r) {}m.event.triggered = void 0, l && (d[g] = l);}return b.result;}}, dispatch: function dispatch(a) {a = m.event.fix(a);var b,c,e,f,g,h = [],i = d.call(arguments),j = (m._data(this, "events") || {})[a.type] || [],k = m.event.special[a.type] || {};if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {h = m.event.handlers.call(this, a, j), b = 0;while ((f = h[b++]) && !a.isPropagationStopped()) {a.currentTarget = f.elem, g = 0;while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) {(!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));}}return k.postDispatch && k.postDispatch.call(this, a), a.result;}}, handlers: function handlers(a, b) {var c,d,e,f,g = [],h = b.delegateCount,i = a.target;if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i != this; i = i.parentNode || this) {if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {for (e = [], f = 0; h > f; f++) {d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);}e.length && g.push({ elem: i, handlers: e });}}return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;}, fix: function fix(a) {if (a[m.expando]) return a;var b,c,d,e = a.type,f = a,g = this.fixHooks[e];g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;while (b--) {c = d[b], a[c] = f[c];}return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;}, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(a, b) {return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;} }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(a, b) {var c,d,e,f = b.button,g = b.fromElement;return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;} }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {if (this !== cb() && this.focus) try {return this.focus(), !1;} catch (a) {}}, delegateType: "focusin" }, blur: { trigger: function trigger() {return this === cb() && this.blur ? (this.blur(), !1) : void 0;}, delegateType: "focusout" }, click: { trigger: function trigger() {return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0;}, _default: function _default(a) {return m.nodeName(a.target, "a");} }, beforeunload: { postDispatch: function postDispatch(a) {void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);} } }, simulate: function simulate(a, b, c, d) {var e = m.extend(new m.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();} }, m.removeEvent = y.removeEventListener ? function (a, b, c) {a.removeEventListener && a.removeEventListener(b, c, !1);} : function (a, b, c) {var d = "on" + b;a.detachEvent && (_typeof(a[d]) === K && (a[d] = null), a.detachEvent(d, c));}, m.Event = function (a, b) {return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);}, m.Event.prototype = { isDefaultPrevented: bb, isPropagationStopped: bb, isImmediatePropagationStopped: bb, preventDefault: function preventDefault() {var a = this.originalEvent;this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);}, stopPropagation: function stopPropagation() {var a = this.originalEvent;this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);}, stopImmediatePropagation: function stopImmediatePropagation() {var a = this.originalEvent;this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();} }, m.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {m.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {var c,d = this,e = a.relatedTarget,f = a.handleObj;return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;} };}), k.submitBubbles || (m.event.special.submit = { setup: function setup() {return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function (a) {var b = a.target,c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function (a) {a._submit_bubble = !0;}), m._data(c, "submitBubbles", !0));});}, postDispatch: function postDispatch(a) {a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));}, teardown: function teardown() {return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit");} }), k.changeBubbles || (m.event.special.change = { setup: function setup() {return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function (a) {"checked" === a.originalEvent.propertyName && (this._just_changed = !0);}), m.event.add(this, "click._change", function (a) {this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);})), !1) : void m.event.add(this, "beforeactivate._change", function (a) {var b = a.target;X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function (a) {!this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);}), m._data(b, "changeBubbles", !0));});}, handle: function handle(a) {var b = a.target;return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;}, teardown: function teardown() {return m.event.remove(this, "._change"), !X.test(this.nodeName);} }), k.focusinBubbles || m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {var c = function c(a) {m.event.simulate(b, a.target, m.event.fix(a), !0);};m.event.special[b] = { setup: function setup() {var d = this.ownerDocument || this,e = m._data(d, b);e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);}, teardown: function teardown() {var d = this.ownerDocument || this,e = m._data(d, b) - 1;e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));} };}), m.fn.extend({ on: function on(a, b, c, d, e) {var f, g;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {"string" != typeof b && (c = c || b, b = void 0);for (f in a) {this.on(f, b, c, a[f], e);}return this;}if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb;else if (!d) return this;return 1 === e && (g = d, d = function d(a) {return m().off(a), g.apply(this, arguments);}, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {m.event.add(this, a, d, c, b);});}, one: function one(a, b, c, d) {return this.on(a, b, c, d, 1);}, off: function off(a, b, c) {var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {for (e in a) {this.off(e, b, a[e]);}return this;}return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {m.event.remove(this, a, c, b);});}, trigger: function trigger(a, b) {return this.each(function () {m.event.trigger(a, b, this);});}, triggerHandler: function triggerHandler(a, b) {var c = this[0];return c ? m.event.trigger(a, b, c, !0) : void 0;} });function db(a) {var b = eb.split("|"),c = a.createDocumentFragment();if (c.createElement) while (b.length) {c.createElement(b.pop());}return c;}var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb = / jQuery\d+="(?:null|\d+)"/g,gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"),hb = /^\s+/,ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb = /<([\w:]+)/,kb = /<tbody/i,lb = /<|&#?\w+;/,mb = /<(?:script|style|link)/i,nb = /checked\s*(?:[^=]|=\s*.checked.)/i,ob = /^$|\/(?:java|ecma)script/i,pb = /^true\/(.*)/,qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] },sb = db(y),tb = sb.appendChild(y.createElement("div"));rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;function ub(a, b) {var c,d,e = 0,f = _typeof(a.getElementsByTagName) !== K ? a.getElementsByTagName(b || "*") : _typeof(a.querySelectorAll) !== K ? a.querySelectorAll(b || "*") : void 0;if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) {!b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));}return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;}function vb(a) {W.test(a.type) && (a.defaultChecked = a.checked);}function wb(a, b) {return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;}function xb(a) {return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a;}function yb(a) {var b = pb.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;}function zb(a, b) {for (var c, d = 0; null != (c = a[d]); d++) {m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));}}function Ab(a, b) {if (1 === b.nodeType && m.hasData(a)) {var c,d,e,f = m._data(a),g = m._data(b, f),h = f.events;if (h) {delete g.handle, g.events = {};for (c in h) {for (d = 0, e = h[c].length; e > d; d++) {m.event.add(b, c, h[c][d]);}}}g.data && (g.data = m.extend({}, g.data));}}function Bb(a, b) {var c, d, e;if (1 === b.nodeType) {if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {e = m._data(b);for (d in e.events) {m.removeEvent(b, d, e.handle);}b.removeAttribute(m.expando);}"script" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);}}m.extend({ clone: function clone(a, b, c) {var d,e,f,g,h,i = m.contains(a.ownerDocument, a);if (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) {d[g] && Bb(e, d[g]);}if (b) if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) {Ab(e, d[g]);} else Ab(a, f);return d = ub(f, "script"), d.length > 0 && zb(d, !i && ub(a, "script")), d = h = e = null, f;}, buildFragment: function buildFragment(a, b, c, d) {for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++) {if (f = a[q], f || 0 === f) if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);else if (lb.test(f)) {h = h || o.appendChild(b.createElement("div")), i = (jb.exec(f) || ["", ""])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2], e = l[0];while (e--) {h = h.lastChild;}if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {f = "table" !== i || kb.test(f) ? "<table>" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;while (e--) {m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j);}}m.merge(p, h.childNodes), h.textContent = "";while (h.firstChild) {h.removeChild(h.firstChild);}h = o.lastChild;} else p.push(b.createTextNode(f));}h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), q = 0;while (f = p[q++]) {if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), "script"), g && zb(h), c)) {e = 0;while (f = h[e++]) {ob.test(f.type || "") && c.push(f);}}}return h = null, o;}, cleanData: function cleanData(a, b) {for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) {if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {if (g.events) for (e in g.events) {n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);}j[f] && (delete j[f], l ? delete d[i] : _typeof(d.removeAttribute) !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));}}} }), m.fn.extend({ text: function text(a) {return V(this, function (a) {return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));}, null, a, arguments.length);}, append: function append() {return this.domManip(arguments, function (a) {if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {var b = wb(this, a);b.appendChild(a);}});}, prepend: function prepend() {return this.domManip(arguments, function (a) {if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {var b = wb(this, a);b.insertBefore(a, b.firstChild);}});}, before: function before() {return this.domManip(arguments, function (a) {this.parentNode && this.parentNode.insertBefore(a, this);});}, after: function after() {return this.domManip(arguments, function (a) {this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);});}, remove: function remove(a, b) {for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));}return this;}, empty: function empty() {for (var a, b = 0; null != (a = this[b]); b++) {1 === a.nodeType && m.cleanData(ub(a, !1));while (a.firstChild) {a.removeChild(a.firstChild);}a.options && m.nodeName(a, "select") && (a.options.length = 0);}return this;}, clone: function clone(a, b) {return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {return m.clone(this, a, b);});}, html: function html(a) {return V(this, function (a) {var b = this[0] || {},c = 0,d = this.length;if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;if (!("string" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || ["", ""])[1].toLowerCase()])) {a = a.replace(ib, "<$1></$2>");try {for (; d > c; c++) {b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);}b = 0;} catch (e) {}}b && this.empty().append(a);}, null, a, arguments.length);}, replaceWith: function replaceWith() {var a = arguments[0];return this.domManip(arguments, function (b) {a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);}), a && (a.length || a.nodeType) ? this : this.remove();}, detach: function detach(a) {return this.remove(a, !0);}, domManip: function domManip(a, b) {a = e.apply([], a);var c,d,f,g,h,i,j = 0,l = this.length,n = this,o = l - 1,p = a[0],q = m.isFunction(p);if (q || l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)) return this.each(function (c) {var d = n.eq(c);q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);});if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) {d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);}if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) {d = g[j], ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));}i = c = null;}return this;} }), m.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {m.fn[a] = function (a) {for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) {c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());}return this.pushStack(e);};});var Cb,Db = {};function Eb(b, c) {var d,e = m(c.createElement(b)).appendTo(c.body),f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");return e.detach(), f;}function Fb(a) {var b = y,c = Db[a];return c || (c = Eb(a, b), "none" !== c && c || (Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c;}!function () {var a;k.shrinkWrapBlocks = function () {if (null != a) return a;a = !1;var b, c, d;return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;};}();var Gb = /^margin/,Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),Ib,Jb,Kb = /^(top|right|bottom|left)$/;a.getComputedStyle ? (Ib = function Ib(a) {return a.ownerDocument.defaultView.getComputedStyle(a, null);}, Jb = function Jb(a, b, c) {var d,e,f,g,h = a.style;return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "";}) : y.documentElement.currentStyle && (Ib = function Ib(a) {return a.currentStyle;}, Jb = function Jb(a, b, c) {var d,e,f,g,h = a.style;return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto";});function Lb(a, b) {return { get: function get() {var c = a();if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);} };}!function () {var b, c, d, e, f, g, h;if (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = d && d.style) {var _i = function _i() {var b, c, d, i;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, f = "4px" === (a.getComputedStyle(b, null) || { width: "4px" }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", g = 0 === i[0].offsetHeight), c.removeChild(d));};c.cssText = "float:left;opacity:.5", k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, m.extend(k, { reliableHiddenOffsets: function reliableHiddenOffsets() {return null == g && _i(), g;}, boxSizingReliable: function boxSizingReliable() {return null == f && _i(), f;}, pixelPosition: function pixelPosition() {return null == e && _i(), e;}, reliableMarginRight: function reliableMarginRight() {return null == h && _i(), h;} });}}(), m.swap = function (a, b, c, d) {var e,f,g = {};for (f in b) {g[f] = a.style[f], a.style[f] = b[f];}e = c.apply(a, d || []);for (f in b) {a.style[f] = g[f];}return e;};var Mb = /alpha\([^)]*\)/i,Nb = /opacity\s*=\s*([^)]*)/,Ob = /^(none|table(?!-c[ea]).+)/,Pb = new RegExp("^(" + S + ")(.*)$", "i"),Qb = new RegExp("^([+-])=(" + S + ")", "i"),Rb = { position: "absolute", visibility: "hidden", display: "block" },Sb = { letterSpacing: "0", fontWeight: "400" },Tb = ["Webkit", "O", "Moz", "ms"];function Ub(a, b) {if (b in a) return b;var c = b.charAt(0).toUpperCase() + b.slice(1),d = b,e = Tb.length;while (e--) {if (b = Tb[e] + c, b in a) return b;}return d;}function Vb(a, b) {for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName)))) : (e = U(d), (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));}for (g = 0; h > g; g++) {d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));}return a;}function Wb(a, b, c) {var d = Pb.exec(b);return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;}function Xb(a, b, c, d, e) {for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) {"margin" === c && (g += m.css(a, c + T[f], !0, e)), d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));}return g;}function Yb(a, b, c) {var d = !0,e = "width" === b ? a.offsetWidth : a.offsetHeight,f = Ib(a),g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);if (0 >= e || null == e) {if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;}return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px";}m.extend({ cssHooks: { opacity: { get: function get(a, b) {if (b) {var c = Jb(a, "opacity");return "" === c ? "1" : c;}} } }, cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": k.cssFloat ? "cssFloat" : "styleFloat" }, style: function style(a, b, c, d) {if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {var e,f,g,h = m.camelCase(b),i = a.style;if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];if (f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {i[b] = c;} catch (j) {}}}, css: function css(a, b, c, d) {var e,f,g,h = m.camelCase(b);return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), "normal" === f && b in Sb && (f = Sb[b]), "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;} }), m.each(["height", "width"], function (a, b) {m.cssHooks[b] = { get: function get(a, c, d) {return c ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {return Yb(a, b, d);}) : Yb(a, b, d) : void 0;}, set: function set(a, c, d) {var e = d && Ib(a);return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);} };}), k.opacity || (m.cssHooks.opacity = { get: function get(a, b) {return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";}, set: function set(a, b) {var c = a.style,d = a.currentStyle,e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",f = d && d.filter || c.filter || "";c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e);} }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {return b ? m.swap(a, { display: "inline-block" }, Jb, [a, "marginRight"]) : void 0;}), m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {m.cssHooks[a + b] = { expand: function expand(c) {for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) {e[a + T[d] + b] = f[d] || f[d - 2] || f[0];}return e;} }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);}), m.fn.extend({ css: function css(a, b) {return V(this, function (a, b, c) {var d,e,f = {},g = 0;if (m.isArray(b)) {for (d = Ib(a), e = b.length; e > g; g++) {f[b[g]] = m.css(a, b[g], !1, d);}return f;}return void 0 !== c ? m.style(a, b, c) : m.css(a, b);}, a, b, arguments.length > 1);}, show: function show() {return Vb(this, !0);}, hide: function hide() {return Vb(this);}, toggle: function toggle(a) {return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {U(this) ? m(this).show() : m(this).hide();});} });function Zb(a, b, c, d, e) {return new Zb.prototype.init(a, b, c, d, e);}m.Tween = Zb, Zb.prototype = { constructor: Zb, init: function init(a, b, c, d, e, f) {this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px");
    }, cur: function cur() {var a = Zb.propHooks[this.prop];return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);}, run: function run(a) {var b,c = Zb.propHooks[this.prop];return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;} }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = { _default: { get: function get(a) {var b;return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];}, set: function set(a) {m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;} } }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = { set: function set(a) {a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);} }, m.easing = { linear: function linear(a) {return a;}, swing: function swing(a) {return .5 - Math.cos(a * Math.PI) / 2;} }, m.fx = Zb.prototype.init, m.fx.step = {};var $b,_b,ac = /^(?:toggle|show|hide)$/,bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),cc = /queueHooks$/,dc = [ic],ec = { "*": [function (a, b) {var c = this.createTween(a, b),d = c.cur(),e = bc.exec(b),f = e && e[3] || (m.cssNumber[a] ? "" : "px"),g = (m.cssNumber[a] || "px" !== f && +d) && bc.exec(m.css(c.elem, a)),h = 1,i = 20;if (g && g[3] !== f) {f = f || g[3], e = e || [], g = +d || 1;do {h = h || ".5", g /= h, m.style(c.elem, a, g + f);} while (h !== (h = c.cur() / d) && 1 !== h && --i);}return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;}] };function fc() {return setTimeout(function () {$b = void 0;}), $b = m.now();}function gc(a, b) {var c,d = { height: a },e = 0;for (b = b ? 1 : 0; 4 > e; e += 2 - b) {c = T[e], d["margin" + c] = d["padding" + c] = a;}return b && (d.opacity = d.width = a), d;}function hc(a, b, c) {for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++) {if (d = e[f].call(c, b, a)) return d;}}function ic(a, b, c) {var d,e,f,g,h,i,j,l,n = this,o = {},p = a.style,q = a.nodeType && U(a),r = m._data(a, "fxshow");c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {h.unqueued || i();}), h.unqueued++, n.always(function () {n.always(function () {h.unqueued--, m.queue(a, "fx").length || h.empty.fire();});})), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j, "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function () {p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];}));for (d in b) {if (e = b[d], ac.exec(e)) {if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {if ("show" !== e || !r || void 0 === r[d]) continue;q = !0;}o[d] = r && r[d] || m.style(a, d);} else j = void 0;}if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);else {r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {m(a).hide();}), n.done(function () {var b;m._removeData(a, "fxshow");for (b in o) {m.style(a, b, o[b]);}});for (d in o) {g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));}}}function jc(a, b) {var c, d, e, f, g;for (c in a) {if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g) {f = g.expand(f), delete a[d];for (c in f) {c in a || (a[c] = f[c], b[c] = e);}} else b[d] = e;}}function kc(a, b, c) {var d,e,f = 0,g = dc.length,h = m.Deferred().always(function () {delete i.elem;}),i = function i() {if (e) return !1;for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {j.tweens[g].run(f);}return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);},j = h.promise({ elem: a, props: m.extend({}, b), opts: m.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: $b || fc(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;}, stop: function stop(b) {var c = 0,d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; d > c; c++) {j.tweens[c].run(1);}return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;} }),k = j.props;for (jc(k, j.opts.specialEasing); g > f; f++) {if (d = dc[f].call(j, a, k, j.opts)) return d;}return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);}m.Animation = m.extend(kc, { tweener: function tweener(a, b) {m.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");for (var c, d = 0, e = a.length; e > d; d++) {c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);}}, prefilter: function prefilter(a, b) {b ? dc.unshift(a) : dc.push(a);} }), m.speed = function (a, b, c) {var d = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? m.extend({}, a) : { complete: c || !c && b || m.isFunction(a) && a, duration: a, easing: c && b || b && !m.isFunction(b) && b };return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);}, d;}, m.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {return this.filter(U).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);}, animate: function animate(a, b, c, d) {var e = m.isEmptyObject(a),f = m.speed(b, c, d),g = function g() {var b = kc(this, m.extend({}, a), f);(e || m._data(this, "finish")) && b.stop(!0);};return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);}, stop: function stop(a, b, c) {var d = function d(a) {var b = a.stop;delete a.stop, b(c);};return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {var b = !0,e = null != a && a + "queueHooks",f = m.timers,g = m._data(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {g[e] && g[e].stop && cc.test(e) && d(g[e]);}for (e = f.length; e--;) {f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));}(b || !c) && m.dequeue(this, a);});}, finish: function finish(a) {return a !== !1 && (a = a || "fx"), this.each(function () {var b,c = m._data(this),d = c[a + "queue"],e = c[a + "queueHooks"],f = m.timers,g = d ? d.length : 0;for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));}for (b = 0; g > b; b++) {d[b] && d[b].finish && d[b].finish.call(this);}delete c.finish;});} }), m.each(["toggle", "show", "hide"], function (a, b) {var c = m.fn[b];m.fn[b] = function (a, d, e) {return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);};}), m.each({ slideDown: gc("show"), slideUp: gc("hide"), slideToggle: gc("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {m.fn[a] = function (a, c, d) {return this.animate(b, a, c, d);};}), m.timers = [], m.fx.tick = function () {var a,b = m.timers,c = 0;for ($b = m.now(); c < b.length; c++) {a = b[c], a() || b[c] !== a || b.splice(c--, 1);}b.length || m.fx.stop(), $b = void 0;}, m.fx.timer = function (a) {m.timers.push(a), a() ? m.fx.start() : m.timers.pop();}, m.fx.interval = 13, m.fx.start = function () {_b || (_b = setInterval(m.fx.tick, m.fx.interval));}, m.fx.stop = function () {clearInterval(_b), _b = null;}, m.fx.speeds = { slow: 600, fast: 200, _default: 400 }, m.fn.delay = function (a, b) {return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {var d = setTimeout(b, a);c.stop = function () {clearTimeout(d);};});}, function () {var a, b, c, d, e;b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), k.radioValue = "t" === a.value;}();var lc = /\r/g;m.fn.extend({ val: function val(a) {var b,c,d,e = this[0];{if (arguments.length) return d = m.isFunction(a), this.each(function (c) {var e;1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function (a) {return null == a ? "" : a + "";})), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));});if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c);}} }), m.extend({ valHooks: { option: { get: function get(a) {var b = m.find.attr(a, "value");return null != b ? b : m.trim(m.text(a));} }, select: { get: function get(a) {for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {if (b = m(c).val(), f) return b;g.push(b);}}return g;}, set: function set(a, b) {var c,d,e = a.options,f = m.makeArray(b),g = e.length;while (g--) {if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {d.selected = c = !0;} catch (h) {d.scrollHeight;} else d.selected = !1;}return c || (a.selectedIndex = -1), e;} } } }), m.each(["radio", "checkbox"], function () {m.valHooks[this] = { set: function set(a, b) {return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;} }, k.checkOn || (m.valHooks[this].get = function (a) {return null === a.getAttribute("value") ? "on" : a.value;});});var mc,nc,oc = m.expr.attrHandle,pc = /^(?:checked|selected)$/i,qc = k.getSetAttribute,rc = k.input;m.fn.extend({ attr: function attr(a, b) {return V(this, m.attr, a, b, arguments.length > 1);}, removeAttr: function removeAttr(a) {return this.each(function () {m.removeAttr(this, a);});} }), m.extend({ attr: function attr(a, b, c) {var d,e,f = a.nodeType;if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void m.removeAttr(a, b));}, removeAttr: function removeAttr(a, b) {var c,d,e = 0,f = b && b.match(E);if (f && 1 === a.nodeType) while (c = f[e++]) {d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), a.removeAttribute(qc ? c : d);}}, attrHooks: { type: { set: function set(a, b) {if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;}} } } }), nc = { set: function set(a, b, c) {return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, c;} }, m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {var c = oc[b] || m.find.attr;oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {var e, f;return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e;} : function (a, b, c) {return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;};}), rc && qc || (m.attrHooks.value = { set: function set(a, b, c) {return m.nodeName(a, "input") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);} }), qc || (mc = { set: function set(a, b, c) {var d = a.getAttributeNode(c);return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0;} }, oc.id = oc.name = oc.coords = function (a, b, c) {var d;return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;}, m.valHooks.button = { get: function get(a, b) {var c = a.getAttributeNode(b);return c && c.specified ? c.value : void 0;}, set: mc.set }, m.attrHooks.contenteditable = { set: function set(a, b, c) {mc.set(a, "" === b ? !1 : b, c);} }, m.each(["width", "height"], function (a, b) {m.attrHooks[b] = { set: function set(a, c) {return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;} };})), k.style || (m.attrHooks.style = { get: function get(a) {return a.style.cssText || void 0;}, set: function set(a, b) {return a.style.cssText = b + "";} });var sc = /^(?:input|select|textarea|button|object)$/i,tc = /^(?:a|area)$/i;m.fn.extend({ prop: function prop(a, b) {return V(this, m.prop, a, b, arguments.length > 1);}, removeProp: function removeProp(a) {return a = m.propFix[a] || a, this.each(function () {try {this[a] = void 0, delete this[a];} catch (b) {}});} }), m.extend({ propFix: { "for": "htmlFor", "class": "className" }, prop: function prop(a, b, c) {var d,e,f,g = a.nodeType;if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];}, propHooks: { tabIndex: { get: function get(a) {var b = m.find.attr(a, "tabindex");return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;} } } }), k.hrefNormalized || m.each(["href", "src"], function (a, b) {m.propHooks[b] = { get: function get(a) {return a.getAttribute(b, 4);} };}), k.optSelected || (m.propHooks.selected = { get: function get(a) {var b = a.parentNode;return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;} }), m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {m.propFix[this.toLowerCase()] = this;}), k.enctype || (m.propFix.enctype = "encoding");var uc = /[\t\r\n\f]/g;m.fn.extend({ addClass: function addClass(a) {var b,c,d,e,f,g,h = 0,i = this.length,j = "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {m(this).addClass(a.call(this, b, this.className));});if (j) for (b = (a || "").match(E) || []; i > h; h++) {if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")) {f = 0;while (e = b[f++]) {d.indexOf(" " + e + " ") < 0 && (d += e + " ");}g = m.trim(d), c.className !== g && (c.className = g);}}return this;}, removeClass: function removeClass(a) {var b,c,d,e,f,g,h = 0,i = this.length,j = 0 === arguments.length || "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {m(this).removeClass(a.call(this, b, this.className));});if (j) for (b = (a || "").match(E) || []; i > h; h++) {if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : "")) {f = 0;while (e = b[f++]) {while (d.indexOf(" " + e + " ") >= 0) {d = d.replace(" " + e + " ", " ");}}g = a ? m.trim(d) : "", c.className !== g && (c.className = g);}}return this;}, toggleClass: function toggleClass(a, b) {var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {m(this).toggleClass(a.call(this, c, this.className, b), b);} : function () {if ("string" === c) {var b,d = 0,e = m(this),f = a.match(E) || [];while (b = f[d++]) {e.hasClass(b) ? e.removeClass(b) : e.addClass(b);}} else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "");});}, hasClass: function hasClass(a) {for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;}return !1;} }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {m.fn[b] = function (a, c) {return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);};}), m.fn.extend({ hover: function hover(a, b) {return this.mouseenter(a).mouseleave(b || a);}, bind: function bind(a, b, c) {return this.on(a, null, b, c);}, unbind: function unbind(a, b) {return this.off(a, null, b);}, delegate: function delegate(a, b, c, d) {return this.on(b, a, c, d);}, undelegate: function undelegate(a, b, c) {return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);} });var vc = m.now(),wc = /\?/,xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON = function (b) {if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");var c,d = null,e = m.trim(b + "");return e && !m.trim(e.replace(xc, function (a, b, e, f) {return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "");})) ? Function("return " + e)() : m.error("Invalid JSON: " + b);}, m.parseXML = function (b) {var c, d;if (!b || "string" != typeof b) return null;try {a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b));} catch (e) {c = void 0;}return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), c;};var yc,zc,Ac = /#.*$/,Bc = /([?&])_=[^&]*/,Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec = /^(?:GET|HEAD)$/,Fc = /^\/\//,Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc = {},Ic = {},Jc = "*/".concat("*");try {zc = location.href;} catch (Kc) {zc = y.createElement("a"), zc.href = "", zc = zc.href;}yc = Gc.exec(zc.toLowerCase()) || [];function Lc(a) {return function (b, c) {"string" != typeof b && (c = b, b = "*");var d,e = 0,f = b.toLowerCase().match(E) || [];if (m.isFunction(c)) while (d = f[e++]) {"+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);}};}function Mc(a, b, c, d) {var e = {},f = a === Ic;function g(h) {var i;return e[h] = !0, m.each(a[h] || [], function (a, h) {var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);}), i;}return g(b.dataTypes[0]) || !e["*"] && g("*");}function Nc(a, b) {var c,d,e = m.ajaxSettings.flatOptions || {};for (d in b) {void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);}return c && m.extend(!0, a, c), a;}function Oc(a, b, c) {var d,e,f,g,h = a.contents,i = a.dataTypes;while ("*" === i[0]) {i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));}if (e) for (g in h) {if (h[g] && h[g].test(e)) {i.unshift(g);break;}}if (i[0] in c) f = i[0];else {for (g in c) {if (!i[0] || a.converters[g + " " + i[0]]) {f = g;break;}d || (d = g);}f = f || d;}return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;}function Pc(a, b, c, d) {var e,f,g,h,i,j = {},k = a.dataTypes.slice();if (k[1]) for (g in a.converters) {j[g.toLowerCase()] = a.converters[g];}f = k.shift();while (f) {if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;}}if (g !== !0) if (g && a["throws"]) b = g(b);else try {b = g(b);} catch (l) {return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };}}}return { state: "success", data: b };}m.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: zc, type: "GET", isLocal: Dc.test(yc[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Jc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": m.parseJSON, "text xml": m.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);}, ajaxPrefilter: Lc(Hc), ajaxTransport: Lc(Ic), ajax: function ajax(a, b) {"object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && (b = a, a = void 0), b = b || {};var c,d,e,f,g,h,i,j,k = m.ajaxSetup({}, b),l = k.context || k,n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,o = m.Deferred(),p = m.Callbacks("once memory"),q = k.statusCode || {},r = {},s = {},t = 0,u = "canceled",v = { readyState: 0, getResponseHeader: function getResponseHeader(a) {var b;if (2 === t) {if (!j) {j = {};while (b = Cc.exec(f)) {j[b[1].toLowerCase()] = b[2];}}b = j[a.toLowerCase()];}return null == b ? null : b;}, getAllResponseHeaders: function getAllResponseHeaders() {return 2 === t ? f : null;}, setRequestHeader: function setRequestHeader(a, b) {var c = a.toLowerCase();return t || (a = s[c] = s[c] || a, r[a] = b), this;}, overrideMimeType: function overrideMimeType(a) {return t || (k.mimeType = a), this;}, statusCode: function statusCode(a) {var b;if (a) if (2 > t) for (b in a) {q[b] = [q[b], a[b]];} else v.always(a[v.status]);return this;}, abort: function abort(a) {var b = a || u;return i && i.abort(b), x(0, b), this;} };if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t) return v;h = k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);for (d in k.headers) {v.setRequestHeader(d, k.headers[d]);}if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();u = "abort";for (d in { success: 1, error: 1, complete: 1 }) {v[d](k[d]);}if (i = Mc(Ic, k, b, v)) {v.readyState = 1, h && n.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {v.abort("timeout");}, k.timeout));try {t = 1, i.send(r, x);} catch (w) {if (!(2 > t)) throw w;x(-1, w);}} else x(-1, "No Transport");function x(a, b, c, d) {var j,r,s,u,w,x = b;2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")));}return v;}, getJSON: function getJSON(a, b, c) {return m.get(a, b, c, "json");}, getScript: function getScript(a, b) {return m.get(a, void 0, b, "script");} }), m.each(["get", "post"], function (a, b) {m[b] = function (a, c, d, e) {return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({ url: a, type: b, dataType: e, data: c, success: d });};}), m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {m.fn[b] = function (a) {return this.on(b, a);};}), m._evalUrl = function (a) {return m.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 });}, m.fn.extend({ wrapAll: function wrapAll(a) {if (m.isFunction(a)) return this.each(function (b) {m(this).wrapAll(a.call(this, b));});if (this[0]) {var b = m(a, this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode && b.insertBefore(this[0]), b.map(function () {var a = this;while (a.firstChild && 1 === a.firstChild.nodeType) {a = a.firstChild;}return a;}).append(this);}return this;}, wrapInner: function wrapInner(a) {return this.each(m.isFunction(a) ? function (b) {m(this).wrapInner(a.call(this, b));} : function () {var b = m(this),c = b.contents();c.length ? c.wrapAll(a) : b.append(a);});}, wrap: function wrap(a) {var b = m.isFunction(a);return this.each(function (c) {m(this).wrapAll(b ? a.call(this, c) : a);});}, unwrap: function unwrap() {return this.parent().each(function () {m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);}).end();} }), m.expr.filters.hidden = function (a) {return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"));}, m.expr.filters.visible = function (a) {return !m.expr.filters.hidden(a);};var Qc = /%20/g,Rc = /\[\]$/,Sc = /\r?\n/g,Tc = /^(?:submit|button|image|reset|file)$/i,Uc = /^(?:input|select|textarea|keygen)/i;function Vc(a, b, c, d) {var e;if (m.isArray(b)) m.each(b, function (b, e) {c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? b : "") + "]", e, c, d);});else if (c || "object" !== m.type(b)) d(a, b);else for (e in b) {Vc(a + "[" + e + "]", b[e], c, d);}}m.param = function (a, b) {var c,d = [],e = function e(a, b) {b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);};if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function () {e(this.name, this.value);});else for (c in a) {Vc(c, a[c], b, e);}return d.join("&").replace(Qc, "+");}, m.fn.extend({ serialize: function serialize() {return m.param(this.serializeArray());}, serializeArray: function serializeArray() {return this.map(function () {var a = m.prop(this, "elements");return a ? m.makeArray(a) : this;}).filter(function () {var a = this.type;return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));}).map(function (a, b) {var c = m(this).val();return null == c ? null : m.isArray(c) ? m.map(c, function (a) {return { name: b.name, value: a.replace(Sc, "\r\n") };}) : { name: b.name, value: c.replace(Sc, "\r\n") };}).get();} }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();} : Zc;var Wc = 0,Xc = {},Yc = m.ajaxSettings.xhr();a.ActiveXObject && m(a).on("unload", function () {for (var a in Xc) {Xc[a](void 0, !0);}}), k.cors = !!Yc && "withCredentials" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {if (!a.crossDomain || k.cors) {var _b3;return { send: function send(c, d) {var e,f = a.xhr(),g = ++Wc;if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {f[e] = a.xhrFields[e];}a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");for (e in c) {void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");}f.send(a.hasContent && a.data || null), _b3 = function b(c, e) {var h, i, j;if (_b3 && (e || 4 === f.readyState)) if (delete Xc[g], _b3 = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();else {j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);try {i = f.statusText;} catch (k) {i = "";}h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;}j && d(h, i, j, f.getAllResponseHeaders());}, a.async ? 4 === f.readyState ? setTimeout(_b3) : f.onreadystatechange = Xc[g] = _b3 : _b3();}, abort: function abort() {_b3 && _b3(void 0, !0);} };}});function Zc() {try {return new a.XMLHttpRequest();} catch (b) {}}function $c() {try {return new a.ActiveXObject("Microsoft.XMLHTTP");} catch (b) {}}m.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function textScript(a) {return m.globalEval(a), a;} } }), m.ajaxPrefilter("script", function (a) {void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);}), m.ajaxTransport("script", function (a) {if (a.crossDomain) {var b,c = y.head || m("head")[0] || y.documentElement;return { send: function send(d, e) {b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {(c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"));}, c.insertBefore(b, c.firstChild);}, abort: function abort() {b && b.onload(void 0, !0);} };}});var _c = [],ad = /(=)\?(?=&|$)|\?\?/;m.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {var a = _c.pop() || m.expando + "_" + vc++;return this[a] = !0, a;} }), m.ajaxPrefilter("json jsonp", function (b, c, d) {var e,f,g,h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, "$1" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {return g || m.error(e + " was not called"), g[0];}, b.dataTypes[0] = "json", f = a[e], a[e] = function () {g = arguments;}, d.always(function () {a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;}), "script") : void 0;}), m.parseHTML = function (a, b, c) {if (!a || "string" != typeof a) return null;"boolean" == typeof b && (c = b, b = !1), b = b || y;var d = u.exec(a),e = !c && [];return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));};var bd = m.fn.load;m.fn.load = function (a, b, c) {if ("string" != typeof a && bd) return bd.apply(this, arguments);var d,e,f,g = this,h = a.indexOf(" ");return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (f = "POST"), g.length > 0 && m.ajax({ url: a, type: f, dataType: "html", data: b }).done(function (a) {e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);}).complete(c && function (a, b) {g.each(c, e || [a.responseText, b, a]);}), this;}, m.expr.filters.animated = function (a) {return m.grep(m.timers, function (b) {return a === b.elem;}).length;};var cd = a.document.documentElement;function dd(a) {return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;}m.offset = { setOffset: function setOffset(a, b, c) {var d,e,f,g,h,i,j,k = m.css(a, "position"),l = m(a),n = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n);} }, m.fn.extend({ offset: function offset(a) {if (arguments.length) return void 0 === a ? this : this.each(function (b) {m.offset.setOffset(this, a, b);});var b,c,d = { top: 0, left: 0 },e = this[0],f = e && e.ownerDocument;if (f) return b = f.documentElement, m.contains(b, e) ? (_typeof(e.getBoundingClientRect) !== K && (d = e.getBoundingClientRect()), c = dd(f), { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) }) : d;}, position: function position() {if (this[0]) {var a,b,c = { top: 0, left: 0 },d = this[0];return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), c.left += m.css(a[0], "borderLeftWidth", !0)), { top: b.top - c.top - m.css(d, "marginTop", !0), left: b.left - c.left - m.css(d, "marginLeft", !0) };}}, offsetParent: function offsetParent() {return this.map(function () {var a = this.offsetParent || cd;while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) {a = a.offsetParent;}return a || cd;});} }), m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {var c = /Y/.test(b);m.fn[a] = function (d) {return V(this, function (a, d, e) {var f = dd(a);return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);}, a, d, arguments.length, null);};}), m.each(["top", "left"], function (a, b) {m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0;});}), m.each({ Height: "height", Width: "width" }, function (a, b) {m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {m.fn[d] = function (d, e) {var f = arguments.length && (c || "boolean" != typeof d),g = c || (d === !0 || e === !0 ? "margin" : "border");return V(this, function (b, c, d) {var e;return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);}, b, f ? d : void 0, f, null);};});}), m.fn.size = function () {return this.length;}, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {return m;});var ed = a.jQuery,fd = a.$;return m.noConflict = function (b) {return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;}, (typeof b === "undefined" ? "undefined" : _typeof(b)) === K && (a.jQuery = a.$ = m), m;});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

// extensions.js
// (c) Dmitry Sadakov - 2015 All rights reserved.

'use strict';

if (typeof String.prototype.endsWith !== 'function') {
				String.prototype.endsWith = function (suffix) {
								return this.indexOf(suffix, this.length - suffix.length) !== -1;
				};
}

if (typeof String.prototype.startsWith !== 'function') {
				String.prototype.startsWith = function (prefix) {
								return this.indexOf(prefix) !== -1;
				};
}


var brokenPromises = [];

if (typeof Promise !== 'undefined' && Promise) {
				Promise.any = function (arrayOfPromises) {
								if (!arrayOfPromises || !(arrayOfPromises instanceof Array)) {
												throw new Error('Must pass Promise.any an array');
								}

								if (arrayOfPromises.length === 0) {
												return Promise.resolve([]);
								}


								// For each promise that resolves or rejects, 
								// make them all resolve.
								// Record which ones did resolve or reject
								var i = 0;
								var resolvingPromises = arrayOfPromises.map(function (promise) {
												promise.id = i;
												var localI = i;
												brokenPromises[localI] = promise;
												i++;

												return promise.then(function (result) {
																console.log('resolved ' + localI);
																delete brokenPromises[localI];
																return {
																				resolve: true,
																				result: result };

												}, function (error) {
																console.log('rejected ' + localI);
																delete brokenPromises[localI];
																return {
																				resolve: false,
																				result: error };

												});
								});

								return Promise.all(resolvingPromises).then(function (results) {
												// Count how many passed/failed
												var passed = [],failed = [],allFailed = true;
												results.forEach(function (result) {
																if (result.resolve) {
																				allFailed = false;
																}
																if (result.resolve) {
																				passed.push(result.result);
																} else {
																				failed.push(result.result);
																}
												});

												if (allFailed) {
																throw failed;
												} else {
																return passed;
												}
								});
				};

}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVuc2lvbnMuanMiXSwibmFtZXMiOlsiU3RyaW5nIiwicHJvdG90eXBlIiwiZW5kc1dpdGgiLCJzdWZmaXgiLCJpbmRleE9mIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsInByZWZpeCIsImJyb2tlblByb21pc2VzIiwiUHJvbWlzZSIsImFueSIsImFycmF5T2ZQcm9taXNlcyIsIkFycmF5IiwiRXJyb3IiLCJyZXNvbHZlIiwiaSIsInJlc29sdmluZ1Byb21pc2VzIiwibWFwIiwicHJvbWlzZSIsImlkIiwibG9jYWxJIiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImFsbCIsInJlc3VsdHMiLCJwYXNzZWQiLCJmYWlsZWQiLCJhbGxGYWlsZWQiLCJmb3JFYWNoIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTs7QUFFQSxJQUFJLE9BQU9BLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQXhCLEtBQXFDLFVBQXpDLEVBQXFEO0FBQ2pERixXQUFPQyxTQUFQLENBQWlCQyxRQUFqQixHQUE0QixVQUFTQyxNQUFULEVBQWlCO0FBQ3pDLGVBQU8sS0FBS0MsT0FBTCxDQUFhRCxNQUFiLEVBQXFCLEtBQUtFLE1BQUwsR0FBY0YsT0FBT0UsTUFBMUMsTUFBc0QsQ0FBQyxDQUE5RDtBQUNILEtBRkQ7QUFHSDs7QUFFRCxJQUFJLE9BQU9MLE9BQU9DLFNBQVAsQ0FBaUJLLFVBQXhCLEtBQXVDLFVBQTNDLEVBQXVEO0FBQ25ETixXQUFPQyxTQUFQLENBQWlCSyxVQUFqQixHQUE4QixVQUFTQyxNQUFULEVBQWlCO0FBQzNDLGVBQU8sS0FBS0gsT0FBTCxDQUFhRyxNQUFiLE1BQXlCLENBQUMsQ0FBakM7QUFDSCxLQUZEO0FBR0g7OztBQUdELElBQUlDLGlCQUFpQixFQUFyQjs7QUFFQSxJQUFJLE9BQU9DLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQXRDLEVBQStDO0FBQzlDQSxZQUFRQyxHQUFSLEdBQWMsVUFBU0MsZUFBVCxFQUEwQjtBQUN0QyxZQUFHLENBQUNBLGVBQUQsSUFBb0IsRUFBRUEsMkJBQTJCQyxLQUE3QixDQUF2QixFQUE0RDtBQUMxRCxrQkFBTSxJQUFJQyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUVELFlBQUdGLGdCQUFnQk4sTUFBaEIsS0FBMkIsQ0FBOUIsRUFBaUM7QUFDL0IsbUJBQU9JLFFBQVFLLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBUDtBQUNEOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxZQUFJQyxJQUFJLENBQVI7QUFDQSxZQUFJQyxvQkFBb0JMLGdCQUFnQk0sR0FBaEIsQ0FBb0IsVUFBU0MsT0FBVCxFQUFrQjtBQUM3REEsb0JBQVFDLEVBQVIsR0FBYUosQ0FBYjtBQUNBLGdCQUFJSyxTQUFTTCxDQUFiO0FBQ0FQLDJCQUFlWSxNQUFmLElBQXlCRixPQUF6QjtBQUNBSDs7QUFFQyxtQkFBT0csUUFBUUcsSUFBUixDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDbkNDLHdCQUFRQyxHQUFSLENBQVksY0FBY0osTUFBMUI7QUFDQSx1QkFBT1osZUFBZVksTUFBZixDQUFQO0FBQ0EsdUJBQU87QUFDTE4sNkJBQVMsSUFESjtBQUVMUSw0QkFBUUEsTUFGSCxFQUFQOztBQUlELGFBUE0sRUFPSixVQUFTRyxLQUFULEVBQWdCO0FBQ2hCRix3QkFBUUMsR0FBUixDQUFZLGNBQWNKLE1BQTFCO0FBQ0EsdUJBQU9aLGVBQWVZLE1BQWYsQ0FBUDtBQUNELHVCQUFPO0FBQ0xOLDZCQUFTLEtBREo7QUFFTFEsNEJBQVFHLEtBRkgsRUFBUDs7QUFJRCxhQWRNLENBQVA7QUFlRCxTQXJCdUIsQ0FBeEI7O0FBdUJBLGVBQU9oQixRQUFRaUIsR0FBUixDQUFZVixpQkFBWixFQUErQkssSUFBL0IsQ0FBb0MsVUFBU00sT0FBVCxFQUFrQjtBQUMzRDtBQUNBLGdCQUFJQyxTQUFTLEVBQWIsQ0FBaUJDLFNBQVMsRUFBMUIsQ0FBOEJDLFlBQVksSUFBMUM7QUFDQUgsb0JBQVFJLE9BQVIsQ0FBZ0IsVUFBU1QsTUFBVCxFQUFpQjtBQUMvQixvQkFBR0EsT0FBT1IsT0FBVixFQUFtQjtBQUNqQmdCLGdDQUFZLEtBQVo7QUFDRDtBQUNELG9CQUFJUixPQUFPUixPQUFYLEVBQW9CO0FBQ2xCYywyQkFBT0ksSUFBUCxDQUFZVixPQUFPQSxNQUFuQjtBQUNELGlCQUZELE1BRU87QUFDTE8sMkJBQU9HLElBQVAsQ0FBWVYsT0FBT0EsTUFBbkI7QUFDRDtBQUNGLGFBVEQ7O0FBV0EsZ0JBQUdRLFNBQUgsRUFBYztBQUNaLHNCQUFNRCxNQUFOO0FBQ0QsYUFGRCxNQUVPO0FBQ0wsdUJBQU9ELE1BQVA7QUFDRDtBQUNGLFNBbkJNLENBQVA7QUFvQkQsS0F6REQ7O0FBMkRBIiwiZmlsZSI6ImV4dGVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRlbnNpb25zLmpzXG4vLyAoYykgRG1pdHJ5IFNhZGFrb3YgLSAyMDE1IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uKHN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHN1ZmZpeCwgdGhpcy5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XG4gICAgfTtcbn1cbiBcbmlmICh0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YocHJlZml4KSAhPT0gLTE7XG4gICAgfTtcbn1cblxuXG52YXIgYnJva2VuUHJvbWlzZXMgPSBbXTtcblxuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBQcm9taXNlKSB7XG5cdFByb21pc2UuYW55ID0gZnVuY3Rpb24oYXJyYXlPZlByb21pc2VzKSB7XG5cdCAgaWYoIWFycmF5T2ZQcm9taXNlcyB8fCAhKGFycmF5T2ZQcm9taXNlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHBhc3MgUHJvbWlzZS5hbnkgYW4gYXJyYXknKTtcblx0ICB9XG5cdCAgICBcblx0ICBpZihhcnJheU9mUHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG5cdCAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcblx0ICB9XG5cdCAgIFxuXHQgICAgXG5cdCAgLy8gRm9yIGVhY2ggcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9yIHJlamVjdHMsIFxuXHQgIC8vIG1ha2UgdGhlbSBhbGwgcmVzb2x2ZS5cblx0ICAvLyBSZWNvcmQgd2hpY2ggb25lcyBkaWQgcmVzb2x2ZSBvciByZWplY3Rcblx0ICB2YXIgaSA9IDA7XG5cdCAgdmFyIHJlc29sdmluZ1Byb21pc2VzID0gYXJyYXlPZlByb21pc2VzLm1hcChmdW5jdGlvbihwcm9taXNlKSB7XG5cdCAgXHRwcm9taXNlLmlkID0gaTtcblx0ICBcdHZhciBsb2NhbEkgPSBpO1xuXHQgIFx0YnJva2VuUHJvbWlzZXNbbG9jYWxJXSA9IHByb21pc2U7XG5cdCAgXHRpKys7XG5cblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlZCAnICsgbG9jYWxJKTtcblx0ICAgICAgZGVsZXRlIGJyb2tlblByb21pc2VzW2xvY2FsSV07XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcmVzb2x2ZTogdHJ1ZSxcblx0ICAgICAgICByZXN1bHQ6IHJlc3VsdFxuXHQgICAgICB9O1xuXHQgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0ICAgICAgIGNvbnNvbGUubG9nKCdyZWplY3RlZCAnICsgbG9jYWxJKTtcblx0ICAgICAgIGRlbGV0ZSBicm9rZW5Qcm9taXNlc1tsb2NhbEldO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlc29sdmU6IGZhbHNlLFxuXHQgICAgICAgIHJlc3VsdDogZXJyb3Jcblx0ICAgICAgfTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIFByb21pc2UuYWxsKHJlc29sdmluZ1Byb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcblx0ICAgIC8vIENvdW50IGhvdyBtYW55IHBhc3NlZC9mYWlsZWRcblx0ICAgIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW10sIGFsbEZhaWxlZCA9IHRydWU7XG5cdCAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgIGlmKHJlc3VsdC5yZXNvbHZlKSB7XG5cdCAgICAgICAgYWxsRmFpbGVkID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHJlc3VsdC5yZXNvbHZlKSB7XG5cdCAgICAgICAgcGFzc2VkLnB1c2gocmVzdWx0LnJlc3VsdCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZmFpbGVkLnB1c2gocmVzdWx0LnJlc3VsdCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBpZihhbGxGYWlsZWQpIHtcblx0ICAgICAgdGhyb3cgZmFpbGVkO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHBhc3NlZDtcblx0ICAgIH1cblx0ICB9KTtcblx0fTtcblxufSJdfQ==

/*
 *  Copyright 2015 Dmitry Sadakov. All rights reserved.
 */

'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

AjaxLite = function () {function AjaxLite() {_classCallCheck(this, AjaxLite);}_createClass(AjaxLite, null, [{ key: 'ajax', value: function ajax(
    options) {
      var url = options.url;
      var type = options.type || 'GET';
      var headers = options.headers || {};
      var body = options.data || null;
      var timeout = options.timeout || 1000;
      var success = options.success || function () {
        console.log('options.success was missing for this request');
      };
      var contentType = options.contentType || 'application/json';
      var error = options.error || function () {
        console.log('options.error was missing for this request');
      };

      if (!url) {
        error(null, 'loadURL requires a url argument');
      }

      var xhr = new XMLHttpRequest();
      xhr.contentType = 'json';
      xhr.ontimeout = function () {
        //error(xhr, 'timeout', xhr.response);
      };
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.contentType === 'json') {
            if (xhr.responseText === '') {
              xhr.responseJSON = null;
            } else {
              try {
                xhr.responseJSON = JSON.parse(xhr.responseText);
              } catch (err) {
                console.error('JSON parsing error: ' + url + '. Error: ' + err);
                xhr.responseJSON = null;
              }
            }
          }
          if (xhr.status === 200) {
            success(xhr.responseJSON || xhr.responseText, 'success', xhr);
          } else if (xhr.status === 0) {
            // xhr.statusText = 'timeout';
            error(xhr, 'timeout', xhr.response);
          } else {
            error(xhr, 'error', xhr.response);
          }
        }

      };

      xhr.open(type, url, true);

      xhr.setRequestHeader('Content-Type', contentType);
      xhr.setRequestHeader('Accept', 'application/json, text/javascript, */*');
      xhr.timeout = timeout;

      Object.keys(headers).forEach(function (key) {
        xhr.setRequestHeader(key, headers[key]);
      });

      console.log('AjaxLite sending: ' + url);
      if (body) {
        xhr.send(body);
      } else {
        xhr.send();
      }

      return xhr;
    } }]);return AjaxLite;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXhsaXRlLmpzIl0sIm5hbWVzIjpbIkFqYXhMaXRlIiwib3B0aW9ucyIsInVybCIsInR5cGUiLCJoZWFkZXJzIiwiYm9keSIsImRhdGEiLCJ0aW1lb3V0Iiwic3VjY2VzcyIsImNvbnNvbGUiLCJsb2ciLCJjb250ZW50VHlwZSIsImVycm9yIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2VKU09OIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwic3RhdHVzIiwicmVzcG9uc2UiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2VuZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQSxhOztBQUVNQSxRO0FBQ1FDLFcsRUFBUztBQUNuQixVQUFJQyxNQUFNRCxRQUFRQyxHQUFsQjtBQUNBLFVBQUlDLE9BQU9GLFFBQVFFLElBQVIsSUFBZ0IsS0FBM0I7QUFDQSxVQUFJQyxVQUFVSCxRQUFRRyxPQUFSLElBQW1CLEVBQWpDO0FBQ0EsVUFBSUMsT0FBT0osUUFBUUssSUFBUixJQUFnQixJQUEzQjtBQUNBLFVBQUlDLFVBQVVOLFFBQVFNLE9BQVIsSUFBbUIsSUFBakM7QUFDQSxVQUFJQyxVQUFVUCxRQUFRTyxPQUFSLElBQW1CLFlBQVc7QUFDMUNDLGdCQUFRQyxHQUFSLENBQVksOENBQVo7QUFDRCxPQUZEO0FBR0EsVUFBSUMsY0FBY1YsUUFBUVUsV0FBUixJQUF1QixrQkFBekM7QUFDQSxVQUFJQyxRQUFRWCxRQUFRVyxLQUFSLElBQWlCLFlBQVc7QUFDdENILGdCQUFRQyxHQUFSLENBQVksNENBQVo7QUFDRCxPQUZEOztBQUlBLFVBQUksQ0FBQ1IsR0FBTCxFQUFVO0FBQ1JVLGNBQU0sSUFBTixFQUFZLGlDQUFaO0FBQ0Q7O0FBRUQsVUFBSUMsTUFBTSxJQUFJQyxjQUFKLEVBQVY7QUFDQUQsVUFBSUYsV0FBSixHQUFrQixNQUFsQjtBQUNBRSxVQUFJRSxTQUFKLEdBQWdCLFlBQVc7QUFDekI7QUFDRCxPQUZEO0FBR0FGLFVBQUlHLGtCQUFKLEdBQXlCLFlBQVc7QUFDbEMsWUFBSUgsSUFBSUksVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixjQUFJSixJQUFJRixXQUFKLEtBQW9CLE1BQXhCLEVBQWdDO0FBQzlCLGdCQUFJRSxJQUFJSyxZQUFKLEtBQXFCLEVBQXpCLEVBQTZCO0FBQzNCTCxrQkFBSU0sWUFBSixHQUFtQixJQUFuQjtBQUNELGFBRkQsTUFFTztBQUNMLGtCQUFJO0FBQ0ZOLG9CQUFJTSxZQUFKLEdBQW1CQyxLQUFLQyxLQUFMLENBQVdSLElBQUlLLFlBQWYsQ0FBbkI7QUFDRCxlQUZELENBRUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1piLHdCQUFRRyxLQUFSLDBCQUFxQ1YsR0FBckMsaUJBQW9Eb0IsR0FBcEQ7QUFDQVQsb0JBQUlNLFlBQUosR0FBbUIsSUFBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxjQUFJTixJQUFJVSxNQUFKLEtBQWUsR0FBbkIsRUFBd0I7QUFDdEJmLG9CQUFRSyxJQUFJTSxZQUFKLElBQW9CTixJQUFJSyxZQUFoQyxFQUE4QyxTQUE5QyxFQUF5REwsR0FBekQ7QUFDRCxXQUZELE1BRU8sSUFBSUEsSUFBSVUsTUFBSixLQUFlLENBQW5CLEVBQXNCO0FBQzNCO0FBQ0FYLGtCQUFNQyxHQUFOLEVBQVcsU0FBWCxFQUFzQkEsSUFBSVcsUUFBMUI7QUFDRCxXQUhNLE1BR0E7QUFDTFosa0JBQU1DLEdBQU4sRUFBVyxPQUFYLEVBQW9CQSxJQUFJVyxRQUF4QjtBQUNEO0FBQ0Y7O0FBRUYsT0F4QkQ7O0FBMEJBWCxVQUFJWSxJQUFKLENBQVN0QixJQUFULEVBQWVELEdBQWYsRUFBb0IsSUFBcEI7O0FBRUFXLFVBQUlhLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDZixXQUFyQztBQUNBRSxVQUFJYSxnQkFBSixDQUFxQixRQUFyQixFQUErQix3Q0FBL0I7QUFDQWIsVUFBSU4sT0FBSixHQUFjQSxPQUFkOztBQUVBb0IsYUFBT0MsSUFBUCxDQUFZeEIsT0FBWixFQUFxQnlCLE9BQXJCLENBQTZCLFVBQVNDLEdBQVQsRUFBYztBQUN6Q2pCLFlBQUlhLGdCQUFKLENBQXFCSSxHQUFyQixFQUEwQjFCLFFBQVEwQixHQUFSLENBQTFCO0FBQ0QsT0FGRDs7QUFJQXJCLGNBQVFDLEdBQVIsQ0FBWSx1QkFBdUJSLEdBQW5DO0FBQ0EsVUFBSUcsSUFBSixFQUFVO0FBQ1JRLFlBQUlrQixJQUFKLENBQVMxQixJQUFUO0FBQ0QsT0FGRCxNQUVPO0FBQ0xRLFlBQUlrQixJQUFKO0FBQ0Q7O0FBRUQsYUFBT2xCLEdBQVA7QUFDRCxLIiwiZmlsZSI6ImFqYXhsaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBDb3B5cmlnaHQgMjAxNSBEbWl0cnkgU2FkYWtvdi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNsYXNzIEFqYXhMaXRlIHtcbiAgc3RhdGljIGFqYXgob3B0aW9ucykge1xuICAgIHZhciB1cmwgPSBvcHRpb25zLnVybDtcbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnR0VUJztcbiAgICB2YXIgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuZGF0YSB8fCBudWxsO1xuICAgIHZhciB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDEwMDA7XG4gICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnb3B0aW9ucy5zdWNjZXNzIHdhcyBtaXNzaW5nIGZvciB0aGlzIHJlcXVlc3QnKTtcbiAgICB9O1xuICAgIHZhciBjb250ZW50VHlwZSA9IG9wdGlvbnMuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgIHZhciBlcnJvciA9IG9wdGlvbnMuZXJyb3IgfHwgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnb3B0aW9ucy5lcnJvciB3YXMgbWlzc2luZyBmb3IgdGhpcyByZXF1ZXN0Jyk7XG4gICAgfTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICBlcnJvcihudWxsLCAnbG9hZFVSTCByZXF1aXJlcyBhIHVybCBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIuY29udGVudFR5cGUgPSAnanNvbic7XG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy9lcnJvcih4aHIsICd0aW1lb3V0JywgeGhyLnJlc3BvbnNlKTtcbiAgICB9O1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoeGhyLmNvbnRlbnRUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVGV4dCA9PT0gJycpIHtcbiAgICAgICAgICAgIHhoci5yZXNwb25zZUpTT04gPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBKU09OIHBhcnNpbmcgZXJyb3I6ICR7dXJsfS4gRXJyb3I6ICR7ZXJyfWApO1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHN1Y2Nlc3MoeGhyLnJlc3BvbnNlSlNPTiB8fCB4aHIucmVzcG9uc2VUZXh0LCAnc3VjY2VzcycsIHhocik7XG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgIC8vIHhoci5zdGF0dXNUZXh0ID0gJ3RpbWVvdXQnO1xuICAgICAgICAgIGVycm9yKHhociwgJ3RpbWVvdXQnLCB4aHIucmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yKHhociwgJ2Vycm9yJywgeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIFxuICAgIH07XG5cbiAgICB4aHIub3Blbih0eXBlLCB1cmwsIHRydWUpO1xuXG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qJyk7XG4gICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG4gICAgT2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTtcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdBamF4TGl0ZSBzZW5kaW5nOiAnICsgdXJsKTtcbiAgICBpZiAoYm9keSkge1xuICAgICAgeGhyLnNlbmQoYm9keSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHhocjtcbiAgfVxufVxuIl19

/* (C) 2014 Dmitry Sadakov */

'use strict';

/*exported config */

var config = {
  //app: 'light' // light, ambieye, pro, web
  //app: 'ambieye',
  //app: 'pro',
  //app: 'app',
  app: 'web' };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVDLElBQUlBLFNBQVM7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxPQUFLLEtBTE8sRUFBYiIsImZpbGUiOiJjb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoQykgMjAxNCBEbWl0cnkgU2FkYWtvdiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qZXhwb3J0ZWQgY29uZmlnICovXG5cbiB2YXIgY29uZmlnID0ge1xuICAvL2FwcDogJ2xpZ2h0JyAvLyBsaWdodCwgYW1iaWV5ZSwgcHJvLCB3ZWJcbiAgLy9hcHA6ICdhbWJpZXllJyxcbiAgLy9hcHA6ICdwcm8nLFxuICAvL2FwcDogJ2FwcCcsXG4gIGFwcDogJ3dlYicsXG4gfTtcbiJdfQ==

/* (C) 2014 Dmitry Sadakov */

'use strict';

/*global config:true */

config.ambieye = true;
config.scenes = true;
config.search = true;
config.tabs = true;
config.feedback = true;
config.voice = true;

switch (config.app) {
    case 'light':
        config.ambieye = false;
        config.scenes = false;
        config.search = false;
        config.tabs = false;
        config.voice = false;
        break;
    case 'pro':
        config.ambieye = true;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'web':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'app':
        config.ambieye = false;
        config.scenes = true;
        config.search = false;
        config.tabs = true;
        config.feedback = false;
        config.voice = false;
        break;
    case 'eye':
        config.ambieye = true;
        config.scenes = false;
        config.search = false;
        config.tabs = true;
        config.voice = false;
        break;
    case 'win':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = false;
        break;}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5mZWF0dXJlcy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhbWJpZXllIiwic2NlbmVzIiwic2VhcmNoIiwidGFicyIsImZlZWRiYWNrIiwidm9pY2UiLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCLElBQWpCO0FBQ0FELE9BQU9FLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUYsT0FBT0csTUFBUCxHQUFnQixJQUFoQjtBQUNBSCxPQUFPSSxJQUFQLEdBQWMsSUFBZDtBQUNBSixPQUFPSyxRQUFQLEdBQWtCLElBQWxCO0FBQ0FMLE9BQU9NLEtBQVAsR0FBZSxJQUFmOztBQUVBLFFBQU9OLE9BQU9PLEdBQWQ7QUFDRSxTQUFLLE9BQUw7QUFDSVAsZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLEtBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsS0FBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLEtBQWQ7QUFDQUosZUFBT00sS0FBUCxHQUFlLEtBQWY7QUFDQTtBQUNKLFNBQUssS0FBTDtBQUNJTixlQUFPQyxPQUFQLEdBQWlCLElBQWpCO0FBQ0FELGVBQU9FLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUYsZUFBT0csTUFBUCxHQUFnQixJQUFoQjtBQUNBSCxlQUFPSSxJQUFQLEdBQWMsSUFBZDtBQUNBSixlQUFPTSxLQUFQLEdBQWUsSUFBZjtBQUNBO0FBQ0osU0FBSyxLQUFMO0FBQ0lOLGVBQU9DLE9BQVAsR0FBaUIsS0FBakI7QUFDQUQsZUFBT0UsTUFBUCxHQUFnQixJQUFoQjtBQUNBRixlQUFPRyxNQUFQLEdBQWdCLElBQWhCO0FBQ0FILGVBQU9JLElBQVAsR0FBYyxJQUFkO0FBQ0FKLGVBQU9NLEtBQVAsR0FBZSxJQUFmO0FBQ0E7QUFDSixTQUFLLEtBQUw7QUFDSU4sZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLElBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsS0FBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLElBQWQ7QUFDQUosZUFBT0ssUUFBUCxHQUFrQixLQUFsQjtBQUNBTCxlQUFPTSxLQUFQLEdBQWUsS0FBZjtBQUNBO0FBQ0osU0FBSyxLQUFMO0FBQ0lOLGVBQU9DLE9BQVAsR0FBaUIsSUFBakI7QUFDQUQsZUFBT0UsTUFBUCxHQUFnQixLQUFoQjtBQUNBRixlQUFPRyxNQUFQLEdBQWdCLEtBQWhCO0FBQ0FILGVBQU9JLElBQVAsR0FBYyxJQUFkO0FBQ0FKLGVBQU9NLEtBQVAsR0FBZSxLQUFmO0FBQ0E7QUFDSixTQUFLLEtBQUw7QUFDSU4sZUFBT0MsT0FBUCxHQUFpQixLQUFqQjtBQUNBRCxlQUFPRSxNQUFQLEdBQWdCLElBQWhCO0FBQ0FGLGVBQU9HLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUgsZUFBT0ksSUFBUCxHQUFjLElBQWQ7QUFDQUosZUFBT00sS0FBUCxHQUFlLEtBQWY7QUFDQSxjQTNDTiIsImZpbGUiOiJjb25maWcuZmVhdHVyZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoQykgMjAxNCBEbWl0cnkgU2FkYWtvdiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qZ2xvYmFsIGNvbmZpZzp0cnVlICovXG5cbmNvbmZpZy5hbWJpZXllID0gdHJ1ZTtcbmNvbmZpZy5zY2VuZXMgPSB0cnVlO1xuY29uZmlnLnNlYXJjaCA9IHRydWU7XG5jb25maWcudGFicyA9IHRydWU7XG5jb25maWcuZmVlZGJhY2sgPSB0cnVlO1xuY29uZmlnLnZvaWNlID0gdHJ1ZTtcblxuc3dpdGNoKGNvbmZpZy5hcHApIHtcbiAgY2FzZSAnbGlnaHQnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSBmYWxzZTtcbiAgICAgIGNvbmZpZy50YWJzID0gZmFsc2U7XG4gICAgICBjb25maWcudm9pY2UgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdwcm8nOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSB0cnVlO1xuICAgICAgY29uZmlnLnNjZW5lcyA9IHRydWU7XG4gICAgICBjb25maWcuc2VhcmNoID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy50YWJzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy52b2ljZSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgY2FzZSAnd2ViJzpcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSB0cnVlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdhcHAnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSB0cnVlO1xuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLmZlZWRiYWNrID0gZmFsc2U7XG4gICAgICBjb25maWcudm9pY2UgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICBjYXNlICdleWUnOlxuICAgICAgY29uZmlnLmFtYmlleWUgPSB0cnVlO1xuICAgICAgY29uZmlnLnNjZW5lcyA9IGZhbHNlO1xuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgY2FzZSAnd2luJzpcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSB0cnVlO1xuICAgICAgY29uZmlnLnRhYnMgPSB0cnVlO1xuICAgICAgY29uZmlnLnZvaWNlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiB9XG5cbiJdfQ==

'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

(function () {var aa = encodeURIComponent,f = window,ba = setTimeout,n = Math;function Pc(a, b) {return a.href = b;}function fa(a, b) {return a.name = b;}
	var Qc = "replace",q = "data",m = "match",xc = "send",ja = "port",u = "createElement",id = "setAttribute",da = "getTime",x = "host",A = "split",B = "location",ra = "hasOwnProperty",ma = "hostname",ga = "search",E = "protocol",Ab = "href",kd = "action",G = "apply",p = "push",h = "hash",s = "test",ha = "slice",r = "cookie",t = "indexOf",ia = "defaultValue",v = "name",y = "length",z = "prototype",la = "clientWidth",jd = "target",C = "call",na = "clientHeight",F = "substring",oa = "navigator",Ub = "parentNode",H = "join",I = "toLowerCase";var pa = new function () {var a = [];this.set = function (b) {a[b] = !0;};this.M = function () {for (var b = [], c = 0; c < a[y]; c++) {a[c] && (b[n.floor(c / 6)] = b[n.floor(c / 6)] ^ 1 << c % 6);}for (c = 0; c < b[y]; c++) {b[c] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(b[c] || 0);}return b[H]("") + "~";};}();function J(a) {pa.set(a);};var ea = function ea(a) {return "function" == typeof a;},ka = function ka(a) {return "[object Array]" == Object[z].toString[C](Object(a));},qa = function qa(a) {return void 0 != a && -1 < (a.constructor + "")[t]("String");},D = function D(a, b) {return 0 == a[t](b);},sa = function sa(a) {return a ? a[Qc](/^[\s\xa0]+|[\s\xa0]+$/g, "") : "";},ta = function ta(a) {var b = M[u]("img");b.width = 1;b.height = 1;b.src = a;return b;},ua = function ua() {},K = function K(a) {if (aa instanceof Function) return aa(a);J(28);return a;},L = function L(a, b, c, d) {try {a.addEventListener ? a.addEventListener(b,
			c, !!d) : a.attachEvent && a.attachEvent("on" + b, c);} catch (e) {J(27);}},va = function va(a, b, c) {a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent("on" + b, c);},wa = function wa(a, b) {if (a) {var c = M[u]("script");c.type = "text/javascript";c.async = !0;c.src = a;b && (c.id = b);var d = M.getElementsByTagName("script")[0];d[Ub].insertBefore(c, d);}},xa = function xa() {var a = "" + M[B][ma];return 0 == a[t]("www.") ? a[F](4) : a;},ya = function ya(a) {var b = M.referrer;if (/^https?:\/\//i[s](b)) {if (a) return b;a = "//" + M[B][ma];var c =
			b[t](a);if (5 == c || 6 == c) if (a = b.charAt(c + a[y]), "/" == a || "?" == a || "" == a || ":" == a) return;return b;}},za = function za(a, b) {if (1 == b[y] && null != b[0] && "object" === _typeof(b[0])) return b[0];for (var c = {}, d = n.min(a[y] + 1, b[y]), e = 0; e < d; e++) {if ("object" === _typeof(b[e])) {for (var g in b[e]) {b[e][ra](g) && (c[g] = b[e][g]);}break;} else e < a[y] && (c[a[e]] = b[e]);}return c;};var N = function N() {this.keys = [];this.w = {};this.m = {};};N[z].set = function (a, b, c) {this.keys[p](a);c ? this.m[":" + a] = b : this.w[":" + a] = b;};N[z].get = function (a) {return this.m[ra](":" + a) ? this.m[":" + a] : this.w[":" + a];};N[z].map = function (a) {for (var b = 0; b < this.keys[y]; b++) {var c = this.keys[b],d = this.get(c);d && a(c, d);}};var O = f,M = document,fb = function fb(a) {ba(a, 100);},Mc = function Mc() {for (var a = O[oa].userAgent + (M[r] ? M[r] : "") + (M.referrer ? M.referrer : ""), b = a[y], c = O.history[y]; 0 < c;) {a += c-- ^ b++;}return La(a);};var Aa = function Aa(a) {var b = O._gaUserPrefs;if (b && b.ioo && b.ioo() || a && !0 === O["ga-disable-" + a]) return !0;try {var c = O.external;if (c && c._gaUserPrefs && "oo" == c._gaUserPrefs) return !0;} catch (d) {}return !1;};var Ca = function Ca(a) {var b = [],c = M[r][A](";");a = new RegExp("^\\s*" + a + "=\\s*(.*?)\\s*$");for (var d = 0; d < c[y]; d++) {var e = c[d][m](a);e && b[p](e[1]);}return b;},zc = function zc(a, b, c, d, e, g) {e = Aa(e) ? !1 : eb[s](M[B][ma]) || "/" == c && vc[s](d) ? !1 : !0;if (!e) return !1;b && 1200 < b[y] && (b = b[F](0, 1200), J(24));c = a + "=" + b + "; path=" + c + "; ";g && (c += "expires=" + new Date(new Date()[da]() + g).toGMTString() + "; ");d && "none" != d && (c += "domain=" + d + ";");d = M[r];M.cookie = c;if (!(d = d != M[r])) t: {a = Ca(a);for (d = 0; d < a[y]; d++) {if (b == a[d]) {d = !0;break t;}}d = !1;}return d;},
	Cc = function Cc(a) {return K(a)[Qc](/\(/g, "%28")[Qc](/\)/g, "%29");},vc = /^(www\.)?google(\.com?)?(\.[a-z]{2})?$/,eb = /(^|\.)doubleclick\.net$/i;var oc = function oc() {return (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com";},Da = function Da(a) {fa(this, "len");this.message = a + "-8192";},Ea = function Ea(a) {fa(this, "ff2post");this.message = a + "-2036";},Ga = function Ga(a, b, c, d) {c = c || ua;d && (d = c, O[oa].sendBeacon ? O[oa].sendBeacon(a, b) ? (d(), d = !0) : d = !1 : d = !1);if (!d) if (2036 >= b[y]) wc(a, b, c);else if (8192 >= b[y]) {if (0 <= O[oa].userAgent[t]("Firefox") && ![].reduce) throw new Ea(b[y]);wd(a, b, c) || xd(a, b, c) || Fa(b, c) || c();} else throw new Da(b[y]);},wc = function wc(a, b, c) {var d =
		ta(a + "?" + b);d.onload = d.onerror = function () {d.onload = null;d.onerror = null;c();};},xd = function xd(a, b, c) {var d;d = O.XDomainRequest;if (!d) return !1;d = new d();d.open("POST", a);d.onerror = function () {c();};d.onload = c;d[xc](b);return !0;},wd = function wd(a, b, c) {var d = O.XMLHttpRequest;if (!d) return !1;var e = new d();if (!("withCredentials" in e)) return !1;e.open("POST", a, !0);e.withCredentials = !0;e.setRequestHeader("Content-Type", "text/plain");e.onreadystatechange = function () {4 == e.readyState && (c(), e = null);};e[xc](b);return !0;},Fa = function Fa(a,
	b) {if (!M.body) return fb(function () {Fa(a, b);}), !0;a = aa(a);try {var c = M[u]('<iframe name="' + a + '"></iframe>');} catch (d) {c = M[u]("iframe"), fa(c, a);}c.height = "0";c.width = "0";c.style.display = "none";c.style.visibility = "hidden";var e = M[B],e = oc() + "/analytics_iframe.html#" + aa(e[E] + "//" + e[x] + "/favicon.ico"),g = function g() {c.src = "";c[Ub] && c[Ub].removeChild(c);};L(O, "beforeunload", g);var ca = !1,l = 0,k = function k() {if (!ca) {try {if (9 < l || c.contentWindow[B][x] == M[B][x]) {ca = !0;g();va(O, "beforeunload", g);b();return;}} catch (a) {}l++;
				ba(k, 200);}};L(c, "load", k);M.body.appendChild(c);c.src = e;return !0;};var Ha = function Ha() {this.t = [];};Ha[z].add = function (a) {this.t[p](a);};Ha[z].D = function (a) {try {for (var b = 0; b < this.t[y]; b++) {var c = a.get(this.t[b]);c && ea(c) && c[C](O, a);}} catch (d) {}b = a.get(Ia);b != ua && ea(b) && (a.set(Ia, ua, !0), ba(b, 10));};function Ja(a) {if (100 != a.get(Ka) && La(P(a, Q)) % 1E4 >= 100 * R(a, Ka)) throw "abort";}function Ma(a) {if (Aa(P(a, Na))) throw "abort";}function Oa() {var a = M[B][E];if ("http:" != a && "https:" != a) throw "abort";}
	function Pa(a) {try {O.XMLHttpRequest && "withCredentials" in new O.XMLHttpRequest() ? J(40) : O.XDomainRequest && J(41), O[oa].sendBeacon && J(42);} catch (b) {}a.set(Ac, R(a, Ac) + 1);var c = [];Qa.map(function (b, e) {if (e.p) {var g = a.get(b);void 0 != g && g != e[ia] && ("boolean" == typeof g && (g *= 1), c[p](e.p + "=" + K("" + g)));}});c[p]("z=" + Bd());a.set(Ra, c[H]("&"), !0);}function Sa(a) {var b = P(a, gd) || oc() + "/collect";Ga(b, P(a, Ra), a.get(Ia), a.get(Vd));a.set(Ia, ua, !0);}
	function Hc(a) {var b = O.gaData;b && (b.expId && a.set(Nc, b.expId), b.expVar && a.set(Oc, b.expVar));}function cd() {if (O[oa] && "preview" == O[oa].loadPurpose) throw "abort";}function yd(a) {var b = O.gaDevIds;ka(b) && 0 != b[y] && a.set("&did", b[H](","), !0);}function vb(a) {if (!a.get(Na)) throw "abort";};var hd = function hd() {return n.round(2147483647 * n.random());},Bd = function Bd() {try {var a = new Uint32Array(1);O.crypto.getRandomValues(a);return a[0] & 2147483647;} catch (b) {return hd();}};function Ta(a) {var b = R(a, Ua);500 <= b && J(15);var c = P(a, Va);if ("transaction" != c && "item" != c) {var c = R(a, Wa),d = new Date()[da](),e = R(a, Xa);0 == e && a.set(Xa, d);e = n.round(2 * (d - e) / 1E3);0 < e && (c = n.min(c + e, 20), a.set(Xa, d));if (0 >= c) throw "abort";a.set(Wa, --c);}a.set(Ua, ++b);};var Ya = function Ya() {this.data = new N();},Qa = new N(),Za = [];Ya[z].get = function (a) {var b = $a(a),c = this[q].get(a);b && void 0 == c && (c = ea(b[ia]) ? b[ia]() : b[ia]);return b && b.n ? b.n(this, a, c) : c;};var P = function P(a, b) {var c = a.get(b);return void 0 == c ? "" : "" + c;},R = function R(a, b) {var c = a.get(b);return void 0 == c || "" === c ? 0 : 1 * c;};Ya[z].set = function (a, b, c) {if (a) if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) for (var d in a) {a[ra](d) && ab(this, d, a[d], c);} else ab(this, a, b, c);};
	var ab = function ab(a, b, c, d) {if (void 0 != c) switch (b) {case Na:wb[s](c);}var e = $a(b);e && e.o ? e.o(a, b, c, d) : a[q].set(b, c, d);},bb = function bb(a, b, c, d, e) {fa(this, a);this.p = b;this.n = d;this.o = e;this.defaultValue = c;},$a = function $a(a) {var b = Qa.get(a);if (!b) for (var c = 0; c < Za[y]; c++) {var d = Za[c],e = d[0].exec(a);if (e) {b = d[1](e);Qa.set(b[v], b);break;}}return b;},yc = function yc(a) {var b;Qa.map(function (c, d) {d.p == a && (b = d);});return b && b[v];},S = function S(a, b, c, d, e) {a = new bb(a, b, c, d, e);Qa.set(a[v], a);return a[v];},cb = function cb(a, b) {Za[p]([new RegExp("^" +
		a + "$"), b]);},T = function T(a, b, c) {return S(a, b, c, void 0, db);},db = function db() {};var gb = qa(f.GoogleAnalyticsObject) && sa(f.GoogleAnalyticsObject) || "ga",Ba = !1,hb = T("apiVersion", "v"),ib = T("clientVersion", "_v");S("anonymizeIp", "aip");var jb = S("adSenseId", "a"),Va = S("hitType", "t"),Ia = S("hitCallback"),Ra = S("hitPayload");S("nonInteraction", "ni");S("currencyCode", "cu");var Vd = S("useBeacon", void 0, !1);S("dataSource", "ds");S("sessionControl", "sc", "");S("sessionGroup", "sg");S("queueTime", "qt");var Ac = S("_s", "_s");S("screenName", "cd");
	var kb = S("location", "dl", ""),lb = S("referrer", "dr"),mb = S("page", "dp", "");S("hostname", "dh");var nb = S("language", "ul"),ob = S("encoding", "de");S("title", "dt", function () {return M.title || void 0;});cb("contentGroup([0-9]+)", function (a) {return new bb(a[0], "cg" + a[1]);});var pb = S("screenColors", "sd"),qb = S("screenResolution", "sr"),rb = S("viewportSize", "vp"),sb = S("javaEnabled", "je"),tb = S("flashVersion", "fl");S("campaignId", "ci");S("campaignName", "cn");S("campaignSource", "cs");S("campaignMedium", "cm");
	S("campaignKeyword", "ck");S("campaignContent", "cc");var ub = S("eventCategory", "ec"),xb = S("eventAction", "ea"),yb = S("eventLabel", "el"),zb = S("eventValue", "ev"),Bb = S("socialNetwork", "sn"),Cb = S("socialAction", "sa"),Db = S("socialTarget", "st"),Eb = S("l1", "plt"),Fb = S("l2", "pdt"),Gb = S("l3", "dns"),Hb = S("l4", "rrt"),Ib = S("l5", "srt"),Jb = S("l6", "tcp"),Kb = S("l7", "dit"),Lb = S("l8", "clt"),Mb = S("timingCategory", "utc"),Nb = S("timingVar", "utv"),Ob = S("timingLabel", "utl"),Pb = S("timingValue", "utt");S("appName", "an");
	S("appVersion", "av", "");S("appId", "aid", "");S("appInstallerId", "aiid", "");S("exDescription", "exd");S("exFatal", "exf");var Nc = S("expId", "xid"),Oc = S("expVar", "xvar"),Rc = S("_utma", "_utma"),Sc = S("_utmz", "_utmz"),Tc = S("_utmht", "_utmht"),Ua = S("_hc", void 0, 0),Xa = S("_ti", void 0, 0),Wa = S("_to", void 0, 20);cb("dimension([0-9]+)", function (a) {return new bb(a[0], "cd" + a[1]);});cb("metric([0-9]+)", function (a) {return new bb(a[0], "cm" + a[1]);});S("linkerParam", void 0, void 0, Bc, db);
	var ld = S("usage", "_u", void 0, function () {return pa.M();}, db);S("forceSSL", void 0, void 0, function () {return Ba;}, function (a, b, c) {J(34);Ba = !!c;});var ed = S("_j1", "jid"),Hd = S("_j2", "gjid");cb("\\&(.*)", function (a) {var b = new bb(a[0], a[1]),c = yc(a[0][F](1));c && (b.n = function (a) {return a.get(c);}, b.o = function (a, b, g, ca) {a.set(c, g, ca);}, b.p = void 0);return b;});
	var Qb = T("_oot"),dd = S("previewTask"),Rb = S("checkProtocolTask"),md = S("validationTask"),Sb = S("checkStorageTask"),Uc = S("historyImportTask"),Tb = S("samplerTask"),Vb = T("_rlt"),Wb = S("buildHitTask"),Xb = S("sendHitTask"),Vc = S("ceTask"),zd = S("devIdTask"),Cd = S("timingTask"),Ld = S("displayFeaturesTask"),V = T("name"),Q = T("clientId", "cid"),Ad = S("userId", "uid"),Na = T("trackingId", "tid"),U = T("cookieName", void 0, "_ga"),W = T("cookieDomain"),Yb = T("cookiePath", void 0, "/"),Zb = T("cookieExpires", void 0, 63072E3),$b = T("legacyCookieDomain"),
	Wc = T("legacyHistoryImport", void 0, !0),ac = T("storage", void 0, "cookie"),bc = T("allowLinker", void 0, !1),cc = T("allowAnchor", void 0, !0),Ka = T("sampleRate", "sf", 100),dc = T("siteSpeedSampleRate", void 0, 1),ec = T("alwaysSendReferrer", void 0, !1),gd = S("transportUrl"),Md = S("_r", "_r");
	function X(a, b, c, d) {b[a] = function () {try {return d && J(d), c[G](this, arguments);} catch (b) {var g = b && b[v];if (!(1 <= 100 * n.random() || Aa("?"))) {var ca = ["t=error", "_e=exc", "_v=j31", "sr=1"];a && ca[p]("_f=" + a);g && ca[p]("_m=" + K(g[F](0, 100)));ca[p]("aip=1");ca[p]("z=" + hd());Ga(oc() + "/collect", ca[H]("&"));}throw b;}};};var Od = function Od() {this.V = 1E4;this.fa = void 0;this.$ = !1;this.ea = 1;},Ed = function Ed() {var a = new Od(),b;if (a.fa && a.$) return 0;a.$ = !0;if (0 == a.V) return 0;void 0 === b && (b = Bd());return 0 == b % a.V ? n.floor(b / a.V) % a.ea + 1 : 0;};function fc() {var a, b, c;if ((c = (c = O[oa]) ? c.plugins : null) && c[y]) for (var d = 0; d < c[y] && !b; d++) {var e = c[d];-1 < e[v][t]("Shockwave Flash") && (b = e.description);}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"), b = a.GetVariable("$version");} catch (g) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), b = "WIN 6,0,21,0", a.AllowScriptAccess = "always", b = a.GetVariable("$version");} catch (ca) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), b = a.GetVariable("$version");} catch (l) {}b && (
		a = b[m](/[\d]+/g)) && 3 <= a[y] && (b = a[0] + "." + a[1] + " r" + a[2]);return b || void 0;};var gc = function gc(a, b) {var c = n.min(R(a, dc), 100);if (!(La(P(a, Q)) % 100 >= c) && (c = {}, Ec(c) || Fc(c))) {var d = c[Eb];void 0 == d || Infinity == d || isNaN(d) || (0 < d ? (Y(c, Gb), Y(c, Jb), Y(c, Ib), Y(c, Fb), Y(c, Hb), Y(c, Kb), Y(c, Lb), b(c)) : L(O, "load", function () {gc(a, b);}, !1));}},Ec = function Ec(a) {var b = O.performance || O.webkitPerformance,b = b && b.timing;if (!b) return !1;var c = b.navigationStart;if (0 == c) return !1;a[Eb] = b.loadEventStart - c;a[Gb] = b.domainLookupEnd - b.domainLookupStart;a[Jb] = b.connectEnd - b.connectStart;a[Ib] = b.responseStart - b.requestStart;
		a[Fb] = b.responseEnd - b.responseStart;a[Hb] = b.fetchStart - c;a[Kb] = b.domInteractive - c;a[Lb] = b.domContentLoadedEventStart - c;return !0;},Fc = function Fc(a) {if (O.top != O) return !1;var b = O.external,c = b && b.onloadT;b && !b.isValidLoadTime && (c = void 0);2147483648 < c && (c = void 0);0 < c && b.setPageReadyTime();if (void 0 == c) return !1;a[Eb] = c;return !0;},Y = function Y(a, b) {var c = a[b];if (isNaN(c) || Infinity == c || 0 > c) a[b] = void 0;},Fd = function Fd(a) {return function (b) {"pageview" != b.get(Va) || a.I || (a.I = !0, gc(b, function (b) {a[xc]("timing", b);}));};};var hc = !1,mc = function mc(a) {if ("cookie" == P(a, ac)) {var b = P(a, U),c = nd(a),d = kc(P(a, Yb)),e = lc(P(a, W)),g = 1E3 * R(a, Zb),ca = P(a, Na);if ("auto" != e) zc(b, c, d, e, ca, g) && (hc = !0);else {J(32);var l;t: {c = [];e = xa()[A](".");if (4 == e[y] && (l = e[e[y] - 1], parseInt(l, 10) == l)) {l = ["none"];break t;}for (l = e[y] - 2; 0 <= l; l--) {c[p](e[ha](l)[H]("."));}c[p]("none");l = c;}for (var k = 0; k < l[y]; k++) {if (e = l[k], a[q].set(W, e), c = nd(a), zc(b, c, d, e, ca, g)) {hc = !0;return;}}a[q].set(W, "auto");}}},nc = function nc(a) {if ("cookie" == P(a, ac) && !hc && (mc(a), !hc)) throw "abort";},
	Yc = function Yc(a) {if (a.get(Wc)) {var b = P(a, W),c = P(a, $b) || xa(),d = Xc("__utma", c, b);d && (J(19), a.set(Tc, new Date()[da](), !0), a.set(Rc, d.R), (b = Xc("__utmz", c, b)) && d[h] == b[h] && a.set(Sc, b.R));}},nd = function nd(a) {var b = Cc(P(a, Q)),c = ic(P(a, W));a = jc(P(a, Yb));1 < a && (c += "-" + a);return ["GA1", c, b][H](".");},Gc = function Gc(a, b, c) {for (var d = [], e = [], g, ca = 0; ca < a[y]; ca++) {var l = a[ca];if (l.r[c] == b) d[p](l);else void 0 == g || l.r[c] < g ? (e = [l], g = l.r[c]) : l.r[c] == g && e[p](l);}return 0 < d[y] ? d : e;},lc = function lc(a) {return 0 == a[t](".") ? a.substr(1) :
		a;},ic = function ic(a) {return lc(a)[A](".")[y];},kc = function kc(a) {if (!a) return "/";1 < a[y] && a.lastIndexOf("/") == a[y] - 1 && (a = a.substr(0, a[y] - 1));0 != a[t]("/") && (a = "/" + a);return a;},jc = function jc(a) {a = kc(a);return "/" == a ? 1 : a[A]("/")[y];};function Xc(a, b, c) {"none" == b && (b = "");var d = [],e = Ca(a);a = "__utma" == a ? 6 : 2;for (var g = 0; g < e[y]; g++) {var ca = ("" + e[g])[A](".");ca[y] >= a && d[p]({ hash: ca[0], R: e[g], O: ca });}return 0 == d[y] ? void 0 : 1 == d[y] ? d[0] : Zc(b, d) || Zc(c, d) || Zc(null, d) || d[0];}function Zc(a, b) {var c, d;null == a ? c = d = 1 : (c = La(a), d = La(D(a, ".") ? a[F](1) : "." + a));for (var e = 0; e < b[y]; e++) {if (b[e][h] == c || b[e][h] == d) return b[e];}};var od = new RegExp(/^https?:\/\/([^\/:]+)/),pd = /(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/;function Bc(a) {a = a.get(Q);var b = Ic(a, 0);return "_ga=1." + K(b + "." + a);}function Ic(a, b) {for (var c = new Date(), d = O[oa], e = d.plugins || [], c = [a, d.userAgent, c.getTimezoneOffset(), c.getYear(), c.getDate(), c.getHours(), c.getMinutes() + b], d = 0; d < e[y]; ++d) {c[p](e[d].description);}return La(c[H]("."));}var Dc = function Dc(a) {J(48);this.target = a;this.T = !1;};
	Dc[z].Q = function (a, b) {if (a.tagName) {if ("a" == a.tagName[I]()) {a[Ab] && Pc(a, qd(this, a[Ab], b));return;}if ("form" == a.tagName[I]()) return rd(this, a);}if ("string" == typeof a) return qd(this, a, b);};
	var qd = function qd(a, b, c) {var d = pd.exec(b);d && 3 <= d[y] && (b = d[1] + (d[3] ? d[2] + d[3] : ""));a = a[jd].get("linkerParam");var e = b[t]("?"),d = b[t]("#");c ? b += (-1 == d ? "#" : "&") + a : (c = -1 == e ? "?" : "&", b = -1 == d ? b + (c + a) : b[F](0, d) + c + a + b[F](d));return b;},rd = function rd(a, b) {if (b && b[kd]) {var c = a[jd].get("linkerParam")[A]("=")[1];if ("get" == b.method[I]()) {for (var d = b.childNodes || [], e = 0; e < d[y]; e++) {if ("_ga" == d[e][v]) {d[e][id]("value", c);return;}}d = M[u]("input");d[id]("type", "hidden");d[id]("name", "_ga");d[id]("value", c);b.appendChild(d);} else "post" ==
			b.method[I]() && (b.action = qd(a, b[kd]));}};
	Dc[z].S = function (a, b, c) {function d(c) {try {c = c || O.event;var d;t: {var g = c[jd] || c.srcElement;for (c = 100; g && 0 < c;) {if (g[Ab] && g.nodeName[m](/^a(?:rea)?$/i)) {d = g;break t;}g = g[Ub];c--;}d = {};}("http:" == d[E] || "https:" == d[E]) && sd(a, d[ma] || "") && d[Ab] && Pc(d, qd(e, d[Ab], b));} catch (w) {J(26);}}var e = this;this.T || (this.T = !0, L(M, "mousedown", d, !1), L(M, "touchstart", d, !1), L(M, "keyup", d, !1));if (c) {c = function c(b) {b = b || O.event;if ((b = b[jd] || b.srcElement) && b[kd]) {var c = b[kd][m](od);c && sd(a, c[1]) && rd(e, b);}};for (var g = 0; g < M.forms[y]; g++) {L(M.forms[g],
				"submit", c);}}};function sd(a, b) {if (b == M[B][ma]) return !1;for (var c = 0; c < a[y]; c++) {if (a[c] instanceof RegExp) {if (a[c][s](b)) return !0;} else if (0 <= b[t](a[c])) return !0;}return !1;};var Jd = function Jd(a, b, c, d) {this.U = b;this.aa = c;(b = d) || (b = (b = P(a, V)) && "t0" != b ? Wd[s](b) ? "_gat_" + Cc(P(a, Na)) : "_gat_" + Cc(b) : "_gat");this.Y = b;},Rd = function Rd(a, b) {var c = b.get(Wb);b.set(Wb, function (b) {Pd(a, b);var d = c(b);Qd(a, b);return d;});var d = b.get(Xb);b.set(Xb, function (b) {var c = d(b);Id(a, b);return c;});},Pd = function Pd(a, b) {b.get(a.U) || ("1" == Ca(a.Y)[0] ? b.set(a.U, "", !0) : b.set(a.U, "" + hd(), !0));},Qd = function Qd(a, b) {b.get(a.U) && zc(a.Y, "1", b.get(Yb), b.get(W), b.get(Na), 6E5);},Id = function Id(a, b) {if (b.get(a.U)) {var c = new N(),
			d = function d(a) {c.set($a(a).p, b.get(a));};d(hb);d(ib);d(Na);d(Q);d(a.U);d(ld);var e = a.aa;c.map(function (a, b) {e += K(a) + "=";e += K("" + b) + "&";});e += "z=" + hd();ta(e);b.set(a.U, "", !0);}},Wd = /^gtm\d+$/;var fd = function fd(a, b) {var c = a.b;if (!c.get("dcLoaded")) {J(29);O._gaq && J(52);b = b || {};var d;b[U] && (d = Cc(b[U]));d = new Jd(c, ed, "https://stats.g.doubleclick.net/collect?t=dc&aip=1&", d);Rd(d, c);c.set("dcLoaded", !0);}};var Sd = function Sd(a) {var b;b = a.get("dcLoaded") ? !1 : "cookie" != a.get(ac) ? !1 : !0;b && (J(51), b = new Jd(a, ed), Pd(b, a), Qd(b, a), a.get(b.U) && (a.set(Md, 1, !0), a.set(gd, oc() + "/r/collect", !0)));};var Kd = function Kd(a, b) {var c = a.b;if (!c.get("_rlsaLoaded")) {J(38);b = b || {};if (b[U]) var d = Cc(b[U]);d = new Jd(c, Hd, "https://www.google.com/ads/ga-audiences?t=sr&aip=1&", d);Rd(d, c);c.set("_rlsaLoaded", !0);tc("displayfeatures", a, b);}};var Lc = function Lc() {var a = O.gaGlobal = O.gaGlobal || {};return a.hid = a.hid || hd();};var ad,bd = function bd(a, b, c) {if (!ad) {var d;d = M[B][h];var e = O[v],g = /^#?gaso=([^&]*)/;if (e = (d = (d = d && d[m](g) || e && e[m](g)) ? d[1] : Ca("GASO")[0] || "") && d[m](/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i)) zc("GASO", "" + d, c, b, a, 0), f._udo || (f._udo = b), f._utcp || (f._utcp = c), a = e[1], wa("https://www.google.com/analytics/web/inpage/pub/inpage.js?" + (a ? "prefix=" + a + "&" : "") + hd(), "_gasojs");ad = !0;}};var wb = /^(UA|YT|MO|GP)-(\d+)-(\d+)$/,pc = function pc(a) {function b(a, b) {d.b[q].set(a, b);}function c(a, c) {b(a, c);d.filters.add(a);}var d = this;this.b = new Ya();this.filters = new Ha();b(V, a[V]);b(Na, sa(a[Na]));b(U, a[U]);b(W, a[W] || xa());b(Yb, a[Yb]);b(Zb, a[Zb]);b($b, a[$b]);b(Wc, a[Wc]);b(bc, a[bc]);b(cc, a[cc]);b(Ka, a[Ka]);b(dc, a[dc]);b(ec, a[ec]);b(ac, a[ac]);b(Ad, a[Ad]);b(hb, 1);b(ib, "j31");c(Qb, Ma);c(dd, cd);c(Rb, Oa);c(md, vb);c(Sb, nc);c(Uc, Yc);c(Tb, Ja);c(Vb, Ta);c(Vc, Hc);c(zd, yd);c(Ld, Sd);c(Wb, Pa);c(Xb, Sa);c(Cd, Fd(this));
		Jc(this.b, a[Q]);Kc(this.b);this.b.set(jb, Lc());bd(this.b.get(Na), this.b.get(W), this.b.get(Yb));},Jc = function Jc(a, b) {if ("cookie" == P(a, ac)) {hc = !1;var c;i: {var d = Ca(P(a, U));if (d && !(1 > d[y])) {c = [];for (var e = 0; e < d[y]; e++) {var g;g = d[e][A](".");var ca = g.shift();("GA1" == ca || "1" == ca) && 1 < g[y] ? (ca = g.shift()[A]("-"), 1 == ca[y] && (ca[1] = "1"), ca[0] *= 1, ca[1] *= 1, g = { r: ca, s: g[H](".") }) : g = void 0;g && c[p](g);}if (1 == c[y]) {J(13);c = c[0].s;break i;}if (0 == c[y]) J(12);else {J(14);d = ic(P(a, W));c = Gc(c, d, 0);if (1 == c[y]) {c = c[0].s;break i;}d =
						jc(P(a, Yb));c = Gc(c, d, 1);c = c[0] && c[0].s;break i;}}c = void 0;}c || (c = P(a, W), d = P(a, $b) || xa(), c = Xc("__utma", d, c), (c = void 0 == c ? void 0 : c.O[1] + "." + c.O[2]) && J(10));c && (a[q].set(Q, c), hc = !0);}c = a.get(cc);if (e = (c = M[B][c ? "href" : "search"][m]("(?:&|#|\\?)" + K("_ga")[Qc](/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + "=([^&#]*)")) && 2 == c[y] ? c[1] : "") a.get(bc) ? (c = e[t]("."), -1 == c ? J(22) : (d = e[F](c + 1), "1" != e[F](0, c) ? J(22) : (c = d[t]("."), -1 == c ? J(22) : (e = d[F](0, c), c = d[F](c + 1), e != Ic(c, 0) && e != Ic(c, -1) && e != Ic(c, -2) ? J(23) : (J(11), a[q].set(Q, c)))))) :
		J(21);b && (J(9), a[q].set(Q, K(b)));a.get(Q) || ((c = (c = O.gaGlobal && O.gaGlobal.vid) && -1 != c[ga](/^(?:utma\.)?\d+\.\d+$/) ? c : void 0) ? (J(17), a[q].set(Q, c)) : (J(8), a[q].set(Q, [hd() ^ Mc() & 2147483647, n.round(new Date()[da]() / 1E3)][H]("."))));mc(a);},Kc = function Kc(a) {var b = O[oa],c = O.screen,d = M[B];a.set(lb, ya(a.get(ec)));if (d) {var e = d.pathname || "";"/" != e.charAt(0) && (J(31), e = "/" + e);a.set(kb, d[E] + "//" + d[ma] + e + d[ga]);}c && a.set(qb, c.width + "x" + c.height);c && a.set(pb, c.colorDepth + "-bit");var c = M.documentElement,g = (e = M.body) &&
		e[la] && e[na],ca = [];c && c[la] && c[na] && ("CSS1Compat" === M.compatMode || !g) ? ca = [c[la], c[na]] : g && (ca = [e[la], e[na]]);c = 0 >= ca[0] || 0 >= ca[1] ? "" : ca[H]("x");a.set(rb, c);a.set(tb, fc());a.set(ob, M.characterSet || M.charset);a.set(sb, b && "function" === typeof b.javaEnabled && b.javaEnabled() || !1);a.set(nb, (b && (b.language || b.browserLanguage) || "")[I]());if (d && a.get(cc) && (b = M[B][h])) {b = b[A](/[?&#]+/);d = [];for (c = 0; c < b[y]; ++c) {(D(b[c], "utm_id") || D(b[c], "utm_campaign") || D(b[c], "utm_source") || D(b[c], "utm_medium") || D(b[c], "utm_term") ||
				D(b[c], "utm_content") || D(b[c], "gclid") || D(b[c], "dclid") || D(b[c], "gclsrc")) && d[p](b[c]);}0 < d[y] && (b = "#" + d[H]("&"), a.set(kb, a.get(kb) + b));}};pc[z].get = function (a) {return this.b.get(a);};pc[z].set = function (a, b) {this.b.set(a, b);};var qc = { pageview: [mb], event: [ub, xb, yb, zb], social: [Bb, Cb, Db], timing: [Mb, Nb, Pb, Ob] };
	pc[z].send = function (a) {if (!(1 > arguments[y])) {var b, c;"string" === typeof arguments[0] ? (b = arguments[0], c = [][ha][C](arguments, 1)) : (b = arguments[0] && arguments[0][Va], c = arguments);b && (c = za(qc[b] || [], c), c[Va] = b, this.b.set(c, void 0, !0), this.filters.D(this.b), this.b[q].m = {}, J(44));}};var rc = function rc(a) {if ("prerender" == M.visibilityState) return !1;a();return !0;};var td = /^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/,sc = function sc(a) {if (ea(a[0])) this.u = a[0];else {var b = td.exec(a[0]);null != b && 4 == b[y] && (this.c = b[1] || "t0", this.e = b[2] || "", this.d = b[3], this.a = [][ha][C](a, 1), this.e || (this.A = "create" == this.d, this.i = "require" == this.d, this.g = "provide" == this.d, this.ba = "remove" == this.d), this.i && (3 <= this.a[y] ? (this.X = this.a[1], this.W = this.a[2]) : this.a[1] && (qa(this.a[1]) ? this.X = this.a[1] : this.W = this.a[1])));b = a[1];a = a[2];if (!this.d) throw "abort";if (this.i && (!qa(b) || "" == b)) throw "abort";if (this.g && (
			!qa(b) || "" == b || !ea(a))) throw "abort";if (ud(this.c) || ud(this.e)) throw "abort";if (this.g && "t0" != this.c) throw "abort";}};function ud(a) {return 0 <= a[t](".") || 0 <= a[t](":");};var Yd, Zd, $d;Yd = new N();$d = new N();Zd = { ec: 45, ecommerce: 46, linkid: 47 };
	var tc = function tc(a, b, c) {b == $ ? J(35) : b.get(V);var d = Yd.get(a);if (!ea(d)) return !1;b.plugins_ = b.plugins_ || new N();if (b.plugins_.get(a)) return !0;b.plugins_.set(a, new d(b, c || {}));return !0;},ae = function ae(a) {function b(a) {var b = (a[ma] || "")[A](":")[0][I](),c = (a[E] || "")[I](),c = 1 * a[ja] || ("http:" == c ? 80 : "https:" == c ? 443 : "");a = a.pathname || "";D(a, "/") || (a = "/" + a);return [b, "" + c, a];}var c = M[u]("a");Pc(c, M[B][Ab]);var d = (c[E] || "")[I](),e = b(c),g = c[ga] || "",ca = d + "//" + e[0] + (e[1] ? ":" + e[1] : "");D(a, "//") ? a = d + a : D(a, "/") ? a = ca + a : !a ||
		D(a, "?") ? a = ca + e[2] + (a || g) : 0 > a[A]("/")[0][t](":") && (a = ca + e[2][F](0, e[2].lastIndexOf("/")) + "/" + a);Pc(c, a);d = b(c);return { protocol: (c[E] || "")[I](), host: d[0], port: d[1], path: d[2], G: c[ga] || "", url: a || "" };};var Z = { ga: function ga() {Z.f = [];} };Z.ga();Z.D = function (a) {var b = Z.J[G](Z, arguments),b = Z.f.concat(b);for (Z.f = []; 0 < b[y] && !Z.v(b[0]) && !(b.shift(), 0 < Z.f[y]);) {}Z.f = Z.f.concat(b);};
	Z.J = function (a) {for (var b = [], c = 0; c < arguments[y]; c++) {try {var d = new sc(arguments[c]);if (d.g) Yd.set(d.a[0], d.a[1]);else {if (d.i) {var e = d,g = e.a[0];if (!ea(Yd.get(g)) && !$d.get(g)) {Zd[ra](g) && J(Zd[g]);var ca = e.X;!ca && Zd[ra](g) ? (J(39), ca = g + ".js") : J(43);if (ca) {ca && 0 <= ca[t]("/") || (ca = (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com/plugins/ua/" + ca);var l = ae(ca),e = void 0;var k = l[E],w = M[B][E],e = "https:" == k || k == w ? !0 : "http:" != k ? !1 : "http:" == w;var Xd;if (Xd = e) {var e = l,be = ae(M[B][Ab]);if (e.G || 0 <=
									e.url[t]("?") || 0 <= e.path[t]("://")) Xd = !1;else if (e[x] == be[x] && e[ja] == be[ja]) Xd = !0;else {var ce = "http:" == e[E] ? 80 : 443;Xd = "www.google-analytics.com" == e[x] && (e[ja] || ce) == ce && D(e.path, "/plugins/") ? !0 : !1;}}Xd && (wa(l.url), $d.set(g, !0));}}}b[p](d);}} catch (de) {}}return b;};
	Z.v = function (a) {try {if (a.u) a.u[C](O, $.j("t0"));else {var b = a.c == gb ? $ : $.j(a.c);if (a.A) "t0" == a.c && $.create[G]($, a.a);else if (a.ba) $.remove(a.c);else if (b) if (a.i) {if (!tc(a.a[0], b, a.W)) return !0;} else if (a.e) {var c = a.d,d = a.a,e = b.plugins_.get(a.e);e[c][G](e, d);} else b[a.d][G](b, a.a);}} catch (g) {}};var $ = function $(a) {J(1);Z.D[G](Z, [arguments]);};$.h = {};$.P = [];$.L = 0;$.answer = 42;var uc = [Na, W, V];$.create = function (a) {var b = za(uc, [][ha][C](arguments));b[V] || (b[V] = "t0");var c = "" + b[V];if ($.h[c]) return $.h[c];b = new pc(b);$.h[c] = b;$.P[p](b);return b;};$.remove = function (a) {for (var b = 0; b < $.P[y]; b++) {if ($.P[b].get(V) == a) {$.P.splice(b, 1);$.h[a] = null;break;}}};$.j = function (a) {return $.h[a];};$.K = function () {return $.P[ha](0);};
	$.N = function () {"ga" != gb && J(49);var a = O[gb];if (!a || 42 != a.answer) {$.L = a && a.l;$.loaded = !0;var b = O[gb] = $;X("create", b, b.create, 3);X("remove", b, b.remove);X("getByName", b, b.j, 5);X("getAll", b, b.K, 6);b = pc[z];X("get", b, b.get, 7);X("set", b, b.set, 4);X("send", b, b[xc], 2);b = Ya[z];X("get", b, b.get);X("set", b, b.set);t: for (var b = M.getElementsByTagName("script"), c = 0; c < b[y] && 100 > c; c++) {var d;d = (d = b[c].src) ? 0 != d[t]("https://www.google-analytics.com/analytics") ? !1 : !0 : !1;if (d) {J(33);break t;}}"https:" != M[B][E] && !Ba && Ed() && (
			J(36), Ba = !0);(O.gaplugins = O.gaplugins || {}).Linker = Dc;b = Dc[z];Yd.set("linker", Dc);X("decorate", b, b.Q, 20);X("autoLink", b, b.S, 25);Yd.set("displayfeatures", fd);Yd.set("adfeatures", Kd);a = a && a.q;ka(a) ? Z.D[G]($, a) : J(50);}};$.k = function () {for (var a = $.K(), b = 0; b < a[y]; b++) {a[b].get(V);}};(function () {var a = $.N;if (!rc(a)) {J(16);var b = !1,c = function c() {!b && rc(a) && (b = !0, va(M, "visibilitychange", c));};L(M, "visibilitychange", c);}})();function La(a) {var b = 1,c = 0,d;if (a) for (b = 0, d = a[y] - 1; 0 <= d; d--) {c = a.charCodeAt(d), b = (b << 6 & 268435455) + c + (c << 14), c = b & 266338304, b = 0 != c ? b ^ c >> 21 : b;}return b;};})(window);

//mix panel
(function (f, b) {
	if (!b.__SV) {var a, e, i, g;
		window.mixpanel = b;b._i = [];
		b.init = function (a, e, d) {
			function f(b, h) {
				var a = h.split(".");
				2 == a.length && (b = b[a[0]], h = a[1]);
				b[h] = function () {
					b.push([h].concat(Array.prototype.slice.call(arguments, 0)));};
			}
			var c = b;
			"undefined" !== typeof d ? c = b[d] = [] : d = "mixpanel";
			c.people = c.people || [];
			c.toString = function (b) {var a = "mixpanel";"mixpanel" !== d && (a += "." + d);b || (a += " (stub)");
				return a;
			};
			c.people.toString = function () {
				return c.toString(1) + ".people (stub)";};
			i = "disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
			for (g = 0; g < i.length; g++) {f(c, i[g]);}
			b._i.push([a, e, d]);};
		b.__SV = 1.2;
		a = f.createElement("script");
		a.type = "text/javascript";a.async = !0;
		a.src = "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
		e = f.getElementsByTagName("script")[0];
		//e.parentNode.insertBefore(a,e)
	}})(document, window.mixpanel || []);

if (config.app === 'app') {

	// mixpanel 

	(function () {
		var n = !0,p = null,s = !1;function C() {return function () {};}
		(function (r) {function o() {}function i() {}function F(a, b, e) {var f,d = "mixpanel" === e ? r : r[e];if (d && !c.isArray(d)) q.error("You have already initialized " + e);else return f = new i(), f.Fa(a, b, e), f.people = new o(), f.people.Fa(f), w = w || f.d("debug"), c.h(d) || (f.Da.call(f.people, d.people), f.Da(d)), f;}function m(a) {this.props = {};this.kb = s;this.name = a.cookie_name ? "mp_" + a.cookie_name : "mp_" + a.token + "_mixpanel";this.load();this.Kb(a);this.Qc(a);this.save();}function G() {this.Ab = "submit";}function A() {this.Ab = "click";}function v() {}
			function x() {if (!x.tc) K = x.tc = n, L = s, c.a(y, function (a) {a.Wb();});}var J = Array.prototype,N = Function.prototype,z = Object.prototype,B = J.slice,D = z.toString,H = z.hasOwnProperty,u = window.console,E = window.navigator,k = window.document,t = E.userAgent,O = "__mps,__mpso,__mpa,__mpap,$people_distinct_id,__alias,__cmpns".split(","),z = r && r.__SV || 0,I = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest(),L = !I && -1 == t.indexOf("MSIE") && -1 == t.indexOf("Mozilla"),c = {},w = s,P = { api_host: ("https:" == k.location.protocol ? "https://" :
				"http://") + "api.mixpanel.com", cross_subdomain_cookie: n, cookie_name: "", loaded: C(), store_google: n, save_referrer: n, test: s, verbose: s, img: s, track_pageview: n, debug: s, track_links_timeout: 300, cookie_expiration: 365, upgrade: s, disable_cookie: s, secure_cookie: s, ip: n },K = s;(function () {var a = N.bind,b = J.forEach,e = J.indexOf,f = Array.isArray,d = {};c.bind = function (b, e) {var d, _f;if (a && b.bind === a) return a.apply(b, B.call(arguments, 1));if (!c.wb(b)) throw new TypeError();d = B.call(arguments, 2);return _f = function f() {if (!(this instanceof
						_f)) return b.apply(e, d.concat(B.call(arguments)));ctor.prototype = b.prototype;var a = new ctor();ctor.prototype = p;var c = b.apply(a, d.concat(B.call(arguments)));return Object(c) === c ? c : a;};};c.ic = function (a) {for (var b in a) {"function" === typeof a[b] && (a[b] = c.bind(a[b], a));}};var l = c.a = function (a, e, c) {if (a != p) if (b && a.forEach === b) a.forEach(e, c);else if (a.length === +a.length) for (var f = 0, l = a.length; f < l && !(f in a && e.call(c, a[f], f, a) === d); f++) {} else for (f in a) {if (H.call(a, f) && e.call(c, a[f], f, a) === d) break;}};c.p = function (a) {a &&
					c.Ua(a) && (a = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;"));return a;};c.extend = function (a) {l(B.call(arguments, 1), function (b) {for (var e in b) {void 0 !== b[e] && (a[e] = b[e]);}});return a;};c.isArray = f || function (a) {return "[object Array]" === D.call(a);};c.wb = function (a) {try {return (/^\s*\bfunction\b/.test(a));} catch (b) {return s;}};c.xc = function (a) {return !(!a || !H.call(a, "callee"));};c.$ = function (a) {return !a ? [] : a.$ ? a.$() : c.isArray(a) || c.xc(a) ? B.call(a) : c.Sc(a);};
				c.Sc = function (a) {var b = [];if (a == p) return b;l(a, function (a) {b[b.length] = a;});return b;};c.Wc = function (a) {return a;};c.sb = function (a, b) {var c = s;if (a == p) return c;if (e && a.indexOf === e) return -1 != a.indexOf(b);l(a, function (a) {if (c || (c = a === b)) return d;});return c;};c.o = function (a, b) {return -1 !== a.indexOf(b);};})();c.ub = function (a, b) {a.prototype = new b();a.Lc = b.prototype;};c.j = function (a) {return a === Object(a) && !c.isArray(a);};c.W = function (a) {if (c.j(a)) {for (var b in a) {if (H.call(a, b)) return s;}return n;}return s;};c.h = function (a) {return void 0 ===
				a;};c.Ua = function (a) {return "[object String]" == D.call(a);};c.yc = function (a) {return "[object Date]" == D.call(a);};c.zc = function (a) {return "[object Number]" == D.call(a);};c.ob = function (a) {c.a(a, function (b, e) {c.yc(b) ? a[e] = c.uc(b) : c.j(b) && (a[e] = c.ob(b));});return a;};c.uc = function (a) {function b(a) {return 10 > a ? "0" + a : a;}return a.getUTCFullYear() + "-" + b(a.getUTCMonth() + 1) + "-" + b(a.getUTCDate()) + "T" + b(a.getUTCHours()) + ":" + b(a.getUTCMinutes()) + ":" + b(a.getUTCSeconds());};c.s = function (a) {return function () {try {a.apply(this,
						arguments);} catch (b) {q.na("Implementation error. Please contact support@mixpanel.com.");}};};c.Cb = function (a, b) {for (var e = 0; e < b.length; e++) {a.prototype[b[e]] = c.s(a.prototype[b[e]]);}};c.ra = function (a) {var b = {};c.a(a, function (a, f) {c.Ua(a) && 0 < a.length && (b[f] = a);});return b;};c.truncate = function (a, b) {var e;"string" === typeof a ? e = a.slice(0, b) : c.isArray(a) ? (e = [], c.a(a, function (a) {e.push(c.truncate(a, b));})) : c.j(a) ? (e = {}, c.a(a, function (a, d) {e[d] = c.truncate(a, b);})) : e = a;return e;};c.ca = function () {return function (a) {function b(a,
					c) {var l = "",j = 0,h = j = "",h = 0,g = l,i = [],k = c[a];k && "object" === (typeof k === "undefined" ? "undefined" : _typeof(k)) && "function" === typeof k.toJSON && (k = k.toJSON(a));switch (typeof k === "undefined" ? "undefined" : _typeof(k)) {case "string":return e(k);case "number":return isFinite(k) ? "" + k : "null";case "boolean":case "null":return "" + k;case "object":if (!k) return "null";l += "    ";i = [];if ("[object Array]" === D.apply(k)) {h = k.length;for (j = 0; j < h; j += 1) {i[j] = b(j, k) || "null";}return h = 0 === i.length ? "[]" : l ? "[\n" + l + i.join(",\n" + l) + "\n" + g + "]" : "[" + i.join(",") + "]";}for (j in k) {H.call(k, j) && (h = b(j, k)) && i.push(e(j) + (
									l ? ": " : ":") + h);}return h = 0 === i.length ? "{}" : l ? "{" + i.join(",") + "" + g + "}" : "{" + i.join(",") + "}";}}function e(a) {var b = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,e = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" };b.lastIndex = 0;return b.test(a) ? '"' + a.replace(b, function (a) {var b = e[a];return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);}) + '"' : '"' + a + '"';}return b("",
					{ "": a });};}();c.wa = function () {function a() {switch (h) {case "t":return d("t"), d("r"), d("u"), d("e"), n;case "f":return d("f"), d("a"), d("l"), d("s"), d("e"), s;case "n":return d("n"), d("u"), d("l"), d("l"), p;}l("Unexpected '" + h + "'");}function b() {for (; h && " " >= h;) {d();}}function e() {var a,b,e = "",c;if ('"' === h) for (; d();) {if ('"' === h) return d(), e;if ("\\" === h) {if (d(), "u" === h) {for (b = c = 0; 4 > b; b += 1) {a = parseInt(d(), 16);if (!isFinite(a)) break;c = 16 * c + a;}e += String.fromCharCode(c);} else if ("string" === typeof g[h]) e += g[h];else break;} else
						e += h;}l("Bad string");}function c() {var a;a = "";"-" === h && (a = "-", d("-"));for (; "0" <= h && "9" >= h;) {a += h, d();}if ("." === h) for (a += "."; d() && "0" <= h && "9" >= h;) {a += h;}if ("e" === h || "E" === h) {a += h;d();if ("-" === h || "+" === h) a += h, d();for (; "0" <= h && "9" >= h;) {a += h, d();}}a = +a;if (isFinite(a)) return a;l("Bad number");}function d(a) {a && a !== h && l("Expected '" + a + "' instead of '" + h + "'");h = i.charAt(j);j += 1;return h;}function l(a) {throw { name: "SyntaxError", message: a, Vc: j, text: i };}var j,h,g = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f",
					n: "\n", r: "\r", t: "\t" },i,_k;_k = function k() {b();switch (h) {case "{":var j;a: {var g,i = {};if ("{" === h) {d("{");b();if ("}" === h) {d("}");j = i;break a;}for (; h;) {g = e();b();d(":");Object.hasOwnProperty.call(i, g) && l('Duplicate key "' + g + '"');i[g] = _k();b();if ("}" === h) {d("}");j = i;break a;}d(",");b();}}l("Bad object");}return j;case "[":a: {j = [];if ("[" === h) {d("[");b();if ("]" === h) {d("]");g = j;break a;}for (; h;) {j.push(_k());b();if ("]" === h) {d("]");g = j;break a;}d(",");b();}}l("Bad array");}return g;case '"':return e();case "-":return c();
						default:return "0" <= h && "9" >= h ? c() : a();}};return function (a) {i = a;j = 0;h = " ";a = _k();b();h && l("Syntax error");return a;};}();c.ib = function (a) {var b,e,f,d,l = 0,j = 0,h = "",h = [];if (!a) return a;a = c.Rc(a);do {b = a.charCodeAt(l++), e = a.charCodeAt(l++), f = a.charCodeAt(l++), d = b << 16 | e << 8 | f, b = d >> 18 & 63, e = d >> 12 & 63, f = d >> 6 & 63, d &= 63, h[j++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(b) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(f) +
					"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d);} while (l < a.length);h = h.join("");switch (a.length % 3) {case 1:h = h.slice(0, -2) + "==";break;case 2:h = h.slice(0, -1) + "=";}return h;};c.Rc = function (a) {var a = (a + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n"),b = "",e,c,d = 0,l;e = c = 0;d = a.length;for (l = 0; l < d; l++) {var j = a.charCodeAt(l),h = p;128 > j ? c++ : h = 127 < j && 2048 > j ? String.fromCharCode(j >> 6 | 192, j & 63 | 128) : String.fromCharCode(j >> 12 | 224, j >> 6 & 63 | 128, j & 63 | 128);h !== p && (c > e && (b += a.substring(e, c)), b +=
					h, e = c = l + 1);}c > e && (b += a.substring(e, a.length));return b;};c.Rb = function () {function a() {function a(b, e) {var c,d = 0;for (c = 0; c < e.length; c++) {d |= l[c] << 8 * c;}return b ^ d;}var b,c,l = [],j = 0;for (b = 0; b < t.length; b++) {c = t.charCodeAt(b), l.unshift(c & 255), 4 <= l.length && (j = a(j, l), l = []);}0 < l.length && (j = a(j, l));return j.toString(16);}function b() {for (var a = 1 * new Date(), b = 0; a == 1 * new Date();) {b++;}return a.toString(16) + b.toString(16);}return function () {var c = (screen.height * screen.width).toString(16);return b() + "-" + Math.random().toString(16).replace(".",
					"") + "-" + a() + "-" + c + "-" + b();};}();c.vb = function (a) {return (/(google web preview|baiduspider|yandexbot|bingbot|googlebot|yahoo! slurp)/i.test(a) ? n : s);};c.Qb = function (a) {var b,e,f,d = [];"undefined" === typeof b && (b = "&");c.a(a, function (a, b) {e = encodeURIComponent(a.toString());f = encodeURIComponent(b);d[d.length] = f + "=" + e;});return d.join(b);};c.pb = function (a, b) {var b = b.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"),c = RegExp("[\\?&]" + b + "=([^&#]*)").exec(a);return c === p || c && "string" !== typeof c[1] && c[1].length ? "" : decodeURIComponent(c[1]).replace(/\+/g,
				" ");};c.cookie = { get: function get(a) {for (var a = a + "=", b = k.cookie.split(";"), c = 0; c < b.length; c++) {for (var f = b[c]; " " == f.charAt(0);) {f = f.substring(1, f.length);}if (0 == f.indexOf(a)) return decodeURIComponent(f.substring(a.length, f.length));}return p;}, parse: function parse(a) {var b;try {b = c.wa(c.cookie.get(a)) || {};} catch (e) {}return b;}, set: function set(a, b, c, f, d) {var e;var l = "",j = "",h = "";f && (e = (l = (l = k.location.hostname.match(/[a-z0-9][a-z0-9\-]+\.[a-z\.]{2,6}$/i)) ? l[0] : "") ? "; domain=." + l : "", l = e);c && (j = new Date(), j.setTime(j.getTime() +
					864E5 * c), j = "; expires=" + j.toGMTString());d && (h = "; secure");k.cookie = a + "=" + encodeURIComponent(b) + j + "; path=/" + l + h;}, remove: function remove(a, b) {c.cookie.set(a, "", -1, b);} };c.N = function () {function a(a, f, d) {return function (l) {if (l = l || b(window.event)) {var j = n,h;c.wb(d) && (h = d(l));l = f.call(a, l);if (s === h || s === l) j = s;return j;}};}function b(a) {if (a) a.preventDefault = b.preventDefault, a.stopPropagation = b.stopPropagation;return a;}b.preventDefault = function () {this.returnValue = s;};b.stopPropagation = function () {this.cancelBubble =
					n;};return function (b, c, d, l) {b ? b.addEventListener && !l ? b.addEventListener(c, d, s) : (c = "on" + c, b[c] = a(b, d, b[c])) : q.error("No valid element provided to register_event");};}();c.sc = function () {function a(a, c) {return 0 <= (" " + a.className + " ").replace(b, " ").indexOf(" " + c + " ");}var b = /[\t\r\n]/g;return function (b) {if (!k.getElementsByTagName) return [];for (var b = b.split(" "), f, d = Array(k), l = 0; l < b.length; l++) {if (f = b[l].replace(/^\s+/, "").replace(/\s+$/, ""), -1 < f.indexOf("#")) {f = f.split("#");var j = f[0],d = k.getElementById(f[1]);
							if (!d || j && d.nodeName.toLowerCase() != j) return [];d = Array(d);} else if (-1 < f.indexOf(".")) {f = f.split(".");var j = f[0],h = f[1];j || (j = "*");f = [];for (var g = 0, i = 0; i < d.length; i++) {var m;m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (var o = 0; o < m.length; o++) {f[g++] = m[o];}}d = [];for (g = j = 0; g < f.length; g++) {f[g].className && c.Ua(f[g].className) && a(f[g], h) && (d[j++] = f[g]);}} else if (f.match(/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/)) {var j = RegExp.$1,q = RegExp.$2,h = RegExp.$3,r = RegExp.$4;
							j || (j = "*");f = [];for (i = g = 0; i < d.length; i++) {m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) {f[g++] = m[o];}}d = [];j = 0;switch (h) {case "=":h = function h(a) {return a.getAttribute(q) == r;};break;case "~":h = function h(a) {return a.getAttribute(q).match(RegExp("\\b" + r + "\\b"));};break;case "|":h = function h(a) {return a.getAttribute(q).match(RegExp("^" + r + "-?"));};break;case "^":h = function h(a) {return 0 == a.getAttribute(q).indexOf(r);};break;case "$":h = function h(a) {return a.getAttribute(q).lastIndexOf(r) ==
										a.getAttribute(q).length - r.length;};break;case "*":h = function h(a) {return -1 < a.getAttribute(q).indexOf(r);};break;default:h = function h(a) {return a.getAttribute(q);};}d = [];for (g = j = 0; g < f.length; g++) {h(f[g]) && (d[j++] = f[g]);}} else {j = f;f = [];for (i = g = 0; i < d.length; i++) {m = d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) {f[g++] = m[o];}}d = f;}}return d;};}();c.info = { lc: function lc() {var a = "",b = {};c.a("utm_source utm_medium utm_campaign utm_content utm_term".split(" "), function (e) {a = c.pb(k.URL, e);a.length && (b[e] = a);});return b;},
				Ec: function Ec(a) {return 0 === a.search("https?://(.*)google.([^/?]*)") ? "google" : 0 === a.search("https?://(.*)bing.com") ? "bing" : 0 === a.search("https?://(.*)yahoo.com") ? "yahoo" : 0 === a.search("https?://(.*)duckduckgo.com") ? "duckduckgo" : p;}, Fc: function Fc(a) {var b = c.info.Ec(a),e = {};if (b !== p) e.$search_engine = b, a = c.pb(a, "yahoo" != b ? "q" : "p"), a.length && (e.mp_keyword = a);return e;}, ka: function ka(a, b, e) {b = b || "";return e ? c.o(a, "Mini") ? "Opera Mini" : "Opera" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : c.o(a, "FBIOS") ? "Facebook Mobile" :
					c.o(a, "Chrome") ? "Chrome" : c.o(a, "CriOS") ? "Chrome iOS" : c.o(b, "Apple") ? c.o(a, "Mobile") ? "Mobile Safari" : "Safari" : c.o(a, "Android") ? "Android Mobile" : c.o(a, "Konqueror") ? "Konqueror" : c.o(a, "Firefox") ? "Firefox" : c.o(a, "MSIE") || c.o(a, "Trident/") ? "Internet Explorer" : c.o(a, "Gecko") ? "Mozilla" : "";}, Xa: function Xa() {return (/Windows/i.test(t) ? /Phone/.test(t) ? "Windows Mobile" : "Windows" : /(iPhone|iPad|iPod)/.test(t) ? "iOS" : /Android/.test(t) ? "Android" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : /Mac/i.test(t) ? "Mac OS X" :
						/Linux/.test(t) ? "Linux" : "");}, nb: function nb(a) {return (/iPad/.test(a) ? "iPad" : /iPod/.test(a) ? "iPod Touch" : /iPhone/.test(a) ? "iPhone" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : /Windows Phone/i.test(a) ? "Windows Phone" : /Android/.test(a) ? "Android" : "");}, Bb: function Bb(a) {a = a.split("/");return 3 <= a.length ? a[2] : "";}, qa: function qa() {return c.extend(c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera), $referrer: k.referrer, $referring_domain: c.info.Bb(k.referrer), $device: c.info.nb(t) }), { $screen_height: screen.height,
						$screen_width: screen.width, mp_lib: "web", $lib_version: "2.3.2" });}, Dc: function Dc() {return c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera) });}, Cc: function Cc(a) {return c.ra({ mp_page: a, mp_referrer: k.referrer, mp_browser: c.info.ka(t, E.vendor, window.opera), mp_platform: c.info.Xa() });} };var q = { log: function log() {if (w && !c.h(u) && u) try {u.log.apply(u, arguments);} catch (a) {c.a(arguments, function (a) {u.log(a);});}}, error: function error() {if (w && !c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u,
							a);} catch (b) {c.a(a, function (a) {u.error(a);});}}}, na: function na() {if (!c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u, a);} catch (b) {c.a(a, function (a) {u.error(a);});}}} };v.prototype.ma = C();v.prototype.Oa = C();v.prototype.Ka = C();v.prototype.Ta = function (a) {this.yb = a;return this;};v.prototype.P = function (a, b, e, f) {var d = this,g = c.sc(a);if (0 == g.length) q.error("The DOM query (" + a + ") returned 0 elements");else return c.a(g, function (a) {c.N(a, this.Ab, function (a) {var c = {},j = d.ma(e, this),g =
						d.yb.d("track_links_timeout");d.Oa(a, this, c);window.setTimeout(d.Ib(f, j, c, n), g);d.yb.P(b, j, d.Ib(f, j, c));});}, this), n;};v.prototype.Ib = function (a, b, c, f) {var f = f || s,d = this;return function () {if (!c.kc) c.kc = n, a && a(f, b) === s || d.Ka(b, c, f);};};v.prototype.ma = function (a, b) {return "function" === typeof a ? a(b) : c.extend({}, a);};c.ub(A, v);A.prototype.ma = function (a, b) {var c = A.Lc.ma.apply(this, arguments);if (b.href) c.url = b.href;return c;};A.prototype.Oa = function (a, b, c) {c.zb = 2 === a.which || a.metaKey || "_blank" === b.target;c.href =
				b.href;c.zb || a.preventDefault();};A.prototype.Ka = function (a, b) {b.zb || setTimeout(function () {window.location = b.href;}, 0);};c.ub(G, v);G.prototype.Oa = function (a, b, c) {c.element = b;a.preventDefault();};G.prototype.Ka = function (a, b) {setTimeout(function () {b.element.submit();}, 0);};m.prototype.qa = function () {var a = {};c.a(this.props, function (b, e) {c.sb(O, e) || (a[e] = b);});return a;};m.prototype.load = function () {if (!this.disabled) {var a = c.cookie.parse(this.name);a && (this.props = c.extend({}, a));}};m.prototype.Qc = function (a) {var b =
				a.upgrade,e;if (b) e = "mp_super_properties", "string" === typeof b && (e = b), b = c.cookie.parse(e), c.cookie.remove(e), c.cookie.remove(e, n), b && (this.props = c.extend(this.props, b.all, b.events));if (!a.cookie_name && "mixpanel" !== a.name && (e = "mp_" + a.token + "_" + a.name, b = c.cookie.parse(e))) c.cookie.remove(e), c.cookie.remove(e, n), this.G(b);};m.prototype.save = function () {this.disabled || (this.Yb(), c.cookie.set(this.name, c.ca(this.props), this.Pa, this.Ma, this.Db));};m.prototype.remove = function () {c.cookie.remove(this.name, s);c.cookie.remove(this.name,
				n);};m.prototype.clear = function () {this.remove();this.props = {};};m.prototype.G = function (a, b, e) {return c.j(a) ? ("undefined" === typeof b && (b = "None"), this.Pa = "undefined" === typeof e ? this.mb : e, c.a(a, function (a, c) {if (!this.props[c] || this.props[c] === b) this.props[c] = a;}, this), this.save(), n) : s;};m.prototype.Z = function (a, b) {return c.j(a) ? (this.Pa = "undefined" === typeof b ? this.mb : b, c.extend(this.props, a), this.save(), n) : s;};m.prototype.ua = function (a) {a in this.props && (delete this.props[a], this.save());};m.prototype.Yb =
			function () {var a = this.props.__cmpns,b = w ? 6E4 : 36E5;if (a) {for (var e in a) {1 * new Date() - a[e] > b && delete a[e];}c.W(a) && delete this.props.__cmpns;}};m.prototype.Pc = function () {if (!this.kb) this.G(c.info.lc()), this.kb = n;};m.prototype.Lb = function (a) {this.Z(c.info.Fc(a));};m.prototype.Za = function (a) {this.G({ $initial_referrer: a || "$direct", $initial_referring_domain: c.info.Bb(a) || "$direct" }, "");};m.prototype.wc = function () {return c.ra({ $initial_referrer: this.props.$initial_referrer, $initial_referring_domain: this.props.$initial_referring_domain });};
			m.prototype.Kb = function (a) {this.mb = this.Pa = a.cookie_expiration;this.Hc(a.disable_cookie);this.Gc(a.cross_subdomain_cookie);this.Ic(a.secure_cookie);};m.prototype.Hc = function (a) {(this.disabled = a) && this.remove();};m.prototype.Gc = function (a) {if (a !== this.Ma) this.Ma = a, this.remove(), this.save();};m.prototype.vc = function () {return this.Ma;};m.prototype.Ic = function (a) {if (a !== this.Db) this.Db = a ? n : s, this.remove(), this.save();};m.prototype.C = function (a, b) {var e = this.Ea(a),f = b[a],d = this.ga("$set"),g = this.ga("$set_once"),
				j = this.ga("$add"),h = this.ga("$append", []);"__mps" === e ? (c.extend(d, f), this.ia("$add", f)) : "__mpso" === e ? c.a(f, function (a, b) {b in g || (g[b] = a);}) : "__mpa" === e ? c.a(f, function (a, b) {b in d ? d[b] += a : (b in j || (j[b] = 0), j[b] += a);}, this) : "__mpap" === e && h.push(f);q.log("MIXPANEL PEOPLE REQUEST (QUEUED, PENDING IDENTIFY):");q.log(b);this.save();};m.prototype.ia = function (a, b) {var e = this.T(a);c.h(e) || (c.a(b, function (a, b) {delete e[b];}, this), this.save());};m.prototype.Ea = function (a) {if ("$set" === a) return "__mps";if ("$set_once" ===
				a) return "__mpso";if ("$add" === a) return "__mpa";if ("$append" === a) return "__mpap";q.error("Invalid queue:", a);};m.prototype.T = function (a) {return this.props[this.Ea(a)];};m.prototype.ga = function (a, b) {var e = this.Ea(a),b = c.h(b) ? {} : b;return this.props[e] || (this.props[e] = b);};i.prototype.Ta = function (a, b, c) {if ("undefined" === typeof c) q.error("You must name your new library: init(token, config, name)");else if ("mixpanel" === c) q.error("You must initialize the main mixpanel object right after you include the Mixpanel js snippet");else
				return a = F(a, b, c), r[c] = a, a.ha(), a;};i.prototype.Fa = function (a, b, e) {this.__loaded = n;this.config = {};this.Eb(c.extend({}, P, b, { name: e, token: a, callback_fn: ("mixpanel" === e ? e : "mixpanel." + e) + "._jsc" }));this._jsc = C();this.Ba = [];this.Ca = [];this.Aa = [];this.S = { disable_all_events: s, identify_called: s };this.cookie = new m(this.config);this.G({ distinct_id: c.Rb() }, "");};i.prototype.ha = function () {this.d("loaded")(this);this.d("track_pageview") && this.Jb();};i.prototype.Wb = function () {c.a(this.Ba, function (a) {this.Ia.apply(this,
					a);}, this);c.a(this.Ca, function (a) {this.w.apply(this, a);}, this);delete this.Ba;delete this.Ca;};i.prototype.Ia = function (a, b) {if (this.d("img")) return q.error("You can't use DOM tracking functions with img = true."), s;if (!K) return this.Ba.push([a, b]), s;var c = new a().Ta(this);return c.P.apply(c, b);};i.prototype.Ga = function (a, b) {if (c.h(a)) return p;if (I) return function (c) {a(c, b);};var e = this._jsc,f = "" + Math.floor(1E8 * Math.random()),d = this.d("callback_fn") + '["' + f + '"]';e[f] = function (c) {delete e[f];a(c, b);};return d;};
			i.prototype.w = function (a, b, e) {if (L) this.Ca.push(arguments);else {var f = this.d("verbose");b.verbose && (f = n);this.d("test") && (b.test = 1);f && (b.verbose = 1);this.d("img") && (b.img = 1);if (!I) if (e) b.callback = e;else if (f || this.d("test")) b.callback = "(function(){})";b.ip = this.d("ip") ? 1 : 0;b._ = new Date().getTime().toString();a += "?" + c.Qb(b);if ("img" in b) {var d = k.createElement("img");d.src = a;k.body.appendChild(d);} else if (I) {var g = new XMLHttpRequest();g.open("GET", a, n);g.withCredentials = n;g.onreadystatechange = function () {if (4 ===
							g.readyState) if (200 === g.status) e && (f ? e(c.wa(g.responseText)) : e(Number(g.responseText)));else {var a = "Bad HTTP status: " + g.status + " " + g.statusText;q.error(a);e && (f ? e({ status: 0, error: a }) : e(0));}};g.send(p);} else {d = k.createElement("script");d.type = "text/javascript";d.async = n;d.defer = n;d.src = a;var j = k.getElementsByTagName("script")[0];j.parentNode.insertBefore(d, j);}}};i.prototype.Da = function (a) {function b(a, b) {c.a(a, function (a) {this[a[0]].apply(this, a.slice(1));}, b);}var e,f = [],d = [],g = [];c.a(a, function (a) {a && (
					e = a[0], "function" === typeof a ? a.call(this) : c.isArray(a) && "alias" === e ? f.push(a) : c.isArray(a) && -1 != e.indexOf("track") && "function" === typeof this[e] ? g.push(a) : d.push(a));}, this);b(f, this);b(d, this);b(g, this);};i.prototype.push = function (a) {this.Da([a]);};i.prototype.disable = function (a) {"undefined" === typeof a ? this.S.pc = n : this.Aa = this.Aa.concat(a);};i.prototype.P = function (a, b, e) {if ("undefined" === typeof a) q.error("No event name provided to mixpanel.track");else if (c.vb(t) || this.S.pc || c.sb(this.Aa, a)) "undefined" !==
				typeof e && e(0);else return b = b || {}, b.token = b.Xc || this.d("token"), this.cookie.Lb(k.referrer), this.d("store_google") && this.cookie.Pc(), this.d("save_referrer") && this.cookie.Za(k.referrer), b = c.extend({}, c.info.qa(), this.cookie.qa(), b), a = c.truncate({ event: a, properties: b }, 255), b = c.ca(a), b = c.ib(b), q.log("MIXPANEL REQUEST:"), q.log(a), this.w(this.d("api_host") + "/track/", { data: b }, this.Ga(e, a)), a;};i.prototype.Jb = function (a) {if ("undefined" === typeof a) a = k.location.href;this.P("mp_page_view", c.info.Cc(a));};i.prototype.Oc =
			function () {return this.Ia.call(this, A, arguments);};i.prototype.Nc = function () {return this.Ia.call(this, G, arguments);};i.prototype.Z = function (a, b) {this.cookie.Z(a, b);};i.prototype.G = function (a, b, c) {this.cookie.G(a, b, c);};i.prototype.ua = function (a) {this.cookie.ua(a);};i.prototype.Ha = function (a, b) {var c = {};c[a] = b;this.Z(c);};i.prototype.Ra = function (a, b, c, f, d) {a != this.M() && a != this.oa("__alias") && (this.ua("__alias"), this.Ha("distinct_id", a));this.$a(this.M());this.S.qb = n;this.people.Zb(b, c, f, d);};i.prototype.M =
			function () {return this.oa("distinct_id");};i.prototype.hc = function (a, b) {if (a === this.oa("$people_distinct_id")) return q.na("Attempting to create alias for existing People user - aborting."), -2;var e = this;c.h(b) && (b = this.M());if (a !== b) return this.Ha("__alias", a), this.P("$create_alias", { alias: a, distinct_id: b }, function () {e.Ra(a);});q.error("alias matches current distinct_id - skipping api call.");this.Ra(a);return -1;};i.prototype.Ac = function (a) {this.Ha("mp_name_tag", a);};i.prototype.Eb = function (a) {c.j(a) && (
				c.extend(this.config, a), this.cookie && this.cookie.Kb(this.config), w = w || this.d("debug"));};i.prototype.d = function (a) {return this.config[a];};i.prototype.oa = function (a) {return this.cookie.props[a];};i.prototype.toString = function () {var a = this.d("name");"mixpanel" !== a && (a = "mixpanel." + a);return a;};i.prototype.$a = function (a) {if (a && !this.S.qb && !this.d("disable_notifications")) {q.log("MIXPANEL NOTIFICATION CHECK");var b = this;this.w(this.d("api_host") + "/decide/", { verbose: n, version: "1", lib: "web", token: this.d("token"),
						distinct_id: a }, this.Ga(function (a) {a.notifications && 0 < a.notifications.length && b.gb.call(b, a.notifications[0]);}));}};i.prototype.gb = function (a) {new g(a, this).show();};o.prototype.Fa = function (a) {this.c = a;};o.prototype.set = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;this.fa("save_referrer") && this.c.cookie.Za(k.referrer);d = c.extend({}, c.info.Dc(), this.c.cookie.wc(), d);f.$set = d;return this.w(f, e);};o.prototype.Fb = function (a, b, e) {var f =
				{},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$set_once = d;return this.w(f, e);};o.prototype.tb = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (isNaN(parseFloat(a)) ? q.error("Invalid increment value passed to mixpanel.people.increment - must be a number") : d[b] = a);}), e = b) : (c.h(b) && (b = 1), d[a] = b);f.$add = d;return this.w(f, e);};o.prototype.append = function (a, b, e) {var f = {},d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" ==
					b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$append = d;return this.w(f, e);};o.prototype.Mc = function (a, b, e) {if (!c.zc(a) && (a = parseFloat(a), isNaN(a))) {q.error("Invalid value passed to mixpanel.people.track_charge - must be a number");return;}return this.append("$transactions", c.extend({ $amount: a }, b), e);};o.prototype.mc = function (a) {return this.set("$transactions", [], a);};o.prototype.oc = function () {if (this.bb()) return this.w({ $delete: this.c.M() });q.error("mixpanel.people.delete_user() requires you to call identify() first");};
			o.prototype.toString = function () {return this.c.toString() + ".people";};o.prototype.w = function (a, b) {a.$token = this.fa("token");a.$distinct_id = this.c.M();var e = c.ob(a),f = c.truncate(e, 255),e = c.ca(e),e = c.ib(e);if (!this.bb()) return this.Xb(a), c.h(b) || (this.fa("verbose") ? b({ status: -1, error: p }) : b(-1)), f;q.log("MIXPANEL PEOPLE REQUEST:");q.log(f);this.c.w(this.fa("api_host") + "/engage/", { data: e }, this.c.Ga(b, f));return f;};o.prototype.fa = function (a) {return this.c.d(a);};o.prototype.bb = function () {return this.c.S.qb ===
				n;};o.prototype.Xb = function (a) {"$set" in a ? this.c.cookie.C("$set", a) : "$set_once" in a ? this.c.cookie.C("$set_once", a) : "$add" in a ? this.c.cookie.C("$add", a) : "$append" in a ? this.c.cookie.C("$append", a) : q.error("Invalid call to _enqueue():", a);};o.prototype.Zb = function (a, b, e, f) {var d = this,g = c.extend({}, this.c.cookie.T("$set")),j = c.extend({}, this.c.cookie.T("$set_once")),h = c.extend({}, this.c.cookie.T("$add")),i = this.c.cookie.T("$append");!c.h(g) && c.j(g) && !c.W(g) && (d.c.cookie.ia("$set", g), this.set(g, function (b,
				e) {0 == b && d.c.cookie.C("$set", g);c.h(a) || a(b, e);}));!c.h(j) && c.j(j) && !c.W(j) && (d.c.cookie.ia("$set_once", j), this.Fb(j, function (a, b) {0 == a && d.c.cookie.C("$set_once", j);c.h(f) || f(a, b);}));!c.h(h) && c.j(h) && !c.W(h) && (d.c.cookie.ia("$add", h), this.tb(h, function (a, e) {0 == a && d.c.cookie.C("$add", h);c.h(b) || b(a, e);}));if (!c.h(i) && c.isArray(i) && i.length) {for (var k = i.length - 1; 0 <= k; k--) {var m = i.pop();d.append(m, function (a, b) {0 == a && d.c.cookie.C("$append", m);c.h(e) || e(a, b);});}d.c.cookie.save();}};i.Ub = function (a, b) {c.ic(this);
				this.Wa = b;this.cookie = this.Wa.cookie;this.D = c.p(a.id);this.xb = c.p(a.message_id);this.body = (c.p(a.body) || "").replace(/\n/g, "<br/>");this.nc = c.p(a.cta) || "Close";this.V = c.p(a.cta_url) || p;this.Sa = c.p(a.image_url) || p;this.X = c.p(a.type) || "takeover";this.style = c.p(a.style) || "light";this.H = c.p(a.thumb_image_url) || p;this.title = c.p(a.title) || "";this.va = c.p(a.video_url) || p;this.aa = g.Tb;this.Q = g.Sb;this.la = n;if (!this.V) this.V = "#dismiss", this.la = s;this.q = "mini" === this.X;if (!this.q) this.X = "takeover";this.Bc = !this.q ?
				g.R : g.xa;this.fb();this.pa = this.$b();this.cc();};var g = i.Ub;g.I = 200;g.u = "mixpanel-notification";g.ba = 0.6;g.B = 25;g.da = 200;g.R = 388;g.xa = 420;g.v = 85;g.ya = 5;g.F = 60;g.za = Math.round(g.F / 2);g.Tb = 595;g.Sb = 334;g.prototype.show = function () {var a = this;this.fb();this.l ? (this.bc(), this.ac(), this.dc(this.Vb)) : setTimeout(function () {a.show();}, 300);};g.prototype.Na = c.s(function () {var a = this.Jc ? this.g("video") : this.L();if (this.Mb) this.ec("bg", "visible"), this.J(a, "exiting"), setTimeout(this.eb, g.I);else {var b, c, f;this.q ? (
					b = "right", c = 20, f = -100) : (b = "top", c = g.B, f = g.da + g.B);this.ea([{ m: this.g("bg"), k: "opacity", start: g.ba, i: 0 }, { m: a, k: "opacity", start: 1, i: 0 }, { m: a, k: b, start: c, i: f }], g.I, this.eb);}});g.prototype.J = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));a.className ? ~(" " + a.className + " ").indexOf(" " + b + " ") || (a.className += " " + b) : a.className = b;});g.prototype.ec = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));if (a.className) a.className = (" " + a.className + " ").replace(" " + b + " ", "").replace(/^[\s\xA0]+/,
				"").replace(/[\s\xA0]+$/, "");});g.prototype.ea = c.s(function (a, b, c, f) {var d = this,g = s,j,h;j = 1 * new Date();var i,f = f || j;i = j - f;for (j = 0; j < a.length; j++) {h = a[j];if ("undefined" === typeof h.A) h.A = h.start;if (h.A !== h.i) {var g = n,k = h.i >= h.start ? 1 : -1;h.A = h.start + (h.i - h.start) * i / b;if ("opacity" !== h.k) h.A = Math.round(h.A);if (0 < k && h.A >= h.i || 0 > k && h.A <= h.i) h.A = h.i;}}if (g) {for (j = 0; j < a.length; j++) {h = a[j], h.m && (h.m.style[h.k] = "" + h.A + ("opacity" === h.k ? "" : "px"));}setTimeout(function () {d.ea(a, b, c, f);}, 10);} else c && c();});g.prototype.Vb =
			c.s(function () {var a = this;if (!this.Kc && !this.ab()[this.D]) this.Kc = n, this.l.appendChild(this.Y), setTimeout(function () {var b = a.L();if (a.Mb) a.q || a.J("bg", "visible"), a.J(b, "visible"), a.cb();else {var c, f, d;a.q ? (c = "right", f = -100, d = 20) : (c = "top", f = g.da + g.B, d = g.B);a.ea([{ m: a.g("bg"), k: "opacity", start: 0, i: g.ba }, { m: b, k: "opacity", start: 0, i: 1 }, { m: b, k: c, start: f, i: d }], g.I, a.cb);}}, 100), c.N(a.g("cancel"), "click", function (b) {b.preventDefault();a.Na();}), c.N(a.g("button") || a.g("mini-content"), "click", function (b) {b.preventDefault();
					a.O ? (a.Ja("$campaign_open", { $resource_type: "video" }), a.fc()) : (a.Na(), a.la && a.Ja("$campaign_open", { $resource_type: "link" }, function () {window.location.href = a.V;}));});});g.prototype.g = function (a) {return k.getElementById(g.u + "-" + a);};g.prototype.L = function () {return this.g(this.X);};g.prototype.ab = function () {return this.cookie.props.__cmpns || (this.cookie.props.__cmpns = {});};g.prototype.K = function (a, b) {return this.z[a] && this.z[a] <= b;};g.prototype.$b = function () {var a = [];this.q ? (this.H = this.H || "//cdn.mxpnl.com/site_media/images/icons/notifications/mini-news-dark.png",
				a.push(this.H)) : (this.Sa ? (a.push(this.Sa), this.rb = '<img id="img" src="' + this.Sa + '"/>') : this.rb = "", this.H ? (a.push(this.H), this.Hb = '<div id="thumbborder-wrapper"><div id="thumbborder"></div></div><img id="thumbnail" src="' + this.H + '" width="' + g.F + '" height="' + g.F + '"/><div id="thumbspacer"></div>') : this.Hb = "");return a;};g.prototype.ac = function () {var a = "",b = "",c = "";this.Y = k.createElement("div");this.Y.id = g.u + "-wrapper";if (this.q) a = '<div id="mini"><div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="mini-content"><div id="mini-icon"><div id="mini-icon-img"></div></div><div id="body"><div id="body-text"><div>' +
				this.body + '</div></div></div></div></div><div id="mini-border"></div></div>';else {var a = this.la || this.O ? "" : '<div id="button-close"></div>',f = this.O ? '<div id="button-play"></div>' : "";this.K("ie", 7) && (f = a = "");a = '<div id="takeover">' + this.Hb + '<div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="content">' + this.rb + '<div id="title">' + this.title + '</div><div id="body">' + this.body + '</div><div id="tagline"><a href="http://mixpanel.com?from=inapp" target="_blank">POWERED BY MIXPANEL</a></div></div><div id="button">' +
					a + '<a id="button-link" href="' + this.V + '">' + this.nc + "</a>" + f + "</div></div></div>";}this.Ob ? (b = "//www.youtube.com/embed/" + this.Ob + "?wmode=transparent&showinfo=0&modestbranding=0&rel=0&autoplay=1&loop=0&vq=hd1080", this.Pb && (b += "&enablejsapi=1&html5=1&controls=0", c = '<div id="video-controls"><div id="video-progress" class="video-progress-el"><div id="video-progress-total" class="video-progress-el"></div><div id="video-elapsed" class="video-progress-el"></div></div><div id="video-time" class="video-progress-el"></div></div>')) :
				this.Nb && (b = "//player.vimeo.com/video/" + this.Nb + "?autoplay=1&title=0&byline=0&portrait=0");if (this.O) this.Tc = '<iframe id="' + g.u + '-video-frame" width="' + this.aa + '" height="' + this.Q + '"  src="' + b + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen="1" scrolling="no"></iframe>', c = '<div id="video-' + (this.Qa ? "" : "no") + 'flip"><div id="video"><div id="video-holder"></div>' + c + "</div></div>";b = c + a;this.Qa && (b = (this.q ? a : "") + '<div id="flipcontainer"><div id="flipper">' + (this.q ? c : b) + "</div></div>");
				this.Y.innerHTML = ('<div id="overlay" class="' + this.X + '"><div id="campaignid-' + this.D + '"><div id="bgwrapper"><div id="bg"></div>' + b + "</div></div></div>").replace(/class=\"/g, 'class="' + g.u + "-").replace(/id=\"/g, 'id="' + g.u + "-");};g.prototype.bc = function () {this.e = "dark" === this.style ? { La: "#1d1f25", U: "#282b32", ja: "#3a4147", jb: "#4a5157", jc: "#32353c", lb: "0.4", Va: "#2a3137", ta: "#fff", Ya: "#9498a3", Gb: "#464851", sa: "#ddd" } : { La: "#fff", U: "#e7eaee", ja: "#eceff3", jb: "#f5f5f5", jc: "#e4ecf2", lb: "1.0", Va: "#fafafa", ta: "#5c6578",
					Ya: "#8b949b", Gb: "#ced9e6", sa: "#7c8598" };var a = "0px 0px 35px 0px rgba(45, 49, 56, 0.7)",b = a,e = a,f = g.F + 2 * g.ya,d = g.I / 1E3 + "s";this.q && (a = "none");var i = {};i["@media only screen and (max-width: " + (g.xa + 20 - 1) + "px)"] = { "#overlay": { display: "none" } };a = { ".flipped": { transform: "rotateY(180deg)" }, "#overlay": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", overflow: "auto", "text-align": "center", "z-index": "10000", "font-family": '"Helvetica", "Arial", sans-serif', "-webkit-font-smoothing": "antialiased", "-moz-osx-font-smoothing": "grayscale" },
					"#overlay.mini": { height: "0", overflow: "visible" }, "#overlay a": { width: "initial", padding: "0", "text-decoration": "none", "text-transform": "none", color: "inherit" }, "#bgwrapper": { position: "relative", width: "100%", height: "100%" }, "#bg": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", "min-width": 4 * this.rc + "px", "min-height": 4 * this.qc + "px", "background-color": "black", opacity: "0.0", "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)", filter: "alpha(opacity=60)", transition: "opacity " + d },
					"#bg.visible": { opacity: g.ba }, ".mini #bg": { width: "0", height: "0", "min-width": "0" }, "#flipcontainer": { perspective: "1000px", position: "absolute", width: "100%" }, "#flipper": { position: "relative", "transform-style": "preserve-3d", transition: "0.3s" }, "#takeover": { position: "absolute", left: "50%", width: g.R + "px", "margin-left": Math.round(-g.R / 2) + "px", "backface-visibility": "hidden", transform: "rotateY(0deg)", opacity: "0.0", top: g.da + "px", transition: "opacity " + d + ", top " + d }, "#takeover.visible": { opacity: "1.0", top: g.B + "px" },
					"#takeover.exiting": { opacity: "0.0", top: g.da + "px" }, "#thumbspacer": { height: g.za + "px" }, "#thumbborder-wrapper": { position: "absolute", top: -g.ya + "px", left: g.R / 2 - g.za - g.ya + "px", width: f + "px", height: f / 2 + "px", overflow: "hidden" }, "#thumbborder": { position: "absolute", width: f + "px", height: f + "px", "border-radius": f + "px", "background-color": this.e.U, opacity: "0.5" }, "#thumbnail": { position: "absolute", top: "0px", left: g.R / 2 - g.za + "px", width: g.F + "px", height: g.F + "px", overflow: "hidden", "z-index": "100", "border-radius": g.F + "px" },
					"#mini": { position: "absolute", right: "20px", top: g.B + "px", width: this.Bc + "px", height: 2 * g.v + "px", "margin-top": 20 - g.v + "px", "backface-visibility": "hidden", opacity: "0.0", transform: "rotateX(90deg)", transition: "opacity 0.3s, transform 0.3s, right 0.3s" }, "#mini.visible": { opacity: "1.0", transform: "rotateX(0deg)" }, "#mini.exiting": { opacity: "0.0", right: "-150px" }, "#mainbox": { "border-radius": "4px", "box-shadow": a, "text-align": "center", "background-color": this.e.La, "font-size": "14px", color: this.e.Ya }, "#mini #mainbox": { height: g.v +
						"px", "margin-top": g.v + "px", "border-radius": "3px", transition: "background-color " + d }, "#mini-border": { height: g.v + 6 + "px", width: g.xa + 6 + "px", position: "absolute", top: "-3px", left: "-3px", "margin-top": g.v + "px", "border-radius": "6px", opacity: "0.25", "background-color": "#fff", "z-index": "-1", "box-shadow": e }, "#mini-icon": { position: "relative", display: "inline-block", width: "75px", height: g.v + "px", "border-radius": "3px 0 0 3px", "background-color": this.e.U, background: "linear-gradient(135deg, " + this.e.jb + " 0%, " + this.e.U +
						" 100%)", transition: "background-color " + d }, "#mini:hover #mini-icon": { "background-color": this.e.Va }, "#mini:hover #mainbox": { "background-color": this.e.Va }, "#mini-icon-img": { position: "absolute", "background-image": "url(" + this.H + ")", width: "48px", height: "48px", top: "20px", left: "12px" }, "#content": { padding: "30px 20px 0px 20px" }, "#mini-content": { "text-align": "left", height: g.v + "px", cursor: "pointer" }, "#img": { width: "328px", "margin-top": "30px", "border-radius": "5px" }, "#title": { "max-height": "600px", overflow: "hidden",
						"word-wrap": "break-word", padding: "25px 0px 20px 0px", "font-size": "19px", "font-weight": "bold", color: this.e.ta }, "#body": { "max-height": "600px", "margin-bottom": "25px", overflow: "hidden", "word-wrap": "break-word", "line-height": "21px", "font-size": "15px", "font-weight": "normal", "text-align": "left" }, "#mini #body": { display: "inline-block", "max-width": "250px", margin: "0 0 0 30px", height: g.v + "px", "font-size": "16px", "letter-spacing": "0.8px", color: this.e.ta }, "#mini #body-text": { display: "table", height: g.v + "px" }, "#mini #body-text div": { display: "table-cell",
						"vertical-align": "middle" }, "#tagline": { "margin-bottom": "15px", "font-size": "10px", "font-weight": "600", "letter-spacing": "0.8px", color: "#ccd7e0", "text-align": "left" }, "#tagline a": { color: this.e.Gb, transition: "color " + d }, "#tagline a:hover": { color: this.e.sa }, "#cancel": { position: "absolute", right: "0", width: "8px", height: "8px", padding: "10px", "border-radius": "20px", margin: "12px 12px 0 0", "box-sizing": "content-box", cursor: "pointer", transition: "background-color " + d }, "#mini #cancel": { margin: "7px 7px 0 0" }, "#cancel-icon": { width: "8px",
						height: "8px", overflow: "hidden", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/cancel-x.png)", opacity: this.e.lb }, "#cancel:hover": { "background-color": this.e.ja }, "#button": { display: "block", height: "60px", "line-height": "60px", "text-align": "center", "background-color": this.e.U, "border-radius": "0 0 4px 4px", overflow: "hidden", cursor: "pointer", transition: "background-color " + d }, "#button-close": { display: "inline-block", width: "9px", height: "60px", "margin-right": "8px", "vertical-align": "top",
						"background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/close-x-" + this.style + ".png)", "background-repeat": "no-repeat", "background-position": "0px 25px" }, "#button-play": { display: "inline-block", width: "30px", height: "60px", "margin-left": "15px", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/play-" + this.style + "-small.png)", "background-repeat": "no-repeat", "background-position": "0px 15px" }, "a#button-link": { display: "inline-block", "vertical-align": "top", "text-align": "center",
						"font-size": "17px", "font-weight": "bold", overflow: "hidden", "word-wrap": "break-word", color: this.e.ta, transition: "color " + d }, "#button:hover": { "background-color": this.e.ja, color: this.e.sa }, "#button:hover a": { color: this.e.sa }, "#video-noflip": { position: "relative", top: 2 * -this.Q + "px" }, "#video-flip": { "backface-visibility": "hidden", transform: "rotateY(180deg)" }, "#video": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", top: g.B + "px", "margin-top": "100px", left: "50%", "margin-left": Math.round(-this.aa /
						2) + "px", overflow: "hidden", "border-radius": "5px", "box-shadow": b, transform: "translateZ(1px)", transition: "opacity " + d + ", top " + d }, "#video.exiting": { opacity: "0.0", top: this.Q + "px" }, "#video-holder": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", overflow: "hidden", "border-radius": "5px" }, "#video-frame": { "margin-left": "-1px", width: this.aa + "px" }, "#video-controls": { opacity: "0", transition: "opacity 0.5s" }, "#video:hover #video-controls": { opacity: "1.0" }, "#video .video-progress-el": { position: "absolute",
						bottom: "0", height: "25px", "border-radius": "0 0 0 5px" }, "#video-progress": { width: "90%" }, "#video-progress-total": { width: "100%", "background-color": this.e.La, opacity: "0.7" }, "#video-elapsed": { width: "0", "background-color": "#6cb6f5", opacity: "0.9" }, "#video #video-time": { width: "10%", right: "0", "font-size": "11px", "line-height": "25px", color: this.e.Ya, "background-color": "#666", "border-radius": "0 0 5px 0" } };this.K("ie", 8) && c.extend(a, { "* html #overlay": { position: "absolute" }, "* html #bg": { position: "absolute" }, "html, body": { height: "100%" } });
				this.K("ie", 7) && c.extend(a, { "#mini #body": { display: "inline", zoom: "1", border: "1px solid " + this.e.ja }, "#mini #body-text": { padding: "20px" }, "#mini #mini-icon": { display: "none" } });var b = "backface-visibility,border-radius,box-shadow,opacity,perspective,transform,transform-style,transition".split(","),e = ["khtml", "moz", "ms", "o", "webkit"],j;for (j in a) {for (f = 0; f < b.length; f++) {if (d = b[f], d in a[j]) for (var h = a[j][d], m = 0; m < e.length; m++) {a[j]["-" + e[m] + "-" + d] = h;}}}(function (a, b) {function c(a) {var b = "",d;for (d in a) {var e =
							d.replace(/#/g, "#" + g.u + "-").replace(/\./g, "." + g.u + "-"),b = b + ("\n" + e + " {"),e = a[d],f;for (f in e) {b += f + ":" + e[f] + ";";}b += "}";}return b;}var d = c(a) + function (a) {var b = "",d;for (d in a) {b += "\n" + d + " {" + c(a[d]) + "\n}";}return b;}(b),e = k.head || k.getElementsByTagName("head")[0] || k.documentElement,f = k.createElement("style");e.appendChild(f);f.setAttribute("type", "text/css");f.styleSheet ? f.styleSheet.cssText = d : f.textContent = d;})(a, i);};g.prototype.cc = c.s(function () {if (this.va) {var a = this;a.Pb = "postMessage" in window;k.createElement("div");
					a.V = a.va;var b = a.va.match(/(?:youtube(?:-nocookie)?\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i),c = a.va.match(/vimeo\.com\/.*?(\d+)/i);if (b) {if (a.O = n, a.Ob = b[1], a.Pb) window.onYouTubeIframeAPIReady = function () {a.g("video-frame") && a.hb();}, b = k.createElement("script"), b.src = "//www.youtube.com/iframe_api", c = k.getElementsByTagName("script")[0], c.parentNode.insertBefore(b, c);} else if (c) a.O = n, a.Nb = c[1];if (a.K("ie", 7) || a.K("firefox", 3)) a.O = s, a.la = n;}});g.prototype.cb = c.s(function () {function a(a,
				b) {var c = {};if (k.defaultView && k.defaultView.getComputedStyle) c = k.defaultView.getComputedStyle(a, p);else if (a.currentStyle) c = a.currentStyle;return c[b];}var b = this;c.N(b.g("bg"), "click", function () {b.Na();});if (this.D) {var e = this.g("overlay");e && "hidden" !== a(e, "visibility") && "none" !== a(e, "display") && (this.ab()[this.D] = 1 * new Date(), this.cookie.save(), this.Ja("$campaign_delivery"), this.Wa.people.append({ $campaigns: this.D, $notifications: { campaign_id: this.D, message_id: this.xb, type: "web", time: new Date() } }));}});
			g.prototype.dc = function (a) {var b = this;if (0 === this.pa.length) a();else {for (var c = 0, f = [], d = 0; d < this.pa.length; d++) {var g = new Image(),i = function i() {c++;c === b.pa.length && a && (a(), a = p);};g.onload = i;g.src = this.pa[d];g.complete && i();f.push(g);}this.K("ie", 7) && setTimeout(function () {var b = n;for (d = 0; d < f.length; d++) {f[d].complete || (b = s);}b && a && (a(), a = p);}, 500);}};g.prototype.eb = c.s(function () {window.clearInterval(this.gc);this.Y.style.visibility = "hidden";this.l.removeChild(this.Y);});g.prototype.fb = function () {function a(a) {if (a in
					f) return n;if (!c) for (var a = a[0].toUpperCase() + a.slice(1), a = ["O" + a, "Webkit" + a, "Moz" + a], b = 0; b < a.length; b++) {if (a[b] in f) return n;}return s;}function b(a) {return (a = E.userAgent.match(a)) && a[1];}this.z = {};this.z.chrome = b(/Chrome\/(\d+)/);this.z.firefox = b(/Firefox\/(\d+)/);this.z.ie = b(/MSIE (\d+).+/);!this.z.ie && !window.ActiveXObject && "ActiveXObject" in window && (this.z.ie = 11);if (this.l = k.body || k.getElementsByTagName("body")[0]) this.rc = Math.max(this.l.scrollWidth, k.documentElement.scrollWidth, this.l.offsetWidth,
				k.documentElement.offsetWidth, this.l.clientWidth, k.documentElement.clientWidth), this.qc = Math.max(this.l.scrollHeight, k.documentElement.scrollHeight, this.l.offsetHeight, k.documentElement.offsetHeight, this.l.clientHeight, k.documentElement.clientHeight);var c = this.z.ie,f = k.createElement("div").style;this.Mb = this.l && a("transition") && a("transform");this.Qa = (33 <= this.z.chrome || 15 <= this.z.firefox) && this.l && a("backfaceVisibility") && a("perspective") && a("transform");};g.prototype.fc = c.s(function () {function a() {window.YT &&
					window.YT.loaded && b.hb();b.Jc = n;b.L().style.visibility = "hidden";}var b = this,c = [{ m: b.L(), k: "opacity", start: 1, i: 0 }, { m: b.L(), k: "top", start: g.B, i: -500 }, { m: b.g("video-noflip"), k: "opacity", start: 0, i: 1 }, { m: b.g("video-noflip"), k: "top", start: 2 * -b.Q, i: 0 }];if (b.q) {var f = b.g("bg"),d = b.g("overlay");f.style.width = "100%";f.style.height = "100%";d.style.width = "100%";b.J(b.L(), "exiting");b.J(f, "visible");c.push({ m: b.g("bg"), k: "opacity", start: 0, i: g.ba });}b.g("video-holder").innerHTML = b.Tc;b.Qa ? (b.J("flipper", "flipped"),
				setTimeout(a, g.I)) : b.ea(c, g.I, a);});g.prototype.Ja = function (a, b, e) {this.D ? (b = b || {}, b = c.extend(b, { campaign_id: this.D, message_id: this.xb, message_type: "web_inapp", message_subtype: this.X }), this.Wa.track(a, b, e)) : e && e.call();};g.prototype.hb = c.s(function () {var a = this;if (!a.Uc) {a.Uc = n;var b = a.g("video-elapsed"),e = a.g("video-time"),f = a.g("video-progress");new window.YT.Player(g.u + "-video-frame", { events: { onReady: function onReady(d) {function g(a) {var a = Math.round(h - a),b = Math.floor(a / 60),c = Math.floor(b / 60),a = a - 60 * b;e.innerHTML =
									"-" + (c ? c + ":" : "") + ("00" + (b - 60 * c)).slice(-2) + ":" + ("00" + a).slice(-2);}var i = d.target,h = i.getDuration();g(0);a.gc = window.setInterval(function () {var a = i.getCurrentTime();b.style.width = 100 * (a / h) + "%";g(a);}, 250);c.N(f, "click", function (a) {a = Math.max(0, a.pageX - f.getBoundingClientRect().left);i.seekTo(h * a / f.clientWidth, n);});} } });}});c.toArray = c.$;c.isObject = c.j;c.JSONEncode = c.ca;c.JSONDecode = c.wa;c.isBlockedUA = c.vb;c.isEmptyObject = c.W;c.info = c.info;c.info.device = c.info.nb;c.info.browser = c.info.ka;i.prototype.init =
			i.prototype.Ta;i.prototype.disable = i.prototype.disable;i.prototype.track = i.prototype.P;i.prototype.track_links = i.prototype.Oc;i.prototype.track_forms = i.prototype.Nc;i.prototype.track_pageview = i.prototype.Jb;i.prototype.register = i.prototype.Z;i.prototype.register_once = i.prototype.G;i.prototype.unregister = i.prototype.ua;i.prototype.identify = i.prototype.Ra;i.prototype.alias = i.prototype.hc;i.prototype.name_tag = i.prototype.Ac;i.prototype.set_config = i.prototype.Eb;i.prototype.get_config = i.prototype.d;i.prototype.get_property =
			i.prototype.oa;i.prototype.get_distinct_id = i.prototype.M;i.prototype.toString = i.prototype.toString;i.prototype._check_and_handle_notifications = i.prototype.$a;i.prototype._show_notification = i.prototype.gb;m.prototype.properties = m.prototype.qa;m.prototype.update_search_keyword = m.prototype.Lb;m.prototype.update_referrer_info = m.prototype.Za;m.prototype.get_cross_subdomain = m.prototype.vc;m.prototype.clear = m.prototype.clear;o.prototype.set = o.prototype.set;o.prototype.set_once = o.prototype.Fb;o.prototype.increment =
			o.prototype.tb;o.prototype.append = o.prototype.append;o.prototype.track_charge = o.prototype.Mc;o.prototype.clear_charges = o.prototype.mc;o.prototype.delete_user = o.prototype.oc;o.prototype.toString = o.prototype.toString;c.Cb(m, ["_expire_notification_campaigns"]);c.Cb(i, ["identify", "_check_and_handle_notifications", "_show_notification"]);if (c.h(r)) q.na("'mixpanel' object not initialized. Ensure you are using the latest version of the Mixpanel JS Library along with the snippet we provide.");else if (r.__loaded ||
			r.config && r.cookie) q.error("Mixpanel library has already been downloaded at least once.");else if (1.1 > z) q.na("Version mismatch; please ensure you're using the latest version of the Mixpanel code snippet.");else {var y = {};c.a(r._i, function (a) {var b;a && c.isArray(a) && (b = a[a.length - 1], a = F.apply(this, a), y[b] = a);});var Q = function Q() {c.a(y, function (a, b) {"mixpanel" !== b && (r[b] = a);});r._ = c;};r.init = function (a, b, c) {c ? r[c] || (r[c] = y[c] = F(a, b, c), r[c].ha()) : (c = r, y.mixpanel ? c = y.mixpanel : a && (c = F(a, b, "mixpanel"), c.ha()),
					window.mixpanel = r = c, Q());};r.init();c.a(y, function (a) {a.ha();});if (k.addEventListener) "complete" == k.readyState ? x() : k.addEventListener("DOMContentLoaded", x, s);else if (k.attachEvent) {k.attachEvent("onreadystatechange", x);z = s;try {z = window.frameElement == p;} catch (R) {}if (k.documentElement.doScroll && z) {var M = function M() {try {k.documentElement.doScroll("left");} catch (a) {setTimeout(M, 1);return;}x();};M();}}c.N(window, "load", x, n);}})(window.mixpanel);
	})();

}
//else
{

}

//Google Analytics

if (typeof ga !== 'undefined') {
	// light
	switch (config.app) {
		case 'light':
			ga('create', 'UA-55863666-1', 'auto');
			break;
		case 'pro':
			ga('create', 'UA-55863666-2', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'web':
			ga('create', 'UA-58183317-1', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'app':
			ga('create', 'UA-55863666-8', 'auto');
			break;
		case 'ambieye':
			ga('create', 'UA-55863666-6', 'auto');
			break;}

	//ga('create', 'UA-55863666-2', 'auto');
	// ambieye ga('create', 'UA-55863666-6', 'auto');

	ga('require', 'displayfeatures');
	ga('send', 'pageview');
}

if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
	mixpanel.track_links("a", "click", {
		"referrer": document.referrer });

}
/**/

function trackState(name, state) {
	return;
}

function trackEvent(category, action, label, value, data) {
	if (typeof ga !== 'undefined') {
		ga('send', 'event', category, action, {
			'nonInteraction': 1,
			'label': label,
			'value': value });

	}

	var obj = {
		'category': category,
		'action': action,
		'value': value,
		'data': data };


	if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
		mixpanel.track(label, obj);
	}

	if (data) {
		trackState(category, obj);
	}
}


var gOldOnError = window.onerror;
// Override previous handler.
window.onerror = function myErrorHandler(errorMsg, url, lineNumber) {
	if (gOldOnError)
		// Call previous handler.
		return gOldOnError(errorMsg, url, lineNumber);

	// Just let default handler run.
	return false;
};

if (config.app === 'pro' || config.app === 'web') {
	// script.fail remvoed
	/*
 (function(_, __) {
 _._errs = []; var h = _.onerror; var f = function() { var a = arguments; _errs.push(a); h && h.apply(this, a)};
 var sf = __.createElement('script');sf.type = 'text/javascript';sf.async = true;sf.id = 'onscriptfail';
 sf.src = '//script.fail/inform?c2FkYWtvdkBnbWFpbC5jb20=$mnNMzeR8oEfK7OC4MOA7MZBhyn+fSI8xaWQ2qHXHCXE=';
 var s = __.getElementsByTagName('script')[0]; s.parentNode.insertBefore(sf, s);
 _.onerror = f;
 })(window, document);
 */
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict'; /*!
               * Color Thief v2.0
               * by Lokesh Dhakar - http://www.lokeshdhakar.com
               *
               * Thanks
               * ------
               * Nick Rabinowitz - For creating quantize.js.
               * John Schulz - For clean up and optimization. @JFSIII
               * Nathan Spady - For adding drag and drop support to the demo page.
               *
               * License
               * -------
               * Copyright 2011, 2015 Lokesh Dhakar
               * Released under the MIT license
               * https://raw.githubusercontent.com/lokesh/color-thief/master/LICENSE
               *
               */


/*
                    CanvasImage Class
                    Class that wraps the html image element and canvas.
                    It also simplifies some of the canvas context manipulation
                    with a set of helper functions.
                  */
var CanvasImage = function CanvasImage(image) {
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');

    document.body.appendChild(this.canvas);

    this.width = this.canvas.width = image.width;
    this.height = this.canvas.height = image.height;

    this.context.drawImage(image, 0, 0, this.width, this.height);
};

CanvasImage.prototype.clear = function () {
    this.context.clearRect(0, 0, this.width, this.height);
};

CanvasImage.prototype.update = function (imageData) {
    this.context.putImageData(imageData, 0, 0);
};

CanvasImage.prototype.getPixelCount = function () {
    return this.width * this.height;
};

CanvasImage.prototype.getImageData = function () {
    return this.context.getImageData(0, 0, this.width, this.height);
};

CanvasImage.prototype.removeCanvas = function () {
    this.canvas.parentNode.removeChild(this.canvas);
};


var ColorThief = function ColorThief() {};

/*
                                            * getColor(sourceImage[, quality])
                                            * returns {r: num, g: num, b: num}
                                            *
                                            * Use the median cut algorithm provided by quantize.js to cluster similar
                                            * colors and return the base color from the largest cluster.
                                            *
                                            * Quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
                                            * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
                                            * faster a color will be returned but the greater the likelihood that it will not be the visually
                                            * most dominant color.
                                            *
                                            * */
ColorThief.prototype.getColor = function (sourceImage, quality) {
    var palette = this.getPalette(sourceImage, 5, quality);
    var dominantColor = palette[0];
    return dominantColor;
};


/*
    * getPalette(sourceImage[, colorCount, quality])
    * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]
    *
    * Use the median cut algorithm provided by quantize.js to cluster similar colors.
    *
    * colorCount determines the size of the palette; the number of colors returned. If not set, it
    * defaults to 10.
    *
    * BUGGY: Function does not always return the requested amount of colors. It can be +/- 2.
    *
    * quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
    * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
    * faster the palette generation but the greater the likelihood that colors will be missed.
    *
    *
    */
ColorThief.prototype.getPalette = function (sourceImage, colorCount, quality) {

    if (typeof colorCount === 'undefined') {
        colorCount = 10;
    }
    if (typeof quality === 'undefined' || quality < 1) {
        quality = 10;
    }

    // Create custom CanvasImage object
    var image = new CanvasImage(sourceImage);
    var imageData = image.getImageData();
    var pixels = imageData.data;
    var pixelCount = image.getPixelCount();

    // Store the RGB values in an array format suitable for quantize function
    var pixelArray = [];
    for (var i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {
        offset = i * 4;
        r = pixels[offset + 0];
        g = pixels[offset + 1];
        b = pixels[offset + 2];
        a = pixels[offset + 3];
        // If pixel is mostly opaque and not white
        if (a >= 125) {
            if (!(r > 250 && g > 250 && b > 250)) {
                pixelArray.push([r, g, b]);
            }
        }
    }

    // Send array to quantize function which clusters values
    // using median cut algorithm
    var cmap = MMCQ.quantize(pixelArray, colorCount);
    var palette = cmap ? cmap.palette() : null;

    // Clean up
    image.removeCanvas();

    return palette;
};




/*!
    * quantize.js Copyright 2008 Nick Rabinowitz.
    * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
    */

// fill out a couple protovis dependencies
/*!
 * Block below copied from Protovis: http://mbostock.github.com/protovis/
 * Copyright 2010 Stanford Visualization Group
 * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php
 */
if (!pv) {
    var pv = {
        map: function map(array, f) {
            var o = {};
            return f ? array.map(function (d, i) {o.index = i;return f.call(o, d);}) : array.slice();
        },
        naturalOrder: function naturalOrder(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        },
        sum: function sum(array, f) {
            var o = {};
            return array.reduce(f ? function (p, d, i) {o.index = i;return p + f.call(o, d);} : function (p, d) {return p + d;}, 0);
        },
        max: function max(array, f) {
            return Math.max.apply(null, f ? pv.map(array, f) : array);
        } };

}



/**
   * Basic Javascript port of the MMCQ (modified median cut quantization)
   * algorithm from the Leptonica library (http://www.leptonica.com/).
   * Returns a color map you can use to map original pixels to the reduced
   * palette. Still a work in progress.
   *
   * @author Nick Rabinowitz
   * @example
  
  // array of pixels as [R,G,B] arrays
  var myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]
                  // etc
                  ];
  var maxColors = 4;
  
  var cmap = MMCQ.quantize(myPixels, maxColors);
  var newPalette = cmap.palette();
  var newPixels = myPixels.map(function(p) {
      return cmap.map(p);
  });
  
   */
var MMCQ = function () {
    // private constants
    var sigbits = 5,
    rshift = 8 - sigbits,
    maxIterations = 1000,
    fractByPopulations = 0.75;

    // get reduced-space color index for a pixel
    function getColorIndex(r, g, b) {
        if (r === 0 && g === 0 && b === 0) {
            return 0;
        }
        return (r << 2 * sigbits) + (g << sigbits) + b;
    }

    // Simple priority queue
    function PQueue(comparator) {
        var contents = [],
        sorted = false;

        function sort() {
            contents.sort(comparator);
            sorted = true;
        }

        return {
            push: function push(o) {
                contents.push(o);
                sorted = false;
            },
            peek: function peek(index) {
                if (!sorted) sort();
                if (index === undefined) index = contents.length - 1;
                return contents[index];
            },
            pop: function pop() {
                if (!sorted) sort();
                return contents.pop();
            },
            size: function size() {
                return contents.length;
            },
            map: function map(f) {
                return contents.map(f);
            },
            debug: function debug() {
                if (!sorted) sort();
                return contents;
            } };

    }

    // 3d color space box
    function VBox(r1, r2, g1, g2, b1, b2, histo) {
        var vbox = this;
        vbox.r1 = r1;
        vbox.r2 = r2;
        vbox.g1 = g1;
        vbox.g2 = g2;
        vbox.b1 = b1;
        vbox.b2 = b2;
        vbox.histo = histo;
    }
    VBox.prototype = {
        volume: function volume(force) {
            var vbox = this;
            if (!vbox._volume || force) {
                vbox._volume = (vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1);
            }
            return vbox._volume;
        },
        count: function count(force) {
            var vbox = this,
            histo = vbox.histo;
            if (!vbox._count_set || force) {
                var npix = 0,
                i,j,k;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var index = getColorIndex(i, j, k);
                            npix += histo[index] || 0;
                        }
                    }
                }
                vbox._count = npix;
                vbox._count_set = true;
            }
            return vbox._count;
        },
        copy: function copy() {
            var vbox = this;
            return new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);
        },
        avg: function avg(force) {
            var vbox = this,
            histo = vbox.histo;
            if (!vbox._avg || force) {
                var ntot = 0,
                mult = 1 << 8 - sigbits,
                rsum = 0,
                gsum = 0,
                bsum = 0,
                hval,
                i,j,k,histoindex;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var histoindex = getColorIndex(i, j, k);
                            hval = histo[histoindex] || 0;
                            ntot += hval;
                            rsum += hval * (i + 0.5) * mult;
                            gsum += hval * (j + 0.5) * mult;
                            bsum += hval * (k + 0.5) * mult;
                        }
                    }
                }
                if (ntot) {
                    vbox._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];
                } else {
                    //                    console.log('empty box');
                    vbox._avg = [
                    ~~(mult * (vbox.r1 + vbox.r2 + 1) / 2),
                    ~~(mult * (vbox.g1 + vbox.g2 + 1) / 2),
                    ~~(mult * (vbox.b1 + vbox.b2 + 1) / 2)];

                }
            }
            return vbox._avg;
        },
        contains: function contains(pixel) {
            var vbox = this,
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            return rval >= vbox.r1 && rval <= vbox.r2 &&
            gval >= vbox.g1 && gval <= vbox.g2 &&
            bval >= vbox.b1 && bval <= vbox.b2;
        } };


    // Color map
    function CMap() {
        this.vboxes = new PQueue(function (a, b) {
            return pv.naturalOrder(
            a.vbox.count() * a.vbox.volume(),
            b.vbox.count() * b.vbox.volume());

        });
    }
    CMap.prototype = {
        push: function push(vbox) {
            this.vboxes.push({
                vbox: vbox,
                color: vbox.avg() });

        },
        palette: function palette() {
            return this.vboxes.map(function (vb) {return vb.color;});
        },
        size: function size() {
            return this.vboxes.size();
        },
        map: function map(color) {
            var vboxes = this.vboxes;
            for (var i = 0; i < vboxes.size(); i++) {
                if (vboxes.peek(i).vbox.contains(color)) {
                    return vboxes.peek(i).color;
                }
            }
            return this.nearest(color);
        },
        nearest: function nearest(color) {
            var vboxes = this.vboxes,
            d1,d2,pColor;
            for (var i = 0; i < vboxes.size(); i++) {
                d2 = Math.sqrt(
                Math.pow(color[0] - vboxes.peek(i).color[0], 2) +
                Math.pow(color[1] - vboxes.peek(i).color[1], 2) +
                Math.pow(color[2] - vboxes.peek(i).color[2], 2));

                if (d2 < d1 || d1 === undefined) {
                    d1 = d2;
                    pColor = vboxes.peek(i).color;
                }
            }
            return pColor;
        },
        forcebw: function forcebw() {
            // XXX: won't  work yet
            var vboxes = this.vboxes;
            vboxes.sort(function (a, b) {return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));});

            // force darkest color to black if everything < 5
            var lowest = vboxes[0].color;
            if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5)
            vboxes[0].color = [0, 0, 0];

            // force lightest color to white if everything > 251
            var idx = vboxes.length - 1,
            highest = vboxes[idx].color;
            if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251)
            vboxes[idx].color = [255, 255, 255];
        } };


    // histo (1-d array, giving the number of pixels in
    // each quantized region of color space), or null on error
    function getHisto(pixels) {
        var histosize = 1 << 3 * sigbits,
        histo = new Array(histosize),
        index,rval,gval,bval;
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            index = getColorIndex(rval, gval, bval);
            histo[index] = (histo[index] || 0) + 1;
        });
        return histo;
    }

    function vboxFromPixels(pixels, histo) {
        var rmin = 1000000,rmax = 0,
        gmin = 1000000,gmax = 0,
        bmin = 1000000,bmax = 0,
        rval,gval,bval;
        // find min/max
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            if (rval < rmin) rmin = rval;else
            if (rval > rmax) rmax = rval;
            if (gval < gmin) gmin = gval;else
            if (gval > gmax) gmax = gval;
            if (bval < bmin) bmin = bval;else
            if (bval > bmax) bmax = bval;
        });
        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);
    }

    function medianCutApply(histo, vbox) {
        if (!vbox.count()) return;

        var rw = vbox.r2 - vbox.r1 + 1,
        gw = vbox.g2 - vbox.g1 + 1,
        bw = vbox.b2 - vbox.b1 + 1,
        maxw = pv.max([rw, gw, bw]);
        // only one pixel, no split
        if (vbox.count() == 1) {
            return [vbox.copy()];
        }
        /* Find the partial sum arrays along the selected axis. */
        var total = 0,
        partialsum = [],
        lookaheadsum = [],
        i,j,k,sum,index;
        if (maxw == rw) {
            for (i = vbox.r1; i <= vbox.r2; i++) {
                sum = 0;
                for (j = vbox.g1; j <= vbox.g2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        var index = getColorIndex(i, j, k);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        } else
        if (maxw == gw) {
            for (i = vbox.g1; i <= vbox.g2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        index = getColorIndex(j, i, k);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        } else
        {/* maxw == bw */
            for (i = vbox.b1; i <= vbox.b2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.g1; k <= vbox.g2; k++) {
                        index = getColorIndex(j, k, i);
                        sum += histo[index] || 0;
                    }
                }
                total += sum;
                partialsum[i] = total;
            }
        }
        partialsum.forEach(function (d, i) {
            lookaheadsum[i] = total - d;
        });
        function doCut(color) {
            var dim1 = color + '1',
            dim2 = color + '2',
            left,right,vbox1,vbox2,d2,count2 = 0;
            for (i = vbox[dim1]; i <= vbox[dim2]; i++) {
                if (partialsum[i] > total / 2) {
                    vbox1 = vbox.copy();
                    vbox2 = vbox.copy();
                    left = i - vbox[dim1];
                    right = vbox[dim2] - i;
                    if (left <= right)
                    d2 = Math.min(vbox[dim2] - 1, ~~(i + right / 2));else
                    d2 = Math.max(vbox[dim1], ~~(i - 1 - left / 2));
                    // avoid 0-count boxes
                    while (!partialsum[d2]) {d2++;}
                    count2 = lookaheadsum[d2];
                    while (!count2 && partialsum[d2 - 1]) {count2 = lookaheadsum[--d2];}
                    // set dimensions
                    vbox1[dim2] = d2;
                    vbox2[dim1] = vbox1[dim2] + 1;
                    //                    console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());
                    return [vbox1, vbox2];
                }
            }

        }
        // determine the cut planes
        return maxw == rw ? doCut('r') :
        maxw == gw ? doCut('g') :
        doCut('b');
    }

    function quantize(pixels, maxcolors) {
        // short-circuit
        if (!pixels.length || maxcolors < 2 || maxcolors > 256) {
            //            console.log('wrong number of maxcolors');
            return false;
        }

        // XXX: check color content and convert to grayscale if insufficient

        var histo = getHisto(pixels),
        histosize = 1 << 3 * sigbits;

        // check that we aren't below maxcolors already
        var nColors = 0;
        histo.forEach(function () {nColors++;});
        if (nColors <= maxcolors) {

        } // XXX: generate the new colors from the histo and return

        // get the beginning vbox from the colors
        var vbox = vboxFromPixels(pixels, histo),
        pq = new PQueue(function (a, b) {return pv.naturalOrder(a.count(), b.count());});
        pq.push(vbox);

        // inner function to do the iteration
        function iter(lh, target) {
            var ncolors = 1,
            niters = 0,
            vbox;
            while (niters < maxIterations) {
                vbox = lh.pop();
                if (!vbox.count()) {/* just put it back */
                    lh.push(vbox);
                    niters++;
                    continue;
                }
                // do the cut
                var vboxes = medianCutApply(histo, vbox),
                vbox1 = vboxes[0],
                vbox2 = vboxes[1];

                if (!vbox1) {
                    //                    console.log("vbox1 not defined; shouldn't happen!");
                    return;
                }
                lh.push(vbox1);
                if (vbox2) {/* vbox2 can be null */
                    lh.push(vbox2);
                    ncolors++;
                }
                if (ncolors >= target) return;
                if (niters++ > maxIterations) {
                    //                    console.log("infinite loop; perhaps too few pixels!");
                    return;
                }
            }
        }

        // first set of colors, sorted by population
        iter(pq, fractByPopulations * maxcolors);

        // Re-sort by the product of pixel occupancy times the size in color space.
        var pq2 = new PQueue(function (a, b) {
            return pv.naturalOrder(a.count() * a.volume(), b.count() * b.volume());
        });
        while (pq.size()) {
            pq2.push(pq.pop());
        }

        // next set - generate the median cuts using the (npix * vol) sorting.
        iter(pq2, maxcolors - pq2.size());

        // calculate the actual colors
        var cmap = new CMap();
        while (pq2.size()) {
            cmap.push(pq2.pop());
        }

        return cmap;
    }

    return {
        quantize: quantize };

}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbG9yLXRoaWVmLm1pbi5qcyJdLCJuYW1lcyI6WyJDYW52YXNJbWFnZSIsImltYWdlIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ3aWR0aCIsImhlaWdodCIsImRyYXdJbWFnZSIsInByb3RvdHlwZSIsImNsZWFyIiwiY2xlYXJSZWN0IiwidXBkYXRlIiwiaW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZ2V0UGl4ZWxDb3VudCIsImdldEltYWdlRGF0YSIsInJlbW92ZUNhbnZhcyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIkNvbG9yVGhpZWYiLCJnZXRDb2xvciIsInNvdXJjZUltYWdlIiwicXVhbGl0eSIsInBhbGV0dGUiLCJnZXRQYWxldHRlIiwiZG9taW5hbnRDb2xvciIsImNvbG9yQ291bnQiLCJwaXhlbHMiLCJkYXRhIiwicGl4ZWxDb3VudCIsInBpeGVsQXJyYXkiLCJpIiwib2Zmc2V0IiwiciIsImciLCJiIiwiYSIsInB1c2giLCJjbWFwIiwiTU1DUSIsInF1YW50aXplIiwicHYiLCJtYXAiLCJhcnJheSIsImYiLCJvIiwiZCIsImluZGV4IiwiY2FsbCIsInNsaWNlIiwibmF0dXJhbE9yZGVyIiwic3VtIiwicmVkdWNlIiwicCIsIm1heCIsIk1hdGgiLCJhcHBseSIsInNpZ2JpdHMiLCJyc2hpZnQiLCJtYXhJdGVyYXRpb25zIiwiZnJhY3RCeVBvcHVsYXRpb25zIiwiZ2V0Q29sb3JJbmRleCIsIlBRdWV1ZSIsImNvbXBhcmF0b3IiLCJjb250ZW50cyIsInNvcnRlZCIsInNvcnQiLCJwZWVrIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicG9wIiwic2l6ZSIsImRlYnVnIiwiVkJveCIsInIxIiwicjIiLCJnMSIsImcyIiwiYjEiLCJiMiIsImhpc3RvIiwidmJveCIsInZvbHVtZSIsImZvcmNlIiwiX3ZvbHVtZSIsImNvdW50IiwiX2NvdW50X3NldCIsIm5waXgiLCJqIiwiayIsIl9jb3VudCIsImNvcHkiLCJhdmciLCJfYXZnIiwibnRvdCIsIm11bHQiLCJyc3VtIiwiZ3N1bSIsImJzdW0iLCJodmFsIiwiaGlzdG9pbmRleCIsImNvbnRhaW5zIiwicGl4ZWwiLCJydmFsIiwiZ3ZhbCIsImJ2YWwiLCJDTWFwIiwidmJveGVzIiwiY29sb3IiLCJ2YiIsIm5lYXJlc3QiLCJkMSIsImQyIiwicENvbG9yIiwic3FydCIsInBvdyIsImZvcmNlYnciLCJsb3dlc3QiLCJpZHgiLCJoaWdoZXN0IiwiZ2V0SGlzdG8iLCJoaXN0b3NpemUiLCJBcnJheSIsImZvckVhY2giLCJ2Ym94RnJvbVBpeGVscyIsInJtaW4iLCJybWF4IiwiZ21pbiIsImdtYXgiLCJibWluIiwiYm1heCIsIm1lZGlhbkN1dEFwcGx5IiwicnciLCJndyIsImJ3IiwibWF4dyIsInRvdGFsIiwicGFydGlhbHN1bSIsImxvb2thaGVhZHN1bSIsImRvQ3V0IiwiZGltMSIsImRpbTIiLCJsZWZ0IiwicmlnaHQiLCJ2Ym94MSIsInZib3gyIiwiY291bnQyIiwibWluIiwibWF4Y29sb3JzIiwibkNvbG9ycyIsInBxIiwiaXRlciIsImxoIiwidGFyZ2V0IiwibmNvbG9ycyIsIm5pdGVycyIsInBxMiJdLCJtYXBwaW5ncyI6ImNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7Ozs7OztBQU1BLElBQUlBLGNBQWMsU0FBZEEsV0FBYyxDQUFVQyxLQUFWLEVBQWlCO0FBQy9CLFNBQUtDLE1BQUwsR0FBZUMsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEtBQUtILE1BQUwsQ0FBWUksVUFBWixDQUF1QixJQUF2QixDQUFmOztBQUVBSCxhQUFTSSxJQUFULENBQWNDLFdBQWQsQ0FBMEIsS0FBS04sTUFBL0I7O0FBRUEsU0FBS08sS0FBTCxHQUFjLEtBQUtQLE1BQUwsQ0FBWU8sS0FBWixHQUFxQlIsTUFBTVEsS0FBekM7QUFDQSxTQUFLQyxNQUFMLEdB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TUFBSixDQUFXLFVBQVMxQixDQUFULEVBQVdELENBQVgsRUFBYztBQUMvQixtQkFBT00sR0FBR1MsWUFBSCxDQUFnQmQsRUFBRWlELEtBQUYsS0FBVWpELEVBQUU4QyxNQUFGLEVBQTFCLEVBQXNDL0MsRUFBRWtELEtBQUYsS0FBVWxELEVBQUUrQyxNQUFGLEVBQWhELENBQVA7QUFDSCxTQUZTLENBQVY7QUFHQSxlQUFPb0UsR0FBRy9FLElBQUgsRUFBUCxFQUFrQjtBQUNkcUYsZ0JBQUl2SCxJQUFKLENBQVNpSCxHQUFHaEYsR0FBSCxFQUFUO0FBQ0g7O0FBRUQ7QUFDQWlGLGFBQUtLLEdBQUwsRUFBVVIsWUFBWVEsSUFBSXJGLElBQUosRUFBdEI7O0FBRUE7QUFDQSxZQUFJakMsT0FBTyxJQUFJb0UsSUFBSixFQUFYO0FBQ0EsZUFBT2tELElBQUlyRixJQUFKLEVBQVAsRUFBbUI7QUFDZmpDLGlCQUFLRCxJQUFMLENBQVV1SCxJQUFJdEYsR0FBSixFQUFWO0FBQ0g7O0FBRUQsZUFBT2hDLElBQVA7QUFDSDs7QUFFRCxXQUFPO0FBQ0hFLGtCQUFVQSxRQURQLEVBQVA7O0FBR0gsQ0FoYVUsRUFBWCIsImZpbGUiOiJjb2xvci10aGllZi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvbG9yIFRoaWVmIHYyLjBcbiAqIGJ5IExva2VzaCBEaGFrYXIgLSBodHRwOi8vd3d3Lmxva2VzaGRoYWthci5jb21cbiAqXG4gKiBUaGFua3NcbiAqIC0tLS0tLVxuICogTmljayBSYWJpbm93aXR6IC0gRm9yIGNyZWF0aW5nIHF1YW50aXplLmpzLlxuICogSm9obiBTY2h1bHogLSBGb3IgY2xlYW4gdXAgYW5kIG9wdGltaXphdGlvbi4gQEpGU0lJSVxuICogTmF0aGFuIFNwYWR5IC0gRm9yIGFkZGluZyBkcmFnIGFuZCBkcm9wIHN1cHBvcnQgdG8gdGhlIGRlbW8gcGFnZS5cbiAqXG4gKiBMaWNlbnNlXG4gKiAtLS0tLS0tXG4gKiBDb3B5cmlnaHQgMjAxMSwgMjAxNSBMb2tlc2ggRGhha2FyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sb2tlc2gvY29sb3ItdGhpZWYvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKi9cblxuXG4vKlxuICBDYW52YXNJbWFnZSBDbGFzc1xuICBDbGFzcyB0aGF0IHdyYXBzIHRoZSBodG1sIGltYWdlIGVsZW1lbnQgYW5kIGNhbnZhcy5cbiAgSXQgYWxzbyBzaW1wbGlmaWVzIHNvbWUgb2YgdGhlIGNhbnZhcyBjb250ZXh0IG1hbmlwdWxhdGlvblxuICB3aXRoIGEgc2V0IG9mIGhlbHBlciBmdW5jdGlvbnMuXG4qL1xudmFyIENhbnZhc0ltYWdlID0gZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgdGhpcy5jYW52YXMgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuXG4gICAgdGhpcy53aWR0aCAgPSB0aGlzLmNhbnZhcy53aWR0aCAgPSBpbWFnZS53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cbkNhbnZhc0ltYWdlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cbkNhbnZhc0ltYWdlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgdGhpcy5jb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xufTtcblxuQ2FudmFzSW1hZ2UucHJvdG90eXBlLmdldFBpeGVsQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDtcbn07XG5cbkNhbnZhc0ltYWdlLnByb3RvdHlwZS5nZXRJbWFnZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuQ2FudmFzSW1hZ2UucHJvdG90eXBlLnJlbW92ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtcbn07XG5cblxudmFyIENvbG9yVGhpZWYgPSBmdW5jdGlvbiAoKSB7fTtcblxuLypcbiAqIGdldENvbG9yKHNvdXJjZUltYWdlWywgcXVhbGl0eV0pXG4gKiByZXR1cm5zIHtyOiBudW0sIGc6IG51bSwgYjogbnVtfVxuICpcbiAqIFVzZSB0aGUgbWVkaWFuIGN1dCBhbGdvcml0aG0gcHJvdmlkZWQgYnkgcXVhbnRpemUuanMgdG8gY2x1c3RlciBzaW1pbGFyXG4gKiBjb2xvcnMgYW5kIHJldHVybiB0aGUgYmFzZSBjb2xvciBmcm9tIHRoZSBsYXJnZXN0IGNsdXN0ZXIuXG4gKlxuICogUXVhbGl0eSBpcyBhbiBvcHRpb25hbCBhcmd1bWVudC4gSXQgbmVlZHMgdG8gYmUgYW4gaW50ZWdlci4gMSBpcyB0aGUgaGlnaGVzdCBxdWFsaXR5IHNldHRpbmdzLlxuICogMTAgaXMgdGhlIGRlZmF1bHQuIFRoZXJlIGlzIGEgdHJhZGUtb2ZmIGJldHdlZW4gcXVhbGl0eSBhbmQgc3BlZWQuIFRoZSBiaWdnZXIgdGhlIG51bWJlciwgdGhlXG4gKiBmYXN0ZXIgYSBjb2xvciB3aWxsIGJlIHJldHVybmVkIGJ1dCB0aGUgZ3JlYXRlciB0aGUgbGlrZWxpaG9vZCB0aGF0IGl0IHdpbGwgbm90IGJlIHRoZSB2aXN1YWxseVxuICogbW9zdCBkb21pbmFudCBjb2xvci5cbiAqXG4gKiAqL1xuQ29sb3JUaGllZi5wcm90b3R5cGUuZ2V0Q29sb3IgPSBmdW5jdGlvbihzb3VyY2VJbWFnZSwgcXVhbGl0eSkge1xuICAgIHZhciBwYWxldHRlICAgICAgID0gdGhpcy5nZXRQYWxldHRlKHNvdXJjZUltYWdlLCA1LCBxdWFsaXR5KTtcbiAgICB2YXIgZG9taW5hbnRDb2xvciA9IHBhbGV0dGVbMF07XG4gICAgcmV0dXJuIGRvbWluYW50Q29sb3I7XG59O1xuXG5cbi8qXG4gKiBnZXRQYWxldHRlKHNvdXJjZUltYWdlWywgY29sb3JDb3VudCwgcXVhbGl0eV0pXG4gKiByZXR1cm5zIGFycmF5WyB7cjogbnVtLCBnOiBudW0sIGI6IG51bX0sIHtyOiBudW0sIGc6IG51bSwgYjogbnVtfSwgLi4uXVxuICpcbiAqIFVzZSB0aGUgbWVkaWFuIGN1dCBhbGdvcml0aG0gcHJvdmlkZWQgYnkgcXVhbnRpemUuanMgdG8gY2x1c3RlciBzaW1pbGFyIGNvbG9ycy5cbiAqXG4gKiBjb2xvckNvdW50IGRldGVybWluZXMgdGhlIHNpemUgb2YgdGhlIHBhbGV0dGU7IHRoZSBudW1iZXIgb2YgY29sb3JzIHJldHVybmVkLiBJZiBub3Qgc2V0LCBpdFxuICogZGVmYXVsdHMgdG8gMTAuXG4gKlxuICogQlVHR1k6IEZ1bmN0aW9uIGRvZXMgbm90IGFsd2F5cyByZXR1cm4gdGhlIHJlcXVlc3RlZCBhbW91bnQgb2YgY29sb3JzLiBJdCBjYW4gYmUgKy8tIDIuXG4gKlxuICogcXVhbGl0eSBpcyBhbiBvcHRpb25hbCBhcmd1bWVudC4gSXQgbmVlZHMgdG8gYmUgYW4gaW50ZWdlci4gMSBpcyB0aGUgaGlnaGVzdCBxdWFsaXR5IHNldHRpbmdzLlxuICogMTAgaXMgdGhlIGRlZmF1bHQuIFRoZXJlIGlzIGEgdHJhZGUtb2ZmIGJldHdlZW4gcXVhbGl0eSBhbmQgc3BlZWQuIFRoZSBiaWdnZXIgdGhlIG51bWJlciwgdGhlXG4gKiBmYXN0ZXIgdGhlIHBhbGV0dGUgZ2VuZXJhdGlvbiBidXQgdGhlIGdyZWF0ZXIgdGhlIGxpa2VsaWhvb2QgdGhhdCBjb2xvcnMgd2lsbCBiZSBtaXNzZWQuXG4gKlxuICpcbiAqL1xuQ29sb3JUaGllZi5wcm90b3R5cGUuZ2V0UGFsZXR0ZSA9IGZ1bmN0aW9uKHNvdXJjZUltYWdlLCBjb2xvckNvdW50LCBxdWFsaXR5KSB7XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yQ291bnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbG9yQ291bnQgPSAxMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBxdWFsaXR5ID09PSAndW5kZWZpbmVkJyB8fCBxdWFsaXR5IDwgMSkge1xuICAgICAgICBxdWFsaXR5ID0gMTA7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGN1c3RvbSBDYW52YXNJbWFnZSBvYmplY3RcbiAgICB2YXIgaW1hZ2UgICAgICA9IG5ldyBDYW52YXNJbWFnZShzb3VyY2VJbWFnZSk7XG4gICAgdmFyIGltYWdlRGF0YSAgPSBpbWFnZS5nZXRJbWFnZURhdGEoKTtcbiAgICB2YXIgcGl4ZWxzICAgICA9IGltYWdlRGF0YS5kYXRhO1xuICAgIHZhciBwaXhlbENvdW50ID0gaW1hZ2UuZ2V0UGl4ZWxDb3VudCgpO1xuXG4gICAgLy8gU3RvcmUgdGhlIFJHQiB2YWx1ZXMgaW4gYW4gYXJyYXkgZm9ybWF0IHN1aXRhYmxlIGZvciBxdWFudGl6ZSBmdW5jdGlvblxuICAgIHZhciBwaXhlbEFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG9mZnNldCwgciwgZywgYiwgYTsgaSA8IHBpeGVsQ291bnQ7IGkgPSBpICsgcXVhbGl0eSkge1xuICAgICAgICBvZmZzZXQgPSBpICogNDtcbiAgICAgICAgciA9IHBpeGVsc1tvZmZzZXQgKyAwXTtcbiAgICAgICAgZyA9IHBpeGVsc1tvZmZzZXQgKyAxXTtcbiAgICAgICAgYiA9IHBpeGVsc1tvZmZzZXQgKyAyXTtcbiAgICAgICAgYSA9IHBpeGVsc1tvZmZzZXQgKyAzXTtcbiAgICAgICAgLy8gSWYgcGl4ZWwgaXMgbW9zdGx5IG9wYXF1ZSBhbmQgbm90IHdoaXRlXG4gICAgICAgIGlmIChhID49IDEyNSkge1xuICAgICAgICAgICAgaWYgKCEociA+IDI1MCAmJiBnID4gMjUwICYmIGIgPiAyNTApKSB7XG4gICAgICAgICAgICAgICAgcGl4ZWxBcnJheS5wdXNoKFtyLCBnLCBiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZW5kIGFycmF5IHRvIHF1YW50aXplIGZ1bmN0aW9uIHdoaWNoIGNsdXN0ZXJzIHZhbHVlc1xuICAgIC8vIHVzaW5nIG1lZGlhbiBjdXQgYWxnb3JpdGhtXG4gICAgdmFyIGNtYXAgICAgPSBNTUNRLnF1YW50aXplKHBpeGVsQXJyYXksIGNvbG9yQ291bnQpO1xuICAgIHZhciBwYWxldHRlID0gY21hcD8gY21hcC5wYWxldHRlKCkgOiBudWxsO1xuXG4gICAgLy8gQ2xlYW4gdXBcbiAgICBpbWFnZS5yZW1vdmVDYW52YXMoKTtcblxuICAgIHJldHVybiBwYWxldHRlO1xufTtcblxuXG5cblxuLyohXG4gKiBxdWFudGl6ZS5qcyBDb3B5cmlnaHQgMjAwOCBOaWNrIFJhYmlub3dpdHouXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gKi9cblxuLy8gZmlsbCBvdXQgYSBjb3VwbGUgcHJvdG92aXMgZGVwZW5kZW5jaWVzXG4vKiFcbiAqIEJsb2NrIGJlbG93IGNvcGllZCBmcm9tIFByb3RvdmlzOiBodHRwOi8vbWJvc3RvY2suZ2l0aHViLmNvbS9wcm90b3Zpcy9cbiAqIENvcHlyaWdodCAyMDEwIFN0YW5mb3JkIFZpc3VhbGl6YXRpb24gR3JvdXBcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgTGljZW5zZTogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHBcbiAqL1xuaWYgKCFwdikge1xuICAgIHZhciBwdiA9IHtcbiAgICAgICAgbWFwOiBmdW5jdGlvbihhcnJheSwgZikge1xuICAgICAgICAgIHZhciBvID0ge307XG4gICAgICAgICAgcmV0dXJuIGYgPyBhcnJheS5tYXAoZnVuY3Rpb24oZCwgaSkgeyBvLmluZGV4ID0gaTsgcmV0dXJuIGYuY2FsbChvLCBkKTsgfSkgOiBhcnJheS5zbGljZSgpO1xuICAgICAgICB9LFxuICAgICAgICBuYXR1cmFsT3JkZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiAoYSA8IGIpID8gLTEgOiAoKGEgPiBiKSA/IDEgOiAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3VtOiBmdW5jdGlvbihhcnJheSwgZikge1xuICAgICAgICAgIHZhciBvID0ge307XG4gICAgICAgICAgcmV0dXJuIGFycmF5LnJlZHVjZShmID8gZnVuY3Rpb24ocCwgZCwgaSkgeyBvLmluZGV4ID0gaTsgcmV0dXJuIHAgKyBmLmNhbGwobywgZCk7IH0gOiBmdW5jdGlvbihwLCBkKSB7IHJldHVybiBwICsgZDsgfSwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1heDogZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZiA/IHB2Lm1hcChhcnJheSwgZikgOiBhcnJheSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5cblxuLyoqXG4gKiBCYXNpYyBKYXZhc2NyaXB0IHBvcnQgb2YgdGhlIE1NQ1EgKG1vZGlmaWVkIG1lZGlhbiBjdXQgcXVhbnRpemF0aW9uKVxuICogYWxnb3JpdGhtIGZyb20gdGhlIExlcHRvbmljYSBsaWJyYXJ5IChodHRwOi8vd3d3LmxlcHRvbmljYS5jb20vKS5cbiAqIFJldHVybnMgYSBjb2xvciBtYXAgeW91IGNhbiB1c2UgdG8gbWFwIG9yaWdpbmFsIHBpeGVscyB0byB0aGUgcmVkdWNlZFxuICogcGFsZXR0ZS4gU3RpbGwgYSB3b3JrIGluIHByb2dyZXNzLlxuICpcbiAqIEBhdXRob3IgTmljayBSYWJpbm93aXR6XG4gKiBAZXhhbXBsZVxuXG4vLyBhcnJheSBvZiBwaXhlbHMgYXMgW1IsRyxCXSBhcnJheXNcbnZhciBteVBpeGVscyA9IFtbMTkwLDE5NywxOTBdLCBbMjAyLDIwNCwyMDBdLCBbMjA3LDIxNCwyMTBdLCBbMjExLDIxNCwyMTFdLCBbMjA1LDIwNywyMDddXG4gICAgICAgICAgICAgICAgLy8gZXRjXG4gICAgICAgICAgICAgICAgXTtcbnZhciBtYXhDb2xvcnMgPSA0O1xuXG52YXIgY21hcCA9IE1NQ1EucXVhbnRpemUobXlQaXhlbHMsIG1heENvbG9ycyk7XG52YXIgbmV3UGFsZXR0ZSA9IGNtYXAucGFsZXR0ZSgpO1xudmFyIG5ld1BpeGVscyA9IG15UGl4ZWxzLm1hcChmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNtYXAubWFwKHApO1xufSk7XG5cbiAqL1xudmFyIE1NQ1EgPSAoZnVuY3Rpb24oKSB7XG4gICAgLy8gcHJpdmF0ZSBjb25zdGFudHNcbiAgICB2YXIgc2lnYml0cyA9IDUsXG4gICAgICAgIHJzaGlmdCA9IDggLSBzaWdiaXRzLFxuICAgICAgICBtYXhJdGVyYXRpb25zID0gMTAwMCxcbiAgICAgICAgZnJhY3RCeVBvcHVsYXRpb25zID0gMC43NTtcblxuICAgIC8vIGdldCByZWR1Y2VkLXNwYWNlIGNvbG9yIGluZGV4IGZvciBhIHBpeGVsXG4gICAgZnVuY3Rpb24gZ2V0Q29sb3JJbmRleChyLCBnLCBiKSB7XG4gICAgICAgIGlmIChyID09PSAwICYmIGcgPT09IDAgJiYgYiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChyIDw8ICgyICogc2lnYml0cykpICsgKGcgPDwgc2lnYml0cykgKyBiO1xuICAgIH1cblxuICAgIC8vIFNpbXBsZSBwcmlvcml0eSBxdWV1ZVxuICAgIGZ1bmN0aW9uIFBRdWV1ZShjb21wYXJhdG9yKSB7XG4gICAgICAgIHZhciBjb250ZW50cyA9IFtdLFxuICAgICAgICAgICAgc29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gc29ydCgpIHtcbiAgICAgICAgICAgIGNvbnRlbnRzLnNvcnQoY29tcGFyYXRvcik7XG4gICAgICAgICAgICBzb3J0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICBjb250ZW50cy5wdXNoKG8pO1xuICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlZWs6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzb3J0ZWQpIHNvcnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXg9PT11bmRlZmluZWQpIGluZGV4ID0gY29udGVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHNbaW5kZXhdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzb3J0ZWQpIHNvcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHMucG9wKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXA6IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHMubWFwKGYpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYnVnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNvcnRlZCkgc29ydCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyAzZCBjb2xvciBzcGFjZSBib3hcbiAgICBmdW5jdGlvbiBWQm94KHIxLCByMiwgZzEsIGcyLCBiMSwgYjIsIGhpc3RvKSB7XG4gICAgICAgIHZhciB2Ym94ID0gdGhpcztcbiAgICAgICAgdmJveC5yMSA9IHIxO1xuICAgICAgICB2Ym94LnIyID0gcjI7XG4gICAgICAgIHZib3guZzEgPSBnMTtcbiAgICAgICAgdmJveC5nMiA9IGcyO1xuICAgICAgICB2Ym94LmIxID0gYjE7XG4gICAgICAgIHZib3guYjIgPSBiMjtcbiAgICAgICAgdmJveC5oaXN0byA9IGhpc3RvO1xuICAgIH1cbiAgICBWQm94LnByb3RvdHlwZSA9IHtcbiAgICAgICAgdm9sdW1lOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCF2Ym94Ll92b2x1bWUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgICAgICB2Ym94Ll92b2x1bWUgPSAoKHZib3gucjIgLSB2Ym94LnIxICsgMSkgKiAodmJveC5nMiAtIHZib3guZzEgKyAxKSAqICh2Ym94LmIyIC0gdmJveC5iMSArIDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2Ym94Ll92b2x1bWU7XG4gICAgICAgIH0sXG4gICAgICAgIGNvdW50OiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzLFxuICAgICAgICAgICAgICAgIGhpc3RvID0gdmJveC5oaXN0bztcbiAgICAgICAgICAgIGlmICghdmJveC5fY291bnRfc2V0IHx8IGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5waXggPSAwLFxuICAgICAgICAgICAgICAgICAgICBpLCBqLCBrO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IHZib3gucjE7IGkgPD0gdmJveC5yMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3guZzE7IGogPD0gdmJveC5nMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmIxOyBrIDw9IHZib3guYjI7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRDb2xvckluZGV4KGksaixrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnBpeCArPSAoaGlzdG9baW5kZXhdIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZib3guX2NvdW50ID0gbnBpeDtcbiAgICAgICAgICAgICAgICB2Ym94Ll9jb3VudF9zZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZib3guX2NvdW50O1xuICAgICAgICB9LFxuICAgICAgICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB2Ym94ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBuZXcgVkJveCh2Ym94LnIxLCB2Ym94LnIyLCB2Ym94LmcxLCB2Ym94LmcyLCB2Ym94LmIxLCB2Ym94LmIyLCB2Ym94Lmhpc3RvKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXZnOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICAgICAgdmFyIHZib3ggPSB0aGlzLFxuICAgICAgICAgICAgICAgIGhpc3RvID0gdmJveC5oaXN0bztcbiAgICAgICAgICAgIGlmICghdmJveC5fYXZnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG50b3QgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtdWx0ID0gMSA8PCAoOCAtIHNpZ2JpdHMpLFxuICAgICAgICAgICAgICAgICAgICByc3VtID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZ3N1bSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGJzdW0gPSAwLFxuICAgICAgICAgICAgICAgICAgICBodmFsLFxuICAgICAgICAgICAgICAgICAgICBpLCBqLCBrLCBoaXN0b2luZGV4O1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IHZib3gucjE7IGkgPD0gdmJveC5yMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3guZzE7IGogPD0gdmJveC5nMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmIxOyBrIDw9IHZib3guYjI7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGlzdG9pbmRleCA9IGdldENvbG9ySW5kZXgoaSxqLGspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodmFsID0gaGlzdG9baGlzdG9pbmRleF0gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnRvdCArPSBodmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByc3VtICs9IChodmFsICogKGkgKyAwLjUpICogbXVsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdzdW0gKz0gKGh2YWwgKiAoaiArIDAuNSkgKiBtdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnN1bSArPSAoaHZhbCAqIChrICsgMC41KSAqIG11bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChudG90KSB7XG4gICAgICAgICAgICAgICAgICAgIHZib3guX2F2ZyA9IFt+fihyc3VtL250b3QpLCB+fihnc3VtL250b3QpLCB+fihic3VtL250b3QpXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbXB0eSBib3gnKTtcbiAgICAgICAgICAgICAgICAgICAgdmJveC5fYXZnID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgfn4obXVsdCAqICh2Ym94LnIxICsgdmJveC5yMiArIDEpIC8gMiksXG4gICAgICAgICAgICAgICAgICAgICAgICB+fihtdWx0ICogKHZib3guZzEgKyB2Ym94LmcyICsgMSkgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH5+KG11bHQgKiAodmJveC5iMSArIHZib3guYjIgKyAxKSAvIDIpXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZib3guX2F2ZztcbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICAgICB2YXIgdmJveCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcnZhbCA9IHBpeGVsWzBdID4+IHJzaGlmdDtcbiAgICAgICAgICAgICAgICBndmFsID0gcGl4ZWxbMV0gPj4gcnNoaWZ0O1xuICAgICAgICAgICAgICAgIGJ2YWwgPSBwaXhlbFsyXSA+PiByc2hpZnQ7XG4gICAgICAgICAgICByZXR1cm4gKHJ2YWwgPj0gdmJveC5yMSAmJiBydmFsIDw9IHZib3gucjIgJiZcbiAgICAgICAgICAgICAgICAgICAgZ3ZhbCA+PSB2Ym94LmcxICYmIGd2YWwgPD0gdmJveC5nMiAmJlxuICAgICAgICAgICAgICAgICAgICBidmFsID49IHZib3guYjEgJiYgYnZhbCA8PSB2Ym94LmIyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDb2xvciBtYXBcbiAgICBmdW5jdGlvbiBDTWFwKCkge1xuICAgICAgICB0aGlzLnZib3hlcyA9IG5ldyBQUXVldWUoZnVuY3Rpb24oYSxiKSB7XG4gICAgICAgICAgICByZXR1cm4gcHYubmF0dXJhbE9yZGVyKFxuICAgICAgICAgICAgICAgIGEudmJveC5jb3VudCgpKmEudmJveC52b2x1bWUoKSxcbiAgICAgICAgICAgICAgICBiLnZib3guY291bnQoKSpiLnZib3gudm9sdW1lKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBDTWFwLnByb3RvdHlwZSA9IHtcbiAgICAgICAgcHVzaDogZnVuY3Rpb24odmJveCkge1xuICAgICAgICAgICAgdGhpcy52Ym94ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdmJveDogdmJveCxcbiAgICAgICAgICAgICAgICBjb2xvcjogdmJveC5hdmcoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBhbGV0dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmJveGVzLm1hcChmdW5jdGlvbih2YikgeyByZXR1cm4gdmIuY29sb3I7IH0pO1xuICAgICAgICB9LFxuICAgICAgICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZib3hlcy5zaXplKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogZnVuY3Rpb24oY29sb3IpIHtcbiAgICAgICAgICAgIHZhciB2Ym94ZXMgPSB0aGlzLnZib3hlcztcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTx2Ym94ZXMuc2l6ZSgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodmJveGVzLnBlZWsoaSkudmJveC5jb250YWlucyhjb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZib3hlcy5wZWVrKGkpLmNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5lYXJlc3QoY29sb3IpO1xuICAgICAgICB9LFxuICAgICAgICBuZWFyZXN0OiBmdW5jdGlvbihjb2xvcikge1xuICAgICAgICAgICAgdmFyIHZib3hlcyA9IHRoaXMudmJveGVzLFxuICAgICAgICAgICAgICAgIGQxLCBkMiwgcENvbG9yO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHZib3hlcy5zaXplKCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGQyID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhjb2xvclswXSAtIHZib3hlcy5wZWVrKGkpLmNvbG9yWzBdLCAyKSArXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGNvbG9yWzFdIC0gdmJveGVzLnBlZWsoaSkuY29sb3JbMV0sIDIpICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coY29sb3JbMl0gLSB2Ym94ZXMucGVlayhpKS5jb2xvclsyXSwgMilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChkMiA8IGQxIHx8IGQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZDEgPSBkMjtcbiAgICAgICAgICAgICAgICAgICAgcENvbG9yID0gdmJveGVzLnBlZWsoaSkuY29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBDb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgZm9yY2VidzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBYWFg6IHdvbid0ICB3b3JrIHlldFxuICAgICAgICAgICAgdmFyIHZib3hlcyA9IHRoaXMudmJveGVzO1xuICAgICAgICAgICAgdmJveGVzLnNvcnQoZnVuY3Rpb24oYSxiKSB7IHJldHVybiBwdi5uYXR1cmFsT3JkZXIocHYuc3VtKGEuY29sb3IpLCBwdi5zdW0oYi5jb2xvcikpO30pO1xuXG4gICAgICAgICAgICAvLyBmb3JjZSBkYXJrZXN0IGNvbG9yIHRvIGJsYWNrIGlmIGV2ZXJ5dGhpbmcgPCA1XG4gICAgICAgICAgICB2YXIgbG93ZXN0ID0gdmJveGVzWzBdLmNvbG9yO1xuICAgICAgICAgICAgaWYgKGxvd2VzdFswXSA8IDUgJiYgbG93ZXN0WzFdIDwgNSAmJiBsb3dlc3RbMl0gPCA1KVxuICAgICAgICAgICAgICAgIHZib3hlc1swXS5jb2xvciA9IFswLDAsMF07XG5cbiAgICAgICAgICAgIC8vIGZvcmNlIGxpZ2h0ZXN0IGNvbG9yIHRvIHdoaXRlIGlmIGV2ZXJ5dGhpbmcgPiAyNTFcbiAgICAgICAgICAgIHZhciBpZHggPSB2Ym94ZXMubGVuZ3RoLTEsXG4gICAgICAgICAgICAgICAgaGlnaGVzdCA9IHZib3hlc1tpZHhdLmNvbG9yO1xuICAgICAgICAgICAgaWYgKGhpZ2hlc3RbMF0gPiAyNTEgJiYgaGlnaGVzdFsxXSA+IDI1MSAmJiBoaWdoZXN0WzJdID4gMjUxKVxuICAgICAgICAgICAgICAgIHZib3hlc1tpZHhdLmNvbG9yID0gWzI1NSwyNTUsMjU1XTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBoaXN0byAoMS1kIGFycmF5LCBnaXZpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMgaW5cbiAgICAvLyBlYWNoIHF1YW50aXplZCByZWdpb24gb2YgY29sb3Igc3BhY2UpLCBvciBudWxsIG9uIGVycm9yXG4gICAgZnVuY3Rpb24gZ2V0SGlzdG8ocGl4ZWxzKSB7XG4gICAgICAgIHZhciBoaXN0b3NpemUgPSAxIDw8ICgzICogc2lnYml0cyksXG4gICAgICAgICAgICBoaXN0byA9IG5ldyBBcnJheShoaXN0b3NpemUpLFxuICAgICAgICAgICAgaW5kZXgsIHJ2YWwsIGd2YWwsIGJ2YWw7XG4gICAgICAgIHBpeGVscy5mb3JFYWNoKGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICAgICBydmFsID0gcGl4ZWxbMF0gPj4gcnNoaWZ0O1xuICAgICAgICAgICAgZ3ZhbCA9IHBpeGVsWzFdID4+IHJzaGlmdDtcbiAgICAgICAgICAgIGJ2YWwgPSBwaXhlbFsyXSA+PiByc2hpZnQ7XG4gICAgICAgICAgICBpbmRleCA9IGdldENvbG9ySW5kZXgocnZhbCwgZ3ZhbCwgYnZhbCk7XG4gICAgICAgICAgICBoaXN0b1tpbmRleF0gPSAoaGlzdG9baW5kZXhdIHx8IDApICsgMTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBoaXN0bztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2Ym94RnJvbVBpeGVscyhwaXhlbHMsIGhpc3RvKSB7XG4gICAgICAgIHZhciBybWluPTEwMDAwMDAsIHJtYXg9MCxcbiAgICAgICAgICAgIGdtaW49MTAwMDAwMCwgZ21heD0wLFxuICAgICAgICAgICAgYm1pbj0xMDAwMDAwLCBibWF4PTAsXG4gICAgICAgICAgICBydmFsLCBndmFsLCBidmFsO1xuICAgICAgICAvLyBmaW5kIG1pbi9tYXhcbiAgICAgICAgcGl4ZWxzLmZvckVhY2goZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgICAgICAgIHJ2YWwgPSBwaXhlbFswXSA+PiByc2hpZnQ7XG4gICAgICAgICAgICBndmFsID0gcGl4ZWxbMV0gPj4gcnNoaWZ0O1xuICAgICAgICAgICAgYnZhbCA9IHBpeGVsWzJdID4+IHJzaGlmdDtcbiAgICAgICAgICAgIGlmIChydmFsIDwgcm1pbikgcm1pbiA9IHJ2YWw7XG4gICAgICAgICAgICBlbHNlIGlmIChydmFsID4gcm1heCkgcm1heCA9IHJ2YWw7XG4gICAgICAgICAgICBpZiAoZ3ZhbCA8IGdtaW4pIGdtaW4gPSBndmFsO1xuICAgICAgICAgICAgZWxzZSBpZiAoZ3ZhbCA+IGdtYXgpIGdtYXggPSBndmFsO1xuICAgICAgICAgICAgaWYgKGJ2YWwgPCBibWluKSBibWluID0gYnZhbDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGJ2YWwgPiBibWF4KSAgYm1heCA9IGJ2YWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFZCb3gocm1pbiwgcm1heCwgZ21pbiwgZ21heCwgYm1pbiwgYm1heCwgaGlzdG8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lZGlhbkN1dEFwcGx5KGhpc3RvLCB2Ym94KSB7XG4gICAgICAgIGlmICghdmJveC5jb3VudCgpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHJ3ID0gdmJveC5yMiAtIHZib3gucjEgKyAxLFxuICAgICAgICAgICAgZ3cgPSB2Ym94LmcyIC0gdmJveC5nMSArIDEsXG4gICAgICAgICAgICBidyA9IHZib3guYjIgLSB2Ym94LmIxICsgMSxcbiAgICAgICAgICAgIG1heHcgPSBwdi5tYXgoW3J3LCBndywgYnddKTtcbiAgICAgICAgLy8gb25seSBvbmUgcGl4ZWwsIG5vIHNwbGl0XG4gICAgICAgIGlmICh2Ym94LmNvdW50KCkgPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIFt2Ym94LmNvcHkoKV07XG4gICAgICAgIH1cbiAgICAgICAgLyogRmluZCB0aGUgcGFydGlhbCBzdW0gYXJyYXlzIGFsb25nIHRoZSBzZWxlY3RlZCBheGlzLiAqL1xuICAgICAgICB2YXIgdG90YWwgPSAwLFxuICAgICAgICAgICAgcGFydGlhbHN1bSA9IFtdLFxuICAgICAgICAgICAgbG9va2FoZWFkc3VtID0gW10sXG4gICAgICAgICAgICBpLCBqLCBrLCBzdW0sIGluZGV4O1xuICAgICAgICBpZiAobWF4dyA9PSBydykge1xuICAgICAgICAgICAgZm9yIChpID0gdmJveC5yMTsgaSA8PSB2Ym94LnIyOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdW0gPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3guZzE7IGogPD0gdmJveC5nMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IHZib3guYjE7IGsgPD0gdmJveC5iMjsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRDb2xvckluZGV4KGksaixrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bSArPSAoaGlzdG9baW5kZXhdIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvdGFsICs9IHN1bTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsc3VtW2ldID0gdG90YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF4dyA9PSBndykge1xuICAgICAgICAgICAgZm9yIChpID0gdmJveC5nMTsgaSA8PSB2Ym94LmcyOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdW0gPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHZib3gucjE7IGogPD0gdmJveC5yMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IHZib3guYjE7IGsgPD0gdmJveC5iMjsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGdldENvbG9ySW5kZXgoaixpLGspO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IChoaXN0b1tpbmRleF0gfHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gc3VtO1xuICAgICAgICAgICAgICAgIHBhcnRpYWxzdW1baV0gPSB0b3RhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgIC8qIG1heHcgPT0gYncgKi9cbiAgICAgICAgICAgIGZvciAoaSA9IHZib3guYjE7IGkgPD0gdmJveC5iMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3VtID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSB2Ym94LnIxOyBqIDw9IHZib3gucjI7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSB2Ym94LmcxOyBrIDw9IHZib3guZzI7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBnZXRDb2xvckluZGV4KGosayxpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bSArPSAoaGlzdG9baW5kZXhdIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvdGFsICs9IHN1bTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsc3VtW2ldID0gdG90YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFydGlhbHN1bS5mb3JFYWNoKGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAgICAgbG9va2FoZWFkc3VtW2ldID0gdG90YWwtZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGRvQ3V0KGNvbG9yKSB7XG4gICAgICAgICAgICB2YXIgZGltMSA9IGNvbG9yICsgJzEnLFxuICAgICAgICAgICAgICAgIGRpbTIgPSBjb2xvciArICcyJyxcbiAgICAgICAgICAgICAgICBsZWZ0LCByaWdodCwgdmJveDEsIHZib3gyLCBkMiwgY291bnQyPTA7XG4gICAgICAgICAgICBmb3IgKGkgPSB2Ym94W2RpbTFdOyBpIDw9IHZib3hbZGltMl07IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWFsc3VtW2ldID4gdG90YWwgLyAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZib3gxID0gdmJveC5jb3B5KCk7XG4gICAgICAgICAgICAgICAgICAgIHZib3gyID0gdmJveC5jb3B5KCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpIC0gdmJveFtkaW0xXTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB2Ym94W2RpbTJdIC0gaTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnQgPD0gcmlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICBkMiA9IE1hdGgubWluKHZib3hbZGltMl0gLSAxLCB+fihpICsgcmlnaHQgLyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgZDIgPSBNYXRoLm1heCh2Ym94W2RpbTFdLCB+fihpIC0gMSAtIGxlZnQgLyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIDAtY291bnQgYm94ZXNcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFwYXJ0aWFsc3VtW2QyXSkgZDIrKztcbiAgICAgICAgICAgICAgICAgICAgY291bnQyID0gbG9va2FoZWFkc3VtW2QyXTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFjb3VudDIgJiYgcGFydGlhbHN1bVtkMi0xXSkgY291bnQyID0gbG9va2FoZWFkc3VtWy0tZDJdO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgICAgICB2Ym94MVtkaW0yXSA9IGQyO1xuICAgICAgICAgICAgICAgICAgICB2Ym94MltkaW0xXSA9IHZib3gxW2RpbTJdICsgMTtcbi8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndmJveCBjb3VudHM6JywgdmJveC5jb3VudCgpLCB2Ym94MS5jb3VudCgpLCB2Ym94Mi5jb3VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2Ym94MSwgdmJveDJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgY3V0IHBsYW5lc1xuICAgICAgICByZXR1cm4gbWF4dyA9PSBydyA/IGRvQ3V0KCdyJykgOlxuICAgICAgICAgICAgbWF4dyA9PSBndyA/IGRvQ3V0KCdnJykgOlxuICAgICAgICAgICAgZG9DdXQoJ2InKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBxdWFudGl6ZShwaXhlbHMsIG1heGNvbG9ycykge1xuICAgICAgICAvLyBzaG9ydC1jaXJjdWl0XG4gICAgICAgIGlmICghcGl4ZWxzLmxlbmd0aCB8fCBtYXhjb2xvcnMgPCAyIHx8IG1heGNvbG9ycyA+IDI1Nikge1xuLy8gICAgICAgICAgICBjb25zb2xlLmxvZygnd3JvbmcgbnVtYmVyIG9mIG1heGNvbG9ycycpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWFhYOiBjaGVjayBjb2xvciBjb250ZW50IGFuZCBjb252ZXJ0IHRvIGdyYXlzY2FsZSBpZiBpbnN1ZmZpY2llbnRcblxuICAgICAgICB2YXIgaGlzdG8gPSBnZXRIaXN0byhwaXhlbHMpLFxuICAgICAgICAgICAgaGlzdG9zaXplID0gMSA8PCAoMyAqIHNpZ2JpdHMpO1xuXG4gICAgICAgIC8vIGNoZWNrIHRoYXQgd2UgYXJlbid0IGJlbG93IG1heGNvbG9ycyBhbHJlYWR5XG4gICAgICAgIHZhciBuQ29sb3JzID0gMDtcbiAgICAgICAgaGlzdG8uZm9yRWFjaChmdW5jdGlvbigpIHsgbkNvbG9ycysrOyB9KTtcbiAgICAgICAgaWYgKG5Db2xvcnMgPD0gbWF4Y29sb3JzKSB7XG4gICAgICAgICAgICAvLyBYWFg6IGdlbmVyYXRlIHRoZSBuZXcgY29sb3JzIGZyb20gdGhlIGhpc3RvIGFuZCByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCB0aGUgYmVnaW5uaW5nIHZib3ggZnJvbSB0aGUgY29sb3JzXG4gICAgICAgIHZhciB2Ym94ID0gdmJveEZyb21QaXhlbHMocGl4ZWxzLCBoaXN0byksXG4gICAgICAgICAgICBwcSA9IG5ldyBQUXVldWUoZnVuY3Rpb24oYSxiKSB7IHJldHVybiBwdi5uYXR1cmFsT3JkZXIoYS5jb3VudCgpLCBiLmNvdW50KCkpOyB9KTtcbiAgICAgICAgcHEucHVzaCh2Ym94KTtcblxuICAgICAgICAvLyBpbm5lciBmdW5jdGlvbiB0byBkbyB0aGUgaXRlcmF0aW9uXG4gICAgICAgIGZ1bmN0aW9uIGl0ZXIobGgsIHRhcmdldCkge1xuICAgICAgICAgICAgdmFyIG5jb2xvcnMgPSAxLFxuICAgICAgICAgICAgICAgIG5pdGVycyA9IDAsXG4gICAgICAgICAgICAgICAgdmJveDtcbiAgICAgICAgICAgIHdoaWxlIChuaXRlcnMgPCBtYXhJdGVyYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmJveCA9IGxoLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghdmJveC5jb3VudCgpKSAgeyAvKiBqdXN0IHB1dCBpdCBiYWNrICovXG4gICAgICAgICAgICAgICAgICAgIGxoLnB1c2godmJveCk7XG4gICAgICAgICAgICAgICAgICAgIG5pdGVycysrO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZG8gdGhlIGN1dFxuICAgICAgICAgICAgICAgIHZhciB2Ym94ZXMgPSBtZWRpYW5DdXRBcHBseShoaXN0bywgdmJveCksXG4gICAgICAgICAgICAgICAgICAgIHZib3gxID0gdmJveGVzWzBdLFxuICAgICAgICAgICAgICAgICAgICB2Ym94MiA9IHZib3hlc1sxXTtcblxuICAgICAgICAgICAgICAgIGlmICghdmJveDEpIHtcbi8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInZib3gxIG5vdCBkZWZpbmVkOyBzaG91bGRuJ3QgaGFwcGVuIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsaC5wdXNoKHZib3gxKTtcbiAgICAgICAgICAgICAgICBpZiAodmJveDIpIHsgIC8qIHZib3gyIGNhbiBiZSBudWxsICovXG4gICAgICAgICAgICAgICAgICAgIGxoLnB1c2godmJveDIpO1xuICAgICAgICAgICAgICAgICAgICBuY29sb3JzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuY29sb3JzID49IHRhcmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChuaXRlcnMrKyA+IG1heEl0ZXJhdGlvbnMpIHtcbi8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImluZmluaXRlIGxvb3A7IHBlcmhhcHMgdG9vIGZldyBwaXhlbHMhXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlyc3Qgc2V0IG9mIGNvbG9ycywgc29ydGVkIGJ5IHBvcHVsYXRpb25cbiAgICAgICAgaXRlcihwcSwgZnJhY3RCeVBvcHVsYXRpb25zICogbWF4Y29sb3JzKTtcblxuICAgICAgICAvLyBSZS1zb3J0IGJ5IHRoZSBwcm9kdWN0IG9mIHBpeGVsIG9jY3VwYW5jeSB0aW1lcyB0aGUgc2l6ZSBpbiBjb2xvciBzcGFjZS5cbiAgICAgICAgdmFyIHBxMiA9IG5ldyBQUXVldWUoZnVuY3Rpb24oYSxiKSB7XG4gICAgICAgICAgICByZXR1cm4gcHYubmF0dXJhbE9yZGVyKGEuY291bnQoKSphLnZvbHVtZSgpLCBiLmNvdW50KCkqYi52b2x1bWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAocHEuc2l6ZSgpKSB7XG4gICAgICAgICAgICBwcTIucHVzaChwcS5wb3AoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBuZXh0IHNldCAtIGdlbmVyYXRlIHRoZSBtZWRpYW4gY3V0cyB1c2luZyB0aGUgKG5waXggKiB2b2wpIHNvcnRpbmcuXG4gICAgICAgIGl0ZXIocHEyLCBtYXhjb2xvcnMgLSBwcTIuc2l6ZSgpKTtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGFjdHVhbCBjb2xvcnNcbiAgICAgICAgdmFyIGNtYXAgPSBuZXcgQ01hcCgpO1xuICAgICAgICB3aGlsZSAocHEyLnNpemUoKSkge1xuICAgICAgICAgICAgY21hcC5wdXNoKHBxMi5wb3AoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY21hcDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBxdWFudGl6ZTogcXVhbnRpemVcbiAgICB9O1xufSkoKTtcbiJdfQ==

// localstorage interface

'use strict';
/*jshint multistr: true */

/*globals chrome:false */

/* exported Storage */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

Storage = function () {function Storage() {_classCallCheck(this, Storage);}_createClass(Storage, null, [{ key: 'set', value: function set(
		name, val) {var _this = this;
			return new Promise(function (resolve, reject) {
				try {
					console.log('setting ' + name + ' = ' + JSON.stringify(val));
					var obj = {};
					obj[name] = val;

					if (_this.syncAvailable()) {
						chrome.storage.sync.set(obj, resolve);
					} else {
						localStorage.setItem(name, JSON.stringify(val));
					}

					resolve(name, val); // might be different from sync
				} catch (e) {
					reject(e);
				}
			});
		} }, { key: 'get', value: function get(

		name) {var _this2 = this;
			return new Promise(function (resolve, reject) {
				if (_this2.syncAvailable()) {
					chrome.storage.sync.get(name, function (items) {
						console.log('got storage ' + name + ': ' + items[name]);
						resolve(items[name]);
					});
				} else if (localStorage) {
					var result = null;
					try {
						var b = localStorage.getItem(name);
						if (b === 'undefined') {
							result = undefined;
						} else if (b === 'null') {
							result = null;
						} else {
							result = JSON.parse(b);
						}
					} catch (e) {
						console.log('Error: ' + e);
						result = localStorage.getItem(name);
					}
					resolve(result);
				} else {
					resolve(null);
				}
			});
		} }, { key: 'syncAvailable', value: function syncAvailable()
		{
			return typeof chrome !== 'undefined' &&
			chrome.storage !== undefined &&
			chrome.storage.sync !== undefined;
		} }]);return Storage;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JhZ2UuanMiXSwibmFtZXMiOlsiU3RvcmFnZSIsIm5hbWUiLCJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5Iiwib2JqIiwic3luY0F2YWlsYWJsZSIsImNocm9tZSIsInN0b3JhZ2UiLCJzeW5jIiwic2V0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImUiLCJnZXQiLCJpdGVtcyIsInJlc3VsdCIsImIiLCJnZXRJdGVtIiwidW5kZWZpbmVkIiwicGFyc2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsc0I7O0FBRU1BLE87QUFDT0MsTSxFQUFNQyxHLEVBQUs7QUFDdEIsVUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDLFFBQUk7QUFDREMsYUFBUUMsR0FBUixDQUFZLGFBQWFOLElBQWIsR0FBb0IsS0FBcEIsR0FBNEJPLEtBQUtDLFNBQUwsQ0FBZVAsR0FBZixDQUF4QztBQUNBLFNBQUlRLE1BQU0sRUFBVjtBQUNBQSxTQUFJVCxJQUFKLElBQVlDLEdBQVo7O0FBRUEsU0FBSSxNQUFLUyxhQUFMLEVBQUosRUFBMEI7QUFDM0JDLGFBQU9DLE9BQVAsQ0FBZUMsSUFBZixDQUFvQkMsR0FBcEIsQ0FBd0JMLEdBQXhCLEVBQTZCTixPQUE3QjtBQUNBLE1BRkMsTUFFSztBQUNOWSxtQkFBYUMsT0FBYixDQUFxQmhCLElBQXJCLEVBQTJCTyxLQUFLQyxTQUFMLENBQWVQLEdBQWYsQ0FBM0I7QUFDQTs7QUFFREUsYUFBUUgsSUFBUixFQUFjQyxHQUFkLEVBWEcsQ0FXZ0I7QUFDbkIsS0FaRCxDQVlFLE9BQU1nQixDQUFOLEVBQVM7QUFDVmIsWUFBT2EsQ0FBUDtBQUNBO0FBQ0QsSUFoQk0sQ0FBUDtBQWlCQSxHOztBQUVXakIsTSxFQUFNO0FBQ2pCLFVBQU8sSUFBSUUsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2QyxRQUFJLE9BQUtNLGFBQUwsRUFBSixFQUEwQjtBQUN6QkMsWUFBT0MsT0FBUCxDQUFlQyxJQUFmLENBQW9CSyxHQUFwQixDQUF3QmxCLElBQXhCLEVBQThCLFVBQVVtQixLQUFWLEVBQWlCO0FBQzlDZCxjQUFRQyxHQUFSLENBQVksaUJBQWlCTixJQUFqQixHQUF3QixJQUF4QixHQUErQm1CLE1BQU1uQixJQUFOLENBQTNDO0FBQ0FHLGNBQVFnQixNQUFNbkIsSUFBTixDQUFSO0FBQ0EsTUFIRDtBQUlBLEtBTEQsTUFLTyxJQUFJZSxZQUFKLEVBQWtCO0FBQ3hCLFNBQUlLLFNBQVMsSUFBYjtBQUNBLFNBQUk7QUFDSCxVQUFJQyxJQUFJTixhQUFhTyxPQUFiLENBQXFCdEIsSUFBckIsQ0FBUjtBQUNBLFVBQUlxQixNQUFNLFdBQVYsRUFBdUI7QUFDdEJELGdCQUFTRyxTQUFUO0FBQ0EsT0FGRCxNQUVPLElBQUlGLE1BQU0sTUFBVixFQUFrQjtBQUN4QkQsZ0JBQVMsSUFBVDtBQUNBLE9BRk0sTUFFQTtBQUNOQSxnQkFBU2IsS0FBS2lCLEtBQUwsQ0FBV0gsQ0FBWCxDQUFUO0FBQ0E7QUFDRCxNQVRELENBU0MsT0FBTUosQ0FBTixFQUFTO0FBQ1RaLGNBQVFDLEdBQVIsQ0FBWSxZQUFZVyxDQUF4QjtBQUNBRyxlQUFTTCxhQUFhTyxPQUFiLENBQXFCdEIsSUFBckIsQ0FBVDtBQUNBO0FBQ0RHLGFBQVFpQixNQUFSO0FBQ0EsS0FoQk0sTUFnQkE7QUFDTmpCLGFBQVEsSUFBUjtBQUNBO0FBQ0QsSUF6Qk0sQ0FBUDtBQTBCQSxHO0FBQ3NCO0FBQ3RCLFVBQU8sT0FBT1EsTUFBUCxLQUFtQixXQUFuQjtBQUNIQSxVQUFPQyxPQUFQLEtBQW1CVyxTQURoQjtBQUVIWixVQUFPQyxPQUFQLENBQWVDLElBQWYsS0FBd0JVLFNBRjVCO0FBR0EsRyIsImZpbGUiOiJzdG9yYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbG9jYWxzdG9yYWdlIGludGVyZmFjZVxuXG4ndXNlIHN0cmljdCc7XG4vKmpzaGludCBtdWx0aXN0cjogdHJ1ZSAqL1xuXG4vKmdsb2JhbHMgY2hyb21lOmZhbHNlICovXG5cbi8qIGV4cG9ydGVkIFN0b3JhZ2UgKi9cblxuY2xhc3MgU3RvcmFnZSB7XG5cdHN0YXRpYyBzZXQgKG5hbWUsIHZhbCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0ICBcdGNvbnNvbGUubG9nKCdzZXR0aW5nICcgKyBuYW1lICsgJyA9ICcgKyBKU09OLnN0cmluZ2lmeSh2YWwpKTtcblx0XHRcdCAgXHR2YXIgb2JqID0ge307XG5cdFx0XHQgIFx0b2JqW25hbWVdID0gdmFsO1xuXG5cdFx0XHQgIFx0aWYgKHRoaXMuc3luY0F2YWlsYWJsZSgpKSB7XG5cdFx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQob2JqLCByZXNvbHZlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWwpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc29sdmUobmFtZSwgdmFsKTsvLyBtaWdodCBiZSBkaWZmZXJlbnQgZnJvbSBzeW5jXG5cdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGdldCAobmFtZSkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZiAodGhpcy5zeW5jQXZhaWxhYmxlKCkpIHtcblx0XHRcdFx0Y2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobmFtZSwgZnVuY3Rpb24gKGl0ZW1zKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2dvdCBzdG9yYWdlICcgKyBuYW1lICsgJzogJyArIGl0ZW1zW25hbWVdKTtcblx0XHRcdFx0XHRyZXNvbHZlKGl0ZW1zW25hbWVdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKGxvY2FsU3RvcmFnZSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gbnVsbDtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgYiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuXHRcdFx0XHRcdGlmIChiID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYiA9PT0gJ251bGwnKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBudWxsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBKU09OLnBhcnNlKGIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWNhdGNoKGUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBlKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXNvbHZlKHJlc3VsdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKG51bGwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHN0YXRpYyBzeW5jQXZhaWxhYmxlKCkge1xuXHRcdHJldHVybiB0eXBlb2YoY2hyb21lKSAhPT0gJ3VuZGVmaW5lZCcgICYmIFxuXHRcdFx0XHRcdFx0Y2hyb21lLnN0b3JhZ2UgIT09IHVuZGVmaW5lZCAmJiBcblx0XHRcdFx0XHRcdGNocm9tZS5zdG9yYWdlLnN5bmMgIT09IHVuZGVmaW5lZDtcblx0fVxufVxuIl19

'use strict'; /**
               * Color utility functions, exposed as an AMD module.
               * No external dependencies.
               * Special thanks for the RGB to CIE conversion code goes out to the Q42 team 
               * for their Q42.HueApi work. Dank u!
               * More info: https://github.com/Q42/Q42.HueApi.
               *
               * https://github.com/bjohnso5/hue-hacking
               * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

/*globals define:false */
/*exported colors*/
var colors = function colors() {

    'use strict';

    /**
                   * Represents a CIE 1931 XY coordinate pair.
                   *
                   * @param {Number} X coordinate.
                   * @param {Number} Y coordinate.
                   * @constructor
                   */
    var XYPoint = function XYPoint(x, y) {
        this.x = x;
        this.y = y;
    },

    Red = new XYPoint(0.675, 0.322),
    Lime = new XYPoint(0.4091, 0.518),
    Blue = new XYPoint(0.167, 0.04),

    /**
                                      * Parses a valid hex color string and returns the Red RGB integer value.
                                      *
                                      * @param {String} Hex color string.
                                      * @return {Number} Red integer value.
                                      */
    hexToRed = function hexToRed(hex) {
        return parseInt(hex.substring(0, 2), 16);
    },

    /**
        * Parses a valid hex color string and returns the Green RGB integer value.
        *
        * @param {String} Hex color string.
        * @return {Number} Green integer value.
        */
    hexToGreen = function hexToGreen(hex) {
        return parseInt(hex.substring(2, 4), 16);
    },

    /**
        * Parses a valid hex color string and returns the Blue RGB integer value.
        *
        * @param {String} Hex color string.
        * @return {Number} Blue integer value.
        */
    hexToBlue = function hexToBlue(hex) {
        return parseInt(hex.substring(4, 6), 16);
    },

    /**
        * Converts a valid hex color string to an RGB array.
        *
        * @param {String} Hex color String (e.g. FF00FF)
        * @return {Array} Array containing R, G, B values
        */
    hexToRGB = function hexToRGB(h) {
        var rgb = [hexToRed(h), hexToGreen(h), hexToBlue(h)];
        return rgb;
    },

    /**
        * Generates a random number between 'from' and 'to'.
        *
        * @param {Number} Number representing the start of a range.
        * @param {Number} Number representing the end of a range.
        */
    randomFromInterval = function randomFromInterval(from /* Number */, to /* Number */) {
        return Math.floor(Math.random() * (to - from + 1) + from);
    },

    /**
        * Return a random Integer in the range of 0 to 255, representing an RGB
        * color value.
        *
        * @return {number} Integer between 0 and 255.
        */
    randomRGBValue = function randomRGBValue() {
        return randomFromInterval(0, 255);
    },

    /**
        * Returns the cross product of two XYPoints.
        *
        * @param {XYPoint} Point 1.
        * @param {XYPoint} Point 2.
        * @return {Number} Cross-product of the two XYPoints provided.
        */
    crossProduct = function crossProduct(p1, p2) {
        return p1.x * p2.y - p1.y * p2.x;
    },

    /**
        * Check if the provided XYPoint can be recreated by a Hue lamp.
        *
        * @param {XYPoint} XYPoint to check.
        * @return {boolean} Flag indicating if the point is within reproducible range.
        */
    checkPointInLampsReach = function checkPointInLampsReach(p) {
        var v1 = new XYPoint(Lime.x - Red.x, Lime.y - Red.y),
        v2 = new XYPoint(Blue.x - Red.x, Blue.y - Red.y),

        q = new XYPoint(p.x - Red.x, p.y - Red.y),

        s = crossProduct(q, v2) / crossProduct(v1, v2),
        t = crossProduct(v1, q) / crossProduct(v1, v2);

        return s >= 0.0 && t >= 0.0 && s + t <= 1.0;
    },

    /**
        * Find the closest point on a line. This point will be reproducible by a Hue lamp.
        *
        * @param {XYPoint} The point where the line starts.
        * @param {XYPoint} The point where the line ends.
        * @param {XYPoint} The point which is close to the line.
        * @return {XYPoint} A point that is on the line, and closest to the XYPoint provided.
        */
    getClosestPointToPoint = function getClosestPointToPoint(A, B, P) {
        var AP = new XYPoint(P.x - A.x, P.y - A.y),
        AB = new XYPoint(B.x - A.x, B.y - A.y),
        ab2 = AB.x * AB.x + AB.y * AB.y,
        apab = AP.x * AB.x + AP.y * AB.y,
        t = apab / ab2;

        if (t < 0.0) {
            t = 0.0;
        } else if (t > 1.0) {
            t = 1.0;
        }

        return new XYPoint(A.x + AB.x * t, A.y + AB.y * t);
    },

    /**
        * Returns the distance between two XYPoints.
        *
        * @param {XYPoint} The first point.
        * @param {XYPoint} The second point.
        * @param {Number} The distance between points one and two.
        */
    getDistanceBetweenTwoPoints = function getDistanceBetweenTwoPoints(one, two) {
        var dx = one.x - two.x, // horizontal difference
        dy = one.y - two.y; // vertical difference

        return Math.sqrt(dx * dx + dy * dy);
    },

    /**
        * Returns an XYPoint object containing the closest available CIE 1931
        * coordinates based on the RGB input values.
        *
        * @param {Number} RGB red value, integer between 0 and 255.
        * @param {Number} RGB green value, integer between 0 and 255.
        * @param {Number} RGB blue value, integer between 0 and 255.
        * @return {XYPoint} CIE 1931 XY coordinates, corrected for reproducibility.
        */
    getXYPointFromRGB = function getXYPointFromRGB(red, green, blue) {

        var r = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92,
        g = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92,
        b = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92,

        X = r * 0.4360747 + g * 0.3850649 + b * 0.0930804,
        Y = r * 0.2225045 + g * 0.7168786 + b * 0.0406169,
        Z = r * 0.0139322 + g * 0.0971045 + b * 0.7141733,

        cx = X / (X + Y + Z),
        cy = Y / (X + Y + Z);

        cx = isNaN(cx) ? 0.0 : cx;
        cy = isNaN(cy) ? 0.0 : cy;

        //Check if the given XY value is within the colourreach of our lamps.
        var xyPoint = new XYPoint(cx, cy),
        inReachOfLamps = checkPointInLampsReach(xyPoint);

        if (!inReachOfLamps) {

            //Color is unreproducible, find the closest point on each line in the CIE 1931 'triangle'.
            var pAB = getClosestPointToPoint(Red, Lime, xyPoint),
            pAC = getClosestPointToPoint(Blue, Red, xyPoint),
            pBC = getClosestPointToPoint(Lime, Blue, xyPoint),

            // Get the distances per point and see which point is closer to our Point.
            dAB = getDistanceBetweenTwoPoints(xyPoint, pAB),
            dAC = getDistanceBetweenTwoPoints(xyPoint, pAC),
            dBC = getDistanceBetweenTwoPoints(xyPoint, pBC),

            lowest = dAB,
            closestPoint = pAB;

            if (dAC < lowest) {
                lowest = dAC;
                closestPoint = pAC;
            }
            if (dBC < lowest) {
                lowest = dBC;
                closestPoint = pBC;
            }

            // Change the xy value to a value which is within the reach of the lamp.
            cx = closestPoint.x;
            cy = closestPoint.y;
        }

        return new XYPoint(cx, cy);
    };

    /**
        * Publicly accessible functions exposed as API.
        */
    return {
        /**
              * Converts hexadecimal colors represented as a String to approximate
              * CIE 1931 coordinates. May not produce accurate values.
              *
              * @param {String} Value representing a hexadecimal color value
              * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
              */
        hexToCIE1931: function hexToCIE1931(h) {
            var rgb = hexToRGB(h);
            return this.rgbToCIE1931(rgb[0], rgb[1], rgb[2]);
        },

        /**
            * Converts red, green and blue integer values to approximate CIE 1931
            * x and y coordinates. Algorithm from: 
            * http://www.easyrgb.com/index.php?X=MATH&H=02#text2. May not produce
            * accurate values.
            *
            * @param {Number} red Integer in the 0-255 range.
            * @param {Number} green Integer in the 0-255 range.
            * @param {Number} blue Integer in the 0-255 range.
            * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
            */
        rgbToCIE1931: function rgbToCIE1931(red, green, blue) {
            var point = getXYPointFromRGB(red, green, blue);
            return [point.x, point.y];
        },

        /**
            * Returns the approximate CIE 1931 x,y coordinates represented by the 
            * supplied hexColor parameter, or of a random color if the parameter
            * is not passed.
            *
            * @param {String} hexColor String representing a hexidecimal color value.
            * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
            */
        getCIEColor: function getCIEColor(hexColor /* String */) {
            var hex = hexColor || null,
            xy = [];
            if (null !== hex) {
                xy = this.hexToCIE1931(hex);
            } else {
                var r = randomRGBValue(),
                g = randomRGBValue(),
                b = randomRGBValue();
                xy = this.rgbToCIE1931(r, g, b);
            }
            return xy;
        },
        hexFullRed: 'FF0000',
        hexFullGreen: '00FF00',
        hexFullBlue: '0000FF',
        hexFullWhite: 'FFFFFF' };

};

if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {
    define(colors);
} else {
    window.colors = colors();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/*exported Palettes */
'use strict';

// fill solid palette
var Palettes = {
    'Empty': [],

    'Kelvin degrees': [
    { name: 'Candle', color: '#FF9329' },
    { name: '40W Tungsten', color: '#FFC58F' },
    { name: '100W Tungsten', color: '#FFD6AA' },
    { name: 'Halogen', color: '#FFF1E0' },
    { name: 'Carbon Arc', color: '#FFFAF4' },
    { name: 'High Noon Sun', color: '#FFFFFB' },
    { name: 'Direct Sunlight', color: '#FFFFFF' },
    { name: 'Overcast Sky', color: '#C9E2FF' },
    { name: 'Clear Blue Sky', color: '#409CFF' }],

    'Fluorescents': [
    { name: 'Warm Fluorescent', color: '#FFF4E5' },
    { name: 'Standard Fluorescent', color: '#F4FFFA' },
    { name: 'Cool White Fluorescent', color: '#D4EBFF' },
    { name: 'Full Spectrum Fluorescent', color: '#FFF4F2' },
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' },
    { name: 'Pink Fluorescent', color: '#ffc0cb' }],

    'Valentines': [
    { name: 'February 14', color: '#820081' },
    { name: 'Feelings', color: '#FE59C2' },
    { name: 'Joy', color: '#FE40B9' },
    { name: 'Hearts', color: '#FE1CAC' },
    { name: 'Attitude', color: '#390039' },
    { name: 'Pink Fluorescent', color: '#ffc0cb' }],

    'Rainbow': [
    '#3400E5',
    '#7200E2',
    '#AD00DF',
    '#DD00D2',
    '#DA0094',
    '#D80058',
    '#D5001C',
    '#D31C00',
    '#D05500',
    '#CE8C00',
    '#CBC200',
    '#9BC900',
    '#63C600',
    '#2DC400',
    '#00C108',
    '#00BF3C'],

    'RomanticRed': [
    // '#4c0000',
    // '#660000',
    // '#7f0000',
    // '#990000',
    // '#b20000',
    // '#cc0000',
    // '#e50000',
    '#ff0000',
    '#ff1919',
    '#ff3232',
    '#ff4c4c',
    '#ff6666',
    '#ff7f7f',
    '#ff9999',
    '#ffb2b2'
    // '#ffcccc',
    // '#ffe5e5',
    // '#ffffff'
    ],
    'Sunrise': [
    '#FF8E74',
    '#FFB376',
    '#FFDF80',
    '#FFFA90',
    '#CBF2FF'],

    'Thanksgiving': [
    '#FFC300',
    '#FF6200',
    '#FF0000',
    '#CD0500',
    '#690F00'],

    'TurkeyFeast': [
    '#DE7600',
    '#BF7117',
    '#965811',
    '#9E4A0E',
    '#663715'],

    'TurkeyDinner': [
    { name: 'Salad', color: '#456905' },
    { name: 'Tabasco', color: '#B2A509' },
    { name: 'Turkey Girll', color: '#E0E610' },
    { name: 'Salmon', color: '#FE6823' },
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' },
    { name: 'Catch a turkey', color: '#AA5B00' }],

    'Police': [
    '#0000FF',
    '#FF0000',
    '#0000FF',
    '#0000FF',
    '#FF0000'],

    'Christmas': [
    '#FF3333',
    '#FFFFFF',
    '#FFFE99',
    '#33FF33'],

    'NewYears': [
    '#5B1D99',
    '#0074B4',
    '#00B34C',
    '#FFD41F',
    '#FC6E3D'],

    'Broadway': [
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99',
    '#FFFFFF',
    '#FFFE99'],

    'America': [
    { name: 'White', color: '#FFFFFF' },
    { name: 'Old Glory Red', color: '#B22234' },
    { name: 'Old Glory Blue', color: '#404BC1' }],

    'Lightning': [
    { name: 'Lightning', color: '#E5F8FF' },
    { name: 'Dark night', color: '#050AF9' },
    { name: 'Dark night', color: '#070A8E' },
    { name: 'Dark night', color: '#0A0EC8' },
    { name: 'Dark night', color: '#0A0DAE' },
    { name: 'Dark night', color: '#2125D2' }] };
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//var Timer = {};
'use strict';
/*exported Sequence */
var Sequence = {
	All: function All(time) {
		return true;
	},
	Sequence: function Sequence(timer) {

	},
	Random: function Random(time) {

	} };
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcXVlbmNlLmpzIl0sIm5hbWVzIjpbIlNlcXVlbmNlIiwiQWxsIiwidGltZSIsInRpbWVyIiwiUmFuZG9tIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxXQUFXO0FBQ2RDLE1BQUssYUFBU0MsSUFBVCxFQUFlO0FBQ25CLFNBQU8sSUFBUDtBQUNBLEVBSGE7QUFJZEYsV0FBVSxrQkFBU0csS0FBVCxFQUFlOztBQUV4QixFQU5hO0FBT2RDLFNBQVEsZ0JBQVNGLElBQVQsRUFBZTs7QUFFdEIsRUFUYSxFQUFmIiwiZmlsZSI6InNlcXVlbmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy92YXIgVGltZXIgPSB7fTtcbid1c2Ugc3RyaWN0Jztcbi8qZXhwb3J0ZWQgU2VxdWVuY2UgKi9cbnZhciBTZXF1ZW5jZSA9IHtcblx0QWxsOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdFNlcXVlbmNlOiBmdW5jdGlvbih0aW1lcil7XG5cdFx0XG5cdH0sIFxuXHRSYW5kb206IGZ1bmN0aW9uKHRpbWUpIHtcblxuXHR9XG59OyJdfQ==

/*
  Ambient Class  
  (c) 2014, Dmitry Sadakov, all rights reserved
*/

'use strict';
/*globals ColorThief, chrome, colorUtil*/
/*exported Ambient*/


var Ambient = function () {

	var dominantColors = [],
	updateHandlers = [],
	publicMethods = {},
	lastUpdate = null;

	// fields
	publicMethods.on = false;
	publicMethods.updateImage = false;
	publicMethods.changeBrightness = false;
	publicMethods.enablePrimary = false;
	publicMethods.mode = 'eye-ambient';

	function parseBrightness(color) {
		var helper = colorUtil();
		if (publicMethods.changeBrightness) {
			return helper.getBrightness(color);
		} else {
			return undefined;
		}
	}

	function onImageUpdated(image) {
		if (image === undefined) {
			return;
		}
		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			chrome.runtime.lastError = null;
		} else {
			var img = new Image();
			img.src = image;
			img.onload = function () {
				// get main colors
				var colorThief = new ColorThief();
				if (img && img.width == 0) {
					return; // this is an error
				}
				var colors = colorThief.getPalette(img, 8);
				if (!colors) {
					return;
				}

				lastUpdate = new Date();

				dominantColors = [];
				var helper = colorUtil();

				if (publicMethods.enablePrimary) {
					var primary = helper.rgbToHex(
					colors[0][0],
					colors[0][1],
					colors[0][2]);

					var bri = parseBrightness(primary);

					// thrice for ui.
					var color = { color: primary, bri: bri };
					dominantColors.push(color);
					dominantColors.push(color);
					dominantColors.push(color);

				} else {
					colors.forEach(function (color) {
						var hex = helper.rgbToHex(
						color[0],
						color[1],
						color[2]);

						var b = parseBrightness(hex);
						dominantColors.push({ color: hex, bri: b });
					});
				}
			};

			updateHandlers.forEach(function (handler) {
				handler(dominantColors, image);
			});
		}

		// do it again
		setTimeout(retryRequestImage, getDelay() * 500);
	}

	function retryRequestImage() {
		if (publicMethods.on || publicMethods.updateImage) {
			try {
				requestImage();
			} catch (e) {
				setTimeout(retryRequestImage, 1000);
				console.log(e);
			}
		}
	}

	function requestImage() {
		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			return;
		}
		if (typeof chrome !== 'undefined' &&
		chrome.tabs !== undefined &&
		chrome.tabs.captureVisibleTab !== undefined) {
			chrome.tabs.captureVisibleTab({ quality: 1 }, onImageUpdated);
			return true;
		}
		return false;
	}

	function getDelay() {
		switch (publicMethods.mode) {
			case 'eye-ambient':
				return 10;
			case 'eye-work':
				return 5;
			case 'eye-movie':
				return 1;
			case 'eye-gaming':
				return 0;
			default:
				return 1;}

	}

	publicMethods.definedBrightness = function () {
		if (publicMethods.changeBrightness === false) {
			return 255; // always bright
		}
		return undefined;
	};
	publicMethods.run = function () {
		return requestImage();
	};
	publicMethods.onUpdate = function (func) {
		updateHandlers = []; // clear for now, memory might go unused on multi-timed open popup
		updateHandlers.push(func);
	};
	// in seconds
	publicMethods.getDelay = function () {
		return getDelay();
	};
	publicMethods.getDominantColors = function (colorCount) {
		if (new Date() - lastUpdate > getDelay() * 1000) {// if more than delay
			retryRequestImage();
		}
		return dominantColors;
	};

	return publicMethods;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals $:false, Palettes:false, Ambient */
/*exported scenes */

'use strict';

var scenes = {
    'RelaxedRandom': {
        interval: 2000,
        Palette: Palettes.RomanticRed,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Romantic Red': {
        interval: 2000,
        Palette: Palettes.RomanticRed,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Valentines': {
        interval: 2000,
        Palette: Palettes.Valentines,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Christmas': {
        interval: 5000,
        Palette: Palettes.Christmas,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette, 5);
        },
        index: 0 },

    'New Years Fireworks': {
        interval: 500,
        Palette: Palettes.NewYears,
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);
        },
        index: 0 },

    '4th of July': {
        interval: 500,
        Palette: Palettes.America,
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);
        },
        index: 0 },

    'Broadway': {
        interval: 500,
        Palette: Palettes.Broadway,
        update: function update(lampIds) {
            scenes.Broadway.index++;
            if (scenes.Broadway.index >= lampIds.length) {
                scenes.Broadway.index = 0;
            }
            return scenes.one(lampIds, this.Palette, scenes.Broadway.index, 0);
        },
        index: 0 },

    'Police': {
        interval: 200,
        Palette: Palettes.Police,
        update: function update(lampIds) {
            scenes.Police.index++;
            if (scenes.Police.index >= this.Palette.length) {
                scenes.Police.index = 0;
            }
            return scenes.cycle(lampIds, this.Palette, scenes.Police.index, 0);
        },
        index: 0 },

    'Sunrise': {
        interval: 5000,
        Palette: Palettes.Sunrise,
        update: function update(lampIds) {
            scenes.Sunrise.index++;
            if (scenes.Sunrise.index >= this.Palette.length) {
                scenes.Sunrise.index = 0;
            }
            return scenes.cycle(lampIds, this.Palette, scenes.Sunrise.index, 5);
        },
        index: 0 },

    'Disco': {
        interval: 200,
        Palette: Palettes.Rainbow,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Thanksgiving': {
        interval: 2000,
        Palette: Palettes.Thanksgiving,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'TurkeyFeast': {
        interval: 5000,
        Palette: Palettes.TurkeyFeast,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'TurkeyDinner': {
        interval: 1000,
        Palette: Palettes.TurkeyDinner,
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);
        } },

    'Lightning': {
        interval: 500,
        Palette: Palettes.Lightning,
        update: function update(lampIds) {
            return scenes.lightning(lampIds, this.Palette);
        } },

    'Ambient': {
        interval: 1000,
        Palette: Palettes.Empty,
        update: function update(lampIds) {
            var lightStates = [];

            var dominantColors = Ambient.getDominantColors();
            $.each(lampIds, function (index, val) {
                while (dominantColors.length <= index) {
                    index -= dominantColors.length;
                }
                var c = dominantColors[index];
                lightStates.push({
                    lamp: val,
                    color: c.color,
                    bri: c.bri,
                    transitionTime: Ambient.getDelay() * 10 });
            });
            return lightStates;
        } },

    makeArray: function makeArray(lampIds) {
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];
        }
        return lampIds;
    },
    one: function one(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        var lightStates = [];
        $.each(lampIds, function (index, val) {
            if (index === cycleIndex) {
                lightStates.push({ lamp: val, color: palette[1], transitionTime: transitionTime * 10 });
            } else {
                lightStates.push({ lamp: val, color: palette[0], transitionTime: transitionTime * 10 });
            }
        });

        return lightStates;
    },
    chain: function chain(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var chain = cycleIndex;
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        $.each(lampIds, function (index, val) {
            chain++;
            if (palette.length <= chain) {
                chain = 0; // need to circle back if length larger
            }
            var co = palette[chain];
            lightStates.push({ lamp: val, color: co, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    cycle: function cycle(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var color = palette[cycleIndex];
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        $.each(lampIds, function (index, val) {
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    randomPallete: function randomPallete(lampIds, palette, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;
        }
        var lightStates = [];
        $.each(lampIds, function (index, val) {
            var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });
        });

        return lightStates;
    },
    findScene: function findScene(name) {
        for (var key in scenes) {
            if (key.toLowerCase() === name.toLowerCase()) {
                return key;
            }
        }
        return null;
    },
    fireworks: function fireworks(lampIds, palette) {
        var lightStates = [];

        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            if (Math.random() > 0.6) {
                var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
                lightStates.push({ lamp: val, color: color, bri: 255, transitionTime: 0 });
            } else {
                var random = Math.floor(Math.random() * (15 - 6 + 1) + 6);
                lightStates.push({ lamp: val, bri: -255, transitionTime: random });
            }
        }
        return lightStates;
    },
    lightning: function lightning(lampIds, palette) {
        var lightStates = [];

        var isLightning = Math.random() < 0.1;
        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            var color = palette[Math.round(Math.random() * (palette.length - 2)) + 1]; // random after the first
            if (isLightning) {
                var bri = Math.round(Math.random() * 100) + 155;
                lightStates.push({ lamp: val, color: color, bri: bri, transitionTime: 0 });
            } else {
                lightStates.push({ lamp: val, color: color, bri: -255, transitionTime: 3 });
            }

        }
        return lightStates;
    } };
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals scenes */
/*exported sceneCommander */

'use strict';

var sceneCommander = function sceneCommander($, hue) {
    var logger = null,
    scene = null,
    sceneTimer = null,
    sceneStart = function sceneStart(sceneName, lampIds)
    {
        sceneStop();
        log('Starting scene ' + sceneName);
        var sceneKey = scenes.findScene(sceneName);
        if (sceneKey === null) {
            // might be programmed into the bridge already:
            var state = hue.getState();
            if (state.scenes[sceneName] !== undefined) {
                hue.startScene(sceneName);
            }
        } else {
            scene = scenes[sceneKey];
            if (scene.interval === 0) {
                // one time hit
                setTimeout(sceneUpdate, 10);
            } else
            {
                // counter
                sceneTimer = setInterval(function intervaledSceneUpdate() {
                    sceneUpdate(lampIds);
                }, Math.round(scene.interval * lampIds.length / 3));
                sceneUpdate(lampIds); // start now.
            }
        }
    },
    sceneStop = function sceneStop() {
        log('Stop scenes');
        clearInterval(sceneTimer);
        scene = null;
    },

    sceneUpdate = function sceneUpdate(lampIds) {
        log('Updating scenes');
        if (scene === null) {
            clearInterval(sceneTimer);
        } else {
            var lightStates = scene.update(lampIds);
            $(lightStates).each(function setSceneState(index, state) {
                var time = state.transitionTime;
                if (state.color !== undefined) {
                    var co = state.color.color !== undefined ? state.color.color : state.color;
                    log('setting color: ' + state.lamp + ' = ' + co);
                    hue.setColor(state.lamp, co.substring(1), time, state.bri);
                } else if (state.bri !== undefined) {
                    hue.brighten(state.lamp, state.bri, time);
                }
            });
        }
    },
    log = function log(text) {
        if (logger !== null) {
            logger(text);
        }
    };


    return {
        executing: function executing() {
            return scene; // null if none
        },
        sceneExists: function sceneExists(sceneName) {
            return scenes[sceneName] !== undefined;
        },
        start: function start(sceneName, actors) {
            sceneStart(sceneName, actors);
        },
        stop: function stop() {
            sceneStop();
        },
        palette: function palette(colors) {
            scenes.RelaxedRandom.Palette = colors;
        },
        setLogger: function setLogger(logHandler) {
            logger = logHandler;
        } };

};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjZW5lQ29tbWFuZGVyLmpzIl0sIm5hbWVzIjpbInNjZW5lQ29tbWFuZGVyIiwiJCIsImh1ZSIsImxvZ2dlciIsInNjZW5lIiwic2NlbmVUaW1lciIsInNjZW5lU3RhcnQiLCJzY2VuZU5hbWUiLCJsYW1wSWRzIiwic2NlbmVTdG9wIiwibG9nIiwic2NlbmVLZXkiLCJzY2VuZXMiLCJmaW5kU2NlbmUiLCJzdGF0ZSIsImdldFN0YXRlIiwidW5kZWZpbmVkIiwic3RhcnRTY2VuZSIsImludGVydmFsIiwic2V0VGltZW91dCIsInNjZW5lVXBkYXRlIiwic2V0SW50ZXJ2YWwiLCJpbnRlcnZhbGVkU2NlbmVVcGRhdGUiLCJNYXRoIiwicm91bmQiLCJsZW5ndGgiLCJjbGVhckludGVydmFsIiwibGlnaHRTdGF0ZXMiLCJ1cGRhdGUiLCJlYWNoIiwic2V0U2NlbmVTdGF0ZSIsImluZGV4IiwidGltZSIsInRyYW5zaXRpb25UaW1lIiwiY29sb3IiLCJjbyIsImxhbXAiLCJzZXRDb2xvciIsInN1YnN0cmluZyIsImJyaSIsImJyaWdodGVuIiwidGV4dCIsImV4ZWN1dGluZyIsInNjZW5lRXhpc3RzIiwic3RhcnQiLCJhY3RvcnMiLCJzdG9wIiwicGFsZXR0ZSIsImNvbG9ycyIsIlJlbGF4ZWRSYW5kb20iLCJQYWxldHRlIiwic2V0TG9nZ2VyIiwibG9nSGFuZGxlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQTtBQUNBOztBQUVBOztBQUVBLElBQUlBLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBVUMsQ0FBVixFQUFhQyxHQUFiLEVBQWtCO0FBQ25DLFFBQUlDLFNBQVMsSUFBYjtBQUNJQyxZQUFRLElBRFo7QUFFSUMsaUJBQWEsSUFGakI7QUFHSUMsaUJBQWEsU0FBYkEsVUFBYSxDQUFTQyxTQUFULEVBQW9CQyxPQUFwQjtBQUNiO0FBQ0NDO0FBQ0dDLFlBQUksb0JBQW9CSCxTQUF4QjtBQUNBLFlBQUlJLFdBQVdDLE9BQU9DLFNBQVAsQ0FBaUJOLFNBQWpCLENBQWY7QUFDQSxZQUFJSSxhQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0EsZ0JBQUlHLFFBQVFaLElBQUlhLFFBQUosRUFBWjtBQUNBLGdCQUFJRCxNQUFNRixNQUFOLENBQWFMLFNBQWIsTUFBNEJTLFNBQWhDLEVBQTJDO0FBQ3ZDZCxvQkFBSWUsVUFBSixDQUFlVixTQUFmO0FBQ0g7QUFDSixTQU5ELE1BTU87QUFDSEgsb0JBQVFRLE9BQU9ELFFBQVAsQ0FBUjtBQUNBLGdCQUFJUCxNQUFNYyxRQUFOLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3pCO0FBQ0FDLDJCQUFXQyxXQUFYLEVBQXdCLEVBQXhCO0FBQ0EsYUFIRDtBQUlLO0FBQ0o7QUFDQWYsNkJBQWFnQixZQUFZLFNBQVNDLHFCQUFULEdBQWlDO0FBQ25ERixnQ0FBWVosT0FBWjtBQUNILGlCQUZTLEVBRVBlLEtBQUtDLEtBQUwsQ0FBV3BCLE1BQU1jLFFBQU4sR0FBaUJWLFFBQVFpQixNQUF6QixHQUFrQyxDQUE3QyxDQUZPLENBQWI7QUFHR0wsNEJBQVlaLE9BQVosRUFMQyxDQUtxQjtBQUM1QjtBQUNEO0FBQ0osS0E1Qkw7QUE2QklDLGdCQUFZLFNBQVpBLFNBQVksR0FBVTtBQUNsQkMsWUFBSSxhQUFKO0FBQ0FnQixzQkFBY3JCLFVBQWQ7QUFDQUQsZ0JBQVEsSUFBUjtBQUNILEtBakNMOztBQW1DSWdCLGtCQUFjLFNBQWRBLFdBQWMsQ0FBU1osT0FBVCxFQUFpQjtBQUMzQkUsWUFBSSxpQkFBSjtBQUNBLFlBQUdOLFVBQVUsSUFBYixFQUFtQjtBQUNmc0IsMEJBQWNyQixVQUFkO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsZ0JBQUlzQixjQUFjdkIsTUFBTXdCLE1BQU4sQ0FBYXBCLE9BQWIsQ0FBbEI7QUFDQVAsY0FBRTBCLFdBQUYsRUFBZUUsSUFBZixDQUFvQixTQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QmpCLEtBQTlCLEVBQXFDO0FBQ3JELG9CQUFJa0IsT0FBT2xCLE1BQU1tQixjQUFqQjtBQUNBLG9CQUFJbkIsTUFBTW9CLEtBQU4sS0FBZ0JsQixTQUFwQixFQUErQjtBQUM5Qix3QkFBSW1CLEtBQUtyQixNQUFNb0IsS0FBTixDQUFZQSxLQUFaLEtBQXNCbEIsU0FBdEIsR0FBa0NGLE1BQU1vQixLQUFOLENBQVlBLEtBQTlDLEdBQXNEcEIsTUFBTW9CLEtBQXJFO0FBQ0d4Qix3QkFBSSxvQkFBb0JJLE1BQU1zQixJQUExQixHQUFpQyxLQUFqQyxHQUF5Q0QsRUFBN0M7QUFDQWpDLHdCQUFJbUMsUUFBSixDQUFhdkIsTUFBTXNCLElBQW5CLEVBQXlCRCxHQUFHRyxTQUFILENBQWEsQ0FBYixDQUF6QixFQUEwQ04sSUFBMUMsRUFBZ0RsQixNQUFNeUIsR0FBdEQ7QUFDSCxpQkFKRCxNQUlPLElBQUl6QixNQUFNeUIsR0FBTixLQUFjdkIsU0FBbEIsRUFBNkI7QUFDaENkLHdCQUFJc0MsUUFBSixDQUFhMUIsTUFBTXNCLElBQW5CLEVBQXlCdEIsTUFBTXlCLEdBQS9CLEVBQW9DUCxJQUFwQztBQUNIO0FBQ0osYUFURDtBQVVIO0FBQ0osS0FwREw7QUFxREl0QixVQUFNLFNBQU5BLEdBQU0sQ0FBVStCLElBQVYsRUFBZTtBQUNqQixZQUFJdEMsV0FBVyxJQUFmLEVBQXFCO0FBQ2pCQSxtQkFBT3NDLElBQVA7QUFDSDtBQUNKLEtBekRMOzs7QUE0REEsV0FBTztBQUNOQyxtQkFBVyxxQkFBVTtBQUNwQixtQkFBT3RDLEtBQVAsQ0FEb0IsQ0FDTjtBQUNkLFNBSEs7QUFJSHVDLHFCQUFhLHFCQUFTcEMsU0FBVCxFQUFvQjtBQUN0QyxtQkFBT0ssT0FBT0wsU0FBUCxNQUFzQlMsU0FBN0I7QUFDTSxTQU5FO0FBT0g0QixlQUFPLGVBQVNyQyxTQUFULEVBQW9Cc0MsTUFBcEIsRUFBNEI7QUFDeEN2Qyx1QkFBV0MsU0FBWCxFQUFzQnNDLE1BQXRCO0FBQ00sU0FURTtBQVVIQyxjQUFNLGdCQUFXO0FBQ3RCckM7QUFDTSxTQVpFO0FBYUhzQyxpQkFBUyxpQkFBU0MsTUFBVCxFQUFpQjtBQUN0QnBDLG1CQUFPcUMsYUFBUCxDQUFxQkMsT0FBckIsR0FBK0JGLE1BQS9CO0FBQ0gsU0FmRTtBQWdCSEcsbUJBQVcsbUJBQVNDLFVBQVQsRUFBcUI7QUFDNUJqRCxxQkFBU2lELFVBQVQ7QUFDSCxTQWxCRSxFQUFQOztBQW9CSCxDQWpGRCIsImZpbGUiOiJzY2VuZUNvbW1hbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2NlbmUgQ29tbWFuZGVyXG4gKiBEZXBlbmRlbmNpZXM6XG4gKiAgICAtIGpRdWVyeSAxLjguM1xuICogICAgLSBjb2xvcnMuanMgKHBhY2thZ2VkIGFsb25nc2lkZSB0aGlzIGZpbGUpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRG1pdHJ5IFNhZGFrb3YsIEFsbCByaWdodHMgcmVzZXJ2ZWQuICovXG5cbi8qZ2xvYmFscyBzY2VuZXMgKi9cbi8qZXhwb3J0ZWQgc2NlbmVDb21tYW5kZXIgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2NlbmVDb21tYW5kZXIgPSBmdW5jdGlvbiAoJCwgaHVlKSB7IFxuICAgIHZhciBsb2dnZXIgPSBudWxsLFxuICAgICAgICBzY2VuZSA9IG51bGwsXG4gICAgICAgIHNjZW5lVGltZXIgPSBudWxsLFxuICAgICAgICBzY2VuZVN0YXJ0ID0gZnVuY3Rpb24oc2NlbmVOYW1lLCBsYW1wSWRzKSBcbiAgICAgICAge1xuICAgICAgICBcdHNjZW5lU3RvcCgpOyBcbiAgICAgICAgICAgIGxvZygnU3RhcnRpbmcgc2NlbmUgJyArIHNjZW5lTmFtZSk7XG4gICAgICAgICAgICB2YXIgc2NlbmVLZXkgPSBzY2VuZXMuZmluZFNjZW5lKHNjZW5lTmFtZSk7XG4gICAgICAgICAgICBpZiAoc2NlbmVLZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBtaWdodCBiZSBwcm9ncmFtbWVkIGludG8gdGhlIGJyaWRnZSBhbHJlYWR5OlxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGh1ZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zY2VuZXNbc2NlbmVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGh1ZS5zdGFydFNjZW5lKHNjZW5lTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2VuZSA9IHNjZW5lc1tzY2VuZUtleV07XG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lLmludGVydmFsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgXHQvLyBvbmUgdGltZSBoaXRcbiAgICAgICAgICAgICAgICBcdHNldFRpbWVvdXQoc2NlbmVVcGRhdGUsIDEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXHQvLyBjb3VudGVyXG4gICAgXHQgICAgICAgICAgICBzY2VuZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gaW50ZXJ2YWxlZFNjZW5lVXBkYXRlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVVcGRhdGUobGFtcElkcyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIE1hdGgucm91bmQoc2NlbmUuaW50ZXJ2YWwgKiBsYW1wSWRzLmxlbmd0aCAvIDMpKTsgXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lVXBkYXRlKGxhbXBJZHMpOyAvLyBzdGFydCBub3cuXG4gICAgXHQgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2NlbmVTdG9wID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvZygnU3RvcCBzY2VuZXMnKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2NlbmVUaW1lcik7XG4gICAgICAgICAgICBzY2VuZSA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2NlbmVVcGRhdGUgPSBmdW5jdGlvbihsYW1wSWRzKXtcbiAgICAgICAgICAgIGxvZygnVXBkYXRpbmcgc2NlbmVzJyk7XG4gICAgICAgICAgICBpZihzY2VuZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2NlbmVUaW1lcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsaWdodFN0YXRlcyA9IHNjZW5lLnVwZGF0ZShsYW1wSWRzKTtcbiAgICAgICAgICAgICAgICAkKGxpZ2h0U3RhdGVzKS5lYWNoKGZ1bmN0aW9uIHNldFNjZW5lU3RhdGUoaW5kZXgsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gc3RhdGUudHJhbnNpdGlvblRpbWU7IFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBcdHZhciBjbyA9IHN0YXRlLmNvbG9yLmNvbG9yICE9PSB1bmRlZmluZWQgPyBzdGF0ZS5jb2xvci5jb2xvciA6IHN0YXRlLmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCdzZXR0aW5nIGNvbG9yOiAnICsgc3RhdGUubGFtcCArICcgPSAnICsgY28pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHVlLnNldENvbG9yKHN0YXRlLmxhbXAsIGNvLnN1YnN0cmluZygxKSwgdGltZSwgc3RhdGUuYnJpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5icmkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHVlLmJyaWdodGVuKHN0YXRlLmxhbXAsIHN0YXRlLmJyaSwgdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9nID0gZnVuY3Rpb24gKHRleHQpe1xuICAgICAgICAgICAgaWYgKGxvZ2dlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlcih0ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gXG4gICAgcmV0dXJuIHtcbiAgICBcdGV4ZWN1dGluZzogZnVuY3Rpb24oKXtcbiAgICBcdFx0cmV0dXJuIHNjZW5lOyAvLyBudWxsIGlmIG5vbmVcbiAgICBcdH0sXG4gICAgICAgIHNjZW5lRXhpc3RzOiBmdW5jdGlvbihzY2VuZU5hbWUpIHtcblx0XHRcdHJldHVybiBzY2VuZXNbc2NlbmVOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogZnVuY3Rpb24oc2NlbmVOYW1lLCBhY3RvcnMpIHtcblx0XHRcdHNjZW5lU3RhcnQoc2NlbmVOYW1lLCBhY3RvcnMpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcblx0XHRcdHNjZW5lU3RvcCgpO1xuICAgICAgICB9LFxuICAgICAgICBwYWxldHRlOiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgICAgIHNjZW5lcy5SZWxheGVkUmFuZG9tLlBhbGV0dGUgPSBjb2xvcnM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldExvZ2dlcjogZnVuY3Rpb24obG9nSGFuZGxlcikge1xuICAgICAgICAgICAgbG9nZ2VyID0gbG9nSGFuZGxlcjtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl19

/**
 * Copyright (c) 2015 Dmitry Sadakov; All rights reserve
*/

'use strict';

/*globals trackState,AjaxLite */
/*exported HueDiscoverer */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

MeetHueLookup = function () {
    function MeetHueLookup(AjaxLite) {_classCallCheck(this, MeetHueLookup);
        this.AjaxLite = AjaxLite;
    }_createClass(MeetHueLookup, [{ key: 'discover', value: function discover()
        {var _this = this;
            return new Promise(function (resolveCallback, reject) {
                console.log('Requesting https://discovery.meethue.com.');
                var nupnp = 'https://discovery.meethue.com';
                _this.AjaxLite.ajax({
                    url: nupnp,
                    dataType: 'json',
                    success: function success(data) {
                        trackState('nunpnp', data);
                        if (data !== null && data.length > 0) {
                            var ips = [];
                            data.forEach(function (bridgeInfo, index) {
                                var bridgeIP = bridgeInfo.internalipaddress;
                                if (bridgeIP !== '0.0.0.0') {
                                    ips.push(bridgeIP);
                                }
                            });
                            resolveCallback(ips);
                        } else {
                            console.log('meethue portal did not return');
                            reject([]);
                        }
                    },
                    error: function error(err) {
                        reject(err);
                    } });

            });
        } }]);return MeetHueLookup;}();var


BruteForcer = function () {function BruteForcer() {_classCallCheck(this, BruteForcer);}_createClass(BruteForcer, null, [{ key: 'ips', value: function ips()
        {
            var ips = [];
            var i = 0;
            for (i = 1; i < 8; i++) {ips.push('10.0.1.' + i);} // mac: 10.0.1.1-20
            for (i = 1; i < 8; i++) {ips.push('192.168.0.' + i);} // win: 192.168.0.1-20
            for (i = 0; i < 8; i++) {ips.push('192.168.0.' + (100 + i));} // win: 192.168.1.100-120
            for (i = 1; i < 8; i++) {ips.push('192.168.1.' + i);} // win: 192.168.1.1-20

            return ips;
        } }]);return BruteForcer;}();var


HueBridge = function () {_createClass(HueBridge, [{ key: 'status', value: function status()

        {
            return this.status;
        } }]);

    function HueBridge($, storage, bridgeIP, appName, lastUsername, onNeedAuthorization, onAuthorized, onError, retryCount) {_classCallCheck(this, HueBridge);
        // todo: remove storage from HueBridge
        this.$ = $;

        // defaults
        if (!lastUsername) {
            lastUsername = '123-bogus';
        }
        this.ip = bridgeIP;
        this.appname = appName;
        this.username = lastUsername;

        this.baseUrl = 'http://' + this.ip + '/api';
        this.baseApiUrl = this.baseUrl + '/' + this.username;
        this.status = 'init'; // found, notauthorized, ready, error

        this.timeoutAuthCounter = 0;
        this.retryCount = retryCount || 0;

        this.onNeedAuthorization = onNeedAuthorization;
        this.onAuthorized = onAuthorized;
        this.onError = onError;

    }_createClass(HueBridge, [{ key: 'log', value: function log(

        text) {
            var message = 'hueBridge (' + this.ip + '): ' + text;
            console.log(message);
        } }, { key: 'getLightState', value: function getLightState(
        successCallback) {var _this2 = this;
            try {
                var options = {
                    dataType: 'json',
                    url: this.baseApiUrl + '/lights',
                    success: function success(data) {
                        _this2.timeoutAuthCounter = 0;
                        _this2.onGotLightState(data, successCallback);
                    },
                    error: function error(data) {return _this2.onAuthError(data);},
                    timeout: 2000 };

                this.$.ajax(options);
            } catch (err) {
                this.onAuthError(err);
            }
        } }, { key: 'getBridgeState', value: function getBridgeState(
        successCallback) {var _this3 = this;
            try {
                var options = {
                    dataType: 'json',
                    url: this.baseApiUrl,
                    success: function success(data) {return _this3.onGotBridgeState(data, successCallback);}, // lighter bag of data
                    error: function error(data) {return _this3.onAuthError(data);},
                    timeout: 5000 };

                this.$.ajax(options);
            } catch (err) {
                this.onAuthError(err);
            }
        } }, { key: 'onAuthError', value: function onAuthError(
        err) {
            if (err.statusText === 'timeout' || err.status === 0) {
                this.timeoutAuthCounter++;
                this.log('Bridge error timeout: ' + this.ip);
                if (this.timeoutAuthCounter >= this.retryCount) {
                    this.timeoutAuthCounter = 0;
                    if (this.retryCount !== 0) {
                        this.log('too many timeouts with IP ' + this.baseUrl);
                    }
                    this.onError(this.ip, 'Timeout', 'Too many timeouts on: ' + this.baseUrl);
                } else {
                    this.log('timeout on auth: ' + err.statusText + ' retry #' + this.timeoutAuthCounter);
                    this.getBridgeState(); // retry
                }
            } else {//if (err.statusText !== 'error') {
                this.log('error on auth: ' + err.statusText);
                this.status = 'error';
                this.onError(this.ip, 'Error', 'Unknown error: ' + err.statusText);
            } // what now?
        } }, { key: 'onGotLightState', value: function onGotLightState(
        data, successCallback) {
            debugger;
            if (data.hasOwnProperty('1') &&
            data['1'].hasOwnProperty('manufacturername')) {
                // indeed a light response.
                data = { 'lights': data };
            }
            this.onGotBridgeState(data, successCallback);
        } }, { key: 'onGotBridgeState', value: function onGotBridgeState(
        data, successCallback) {
            if (Array.isArray(data)) {
                data = data[0]; // take first
            }
            this.timeoutAuthCounter = 0;
            if (data.hasOwnProperty('error'))
            {
                if (data.error.description === 'unauthorized user') {
                    this.log('Not authorized with bridge ' + this.ip + ', registering...');
                    this.retryCounter++;
                    this.status = 'found';
                    // bridgeAuth
                    this.addUser();
                } else {
                    this.status = 'error';
                    this.onError(this.ip, 'Error', 'Error: ' + data.error.description);
                }
            } else
            if (data.hasOwnProperty('lights'))
            {
                this.status = 'ready';
                this.log('Bridge ready ' + this.ip);
                this.retryCounter = 0;
                (successCallback || this.onAuthorized)(this, this.ip, this.username, 'Ready', data);
            }
        } }, { key: 'addUser', value: function addUser()
        {var _this4 = this;
            this.log('adding user...');
            var dataString = JSON.stringify({ devicetype: this.appname }); // no username - bridge generates it
            this.log(dataString);
            this.$.ajax({
                url: this.baseUrl,
                type: 'POST',
                data: dataString,
                success: function success(data) {return _this4.onAddUserResponse(data);},
                error: function error(data) {return _this4.unauthorized();} });

        } }, { key: 'onAddUserResponse', value: function onAddUserResponse(
        response) {
            this.log(JSON.stringify(response));
            if (response[0].hasOwnProperty('error'))
            {
                this.unauthorized(response);
            } else
            if (response[0].hasOwnProperty('success'))
            {
                this.username = response[0].success.username;
                this.baseApiUrl = this.baseUrl + '/' + this.username;
                this.status = 'ready';
                this.log('Authorization successful');
                // request success message from actual bridge:
                this.getBridgeState();
            }
        } }, { key: 'unauthorized', value: function unauthorized(
        response) {
            if (!response) {
                this.onError(this.ip, 'Error', 'Request cancelled');
            } else
            if (response[0].error.description === 'link button not pressed') {
                this.status = 'needauthorization';
                this.onNeedAuthorization(this.ip, this.username, 'NeedAuthorization', response); // changed signature
                this.onError(this.ip, 'Error', 'Need authentication: ' + response[0].error.description);
            } else {
                this.status = 'error';
                this.onError(this.ip, 'Error', 'Error: ' + response[0].error.description);
            }
        } }, { key: 'ip', value: function ip()
        {
            return this.ip;
        } }, { key: 'username', value: function username()
        {
            return this.username;
        } }, { key: 'getStatus', value: function getStatus()
        {
            return this.status;
        } }]);return HueBridge;}();var




HueDiscoverer = function () {
    function HueDiscoverer(AjaxLite, storage, appname, onNeedAuthorization) {_classCallCheck(this, HueDiscoverer);
        this.AjaxLite = AjaxLite;
        this.storage = storage;
        this.appname = appname;
        this.onNeedAuthorization = onNeedAuthorization;
        this.self = this;
    }_createClass(HueDiscoverer, [{ key: 'bridgeThenable', value: function bridgeThenable(
        ip) {var _this5 = this;
            var bridgeThenable = new Promise(function (resolve, reject) {
                if (!ip) {
                    reject(ip);
                    return;
                }

                var bridge = null;

                function onResolve(ip, status, message) {
                    resolve(bridge, ip, status, message);
                }
                function onReject(ip, status, message) {
                    reject(bridge, ip, status, message);
                }

                bridge = new HueBridge(_this5.AjaxLite, _this5.storage, ip, _this5.appname, _this5.username,
                _this5.onNeedAuthorization,
                function (ip, status, message) {return onResolve(bridge, status, message);},
                function (ip, status, message) {return onReject(bridge, status, message);});
                bridge.getLightState();
            });
            return bridgeThenable;
        } }, { key: 'start', value: function start(
        ip) {var _this6 = this;var brute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            function getIP() {
                return this.storage.get('lastBridgeIp');
            }
            function getUsername() {
                return this.storage.get('lastUsername');
            }
            function saveIP(ip) {
                this.ip = ip;
            }
            return new Promise(function (resolve, reject) {

                var promise = _this6.self.storage.get('lastBridgeIp').
                then(function (ip) {
                    _this6.self.ip = ip;
                    return _this6.self.storage.get('lastUsername');
                }).
                then(function (val) {return _this6.self.username = val;}).
                then(function () {
                    var promises = [];
                    if (ip) {
                        promises.push(_this6.self.bridgeThenable(ip)); // from arguments
                    }
                    if (_this6.self.ip) {
                        promises.push(_this6.self.bridgeThenable(_this6.self.ip)); // from storage
                    }
                    return promises.length != 0 ? Promise.any(promises) : Promise.reject();
                }).
                catch(function () {
                    var promises = [];
                    var meethuePromise = new Promise(function (resolve, reject) {
                        return new MeetHueLookup(_this6.self.AjaxLite).discover().then(function (ips) {
                            var bridges = [];var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
                                for (var _iterator = ips[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var i = _step.value;
                                    bridges.push(_this6.self.bridgeThenable(i));
                                }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}
                            Promise.any(bridges).then(function (bridges) {return resolve(bridges[0]);}, function () {return reject();});
                        }, function () {return reject();});
                    });
                    promises.push(meethuePromise);

                    if (brute === true) {
                        var ips = BruteForcer.ips();var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {
                            for (var _iterator2 = ips[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var i = _step2.value;
                                if (i !== _this6.self.ip && i !== ip) {
                                    promises.push(_this6.self.bridgeThenable(i)); // 84 requests
                                }
                            }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}
                    }
                    return Promise.any(promises);
                }).
                then(function (bridges) {
                    _this6.self.storage.set('lastBridgeIp', bridges[0].ip);
                    _this6.self.storage.set('lastUsername', bridges[0].username);
                    resolve(bridges[0]);
                }).
                catch(function () {
                    reject();
                });

                //resolve();
                return promise;
            });
        } }]);return HueDiscoverer;}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Philips Hue api wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright 2014 Dmitry Sadakov, All rights reserved.
 * original: https://github.com/bjohnso5/hue-hacking
 * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

'use strict';

/*globals colorUtil:false, HueDiscoverer, AjaxLite, Storage, HueBridge
              */
/*trackEvent*/
/*exported  hue, 
                           findActors, 
                           findGroupIdByName 
               */

// extract hueBridge class (with ip, username, authentication logic)
// todo: remove authentication logic - forward to bridge class
// on start check setup (ip & username) and do fast start.

var hue = function hue($, colors) {

    var discover = null;
    var discoverStatus = 'init';


    var bridge = null,
    bridgeIP = '', // Hue bridge's IP address 
    appname = 'lightswitch-v5', // API key registered with hue bridge
    username = '',
    status = { status: 'init', text: 'Initializing...' }, // system status
    state = null, // bridge state

    // defaults
    baseUrl = 'http://' + bridgeIP + '/api',
    baseApiUrl = null, //baseUrl + '/' + appname,
    lightApiUrl = null, // baseApiUrl + '/lights',
    lastResult = null,
    numberOfLamps = 3, // defaulted to the # of lamps included in the starter kit, update if you've connected additional bulbs

    // lamp states:
    shortFlashType = 'select',
    longFlashType = 'lselect',
    offState = { on: false },
    onState = { on: true },
    shortFlashState = { alert: shortFlashType },
    longFlashState = { alert: longFlashType },
    transitionTime = null,
    errorCounter = 0;

    //discover = hueDiscoverer(appname, onNeedAuthorization, onIpAuthorized, onError, onComplete);
    discover = new HueDiscoverer(AjaxLite, Storage, appname, onNeedAuthorization);

    var statusInit = { status: 'init', text: 'Initializing...' };
    var statusNeedAuth = { status: 'Authenticating', text: 'Bridge found. Press the bridge button...' };

    function onNeedAuthorization(ip) {
        statusNeedAuth.text = 'Bridge found at ' + ip + '.<br >Press the bridge button...';
        onStatus(statusNeedAuth);
        discoverStatus = 'auth';
    }

    function onBridgeError(err) {
        console.log('onBridgeError' + err);
        onError(err);
    }

    function onIpAuthorized(bridgeAuthorized, ip, usernameArg, message, data) {

        //if(bridge === null || !(ip === bridge.ip() && username === bridge.username())) {
        bridge = new HueBridge(
        AjaxLite,
        Storage,
        bridgeAuthorized.ip,
        appname,
        bridgeAuthorized.username,
        onNeedAuthorization,
        onIpAuthorized,
        onBridgeError,
        10);
        discoverStatus = 'ok';

        bridgeIP = bridge.ip;
        username = bridge.username;
        updateURLs();

        //} 

        if (data === undefined) {
            bridge.getBridgeState();
        } else {
            onNewState(data); // safe to delete
        }
    }

    function onDiscoverError(ip, msg, text) {
        //onStatus(statusNoBridge);
        if (status !== null) {
            if (status.status !== statusNeedAuth.status) {
                updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');
            } else {
                // discover:
                setTimeout(function () {return rediscover();}, 2000);
            }
        }
    }

    function rediscover(ip) {
        discover.start(ip).then(function (bridge, ip, username, message, data) {
            onIpAuthorized(bridge, ip, username, message, data);
        },
        function (ip, msg, text) {
            onDiscoverError(ip, msg, text);
        });

        updateStatus(statusInit.status, statusInit.text);
    }

    function onError(ip, msg, text) {
        updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');
    }

    var onLampError = function onLampError(err) {
        // do nothing for now.
        errorCounter++;
    },
    /**
        * Reconstruct the baseUrl and baseApiUrl members when configuration is updated.
        */
    updateURLs = function updateURLs() {
        baseUrl = 'http://' + bridgeIP + '/api';
        baseApiUrl = baseUrl + '/' + username;
        lightApiUrl = baseApiUrl + '/lights';
    },
    /**
        * Sets the response to the lastResult member for use. Currently unused.
        *
        * @param {String} Response data as a String
        * @param {String} Status text
        * @param {jqXHR} jQuery XmlHttpResponse object
        */
    apiSuccess = function apiSuccess(data, successText, jqXHR) {
        lastResult = data;
        log(JSON.stringify(lastResult));
    },

    /**
        * Convenience function to perform an asynchronous HTTP PUT with the
        * provided JSON data.
        *
        * @param {String} url The URL to send the PUT request to.
        * @param {Function} callback The function to invoke on a successful response.
        * @param {Object} data The JSON data.
        * @return {Object} The JSON data.
        */
    putJSON = function putJSON(url, callback, error, data) {
        var options = {
            type: 'PUT',
            url: url,
            success: callback,
            error: error || onLampError,
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;
    },

    postJSON = function postJSON(url, callback, error, data) {
        var options = {
            type: 'POST',
            url: url,
            success: callback,
            error: error || onLampError,
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;
    },

    del = function del(url, callback, error, data) {
        var options = {
            type: 'DELETE',
            url: url,
            success: callback,
            error: error || onLampError };

        $.ajax(options);
        log(JSON.stringify(options));
    },

    /**
        * Convenience function used to query the state of a Hue lamp or other
        * bridge-administered resource.
        *
        * @param {String} destination URL to send HTTP GET request to.
        * @param {Function} success Callback function to invoke on successful response.
        * @return {Object} JSON bulb configuration data.
        */
    get = function get(destination, _success, error) {
        var callback = _success || null;
        callback = null === callback ? apiSuccess : _success;

        $.ajax({
            dataType: 'json',
            url: destination,
            success: function success(data) {
                _success(data);
            },
            error: error,
            timeout: 2000 });

    },

    /**
        * Convenience function used to build a state URL for a provided Hue lamp
        * index.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp.
        * @return {String} URL to put state to a lamp.
        */
    buildStateURL = function buildStateURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex + '/state';
    },

    /**
        * Convenience function used to build a state URL for a provided Hue lamp
        * group.
        *
        * @param {Number} groupIndex 0-based index of the lamp group.
        * @return {String} URL to trigger a group action.
        */
    buildGroupActionURL = function buildGroupActionURL(groupIndex /* {Number} */) {
        return baseApiUrl + '/groups/' + groupIndex + '/action';
    },

    buildGroupURL = function buildGroupURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/groups/' + key;
        }
        return baseApiUrl + '/groups';
    },
    buildSceneURL = function buildSceneURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/scenes/' + key;
        }
        return baseApiUrl + '/scenes';
    },
    /**
        * Convenience function used to initiate an HTTP PUT request to modify 
        * state.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
        * @param {String} data String containing the JSON state object to commit to the lamp.
        * @param {Function} success Callback function to invoke on successful response.
        * @return {Object} JSON bulb state data.
        */
    put = function put(lampIndex, data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;
        return putJSON(buildStateURL(lampIndex), callback, error, data);
    },

    /**
        * Convenience function used to initiate an HTTP PUT request to modify state of a group of lamps.
        *
        * @param {Number} Index of the lamp group to modify
        * @param {Object} Object containing desired lamp state
        * @return {Object} JSON bulb group state data.
        */
    putGroupAction = function putGroupAction(groupIndex /* {Number} */, action /* String */) {
        var callback = apiSuccess;
        var error = log;
        return putJSON(buildGroupActionURL(groupIndex), callback, error, action);
    },

    postGroup = function postGroup(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name, lights: lampIds };
        return postJSON(buildGroupURL(), callback, error, state);
    },
    deleteGroup = function deleteGroup(key) {
        var callback = apiSuccess;
        var error = log;
        return del(buildGroupURL(key), callback, error);
    },
    getRandomInt = function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    putScene = function putScene(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name + ' on 0', lights: lampIds };
        var key = getRandomInt(100000000, 999999999) + '-on-0';
        return putJSON(buildSceneURL(key), callback, error, state);
    },

    _startSchedule = function _startSchedule(id) {
        if (state !== null) {
            // build schedule command, execute:
            var schedule = state.schedules[id];
            if (schedule) {
                var cmd = schedule.command;
                if (cmd.method.toLowerCase() === 'put') {
                    var url = baseUrl + cmd.address.substring('/api'.length);
                    putJSON(url, apiSuccess, log, cmd.body);
                }
            }
        } else {
            // error
        }
    },
    /*
       updateScene = function(key, name, lampIds) {
           var callback = apiSuccess;
           var error = log;
           var state = {name: name, lights: lampIds };
           return putJSON(buildSceneURL(key), callback, error, state);
       },*/
    /*
                    // http://www.developers.meethue.com/documentation/schedules-api-0#31_get_all_schedules
                    getSchedules = function () {
                       return get(buildSchedulesURL(lampIndex), function(data) {
                            // success
                            if (data.state === undefined) {
                                // fail
                                return;
                            }
                            success(data.state.bri);
                        }, function(err){
                            err = null;
                            // fail
                        });
                   },
            
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#32_create_schedule
                # TODO: strip whitespace from command
                @createSchedule = (name="schedule", description="", command, time, status="enabled", autodelete=false) ->
                  _setup().then ->
                    body = {
                      "name": name
                      "description": description
                      "command": command
                      "time": time
                      "status": status
                      "autodelete": autodelete
                    }
                    _apiCall "post", ["schedules"], body
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#33_get_schedule_attributes
                @getScheduleAttributes = (id) ->
                  _setup().then ->
                    _apiCall "get", ["schedules", id]
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#34_set_schedule_attributes
                @setScheduleAttributes = (id, name=null, description=null, command=null, time=null, status=null, autodelete=null) ->
                  _setup().then ->
                    body = {}
                    body.name = name if name
                    body.description = description if description
                    body.command = command if command
                    body.status = status if status
                    body.autodelete = autodelete if autodelete != null
                    _apiCall "put", ["schedules", id], body
            
                # http://www.developers.meethue.com/documentation/schedules-api-0#35_delete_schedule
                @deleteSchedule = (id) ->
                  _setup().then ->
                    _apiCall "delete", ["schedules", id]
            
            */

    /**
                * Convenience function used to initiate HTTP PUT requests to modify state
                * of all connected Hue lamps.
                *
                * @param {String} data String containing the JSON state object to commit to the lamps.
                * @param {Function} success Callback function to invoke on successful response.
                * @return {Object} JSON object containing state to apply to lamp.
                */
    putAll = function putAll(data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;

        for (var i = 0; i < numberOfLamps; ++i) {
            putJSON(buildStateURL(i + 1), callback, error, data);
        }
        return data;
    },

    /**
        * Convenience function used to build a URL to query a lamp's status.
        *
        * @param {Number} lampIndex 1-based index of the Hue lamp.
        * @return {String} URL to query a specific lamp.
        */
    buildLampQueryURL = function buildLampQueryURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex;
    },

    /** 
        * Builds a JSON state object for the CIE 1931 color coordinates provided.
        * If the transitionTime property has been set, it is also included in the
        * JSON object.
        *
        * @param {Number[]} CIE 1931 X,Y color coordinates.
        * @return {Object} State object containing CIE X,Y coordinates.
        */
    buildXYState = function buildXYState(xyCoords /* Number[] */, brightness, transitionTimeOverride) {
        var stateObj = { xy: xyCoords };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;
        }
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    /** 
        * Builds a JSON state object for the hue, saturation, and brightness provided.
        * @param {Number} hue from 0 to 65535.
        * @param {Number} sat from 0 to 255.
        * @param {Number} bri from 0 to 255.
        * @return {Object} State object containing CIE X,Y coordinates.
        */
    buildHueSatState = function buildHueSatState(hue, sat, brightness, transitionTimeOverride) {
        var stateObj = { hue: hue, sat: sat };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;
        }
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },
    addTransitionTime = function addTransitionTime(stateObj, transitionTimeOverride) {
        if (typeof transitionTime === 'number') {
            stateObj.transitiontime = transitionTime;
        }
        if (typeof transitionTimeOverride === 'number') {
            stateObj.transitiontime = transitionTimeOverride;
        }
    },
    buildSceneState = function buildSceneState(sceneKey, transitionTimeOverride) {
        var stateObj = { scene: sceneKey };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    /**
        * Returns the brightness of the lamp at lampIndex.
        *
        * @param {Number} lampIndex 1-based index of the lamp to query.
        * @return {Number} Brightness of the lamp at lampIndex. 0 - 255.
        */
    getBrightness = function getBrightness(lampIndex /* Number */, success) {
        get(buildLampQueryURL(lampIndex), function (data) {
            // success
            if (data.state === undefined) {
                // fail
                return;
            }
            success(data.state.bri);
        }, function (err) {
            err = null;
            // fail
        });
        //return lampState.state.bri;
    },

    /**
        * Builds a JSON state object used to set the brightness of a Hue lamp to
        * the value of the brightness parameter.
        *
        * @param {Number} brightness Integer value between 0 and 255. Note that 0
        * is not equivalent to the lamp's off state.
        * @return {Object} JSON object used to set brightness.
        */
    buildBrightnessState = function buildBrightnessState(brightness, transitionTimeOverride) {
        var stateObj = { bri: Number(brightness) };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;
    },

    adjustBrightness = function adjustBrightness(lampId, brightness, success) {
        brightness = Number(brightness);
        getBrightness(lampId, function (currentBrightness) {
            var adjustedBrightness = currentBrightness + brightness;
            var newBrightness = adjustedBrightness < 255 ? adjustedBrightness : 254;
            newBrightness = adjustedBrightness > 0 ? adjustedBrightness : 0;
            success(Math.round(newBrightness));
        });
    },
    getLightState = function getLightState() {
        bridge.getLightState(onLightUpdate);
    },
    onLightUpdate = function onLightUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state.lights = data.lights;
        }
    },
    onBridgeUpdate = function onBridgeUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state = data;
            onNewState(data);
        }
    },
    getBridgeState = function getBridgeState() {
        bridge.getBridgeState(onBridgeUpdate);
    },
    onNewState = function onNewState(data) {
        //log('Authorized');
        /* jshint ignore:start */
        if (!(typeof testData === 'undefined')) {
            data = testData;
        }
        /* jshint ignore:end */

        // cache state
        state = data;
        // re-create virtual All group:
        var lampIds = $.map(state.lights, function (lamp, key) {
            return key;
        });
        state.groups['0'] = {
            name: 'All',
            lights: lampIds,
            type: 'LightGroup',
            action: {} };


        //log('hue: saving state - ' + JSON.stringify(data));

        numberOfLamps = Object.keys(data.lights).length;
        var message = 'No  lights found';
        if (numberOfLamps === 0) {
            message = 'No lights found.';
        } else if (numberOfLamps === 1) {
            message = 'One light found.';
        } else {
            message = '' + numberOfLamps + ' lights found.';
        }

        log('Updating Status - ok...');
        updateStatus('OK', message);
    },

    /**
        * Log to console
        */
    updateStatus = function updateStatus(inStatus, text, data) {
        var newStatus = { status: inStatus, text: text, data: data };
        onStatus(newStatus);
    },
    onStatus = function onStatus(newStatus) {
        if (JSON.stringify(status) !== JSON.stringify(newStatus)) {
            console.log('hue: status change, ' + newStatus.status + ', text: ' + newStatus.text + ', data: ' + newStatus.data);
            status = newStatus;
        }
    },
    log = function log(text) {
        console.log('hue: ' + text);
        if (typeof logHandler !== 'undefined') {
            logHandler(text);
        }
    },
    _setHueSatState = function _setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
        var state = buildHueSatState(hue, sat, bri, transitiontime);
        put(lampIndex, state);
    },
    _setXYState = function _setXYState(lampIndex /* Number */, xy, transitiontime, bri) {
        var state = buildXYState(xy, bri, transitiontime);
        put(lampIndex, state);
    };

    return {
        /** 
              * Flash the lamp at lampIndex for a short time. 
              *	
              * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
              * @return {Object} JSON object containing lamp state.
              */
        flash: function flash(lampIndex /* Number */) {
            return put(lampIndex, shortFlashState);
        },
        /** 
            * Flash all connected lamps for a short time.
            *
            * @return {Object} JSON object containing lamp state.
            */
        flashAll: function flashAll() {
            return putAll(shortFlashState);
        },
        /** 
            * Flash the lamp at lampIndex for a long time.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
            * @return {Object} JSON object containing lamp state.
            */
        longFlash: function longFlash(lampIndex /* Number */) {
            return put(lampIndex, longFlashState);
        },
        /** 
            * Flash all connected lamps for a long time.
            *
            * @return {Object} JSON object containing lamp state.
            */
        longFlashAll: function longFlashAll() {
            return putAll(longFlashState);
        },
        /** 
            * Set the lamp at lampIndex to the approximate CIE x,y equivalent of 
            * the provided hex color.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to colorize.
            * @param {String} color String representing a hexadecimal color value.
            * @return {Object} JSON object containing lamp state.
            */
        setColor: function setColor(lampIndex /* Number */, color /* String */, transitiontime, brightness) {
            var xy = colors.getCIEColor(color);
            if (typeof brightness === 'number') {
                if (brightness < 0) {// min
                    // adjust it:
                    var bri = colorUtil().getBrightness(color);
                    adjustBrightness(lampIndex, bri, function (bri) {
                        _setXYState(lampIndex, xy, transitiontime, bri);
                    });
                    return;
                }
                _setXYState(lampIndex, xy, transitiontime, brightness);

            } else {
                _setXYState(lampIndex, xy, transitiontime, null);
            }
        },
        setXYState: function setXYState(lampIndex, xy, transitiontime, bri) {
            _setXYState(lampIndex, xy, transitiontime, bri);
        },
        /** 
            * Sets state for the hue, saturation, and brightness provided.
            * @param {Number} hue from 0 to 65535.
            * @param {Number} sat from 0 to 255.
            * @param {Number} bri from 0 to 255.
            * @return {Object} State object containing CIE X,Y coordinates.
            */
        setHueSatState: function setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
            _setHueSatState(lampIndex, hue, sat, bri, transitiontime);
        },

        /**
            * Sets all connected lamps to the approximate CIE x,y equivalent of 
            * the provided hex color.
            *
            * @param {String} color String representing a hexadecimal color value.
            * @return {Object} JSON object containing lamp state.
            */
        setAllColors: function setAllColors(color /* String */) {
            var xy = colors.getCIEColor(color);
            colorUtil().getBrightness(color, function (bri) {
                var state = buildXYState(xy, bri);
                putGroupAction(0, state);
            });
        },
        createGroup: function createGroup(name, lights) {
            return postGroup(name, lights);
        },
        removeGroup: function removeGroup(key) {
            return deleteGroup(key);
        },
        createScene: function createScene(name, lights) {
            return putScene(name, lights);
        },
        /** 
            * Turn on scene by key
            */
        startScene: function startScene(sceneKey) {
            var state = buildSceneState(sceneKey);
            return putGroupAction(0, state);
            //var scene = hue.getState().scenes[sceneKey];
            //if (scene !== undefined) {
            //var state = buildSceneState(sceneKey);
            //$.each(scene.lights, function(index, val){
            //    put(val, state);
            //});       
            //}
        },
        startSchedule: function startSchedule(id) {
            return _startSchedule(id);
        },
        /**
            * Turn off the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to turn off.
            * @return {Object} JSON object containing lamp state.
            */
        turnOff: function turnOff(lampIndex /* Number */) {
            return put(lampIndex, offState);
        },
        /** 
            * Turn on the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to turn on.
            * @return {Object} JSON object containing lamp state.
            */
        turnOn: function turnOn(lampIndex /* Number */) {
            return put(lampIndex, onState);
        },
        /** 
            * Turn off all connected lamps.
            *
            * @return {Object} JSON object containing lamp state.
            */
        turnOffAll: function turnOffAll() {
            if (status.status === 'OK') {status.data = false;}
            return putGroupAction(0, offState);
        },
        /** 
            * Turn on all connected lamps.
            *
            * @return {Object} JSON object containing lamp state.
            */
        turnOnAll: function turnOnAll() {
            if (status.status === 'OK') {status.data = true;}
            return putGroupAction(0, onState);
        },
        /**
            * Set the brightness of the lamp at lampIndex.
            *
            * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing lamp state.
            */
        setBrightness: function setBrightness(lampIndex /* Number */, brightness /* Number */, transitiontime /* Number */) {
            var state = buildBrightnessState(brightness, transitiontime);
            return put(lampIndex, state);
        },
        /**
            * Set the brightness of all connected lamps.
            *
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing all lamp state.
            */
        setAllBrightness: function setAllBrightness(brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(0, state);
        },
        /**
            * Set the brightness of an indexed group of lamps.
            *
            * @param {Number} groupIndex 0-based lamp group index.
            * @param {Number} brightness Integer value between 0 and 254.
            * @return {Object} JSON object containing group state.
            */
        setGroupBrightness: function setGroupBrightness(groupIndex /* Number */, brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(groupIndex, state);
        },
        /**
            * Dim the lamp at lampIndex by decrement.
            * 
            * @param {Number} lampIndex 1-based lamp index.
            * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
            * @return {Object} JSON object containing lamp state.
            */
        dim: function dim(lampIndex /* Number */, decrement /* Number */, transitiontime) {
            decrement = decrement || -10; // default to 10 if decrement not provided.
            adjustBrightness(lampIndex, decrement, function (newBrightness) {
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));
            });
        },
        /**
            * Dim all lamps by decrement.
            * 
            * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
            * @return {Object[]} JSON objects containing lamp states.
            */
        dimAll: function dimAll(decrement /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.dim(i + 1, decrement);
            }
            return states;
        },
        /**
            * Brighten the lamp at lampIndex by increment.
            *
            * @param {Number} lampIndex 1-based lamp index.
            * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
            * @return {Object} JSON object containing lamp state.
            */
        brighten: function brighten(lampIndex, increment, transitiontime) {
            increment = increment || 10;
            adjustBrightness(lampIndex, increment, function (newBrightness) {
                //this.setBrightness(lampIndex, newBrightness, transitiontime);
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));
            });
        },
        /**
            * Brighten all lamps by increment.
            *
            * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
            * @return {Object[]} JSON objects containing lamp states.
            */
        brightenAll: function brightenAll(increment /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.brighten(i + 1, increment);
            }
            return states;
        },
        /** 
            * Return the value of the configured transitionTime property.
            *
            * @return {Number} Value of the transitionTime property. Null by default if not
            * set.
            */
        getTransitionTime: function getTransitionTime() {
            return transitionTime;
        },
        /**
            * Set the value of the transitionTime property.
            *
            * @param {Number} time Lamp color transition time in approximate milliseconds.
            */
        setTransitionTime: function setTransitionTime(time /* Number */) {
            transitionTime = time;
        },
        /**
            * Find bridges  findBridge() a upnp, then scan, then predefined typical ips. 
            */
        //findBridge: function(onerror) {
        // deprecated, use discover 
        //},
        /**
         * Set the number of lamps available to control.
         *
         * @param {Number} The total number of lamps available to interact with. Default is 3.
         */
        setNumberOfLamps: function setNumberOfLamps(numLamps /* Number */) {
            if (typeof numLamps === 'number') {
                numberOfLamps = numLamps;
            }
        },
        setLogger: function setLogger(func) {
            console.log('new subscriber to log change registered;');
            logHandler = func;
        },
        getState: function getState() {
            return state;
        },
        getStatus: function getStatus() {
            return status;
        },
        refresh: function refresh() {
            getBridgeState();
        },
        heartbeat: function heartbeat() {
            getLightState();
        },
        getLampIds: function getLampIds(actors) {
            // parse actors
            //actors
            if (actors === null) {
                return []; // no lamps
            }
            if (actors.substring(0, 'group-'.length) === 'group-')
            {
                var group = actors.substring('group-'.length);
                if (state.groups[group] === undefined) {
                    // error.
                    return [];
                }
                return state.groups[group].lights;
            }
            return [actors]; // lights: prefix not used, just return array of number.
        },
        discover: function discover(ip) {
            rediscover(ip);
        } };

};


function findActors(key) {
    return findGroupIdByName(key);
}

function findGroupIdByName(name) {
    if (name.toLowerCase() === 'all') {
        return '0'; // special case group-0 is all.
    }
    var state = window.hue.getState();
    if (state !== null) {
        for (var group in state.groups) {
            if (state.groups[group].name.toLowerCase() === name.toLowerCase()) {
                return group;
            }
        }
    }
    return null;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Color Util
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

'use strict';

/*exported colorUtil */
var colorUtil = function colorUtil() {


    function colourNameToHex(colour)
    {
        var colours = {
            'aliceblue': '#f0f8ff',
            'antiquewhite': '#faebd7',
            'aqua': '#00ffff',
            'aquamarine': '#7fffd4',
            'azure': '#f0ffff',
            'beige': '#f5f5dc',
            'bisque': '#ffe4c4',
            'black': '#000000',
            'blanchedalmond': '#ffebcd',
            'blue': '#0000ff',
            'blueviolet': '#8a2be2',
            'brown': '#a52a2a',
            'burlywood': '#deb887',
            'cadetblue': '#5f9ea0',
            'chartreuse': '#7fff00',
            'chocolate': '#d2691e',
            'coral': '#ff7f50',
            'cornflowerblue': '#6495ed',
            'cornsilk': '#fff8dc',
            'crimson': '#dc143c',
            'cyan': '#00ffff',
            'darkblue': '#00008b',
            'darkcyan': '#008b8b',
            'darkgoldenrod': '#b8860b',
            'darkgray': '#a9a9a9',
            'darkgreen': '#006400',
            'darkkhaki': '#bdb76b',
            'darkmagenta': '#8b008b',
            'darkolivegreen': '#556b2f',
            'darkorange': '#ff8c00',
            'darkorchid': '#9932cc',
            'darkred': '#8b0000',
            'darksalmon': '#e9967a',
            'darkseagreen': '#8fbc8f',
            'darkslateblue': '#483d8b',
            'darkslategray': '#2f4f4f',
            'darkturquoise': '#00ced1',
            'darkviolet': '#9400d3',
            'deeppink': '#ff1493',
            'deepskyblue': '#00bfff',
            'dimgray': '#696969',
            'dodgerblue': '#1e90ff',
            'firebrick': '#b22222',
            'floralwhite': '#fffaf0',
            'forestgreen': '#228b22',
            'fuchsia': '#ff00ff',
            'gainsboro': '#dcdcdc',
            'ghostwhite': '#f8f8ff',
            'gold': '#ffd700',
            'goldenrod': '#daa520',
            'gray': '#808080',
            'green': '#008000',
            'greenyellow': '#adff2f',
            'honeydew': '#f0fff0',
            'hotpink': '#ff69b4',
            'indianred ': '#cd5c5c',
            'indigo': '#4b0082',
            'ivory': '#fffff0',
            'khaki': '#f0e68c',
            'lavender': '#e6e6fa',
            'lavenderblush': '#fff0f5',
            'lawngreen': '#7cfc00',
            'lemonchiffon': '#fffacd',
            'lemon': '#fffacd',
            'lightblue': '#add8e6',
            'lightcoral': '#f08080',
            'lightcyan': '#e0ffff',
            'lightgoldenrodyellow': '#fafad2',
            'lightgrey': '#d3d3d3',
            'lightgreen': '#90ee90',
            'lightpink': '#ffb6c1',
            'lightsalmon': '#ffa07a',
            'lightseagreen': '#20b2aa',
            'lightskyblue': '#87cefa',
            'lightslategray': '#778899',
            'lightsteelblue': '#b0c4de',
            'lightyellow': '#ffffe0',
            'lime': '#00ff00',
            'limegreen': '#32cd32',
            'linen': '#faf0e6',
            'magenta': '#ff00ff',
            'maroon': '#800000',
            'mediumaquamarine': '#66cdaa',
            'mediumblue': '#0000cd',
            'mediumorchid': '#ba55d3',
            'mediumpurple': '#9370d8',
            'mediumseagreen': '#3cb371',
            'mediumslateblue': '#7b68ee',
            'mediumspringgreen': '#00fa9a',
            'mediumturquoise': '#48d1cc',
            'mediumvioletred': '#c71585',
            'midnightblue': '#191970',
            'mintcream': '#f5fffa',
            'mistyrose': '#ffe4e1',
            'moccasin': '#ffe4b5',
            'navajowhite': '#ffdead',
            'navy': '#000080',
            'oldlace': '#fdf5e6',
            'olive': '#808000',
            'olivedrab': '#6b8e23',
            'orange': '#ffa500',
            'orangered': '#ff4500',
            'orchid': '#da70d6',
            'palegoldenrod': '#eee8aa',
            'palegreen': '#98fb98',
            'paleturquoise': '#afeeee',
            'palevioletred': '#d87093',
            'papayawhip': '#ffefd5',
            'peachpuff': '#ffdab9',
            'peru': '#cd853f',
            'pink': '#ffc0cb',
            'plum': '#dda0dd',
            'powderblue': '#b0e0e6',
            'purple': '#800080',
            'red': '#ff0000',
            'rosybrown': '#bc8f8f',
            'royalblue': '#4169e1',
            'saddlebrown': '#8b4513',
            'salmon': '#fa8072',
            'sandybrown': '#f4a460',
            'seagreen': '#2e8b57',
            'seashell': '#fff5ee',
            'sienna': '#a0522d',
            'silver': '#c0c0c0',
            'skyblue': '#87ceeb',
            'slateblue': '#6a5acd',
            'slategray': '#708090',
            'snow': '#fffafa',
            'springgreen': '#00ff7f',
            'steelblue': '#4682b4',
            'tan': '#d2b48c',
            'teal': '#008080',
            'thistle': '#d8bfd8',
            'tomato': '#ff6347',
            'turquoise': '#40e0d0',
            'violet': '#ee82ee',
            'wheat': '#f5deb3',
            'white': '#ffffff',
            'whitesmoke': '#f5f5f5',
            'yellow': '#ffff00',
            'yellowgreen': '#9acd32',

            'minty': '#98FF98',
            'coldwhite': '#FFF4E5',
            'warmwhite': '#D4EBFF' };


        // if key exists
        if (typeof colours[colour.toLowerCase()] !== 'undefined') {
            return colours[colour.toLowerCase()];
        }

        return false;
    }

    function isColorHex(hex) {
        var isColor = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
        if (isColor) {
            return true;
        }
        return false;
    }

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }

    function hexToRgb(hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });

        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16) } :
        null;
    }
    /*
      //Converts to color HSB object (code from here 
      // http://www.csgnetwork.com/csgcolorsel4.html 
      //with some improvements)
      function rgb2hsb(r, g, b) {    
          r /= 255; g /= 255; b /= 255; // Scale to unity.   
          var minVal = Math.min(r, g, b),
          maxVal = Math.max(r, g, b),
          delta = maxVal - minVal,
          HSB = {hue:0, sat:0, bri:maxVal},
          del_R, del_G, del_B;
           if( delta !== 0 ) {
              HSB.sat = delta / maxVal;
              del_R = (((maxVal - r) / 6) + (delta / 2)) / delta;
              del_G = (((maxVal - g) / 6) + (delta / 2)) / delta;
              del_B = (((maxVal - b) / 6) + (delta / 2)) / delta;
               if (r === maxVal) {HSB.hue = del_B - del_G;}
              else if (g === maxVal) {HSB.hue = (1 / 3) + del_R - del_B;}
              else if (b === maxVal) {HSB.hue = (2 / 3) + del_G - del_R;}
               if (HSB.hue < 0) {HSB.hue += 1;}
              if (HSB.hue > 1) {HSB.hue -= 1;}
          }
           HSB.hue *= 360;
          HSB.sat *= 100;
          HSB.bri *= 100;
           return HSB;
      }
      */






    return {
        getColor: function getColor(command) {
            //log('get color: ' + command);

            var foundColor = colourNameToHex(command);
            if (foundColor !== false) {
                return foundColor;
            }

            var isColor = isColorHex(command);
            if (isColor) {
                return command;
            }
            return false;
        },
        getBrightness: function getBrightness(hex) {
            var rgb = hexToRgb(hex);
            return Math.round(0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b);
        },
        rgbToHex: function rgbToHex(r, g, b) {
            return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
        } };

};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Philips Hue Commander wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals trackEvent, $, findActors */
/*exported 
                                           hueCommander,
                                           executeCommand,
                                           activatedScene
                                        */

'use strict';

var hueCommander = function hueCommander($, hue, colorUtil, sceneCmd) {

    var logger = null,
    actorId = null,
    stateCache = null,
    executeCommand = function executeCommand(command) {
        log('executing command: ' + command + ' on actor: ' + actorId);
        trackEvent('huecommander', 'command', command);

        if (actorId === null) {
            // by default set all group
            var groupAll = findActors('All');
            if (groupAll === null) {
                actorId = 'group-1';
            } else {
                actorId = 'group-' + groupAll;
            }
        }

        if (command === undefined) {
            return;
        }
        if (command === 'brighten' || command === 'up') {
            //hue.brightenAll(Math.floor(255 / 3));
            executeOnActors(function (bulb) {
                hue.brighten(bulb, Math.floor(255 / 3));
            });
        }
        if (command === 'darken' || command === 'dim' || command === 'dim down' || command === 'down') {
            //hue.brightenAll(Math.floor(-255 / 3));
            executeOnActors(function (bulb) {
                hue.dim(bulb, -Math.floor(255 / 3));
            });
        }
        if (command === 'on') {
            executeOnActors(function (bulb) {
                hue.turnOn(bulb);
            });
            return;
        }
        if (command === 'off') {
            executeOnActors(function (bulb) {
                hue.turnOff(bulb);
            });
            return;
        }
        var json = parseJson(command);
        if (json !== null)
        {
            // hue, sat, bri command:
            if ('hue' in json) {
                executeOnActors(function (bulb) {
                    hue.setHueSatState(bulb, json.hue, json.sat, json.bri, json.time);
                });
                return;
            } else if ('bri' in json) {
                executeOnActors(function (bulb) {
                    hue.setBrightness(bulb, json.bri);
                });
                return;
            }
            //else if('color' in json) {
            //    hue.setColor(color.substring(1));
            //}
        }
        var bri = detectBrightness(command);
        if (bri !== null) {
            executeOnActors(function (bulb) {
                hue.setBrightness(bulb, bri);
            });
            return;
        }
        var color = colorUtil.getColor(command);
        if (color !== false) {
            executeOnActors(function (bulb) {
                hue.setColor(bulb, color.substring(1));
            });
            return;
        }

        if (command === 'scene:stop') {
            sceneCmd.stop();
            restoreState();
            return 'stop';
        } else {
            if (command.lastIndexOf('scene:', 0) === 0) {
                var sceneName = command.substring(6);
                var lampids = hue.getLampIds(actorId);

                saveState();

                sceneCmd.start(sceneName, lampids);
                return sceneName;
            } else if (command.lastIndexOf('schedule:', 0) === 0) {
                var scheduleId = command.substring('schedule:'.length);
                hue.startSchedule(scheduleId);
                return;
            }

        }
    },
    parseJson = function parseJson(cmd) {
        try {
            if (cmd.startsWith('{')) {
                return JSON.parse(cmd);
            }
        }
        catch (ex)
        {
            log('Bad command:' + cmd + ' ex:' + ex.message);
        }
        return null;
    },
    saveState = function saveState() {
        if (stateCache === null) {
            stateCache = getActorStatesInternal();
            log('Saved state' + JSON.stringify(stateCache));
        }
    },
    restoreState = function restoreState() {
        if (stateCache !== null) {
            var newstate = stateCache;
            stateCache = null;
            log('Restoring state' + JSON.stringify(newstate));
            $.each(newstate, function (key, value) {
                hue.setXYState(value.key, value.state.xy, 0, value.state.bri);
            });
            hue.heartbeat(); // force refresh from bridge
        }
    },
    executeOnActors = function executeOnActors(func) {
        sceneCmd.stop();
        restoreState();

        var lampIds = hue.getLampIds(actorId);
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];
        }
        $.each(lampIds, function (index, val) {
            func(val, index);
        });
    },
    detectBrightness = function detectBrightness(command) {
        if (command === undefined) {
            return null;
        }
        if (command.startsWith('bri:')) {
            return command.substring('bri:'.length);
        }
        return null;
    },
    log = function log(text) {
        if (logger !== null) {
            logger(text);
        }
    },
    getActorStatesInternal = function getActorStatesInternal() {
        var lampIds = hue.getLampIds(actorId);
        var state = window.hue.getState();
        var actorStates = [];
        if (state.lights !== null) {
            for (var i in state.lights) {
                var lamp = state.lights[i];
                lamp.key = i;
                if (lampIds.indexOf(i) !== -1) {
                    actorStates.push(lamp);
                }
            }
        }
        return actorStates;
    },
    getActorBrightnessInternal = function getActorBrightnessInternal() {
        var bri = 0;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            if (lamp.state.bri > bri) {
                bri = lamp.state.bri;
            }
        });
        return bri;
    },
    getActorTurnedOn = function getActorTurnedOn() {
        var on = false;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            on = on || lamp.state.on;
        });
        return on;
    },
    _discover = function _discover(ip) {
        hue.discover(ip);
    },
    _heartbeat = function _heartbeat() {
        hue.heartbeat();
    },
    _createGroup = function _createGroup(name, lampIds) {
        hue.createGroup(name, lampIds);
    },
    _removeGroup = function _removeGroup(key) {
        hue.removeGroup(key);
    },
    _createScene = function _createScene(key) {
        var lampIds = hue.getLampIds(actorId);
        hue.createScene(key, lampIds);
    },
    _refresh = function _refresh() {
        hue.refresh();
    },
    _flash = function _flash(key) {
        hue.flash(key);
    },
    _getState = function _getState() {
        var state = hue.getState();
        state.actorId = actorId;
        return state;
    },
    _getStatus = function _getStatus() {
        return hue.getStatus();
    },
    _palette = function _palette(colors) {
        return sceneCmd.palette(colors);
    };



    return {
        setActor: function setActor(actor) {
            actorId = actor;
            return actorId;
        },
        getActor: function getActor(actor) {
            return actorId;
        },
        getActorBrightness: function getActorBrightness() {
            return {
                bri: getActorBrightnessInternal(),
                on: getActorTurnedOn() };

        },
        getActorStates: function getActorStates() {
            return getActorStatesInternal();
        },
        command: function command(commandText) {
            return executeCommand(commandText);
        },
        setLogger: function setLogger(logHandler) {
            logger = logHandler;
        },
        discover: function discover(ip) {
            _discover(ip);
        },
        heartbeat: function heartbeat() {
            _heartbeat();
        },
        createGroup: function createGroup(group) {
            //name, lampIds){
            _createGroup(group.name, group.lampIds);
        },
        removeGroup: function removeGroup(key) {
            _removeGroup(key);
        },
        createScene: function createScene(name) {
            //name, lampIds){
            _createScene(name);
        },
        refresh: function refresh() {
            _refresh();
        },
        flash: function flash(key) {
            _flash(key);
        },
        getState: function getState() {
            return _getState();
        },
        getStatus: function getStatus() {
            return _getStatus();
        },
        palette: function palette(colors) {
            return _palette(colors);
        },
        parse: function parse(cmd) {
            return this[cmd.hueCommand.command](cmd.hueCommand.args);
        } };

};


function executeCommand(command) {
    window.hueCommander.command(command);
    //activatedScene('stop');
    return false;
}

function activatedScene(key) {
    $('#scenes button').removeClass('active');
    $('.scene').removeClass('active');
    $('#scenes button[id="' + key + '"]').addClass('active');
    $('.scene[data-scene="' + key + '"]').addClass('active');
}

function activatedSchedule(key) {
    $('#schedule button').removeClass('active');
    $('.schedule').removeClass('active');
    $('#schedule button[id="schedule-' + key + '"]').addClass('active');
    $('.schedule[data-schedule="' + key + '"]').addClass('active');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

// Dmitry Sadakov 2015 Voice module
/*globals 
    SpeechSynthesisUtterance: false,
    trackEvent
*/
/*exported voice, voiceCommander, huevoice, voiceCmd */
'use strict';

var voice = function voice() {

    var recognition = null;
    var callback = null;
    var errfunc = null;
    var endfunc = null;

    function _speak(text) {
        if ('speechSynthesis' in window) {
            var speech = new SpeechSynthesisUtterance();
            speech.lang = 'en-US';
            speech.text = text;
            window.speechSynthesis.speak(speech);
        }
    }

    function available() {
        var SpeechRecognition = window.SpeechRecognition ||
        window.webkitSpeechRecognition ||
        window.mozSpeechRecognition ||
        window.msSpeechRecognition ||
        window.oSpeechRecognition;
        return SpeechRecognition;
    }

    function _recognize(callbackFunc, err, onend) {
        callback = callbackFunc;
        errfunc = err;
        endfunc = onend;

        var SpeechRecognition = available();
        if (SpeechRecognition !== undefined) {
            if (recognition === null) {
                recognition = new SpeechRecognition();
            } else {
                return recognition;
            }
        } else
        {
            console.error('Your browser does not support the Web Speech API');
            _speak('Voice not supported');
            return null;
        }
        recognition.lang = 'en-US';
        recognition.continuous = true;
        recognition.interimResults = false;
        recognition.onresult = onSpeechResult;
        recognition.onstart = onStarted;
        recognition.onerror = onErrored;
        recognition.onend = onEnd;
        return recognition;
    }

    function onStarted() {
        console.log('voice started');
        trackEvent('voice', 'started');
    }

    function onErrored(err) {
        console.log('voice error: ' + err);
        if (errfunc) {
            errfunc(err);
        }
        trackEvent('voice', 'error', err.message);
    }

    function onEnd() {
        console.log('voice end');
        //recognition.start();
        if (endfunc) {
            endfunc();
        }
    }

    function onSpeechResult(e) {
        var text = '';
        for (var i = e.resultIndex; i < e.results.length; ++i) {
            text += e.results[i][0].transcript;
        }

        console.log('voice:' + text);
        trackEvent('voice', 'speech', text);

        if (callback) {
            callback(text);
        }
    }

    function _start() {
        if (recognition) {
            recognition.start();
        }
    }

    function _stop() {
        if (recognition) {
            recognition.stop();
        }
    }

    function _abort() {
        if (recognition) {
            recognition.abort();
        }
    }

    return {
        speak: function speak(text) {
            return _speak(text);
        },
        recognize: function recognize(func, errfunc, endfunc) {
            return _recognize(func, errfunc, endfunc);
        },
        start: function start() {
            return _start();
        },
        stop: function stop() {
            return _stop();
        },
        abort: function abort() {
            return _abort();
        },
        notAvailable: function notAvailable() {
            return available() === undefined;
        } };

};


var reaction = function reaction() {
    var items = [];
    var filters = [];
    var otherwise = null;

    function _on(regex, func) {
        items.push([regex, func]);
    }

    function filterAdd(func) {
        filters.push(func);
    }

    function _setDefault(func) {
        otherwise = func;
    }

    function _react(text) {
        var textIn = text;
        for (var index in filters) {
            text = filters[index](text);
        }

        var obj = { 'voice': true, 'text': textIn, 'text-reaction': text, match: false };
        for (var item in items) {
            if (items[item][0].test(text)) {
                console.log('filtered text: "' + textIn + '" -> "' + text + '" matched: ' + items[item][0]);
                obj.match = items[item][0];
                trackEvent('voice', 'reaction', text, textIn, obj);
                var args = items[item][0].exec(text);
                args.unshift(text);
                var func = items[item][1];
                func.apply(null, args);
                return;
            }
        }
        console.log('filtered text: "' + textIn + '" -> "' + text + '", no match');
        trackEvent('voice', 'reaction', text, textIn, obj);
        if (otherwise) {
            otherwise.apply(null, [text]);
        }
    }

    return {
        on: function on(text, func) {
            _on(text, func);
        },
        react: function react(text) {
            _react(text);
        },
        setDefault: function setDefault(text) {
            _setDefault(text);
        },
        filter: function filter(func) {
            filterAdd(func);
        } };

};

var voiceCommander = function voiceCommander(voiceFunc) {
    var voiceCallback = voiceFunc;

    function lightCmdParser() {
        var cmds = new reaction();
        cmds.filter(removeDeterminers);
        cmds.filter(replaceLightSynonyms);
        cmds.filter(replaceSceneSynonyms);
        cmds.filter(replaceCommandSynonyms);

        cmds.on(/make it look like (?:a )?(.+)/, sceneCmd);
        cmds.on(/(?:start |stop )(?:dynamic )?([a-z ]+)(?: scene| lights)?(?: in )([a-z ]+)/, toggleSceneCmd);
        cmds.on(/(start|stop)(?: dynamic)?(?: scene| lights)?/, toggleSceneCmd);
        cmds.on(/(?:set|up|dim) ([a-z ]+) to ([a-z0-9%]*)(?: brightness)?/, inverseCmd);
        cmds.on(/(?:set|up|dim) to ([a-z0-9%]*)(?: brightness)?/, voiceCmd);
        cmds.on(/(on|off|up|dim)+? ([a-z]+)+/, voiceCmd);
        cmds.on(/([a-z0-9% ]*) brightness/, inverseCmd);
        cmds.on(/([a-z]+) (on|off|up|dim|dimmer)+?/, inverseCmd);
        cmds.on(/(on|off|up|dim|dimmer)+ ([a-z]+)/, voiceCmd);
        cmds.on(/(on|off|up|down|dim|lower|higher)/, voiceCmd);
        cmds.setDefault(function (text) {
            voiceCallback(text);
        });
        return cmds;
    }

    function removeDeterminers(text) {
        return text.replace(/the |my /g, '');
    }

    function replaceLightSynonyms(text) {
        return text.replace(/bulbs |lamps |lights | lights?/g, '');
    }

    function replaceCommandSynonyms(text) {
        text = text.replace(/ percent/g, '%');
        text = text.replace(/maximum/g, '100%');
        text = text.replace(/minimum/g, '1%');
        text = text.replace(/turn /g, '');
        text = text.replace(/dim down|down|dimmer/g, 'dim');
        text = text.replace(/animate|continue/g, 'start');
        text = text.replace(/brighten|lighten/g, 'up');
        return text;
    }

    function replaceSceneSynonyms(text) {
        return text.replace(/animation|theme/g, 'scene');
    }

    function voiceCmd(text, match, action, actor) {
        if (voiceCallback) {
            voiceCallback(text, match, action, actor);
        }
    }

    //function inverseSceneCmd(text, match, actor, action) {
    //  voiceCmd(text, match, 'scene:' + action, actor);
    //}

    function toggleSceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);
    }

    function inverseCmd(text, match, actor, action) {
        voiceCmd(text, match, action, actor);
    }

    function sceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);
    }

    return lightCmdParser();
};



/*   voice commands */
var huevoice = null;

/*
                     function voiceError(err){
                       var mic = $('#voice-mic');
                       mic.removeClass('active');
                       console.error(err);
                     }
                     
                     function voiceEnd(){
                       var mic = $('#voice-mic');
                       mic.removeClass('active');
                       console.log('voice end');
                     }*/


function voiceCmd(text, match, action, actor) {
    if (window.voiceCmdFunc) {
        window.voiceCmdFunc(text, match, action, actor);
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Dmitry Sadakov's Philips Hue api wrapper background page
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved.
 */
'use strict';

/* global
              	$,
              	hue:false,
               	sceneCommander:false,
               	config:false,
               	voiceCmd,
               	findActors,
               	setActor,
               	huevoice,
               	executeCommand,
               	hueCommander,
               	colorUtil,
               	sceneCmd
               */

/* exported hasAllUrlAccess, requestAmbientPermission, voiceCmdFunc */

// $(document).ready(function(){
window.hue = hue(window.jQuery, window.colors);
// window.hue.findBridge();
window.hue.discover();
window.sceneCmd = sceneCommander(window.jQuery, window.hue);
window.hueCommander = hueCommander(window.jQuery, window.hue, colorUtil(), sceneCmd);

if (config.app === 'app') {
  /* global chrome */
  if (chrome.app.runtime.onLaunched !== undefined) {
    chrome.app.runtime.onLaunched.addListener(function () {
      chrome.app.window.create('index.html', {
        id: 'app',
        frame: 'none',
        resizable: false,
        innerBounds: {
          width: 320,
          height: 140 } });


    });
  }
}
//});


// listen to external voices
chrome.runtime.onMessageExternal.addListener(onExternal);

function onExternal(request, sender, sendResponse) {
  console.log('onExternal');
  if (request.voiceCmd) {
    console.log(request.voiceCmd.text + ',' +
    request.voiceCmd.match + ',' +
    request.voiceCmd.action + ',' +
    request.voiceCmd.actor);

    voiceCmd(request.voiceCmd.text,
    request.voiceCmd.match,
    request.voiceCmd.action,
    request.voiceCmd.actor);
  }
  if (request.hueCommand) {
    console.log('onExternal:' + request.hueCommand.command + ',' + request.hueCommand.args);

    var result = hueCommander.parse(request);
    if (sendResponse) {
      console.log('sending response to onExternal');
      sendResponse(result);
    }
  }
}



function voiceCmdFunc(text, match, action, actor) {
  try {

    if (actor !== undefined) {
      var actorId = findActors(actor);
      if (actorId !== null) {
        setActor('group-' + actorId);
      } else {
        huevoice.speak('Cannot find the ' + actor + ' lights');
        return;
      }
    }

    if ($.inArray(action, ['on', 'off', 'dim', 'dim down', 'up', 'brighten', 'lighten', 'down', 'light up']) >= 0 || action.match('^scene:')) {
      executeCommand(action);
    }
  } catch (err) {
    console.log(err);
    // nothing
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tncm91bmQuanMiXSwibmFtZXMiOlsid2luZG93IiwiaHVlIiwialF1ZXJ5IiwiY29sb3JzIiwiZGlzY292ZXIiLCJzY2VuZUNtZCIsInNjZW5lQ29tbWFuZGVyIiwiaHVlQ29tbWFuZGVyIiwiY29sb3JVdGlsIiwiY29uZmlnIiwiYXBwIiwiY2hyb21lIiwicnVudGltZSIsIm9uTGF1bmNoZWQiLCJ1bmRlZmluZWQiLCJhZGRMaXN0ZW5lciIsImNyZWF0ZSIsImlkIiwiZnJhbWUiLCJyZXNpemFibGUiLCJpbm5lckJvdW5kcyIsIndpZHRoIiwiaGVpZ2h0Iiwib25NZXNzYWdlRXh0ZXJuYWwiLCJvbkV4dGVybmFsIiwicmVxdWVzdCIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJ2b2ljZUNtZCIsInRleHQiLCJtYXRjaCIsImFjdGlvbiIsImFjdG9yIiwiaHVlQ29tbWFuZCIsImNvbW1hbmQiLCJhcmdzIiwicmVzdWx0IiwicGFyc2UiLCJ2b2ljZUNtZEZ1bmMiLCJhY3RvcklkIiwiZmluZEFjdG9ycyIsInNldEFjdG9yIiwiaHVldm9pY2UiLCJzcGVhayIsIiQiLCJpbkFycmF5IiwiZXhlY3V0ZUNvbW1hbmQiLCJlcnIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUE7O0FBRUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBOztBQUVBO0FBQ0FBLE9BQU9DLEdBQVAsR0FBYUEsSUFBSUQsT0FBT0UsTUFBWCxFQUFtQkYsT0FBT0csTUFBMUIsQ0FBYjtBQUNBO0FBQ0FILE9BQU9DLEdBQVAsQ0FBV0csUUFBWDtBQUNBSixPQUFPSyxRQUFQLEdBQWtCQyxlQUFlTixPQUFPRSxNQUF0QixFQUE4QkYsT0FBT0MsR0FBckMsQ0FBbEI7QUFDQUQsT0FBT08sWUFBUCxHQUFzQkEsYUFBYVAsT0FBT0UsTUFBcEIsRUFBNEJGLE9BQU9DLEdBQW5DLEVBQXdDTyxXQUF4QyxFQUFxREgsUUFBckQsQ0FBdEI7O0FBRUEsSUFBSUksT0FBT0MsR0FBUCxLQUFlLEtBQW5CLEVBQTBCO0FBQ3pCO0FBQ0MsTUFBSUMsT0FBT0QsR0FBUCxDQUFXRSxPQUFYLENBQW1CQyxVQUFuQixLQUFrQ0MsU0FBdEMsRUFBaUQ7QUFDakRILFdBQU9ELEdBQVAsQ0FBV0UsT0FBWCxDQUFtQkMsVUFBbkIsQ0FBOEJFLFdBQTlCLENBQTBDLFlBQVc7QUFDbkRKLGFBQU9ELEdBQVAsQ0FBV1YsTUFBWCxDQUFrQmdCLE1BQWxCLENBQXlCLFlBQXpCLEVBQXVDO0FBQ3RDQyxZQUFJLEtBRGtDO0FBRXRDQyxlQUFPLE1BRitCO0FBR3RDQyxtQkFBVyxLQUgyQjtBQUlyQ0MscUJBQWE7QUFDWEMsaUJBQU8sR0FESTtBQUVYQyxrQkFBUSxHQUZHLEVBSndCLEVBQXZDOzs7QUFTRCxLQVZEO0FBV0E7QUFDRDtBQUNEOzs7QUFHQTtBQUNBWCxPQUFPQyxPQUFQLENBQWVXLGlCQUFmLENBQWlDUixXQUFqQyxDQUE2Q1MsVUFBN0M7O0FBRUEsU0FBU0EsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkJDLE1BQTdCLEVBQXFDQyxZQUFyQyxFQUFtRDtBQUNqREMsVUFBUUMsR0FBUixDQUFZLFlBQVo7QUFDQSxNQUFJSixRQUFRSyxRQUFaLEVBQXNCO0FBQ3BCRixZQUFRQyxHQUFSLENBQVlKLFFBQVFLLFFBQVIsQ0FBaUJDLElBQWpCLEdBQXdCLEdBQXhCO0FBQ1ZOLFlBQVFLLFFBQVIsQ0FBaUJFLEtBRFAsR0FDZSxHQURmO0FBRVZQLFlBQVFLLFFBQVIsQ0FBaUJHLE1BRlAsR0FFZ0IsR0FGaEI7QUFHVlIsWUFBUUssUUFBUixDQUFpQkksS0FIbkI7O0FBS0FKLGFBQVNMLFFBQVFLLFFBQVIsQ0FBaUJDLElBQTFCO0FBQ0VOLFlBQVFLLFFBQVIsQ0FBaUJFLEtBRG5CO0FBRUVQLFlBQVFLLFFBQVIsQ0FBaUJHLE1BRm5CO0FBR0VSLFlBQVFLLFFBQVIsQ0FBaUJJLEtBSG5CO0FBSUQ7QUFDRCxNQUFJVCxRQUFRVSxVQUFaLEVBQXdCO0FBQ3RCUCxZQUFRQyxHQUFSLENBQVksZ0JBQWdCSixRQUFRVSxVQUFSLENBQW1CQyxPQUFuQyxHQUE2QyxHQUE3QyxHQUFtRFgsUUFBUVUsVUFBUixDQUFtQkUsSUFBbEY7O0FBRUEsUUFBSUMsU0FBUy9CLGFBQWFnQyxLQUFiLENBQW1CZCxPQUFuQixDQUFiO0FBQ0EsUUFBR0UsWUFBSCxFQUFpQjtBQUNmQyxjQUFRQyxHQUFSLENBQVksZ0NBQVo7QUFDQUYsbUJBQWFXLE1BQWI7QUFDRDtBQUNGO0FBQ0Y7Ozs7QUFJRCxTQUFTRSxZQUFULENBQXNCVCxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUNDLE1BQW5DLEVBQTJDQyxLQUEzQyxFQUFrRDtBQUNoRCxNQUFJOztBQUVGLFFBQUlBLFVBQVVwQixTQUFkLEVBQXlCO0FBQ3ZCLFVBQUkyQixVQUFVQyxXQUFXUixLQUFYLENBQWQ7QUFDQSxVQUFHTyxZQUFZLElBQWYsRUFBcUI7QUFDbkJFLGlCQUFTLFdBQVdGLE9BQXBCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xHLGlCQUFTQyxLQUFULENBQWUscUJBQXFCWCxLQUFyQixHQUE2QixTQUE1QztBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJWSxFQUFFQyxPQUFGLENBQVVkLE1BQVYsRUFBa0IsQ0FBQyxJQUFELEVBQU0sS0FBTixFQUFZLEtBQVosRUFBa0IsVUFBbEIsRUFBNkIsSUFBN0IsRUFBa0MsVUFBbEMsRUFBNkMsU0FBN0MsRUFBdUQsTUFBdkQsRUFBOEQsVUFBOUQsQ0FBbEIsS0FBZ0csQ0FBaEcsSUFBcUdBLE9BQU9ELEtBQVAsQ0FBYSxTQUFiLENBQXpHLEVBQWtJO0FBQ2hJZ0IscUJBQWVmLE1BQWY7QUFDRDtBQUNGLEdBZkQsQ0FlRSxPQUFPZ0IsR0FBUCxFQUFXO0FBQ1hyQixZQUFRQyxHQUFSLENBQVlvQixHQUFaO0FBQ0E7QUFDRDtBQUNGIiwiZmlsZSI6ImJhY2tncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERtaXRyeSBTYWRha292J3MgUGhpbGlwcyBIdWUgYXBpIHdyYXBwZXIgYmFja2dyb3VuZCBwYWdlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRG1pdHJ5IFNhZGFrb3YsIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsXG5cdCQsXG5cdGh1ZTpmYWxzZSxcbiBcdHNjZW5lQ29tbWFuZGVyOmZhbHNlLFxuIFx0Y29uZmlnOmZhbHNlLFxuIFx0dm9pY2VDbWQsXG4gXHRmaW5kQWN0b3JzLFxuIFx0c2V0QWN0b3IsXG4gXHRodWV2b2ljZSxcbiBcdGV4ZWN1dGVDb21tYW5kLFxuIFx0aHVlQ29tbWFuZGVyLFxuIFx0Y29sb3JVdGlsLFxuIFx0c2NlbmVDbWRcbiAqL1xuXG4vKiBleHBvcnRlZCBoYXNBbGxVcmxBY2Nlc3MsIHJlcXVlc3RBbWJpZW50UGVybWlzc2lvbiwgdm9pY2VDbWRGdW5jICovXG5cbi8vICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XG53aW5kb3cuaHVlID0gaHVlKHdpbmRvdy5qUXVlcnksIHdpbmRvdy5jb2xvcnMpO1xuLy8gd2luZG93Lmh1ZS5maW5kQnJpZGdlKCk7XG53aW5kb3cuaHVlLmRpc2NvdmVyKCk7XG53aW5kb3cuc2NlbmVDbWQgPSBzY2VuZUNvbW1hbmRlcih3aW5kb3cualF1ZXJ5LCB3aW5kb3cuaHVlKTtcbndpbmRvdy5odWVDb21tYW5kZXIgPSBodWVDb21tYW5kZXIod2luZG93LmpRdWVyeSwgd2luZG93Lmh1ZSwgY29sb3JVdGlsKCksIHNjZW5lQ21kKTtcblxuaWYgKGNvbmZpZy5hcHAgPT09ICdhcHAnKSB7XG5cdC8qIGdsb2JhbCBjaHJvbWUgKi9cbiAgaWYgKGNocm9tZS5hcHAucnVudGltZS5vbkxhdW5jaGVkICE9PSB1bmRlZmluZWQpIHtcblx0XHRjaHJvbWUuYXBwLnJ1bnRpbWUub25MYXVuY2hlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbigpIHtcblx0XHQgIGNocm9tZS5hcHAud2luZG93LmNyZWF0ZSgnaW5kZXguaHRtbCcsIHtcblx0XHQgIFx0aWQ6ICdhcHAnLFxuXHRcdCAgXHRmcmFtZTogJ25vbmUnLFxuXHRcdCAgXHRyZXNpemFibGU6IGZhbHNlLFxuXHRcdCAgICBpbm5lckJvdW5kczoge1xuXHRcdCAgICAgIHdpZHRoOiAzMjAsXG5cdFx0ICAgICAgaGVpZ2h0OiAxNDBcblx0XHQgICAgfVxuXHRcdCAgfSk7XG5cdFx0fSk7XG5cdH1cbn1cbi8vfSk7XG5cblxuLy8gbGlzdGVuIHRvIGV4dGVybmFsIHZvaWNlc1xuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlRXh0ZXJuYWwuYWRkTGlzdGVuZXIob25FeHRlcm5hbCk7XG5cbmZ1bmN0aW9uIG9uRXh0ZXJuYWwocmVxdWVzdCwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgY29uc29sZS5sb2coJ29uRXh0ZXJuYWwnKTtcbiAgaWYgKHJlcXVlc3Qudm9pY2VDbWQpIHtcbiAgICBjb25zb2xlLmxvZyhyZXF1ZXN0LnZvaWNlQ21kLnRleHQgKyAnLCcgK1xuICAgICAgcmVxdWVzdC52b2ljZUNtZC5tYXRjaCArICcsJyArXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLmFjdGlvbiArICcsJyArXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLmFjdG9yXG4gICAgICApO1xuICAgIHZvaWNlQ21kKHJlcXVlc3Qudm9pY2VDbWQudGV4dCxcbiAgICAgIHJlcXVlc3Qudm9pY2VDbWQubWF0Y2gsXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLmFjdGlvbixcbiAgICAgIHJlcXVlc3Qudm9pY2VDbWQuYWN0b3IpO1xuICB9XG4gIGlmIChyZXF1ZXN0Lmh1ZUNvbW1hbmQpIHtcbiAgICBjb25zb2xlLmxvZygnb25FeHRlcm5hbDonICsgcmVxdWVzdC5odWVDb21tYW5kLmNvbW1hbmQgKyAnLCcgKyByZXF1ZXN0Lmh1ZUNvbW1hbmQuYXJncyk7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IGh1ZUNvbW1hbmRlci5wYXJzZShyZXF1ZXN0KTtcbiAgICBpZihzZW5kUmVzcG9uc2UpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kaW5nIHJlc3BvbnNlIHRvIG9uRXh0ZXJuYWwnKTtcbiAgICAgIHNlbmRSZXNwb25zZShyZXN1bHQpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gdm9pY2VDbWRGdW5jKHRleHQsIG1hdGNoLCBhY3Rpb24sIGFjdG9yKSB7XG4gIHRyeSB7XG4gICAgXG4gICAgaWYgKGFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBhY3RvcklkID0gZmluZEFjdG9ycyhhY3Rvcik7XG4gICAgICBpZihhY3RvcklkICE9PSBudWxsKSB7XG4gICAgICAgIHNldEFjdG9yKCdncm91cC0nICsgYWN0b3JJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodWV2b2ljZS5zcGVhaygnQ2Fubm90IGZpbmQgdGhlICcgKyBhY3RvciArICcgbGlnaHRzJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKCQuaW5BcnJheShhY3Rpb24sIFsnb24nLCdvZmYnLCdkaW0nLCdkaW0gZG93bicsJ3VwJywnYnJpZ2h0ZW4nLCdsaWdodGVuJywnZG93bicsJ2xpZ2h0IHVwJ10pID49IDAgfHwgYWN0aW9uLm1hdGNoKCdec2NlbmU6JykpIHtcbiAgICAgIGV4ZWN1dGVDb21tYW5kKGFjdGlvbik7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpe1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgLy8gbm90aGluZ1xuICB9XG59XG4iXX0=

//# sourceMappingURL=background.min.js.map
