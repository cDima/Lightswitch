"use strict";function _typeof(obj){return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol?"symbol":typeof obj;}(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require == "function" && require;if(!u && a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND",f);}var l=n[o] = {exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require == "function" && require;for(var o=0;o < r.length;o++) s(r[o]);return s;})({1:[function(_dereq_,module,exports){
(function(global){
"use strict";

_dereq_(189);

_dereq_(2);

if(global._babelPolyfill){
throw new Error("only one instance of babel-polyfill is allowed");}

global._babelPolyfill = true;}).
call(this,typeof global !== "undefined"?global:typeof self !== "undefined"?self:typeof window !== "undefined"?window:{});},
{"189":189,"2":2}],2:[function(_dereq_,module,exports){
module.exports = _dereq_(190);},
{"190":190}],3:[function(_dereq_,module,exports){
module.exports = function(it){
if(typeof it != 'function')throw TypeError(it + ' is not a function!');
return it;};},

{}],4:[function(_dereq_,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES=_dereq_(84)('unscopables'),
ArrayProto=Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)_dereq_(32)(ArrayProto,UNSCOPABLES,{});
module.exports = function(key){
ArrayProto[UNSCOPABLES][key] = true;};},

{"32":32,"84":84}],5:[function(_dereq_,module,exports){
var isObject=_dereq_(39);
module.exports = function(it){
if(!isObject(it))throw TypeError(it + ' is not an object!');
return it;};},

{"39":39}],6:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject=_dereq_(81),
toIndex=_dereq_(77),
toLength=_dereq_(80);

module.exports = [].copyWithin || function copyWithin(target /*= 0*/,start /*= 0, end = @length*/){
var O=toObject(this),
len=toLength(O.length),
to=toIndex(target,len),
from=toIndex(start,len),
$$=arguments,
end=$$.length > 2?$$[2]:undefined,
count=Math.min((end === undefined?len:toIndex(end,len)) - from,len - to),
inc=1;
if(from < to && to < from + count){
inc = -1;
from += count - 1;
to += count - 1;}

while(count-- > 0) {
if(from in O)O[to] = O[from];else 
delete O[to];
to += inc;
from += inc;}
return O;};},

{"77":77,"80":80,"81":81}],7:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject=_dereq_(81),
toIndex=_dereq_(77),
toLength=_dereq_(80);
module.exports = [].fill || function fill(value /*, start = 0, end = @length */){
var O=toObject(this),
length=toLength(O.length),
$$=arguments,
$$len=$$.length,
index=toIndex($$len > 1?$$[1]:undefined,length),
end=$$len > 2?$$[2]:undefined,
endPos=end === undefined?length:toIndex(end,length);
while(endPos > index) O[index++] = value;
return O;};},

{"77":77,"80":80,"81":81}],8:[function(_dereq_,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject=_dereq_(79),
toLength=_dereq_(80),
toIndex=_dereq_(77);
module.exports = function(IS_INCLUDES){
return function($this,el,fromIndex){
var O=toIObject($this),
length=toLength(O.length),
index=toIndex(fromIndex,length),
value;
// Array#includes uses SameValueZero equality algorithm
if(IS_INCLUDES && el != el)while(length > index) {
value = O[index++];
if(value != value)return true;
// Array#toIndex ignores holes, Array#includes - not
}else for(;length > index;index++) if(IS_INCLUDES || index in O){
if(O[index] === el)return IS_INCLUDES || index;}
return !IS_INCLUDES && -1;};};},


{"77":77,"79":79,"80":80}],9:[function(_dereq_,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx=_dereq_(18),
IObject=_dereq_(35),
toObject=_dereq_(81),
toLength=_dereq_(80),
asc=_dereq_(10);
module.exports = function(TYPE){
var IS_MAP=TYPE == 1,
IS_FILTER=TYPE == 2,
IS_SOME=TYPE == 3,
IS_EVERY=TYPE == 4,
IS_FIND_INDEX=TYPE == 6,
NO_HOLES=TYPE == 5 || IS_FIND_INDEX;
return function($this,callbackfn,that){
var O=toObject($this),
self=IObject(O),
f=ctx(callbackfn,that,3),
length=toLength(self.length),
index=0,
result=IS_MAP?asc($this,length):IS_FILTER?asc($this,0):undefined,
val,res;
for(;length > index;index++) if(NO_HOLES || index in self){
val = self[index];
res = f(val,index,O);
if(TYPE){
if(IS_MAP)result[index] = res; // map
else if(res)switch(TYPE){
case 3:return true; // some
case 5:return val; // find
case 6:return index; // findIndex
case 2:result.push(val); // filter
}else if(IS_EVERY)return false; // every
}}

return IS_FIND_INDEX?-1:IS_SOME || IS_EVERY?IS_EVERY:result;};};},


{"10":10,"18":18,"35":35,"80":80,"81":81}],10:[function(_dereq_,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var isObject=_dereq_(39),
isArray=_dereq_(37),
SPECIES=_dereq_(84)('species');
module.exports = function(original,length){
var C;
if(isArray(original)){
C = original.constructor;
// cross-realm fallback
if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
if(isObject(C)){
C = C[SPECIES];
if(C === null)C = undefined;}}

return new (C === undefined?Array:C)(length);};},

{"37":37,"39":39,"84":84}],11:[function(_dereq_,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof=_dereq_(12),
TAG=_dereq_(84)('toStringTag')
// ES3 wrong here
,ARG=cof((function(){return arguments;})()) == 'Arguments';

module.exports = function(it){
var O,T,B;
return it === undefined?'Undefined':it === null?'Null'
// @@toStringTag case
:typeof (T = (O = Object(it))[TAG]) == 'string'?T
// builtinTag case
:ARG?cof(O)
// ES3 arguments fallback
:(B = cof(O)) == 'Object' && typeof O.callee == 'function'?'Arguments':B;};},

{"12":12,"84":84}],12:[function(_dereq_,module,exports){
var toString=({}).toString;

module.exports = function(it){
return toString.call(it).slice(8,-1);};},

{}],13:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
hide=_dereq_(32),
redefineAll=_dereq_(61),
ctx=_dereq_(18),
strictNew=_dereq_(70),
defined=_dereq_(19),
forOf=_dereq_(28),
$iterDefine=_dereq_(43),
step=_dereq_(45),
ID=_dereq_(83)('id'),
$has=_dereq_(31),
isObject=_dereq_(39),
setSpecies=_dereq_(66),
DESCRIPTORS=_dereq_(20),
isExtensible=Object.isExtensible || isObject,
SIZE=DESCRIPTORS?'_s':'size',
id=0;

var fastKey=function fastKey(it,create){
// return primitive with prefix
if(!isObject(it))return (typeof it === "undefined"?"undefined":_typeof(it)) == 'symbol'?it:(typeof it == 'string'?'S':'P') + it;
if(!$has(it,ID)){
// can't set id to frozen object
if(!isExtensible(it))return 'F';
// not necessary to add id
if(!create)return 'E';
// add missing object id
hide(it,ID,++id);
// return object id with prefix
}return 'O' + it[ID];};


var getEntry=function getEntry(that,key){
// fast case
var index=fastKey(key),entry;
if(index !== 'F')return that._i[index];
// frozen object case
for(entry = that._f;entry;entry = entry.n) {
if(entry.k == key)return entry;}};



module.exports = {
getConstructor:function getConstructor(wrapper,NAME,IS_MAP,ADDER){
var C=wrapper(function(that,iterable){
strictNew(that,C,NAME);
that._i = $.create(null); // index
that._f = undefined; // first entry
that._l = undefined; // last entry
that[SIZE] = 0; // size
if(iterable != undefined)forOf(iterable,IS_MAP,that[ADDER],that);});

redefineAll(C.prototype,{
// 23.1.3.1 Map.prototype.clear()
// 23.2.3.2 Set.prototype.clear()
clear:function clear(){
for(var that=this,data=that._i,entry=that._f;entry;entry = entry.n) {
entry.r = true;
if(entry.p)entry.p = entry.p.n = undefined;
delete data[entry.i];}

that._f = that._l = undefined;
that[SIZE] = 0;},

// 23.1.3.3 Map.prototype.delete(key)
// 23.2.3.4 Set.prototype.delete(value)
'delete':function _delete(key){
var that=this,
entry=getEntry(that,key);
if(entry){
var next=entry.n,
prev=entry.p;
delete that._i[entry.i];
entry.r = true;
if(prev)prev.n = next;
if(next)next.p = prev;
if(that._f == entry)that._f = next;
if(that._l == entry)that._l = prev;
that[SIZE]--;}
return !!entry;},

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
forEach:function forEach(callbackfn /*, that = undefined */){
var f=ctx(callbackfn,arguments.length > 1?arguments[1]:undefined,3),
entry;
while(entry = entry?entry.n:this._f) {
f(entry.v,entry.k,this);
// revert to the last existing entry
while(entry && entry.r) entry = entry.p;}},


// 23.1.3.7 Map.prototype.has(key)
// 23.2.3.7 Set.prototype.has(value)
has:function has(key){
return !!getEntry(this,key);}});


if(DESCRIPTORS)$.setDesc(C.prototype,'size',{
get:function get(){
return defined(this[SIZE]);}});


return C;},

def:function def(that,key,value){
var entry=getEntry(that,key),
prev,index;
// change existing entry
if(entry){
entry.v = value;
// create new entry
}else {
that._l = entry = {
i:index = fastKey(key,true), // <- index
k:key, // <- key
v:value, // <- value
p:prev = that._l, // <- previous entry
n:undefined, // <- next entry
r:false // <- removed
};
if(!that._f)that._f = entry;
if(prev)prev.n = entry;
that[SIZE]++;
// add to index
if(index !== 'F')that._i[index] = entry;}
return that;},

getEntry:getEntry,
setStrong:function setStrong(C,NAME,IS_MAP){
// add .keys, .values, .entries, [@@iterator]
// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
$iterDefine(C,NAME,function(iterated,kind){
this._t = iterated; // target
this._k = kind; // kind
this._l = undefined; // previous
},function(){
var that=this,
kind=that._k,
entry=that._l;
// revert to the last existing entry
while(entry && entry.r) entry = entry.p;
// get next entry
if(!that._t || !(that._l = entry = entry?entry.n:that._t._f)){
// or finish the iteration
that._t = undefined;
return step(1);}

// return step by kind
if(kind == 'keys')return step(0,entry.k);
if(kind == 'values')return step(0,entry.v);
return step(0,[entry.k,entry.v]);},
IS_MAP?'entries':'values',!IS_MAP,true);

// add [@@species], 23.1.2.2, 23.2.2.2
setSpecies(NAME);}};},


{"18":18,"19":19,"20":20,"28":28,"31":31,"32":32,"39":39,"43":43,"45":45,"47":47,"61":61,"66":66,"70":70,"83":83}],14:[function(_dereq_,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var forOf=_dereq_(28),
classof=_dereq_(11);
module.exports = function(NAME){
return function toJSON(){
if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
var arr=[];
forOf(this,false,arr.push,arr);
return arr;};};},


{"11":11,"28":28}],15:[function(_dereq_,module,exports){
'use strict';
var hide=_dereq_(32),
redefineAll=_dereq_(61),
anObject=_dereq_(5),
isObject=_dereq_(39),
strictNew=_dereq_(70),
forOf=_dereq_(28),
createArrayMethod=_dereq_(9),
$has=_dereq_(31),
WEAK=_dereq_(83)('weak'),
isExtensible=Object.isExtensible || isObject,
arrayFind=createArrayMethod(5),
arrayFindIndex=createArrayMethod(6),
id=0;

// fallback for frozen keys
var frozenStore=function frozenStore(that){
return that._l || (that._l = new FrozenStore());};

var FrozenStore=function FrozenStore(){
this.a = [];};

var findFrozen=function findFrozen(store,key){
return arrayFind(store.a,function(it){
return it[0] === key;});};


FrozenStore.prototype = {
get:function get(key){
var entry=findFrozen(this,key);
if(entry)return entry[1];},

has:function has(key){
return !!findFrozen(this,key);},

set:function set(key,value){
var entry=findFrozen(this,key);
if(entry)entry[1] = value;else 
this.a.push([key,value]);},

'delete':function _delete(key){
var index=arrayFindIndex(this.a,function(it){
return it[0] === key;});

if(~index)this.a.splice(index,1);
return !! ~index;}};



module.exports = {
getConstructor:function getConstructor(wrapper,NAME,IS_MAP,ADDER){
var C=wrapper(function(that,iterable){
strictNew(that,C,NAME);
that._i = id++; // collection id
that._l = undefined; // leak store for frozen objects
if(iterable != undefined)forOf(iterable,IS_MAP,that[ADDER],that);});

redefineAll(C.prototype,{
// 23.3.3.2 WeakMap.prototype.delete(key)
// 23.4.3.3 WeakSet.prototype.delete(value)
'delete':function _delete(key){
if(!isObject(key))return false;
if(!isExtensible(key))return frozenStore(this)['delete'](key);
return $has(key,WEAK) && $has(key[WEAK],this._i) && delete key[WEAK][this._i];},

// 23.3.3.4 WeakMap.prototype.has(key)
// 23.4.3.4 WeakSet.prototype.has(value)
has:function has(key){
if(!isObject(key))return false;
if(!isExtensible(key))return frozenStore(this).has(key);
return $has(key,WEAK) && $has(key[WEAK],this._i);}});


return C;},

def:function def(that,key,value){
if(!isExtensible(anObject(key))){
frozenStore(that).set(key,value);}else 
{
$has(key,WEAK) || hide(key,WEAK,{});
key[WEAK][that._i] = value;}
return that;},

frozenStore:frozenStore,
WEAK:WEAK};},

{"28":28,"31":31,"32":32,"39":39,"5":5,"61":61,"70":70,"83":83,"9":9}],16:[function(_dereq_,module,exports){
'use strict';
var global=_dereq_(30),
$export=_dereq_(23),
redefine=_dereq_(62),
redefineAll=_dereq_(61),
forOf=_dereq_(28),
strictNew=_dereq_(70),
isObject=_dereq_(39),
fails=_dereq_(25),
$iterDetect=_dereq_(44),
setToStringTag=_dereq_(67);

module.exports = function(NAME,wrapper,methods,common,IS_MAP,IS_WEAK){
var Base=global[NAME],
C=Base,
ADDER=IS_MAP?'set':'add',
proto=C && C.prototype,
O={};
var fixMethod=function fixMethod(KEY){
var fn=proto[KEY];
redefine(proto,KEY,
KEY == 'delete'?function(a){
return IS_WEAK && !isObject(a)?false:fn.call(this,a === 0?0:a);}:
KEY == 'has'?function has(a){
return IS_WEAK && !isObject(a)?false:fn.call(this,a === 0?0:a);}:
KEY == 'get'?function get(a){
return IS_WEAK && !isObject(a)?undefined:fn.call(this,a === 0?0:a);}:
KEY == 'add'?function add(a){fn.call(this,a === 0?0:a);return this;}:
function set(a,b){fn.call(this,a === 0?0:a,b);return this;});};


if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
new C().entries().next();})))
{
// create collection constructor
C = common.getConstructor(wrapper,NAME,IS_MAP,ADDER);
redefineAll(C.prototype,methods);}else 
{
var instance=new C()
// early implementations not supports chaining
,HASNT_CHAINING=instance[ADDER](IS_WEAK?{}:-0,1) != instance
// V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
,THROWS_ON_PRIMITIVES=fails(function(){instance.has(1);})
// most early implementations doesn't supports iterables, most modern - not close it correctly
,ACCEPT_ITERABLES=$iterDetect(function(iter){new C(iter);}) // eslint-disable-line no-new
// for early implementations -0 and +0 not the same
,BUGGY_ZERO;
if(!ACCEPT_ITERABLES){
C = wrapper(function(target,iterable){
strictNew(target,C,NAME);
var that=new Base();
if(iterable != undefined)forOf(iterable,IS_MAP,that[ADDER],that);
return that;});

C.prototype = proto;
proto.constructor = C;}

IS_WEAK || instance.forEach(function(val,key){
BUGGY_ZERO = 1 / key === -Infinity;});

if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
fixMethod('delete');
fixMethod('has');
IS_MAP && fixMethod('get');}

if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
// weak collections should not contains .clear method
if(IS_WEAK && proto.clear)delete proto.clear;}


setToStringTag(C,NAME);

O[NAME] = C;
$export($export.G + $export.W + $export.F * (C != Base),O);

if(!IS_WEAK)common.setStrong(C,NAME,IS_MAP);

return C;};},

{"23":23,"25":25,"28":28,"30":30,"39":39,"44":44,"61":61,"62":62,"67":67,"70":70}],17:[function(_dereq_,module,exports){
var core=module.exports = {version:'1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],18:[function(_dereq_,module,exports){
// optional / simple context binding
var aFunction=_dereq_(3);
module.exports = function(fn,that,length){
aFunction(fn);
if(that === undefined)return fn;
switch(length){
case 1:return function(a){
return fn.call(that,a);};

case 2:return function(a,b){
return fn.call(that,a,b);};

case 3:return function(a,b,c){
return fn.call(that,a,b,c);};}


return function() /* ...args */{
return fn.apply(that,arguments);};};},


{"3":3}],19:[function(_dereq_,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
if(it == undefined)throw TypeError("Can't call method on  " + it);
return it;};},

{}],20:[function(_dereq_,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !_dereq_(25)(function(){
return Object.defineProperty({},'a',{get:function get(){return 7;}}).a != 7;});},

{"25":25}],21:[function(_dereq_,module,exports){
var isObject=_dereq_(39),
document=_dereq_(30).document
// in old IE typeof document.createElement is 'object'
,is=isObject(document) && isObject(document.createElement);
module.exports = function(it){
return is?document.createElement(it):{};};},

{"30":30,"39":39}],22:[function(_dereq_,module,exports){
// all enumerable object keys, includes symbols
var $=_dereq_(47);
module.exports = function(it){
var keys=$.getKeys(it),
getSymbols=$.getSymbols;
if(getSymbols){
var symbols=getSymbols(it),
isEnum=$.isEnum,
i=0,
key;
while(symbols.length > i) if(isEnum.call(it,key = symbols[i++]))keys.push(key);}

return keys;};},

{"47":47}],23:[function(_dereq_,module,exports){
var global=_dereq_(30),
core=_dereq_(17),
hide=_dereq_(32),
redefine=_dereq_(62),
ctx=_dereq_(18),
PROTOTYPE='prototype';

var $export=function $export(type,name,source){
var IS_FORCED=type & $export.F,
IS_GLOBAL=type & $export.G,
IS_STATIC=type & $export.S,
IS_PROTO=type & $export.P,
IS_BIND=type & $export.B,
target=IS_GLOBAL?global:IS_STATIC?global[name] || (global[name] = {}):(global[name] || {})[PROTOTYPE],
exports=IS_GLOBAL?core:core[name] || (core[name] = {}),
expProto=exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
key,own,out,exp;
if(IS_GLOBAL)source = name;
for(key in source) {
// contains in native
own = !IS_FORCED && target && key in target;
// export native or passed
out = (own?target:source)[key];
// bind timers to global for call from export context
exp = IS_BIND && own?ctx(out,global):IS_PROTO && typeof out == 'function'?ctx(Function.call,out):out;
// extend global
if(target && !own)redefine(target,key,out);
// export
if(exports[key] != out)hide(exports,key,exp);
if(IS_PROTO && expProto[key] != out)expProto[key] = out;}};


global.core = core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;},
{"17":17,"18":18,"30":30,"32":32,"62":62}],24:[function(_dereq_,module,exports){
var MATCH=_dereq_(84)('match');
module.exports = function(KEY){
var re=/./;
try{
'/./'[KEY](re);}
catch(e) {
try{
re[MATCH] = false;
return !'/./'[KEY](re);}
catch(f) { /* empty */}}
return true;};},

{"84":84}],25:[function(_dereq_,module,exports){
module.exports = function(exec){
try{
return !!exec();}
catch(e) {
return true;}};},


{}],26:[function(_dereq_,module,exports){
'use strict';
var hide=_dereq_(32),
redefine=_dereq_(62),
fails=_dereq_(25),
defined=_dereq_(19),
wks=_dereq_(84);

module.exports = function(KEY,length,exec){
var SYMBOL=wks(KEY),
original=''[KEY];
if(fails(function(){
var O={};
O[SYMBOL] = function(){return 7;};
return ''[KEY](O) != 7;}))
{
redefine(String.prototype,KEY,exec(defined,SYMBOL,original));
hide(RegExp.prototype,SYMBOL,length == 2
// 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
// 21.2.5.11 RegExp.prototype[@@split](string, limit)
?function(string,arg){return original.call(string,this,arg);}
// 21.2.5.6 RegExp.prototype[@@match](string)
// 21.2.5.9 RegExp.prototype[@@search](string)
:function(string){return original.call(string,this);});}};},



{"19":19,"25":25,"32":32,"62":62,"84":84}],27:[function(_dereq_,module,exports){
'use strict'
// 21.2.5.3 get RegExp.prototype.flags
;var anObject=_dereq_(5);
module.exports = function(){
var that=anObject(this),
result='';
if(that.global)result += 'g';
if(that.ignoreCase)result += 'i';
if(that.multiline)result += 'm';
if(that.unicode)result += 'u';
if(that.sticky)result += 'y';
return result;};},

{"5":5}],28:[function(_dereq_,module,exports){
var ctx=_dereq_(18),
call=_dereq_(41),
isArrayIter=_dereq_(36),
anObject=_dereq_(5),
toLength=_dereq_(80),
getIterFn=_dereq_(85);
module.exports = function(iterable,entries,fn,that){
var iterFn=getIterFn(iterable),
f=ctx(fn,that,entries?2:1),
index=0,
length,step,iterator;
if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
// fast case for arrays with default iterator
if(isArrayIter(iterFn))for(length = toLength(iterable.length);length > index;index++) {
entries?f(anObject(step = iterable[index])[0],step[1]):f(iterable[index]);}else 
for(iterator = iterFn.call(iterable);!(step = iterator.next()).done;) {
call(iterator,f,step.value,entries);}};},


{"18":18,"36":36,"41":41,"5":5,"80":80,"85":85}],29:[function(_dereq_,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject=_dereq_(79),
getNames=_dereq_(47).getNames,
toString=({}).toString;

var windowNames=(typeof window === "undefined"?"undefined":_typeof(window)) == 'object' && Object.getOwnPropertyNames?
Object.getOwnPropertyNames(window):[];

var getWindowNames=function getWindowNames(it){
try{
return getNames(it);}
catch(e) {
return windowNames.slice();}};



module.exports.get = function getOwnPropertyNames(it){
if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
return getNames(toIObject(it));};},

{"47":47,"79":79}],30:[function(_dereq_,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global=module.exports = typeof window != 'undefined' && window.Math == Math?
window:typeof self != 'undefined' && self.Math == Math?self:Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],31:[function(_dereq_,module,exports){
var hasOwnProperty=({}).hasOwnProperty;
module.exports = function(it,key){
return hasOwnProperty.call(it,key);};},

{}],32:[function(_dereq_,module,exports){
var $=_dereq_(47),
createDesc=_dereq_(60);
module.exports = _dereq_(20)?function(object,key,value){
return $.setDesc(object,key,createDesc(1,value));}:
function(object,key,value){
object[key] = value;
return object;};},

{"20":20,"47":47,"60":60}],33:[function(_dereq_,module,exports){
module.exports = _dereq_(30).document && document.documentElement;},
{"30":30}],34:[function(_dereq_,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn,args,that){
var un=that === undefined;
switch(args.length){
case 0:return un?fn():
fn.call(that);
case 1:return un?fn(args[0]):
fn.call(that,args[0]);
case 2:return un?fn(args[0],args[1]):
fn.call(that,args[0],args[1]);
case 3:return un?fn(args[0],args[1],args[2]):
fn.call(that,args[0],args[1],args[2]);
case 4:return un?fn(args[0],args[1],args[2],args[3]):
fn.call(that,args[0],args[1],args[2],args[3]);}
return fn.apply(that,args);};},

{}],35:[function(_dereq_,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof=_dereq_(12);
module.exports = Object('z').propertyIsEnumerable(0)?Object:function(it){
return cof(it) == 'String'?it.split(''):Object(it);};},

{"12":12}],36:[function(_dereq_,module,exports){
// check on default Array iterator
var Iterators=_dereq_(46),
ITERATOR=_dereq_(84)('iterator'),
ArrayProto=Array.prototype;

module.exports = function(it){
return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);};},

{"46":46,"84":84}],37:[function(_dereq_,module,exports){
// 7.2.2 IsArray(argument)
var cof=_dereq_(12);
module.exports = Array.isArray || function(arg){
return cof(arg) == 'Array';};},

{"12":12}],38:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject=_dereq_(39),
floor=Math.floor;
module.exports = function isInteger(it){
return !isObject(it) && isFinite(it) && floor(it) === it;};},

{"39":39}],39:[function(_dereq_,module,exports){
module.exports = function(it){
return (typeof it === "undefined"?"undefined":_typeof(it)) === 'object'?it !== null:typeof it === 'function';};},

{}],40:[function(_dereq_,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject=_dereq_(39),
cof=_dereq_(12),
MATCH=_dereq_(84)('match');
module.exports = function(it){
var isRegExp;
return isObject(it) && ((isRegExp = it[MATCH]) !== undefined?!!isRegExp:cof(it) == 'RegExp');};},

{"12":12,"39":39,"84":84}],41:[function(_dereq_,module,exports){
// call something on iterator step with safe closing on error
var anObject=_dereq_(5);
module.exports = function(iterator,fn,value,entries){
try{
return entries?fn(anObject(value)[0],value[1]):fn(value);
// 7.4.6 IteratorClose(iterator, completion)
}catch(e) {
var ret=iterator['return'];
if(ret !== undefined)anObject(ret.call(iterator));
throw e;}};},


{"5":5}],42:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
descriptor=_dereq_(60),
setToStringTag=_dereq_(67),
IteratorPrototype={};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_dereq_(32)(IteratorPrototype,_dereq_(84)('iterator'),function(){return this;});

module.exports = function(Constructor,NAME,next){
Constructor.prototype = $.create(IteratorPrototype,{next:descriptor(1,next)});
setToStringTag(Constructor,NAME + ' Iterator');};},

{"32":32,"47":47,"60":60,"67":67,"84":84}],43:[function(_dereq_,module,exports){
'use strict';
var LIBRARY=_dereq_(49),
$export=_dereq_(23),
redefine=_dereq_(62),
hide=_dereq_(32),
has=_dereq_(31),
Iterators=_dereq_(46),
$iterCreate=_dereq_(42),
setToStringTag=_dereq_(67),
getProto=_dereq_(47).getProto,
ITERATOR=_dereq_(84)('iterator'),
BUGGY=!([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
,FF_ITERATOR='@@iterator',
KEYS='keys',
VALUES='values';

var returnThis=function returnThis(){return this;};

module.exports = function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCED){
$iterCreate(Constructor,NAME,next);
var getMethod=function getMethod(kind){
if(!BUGGY && kind in proto)return proto[kind];
switch(kind){
case KEYS:return function keys(){return new Constructor(this,kind);};
case VALUES:return function values(){return new Constructor(this,kind);};}
return function entries(){return new Constructor(this,kind);};};

var TAG=NAME + ' Iterator',
DEF_VALUES=DEFAULT == VALUES,
VALUES_BUG=false,
proto=Base.prototype,
$native=proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
$default=$native || getMethod(DEFAULT),
methods,key;
// Fix native
if($native){
var IteratorPrototype=getProto($default.call(new Base()));
// Set @@toStringTag to native iterators
setToStringTag(IteratorPrototype,TAG,true);
// FF fix
if(!LIBRARY && has(proto,FF_ITERATOR))hide(IteratorPrototype,ITERATOR,returnThis);
// fix Array#{values, @@iterator}.name in V8 / FF
if(DEF_VALUES && $native.name !== VALUES){
VALUES_BUG = true;
$default = function values(){return $native.call(this);};}}


// Define iterator
if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
hide(proto,ITERATOR,$default);}

// Plug for library
Iterators[NAME] = $default;
Iterators[TAG] = returnThis;
if(DEFAULT){
methods = {
values:DEF_VALUES?$default:getMethod(VALUES),
keys:IS_SET?$default:getMethod(KEYS),
entries:!DEF_VALUES?$default:getMethod('entries')};

if(FORCED)for(key in methods) {
if(!(key in proto))redefine(proto,key,methods[key]);}else 
$export($export.P + $export.F * (BUGGY || VALUES_BUG),NAME,methods);}

return methods;};},

{"23":23,"31":31,"32":32,"42":42,"46":46,"47":47,"49":49,"62":62,"67":67,"84":84}],44:[function(_dereq_,module,exports){
var ITERATOR=_dereq_(84)('iterator'),
SAFE_CLOSING=false;

try{
var riter=[7][ITERATOR]();
riter['return'] = function(){SAFE_CLOSING = true;};
Array.from(riter,function(){throw 2;});}
catch(e) { /* empty */}

module.exports = function(exec,skipClosing){
if(!skipClosing && !SAFE_CLOSING)return false;
var safe=false;
try{
var arr=[7],
iter=arr[ITERATOR]();
iter.next = function(){safe = true;};
arr[ITERATOR] = function(){return iter;};
exec(arr);}
catch(e) { /* empty */}
return safe;};},

{"84":84}],45:[function(_dereq_,module,exports){
module.exports = function(done,value){
return {value:value,done:!!done};};},

{}],46:[function(_dereq_,module,exports){
module.exports = {};},
{}],47:[function(_dereq_,module,exports){
var $Object=Object;
module.exports = {
create:$Object.create,
getProto:$Object.getPrototypeOf,
isEnum:({}).propertyIsEnumerable,
getDesc:$Object.getOwnPropertyDescriptor,
setDesc:$Object.defineProperty,
setDescs:$Object.defineProperties,
getKeys:$Object.keys,
getNames:$Object.getOwnPropertyNames,
getSymbols:$Object.getOwnPropertySymbols,
each:[].forEach};},

{}],48:[function(_dereq_,module,exports){
var $=_dereq_(47),
toIObject=_dereq_(79);
module.exports = function(object,el){
var O=toIObject(object),
keys=$.getKeys(O),
length=keys.length,
index=0,
key;
while(length > index) if(O[key = keys[index++]] === el)return key;};},

{"47":47,"79":79}],49:[function(_dereq_,module,exports){
module.exports = false;},
{}],50:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
module.exports = Math.expm1 || function expm1(x){
return (x = +x) == 0?x:x > -1e-6 && x < 1e-6?x + x * x / 2:Math.exp(x) - 1;};},

{}],51:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
return (x = +x) > -1e-8 && x < 1e-8?x - x * x / 2:Math.log(1 + x);};},

{}],52:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
return (x = +x) == 0 || x != x?x:x < 0?-1:1;};},

{}],53:[function(_dereq_,module,exports){
var global=_dereq_(30),
macrotask=_dereq_(76).set,
Observer=global.MutationObserver || global.WebKitMutationObserver,
process=global.process,
Promise=global.Promise,
isNode=_dereq_(12)(process) == 'process',
head,last,notify;

var flush=function flush(){
var parent,domain,fn;
if(isNode && (parent = process.domain)){
process.domain = null;
parent.exit();}

while(head) {
domain = head.domain;
fn = head.fn;
if(domain)domain.enter();
fn(); // <- currently we use it only for Promise - try / catch not required
if(domain)domain.exit();
head = head.next;}
last = undefined;
if(parent)parent.enter();};


// Node.js
if(isNode){
notify = function(){
process.nextTick(flush);};

// browsers with MutationObserver
}else if(Observer){
var toggle=1,
node=document.createTextNode('');
new Observer(flush).observe(node,{characterData:true}); // eslint-disable-line no-new
notify = function(){
node.data = toggle = -toggle;};

// environments with maybe non-completely correct, but existent Promise
}else if(Promise && Promise.resolve){
notify = function(){
Promise.resolve().then(flush);};

// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
}else {
notify = function(){
// strange IE + webpack dev server bug - use .call(global)
macrotask.call(global,flush);};}



module.exports = function asap(fn){
var task={fn:fn,next:undefined,domain:isNode && process.domain};
if(last)last.next = task;
if(!head){
head = task;
notify();}
last = task;};},

{"12":12,"30":30,"76":76}],54:[function(_dereq_,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var $=_dereq_(47),
toObject=_dereq_(81),
IObject=_dereq_(35);

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = _dereq_(25)(function(){
var a=Object.assign,
A={},
B={},
S=Symbol(),
K='abcdefghijklmnopqrst';
A[S] = 7;
K.split('').forEach(function(k){B[k] = k;});
return a({},A)[S] != 7 || Object.keys(a({},B)).join('') != K;})?
function assign(target,source){ // eslint-disable-line no-unused-vars
var T=toObject(target),
$$=arguments,
$$len=$$.length,
index=1,
getKeys=$.getKeys,
getSymbols=$.getSymbols,
isEnum=$.isEnum;
while($$len > index) {
var S=IObject($$[index++]),
keys=getSymbols?getKeys(S).concat(getSymbols(S)):getKeys(S),
length=keys.length,
j=0,
key;
while(length > j) if(isEnum.call(S,key = keys[j++]))T[key] = S[key];}

return T;}:
Object.assign;},
{"25":25,"35":35,"47":47,"81":81}],55:[function(_dereq_,module,exports){
// most Object methods by ES6 should accept primitives
var $export=_dereq_(23),
core=_dereq_(17),
fails=_dereq_(25);
module.exports = function(KEY,exec){
var fn=(core.Object || {})[KEY] || Object[KEY],
exp={};
exp[KEY] = exec(fn);
$export($export.S + $export.F * fails(function(){fn(1);}),'Object',exp);};},

{"17":17,"23":23,"25":25}],56:[function(_dereq_,module,exports){
var $=_dereq_(47),
toIObject=_dereq_(79),
isEnum=$.isEnum;
module.exports = function(isEntries){
return function(it){
var O=toIObject(it),
keys=$.getKeys(O),
length=keys.length,
i=0,
result=[],
key;
while(length > i) if(isEnum.call(O,key = keys[i++])){
result.push(isEntries?[key,O[key]]:O[key]);}
return result;};};},


{"47":47,"79":79}],57:[function(_dereq_,module,exports){
// all object keys, includes non-enumerable and symbols
var $=_dereq_(47),
anObject=_dereq_(5),
Reflect=_dereq_(30).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
var keys=$.getNames(anObject(it)),
getSymbols=$.getSymbols;
return getSymbols?keys.concat(getSymbols(it)):keys;};},

{"30":30,"47":47,"5":5}],58:[function(_dereq_,module,exports){
'use strict';
var path=_dereq_(59),
invoke=_dereq_(34),
aFunction=_dereq_(3);
module.exports = function() /* ...pargs */{
var fn=aFunction(this),
length=arguments.length,
pargs=Array(length),
i=0,
_=path._,
holder=false;
while(length > i) if((pargs[i] = arguments[i++]) === _)holder = true;
return function() /* ...args */{
var that=this,
$$=arguments,
$$len=$$.length,
j=0,k=0,args;
if(!holder && !$$len)return invoke(fn,pargs,that);
args = pargs.slice();
if(holder)for(;length > j;j++) if(args[j] === _)args[j] = $$[k++];
while($$len > k) args.push($$[k++]);
return invoke(fn,args,that);};};},


{"3":3,"34":34,"59":59}],59:[function(_dereq_,module,exports){
module.exports = _dereq_(30);},
{"30":30}],60:[function(_dereq_,module,exports){
module.exports = function(bitmap,value){
return {
enumerable:!(bitmap & 1),
configurable:!(bitmap & 2),
writable:!(bitmap & 4),
value:value};};},


{}],61:[function(_dereq_,module,exports){
var redefine=_dereq_(62);
module.exports = function(target,src){
for(var key in src) redefine(target,key,src[key]);
return target;};},

{"62":62}],62:[function(_dereq_,module,exports){
// add fake Function#toString
// for correct work wrapped methods / constructors with methods like LoDash isNative
var global=_dereq_(30),
hide=_dereq_(32),
SRC=_dereq_(83)('src'),
TO_STRING='toString',
$toString=Function[TO_STRING],
TPL=('' + $toString).split(TO_STRING);

_dereq_(17).inspectSource = function(it){
return $toString.call(it);};


(module.exports = function(O,key,val,safe){
if(typeof val == 'function'){
val.hasOwnProperty(SRC) || hide(val,SRC,O[key]?'' + O[key]:TPL.join(String(key)));
val.hasOwnProperty('name') || hide(val,'name',key);}

if(O === global){
O[key] = val;}else 
{
if(!safe)delete O[key];
hide(O,key,val);}})(

Function.prototype,TO_STRING,function toString(){
return typeof this == 'function' && this[SRC] || $toString.call(this);});},

{"17":17,"30":30,"32":32,"83":83}],63:[function(_dereq_,module,exports){
module.exports = function(regExp,replace){
var replacer=replace === Object(replace)?function(part){
return replace[part];}:
replace;
return function(it){
return String(it).replace(regExp,replacer);};};},


{}],64:[function(_dereq_,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x,y){
return x === y?x !== 0 || 1 / x === 1 / y:x != x && y != y;};},

{}],65:[function(_dereq_,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc=_dereq_(47).getDesc,
isObject=_dereq_(39),
anObject=_dereq_(5);
var check=function check(O,proto){
anObject(O);
if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");};

module.exports = {
set:Object.setPrototypeOf || ('__proto__' in {}? // eslint-disable-line
(function(test,buggy,set){
try{
set = _dereq_(18)(Function.call,getDesc(Object.prototype,'__proto__').set,2);
set(test,[]);
buggy = !(test instanceof Array);}
catch(e) {buggy = true;}
return function setPrototypeOf(O,proto){
check(O,proto);
if(buggy)O.__proto__ = proto;else 
set(O,proto);
return O;};})(

{},false):undefined),
check:check};},

{"18":18,"39":39,"47":47,"5":5}],66:[function(_dereq_,module,exports){
'use strict';
var global=_dereq_(30),
$=_dereq_(47),
DESCRIPTORS=_dereq_(20),
SPECIES=_dereq_(84)('species');

module.exports = function(KEY){
var C=global[KEY];
if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C,SPECIES,{
configurable:true,
get:function get(){return this;}});};},


{"20":20,"30":30,"47":47,"84":84}],67:[function(_dereq_,module,exports){
var def=_dereq_(47).setDesc,
has=_dereq_(31),
TAG=_dereq_(84)('toStringTag');

module.exports = function(it,tag,stat){
if(it && !has(it = stat?it:it.prototype,TAG))def(it,TAG,{configurable:true,value:tag});};},

{"31":31,"47":47,"84":84}],68:[function(_dereq_,module,exports){
var global=_dereq_(30),
SHARED='__core-js_shared__',
store=global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
return store[key] || (store[key] = {});};},

{"30":30}],69:[function(_dereq_,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject=_dereq_(5),
aFunction=_dereq_(3),
SPECIES=_dereq_(84)('species');
module.exports = function(O,D){
var C=anObject(O).constructor,S;
return C === undefined || (S = anObject(C)[SPECIES]) == undefined?D:aFunction(S);};},

{"3":3,"5":5,"84":84}],70:[function(_dereq_,module,exports){
module.exports = function(it,Constructor,name){
if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
return it;};},

{}],71:[function(_dereq_,module,exports){
var toInteger=_dereq_(78),
defined=_dereq_(19);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
return function(that,pos){
var s=String(defined(that)),
i=toInteger(pos),
l=s.length,
a,b;
if(i < 0 || i >= l)return TO_STRING?'':undefined;
a = s.charCodeAt(i);
return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff?
TO_STRING?s.charAt(i):a:
TO_STRING?s.slice(i,i + 2):(a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;};};},


{"19":19,"78":78}],72:[function(_dereq_,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp=_dereq_(40),
defined=_dereq_(19);

module.exports = function(that,searchString,NAME){
if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
return String(defined(that));};},

{"19":19,"40":40}],73:[function(_dereq_,module,exports){
// https://github.com/ljharb/proposal-string-pad-left-right
var toLength=_dereq_(80),
repeat=_dereq_(74),
defined=_dereq_(19);

module.exports = function(that,maxLength,fillString,left){
var S=String(defined(that)),
stringLength=S.length,
fillStr=fillString === undefined?' ':String(fillString),
intMaxLength=toLength(maxLength);
if(intMaxLength <= stringLength)return S;
if(fillStr == '')fillStr = ' ';
var fillLen=intMaxLength - stringLength,
stringFiller=repeat.call(fillStr,Math.ceil(fillLen / fillStr.length));
if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0,fillLen);
return left?stringFiller + S:S + stringFiller;};},

{"19":19,"74":74,"80":80}],74:[function(_dereq_,module,exports){
'use strict';
var toInteger=_dereq_(78),
defined=_dereq_(19);

module.exports = function repeat(count){
var str=String(defined(this)),
res='',
n=toInteger(count);
if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
for(;n > 0;(n >>>= 1) && (str += str)) if(n & 1)res += str;
return res;};},

{"19":19,"78":78}],75:[function(_dereq_,module,exports){
var $export=_dereq_(23),
defined=_dereq_(19),
fails=_dereq_(25),
spaces="\t\n\u000b\f\r   ᠎    " + 
"         　\u2028\u2029﻿",
space='[' + spaces + ']',
non="​",
ltrim=RegExp('^' + space + space + '*'),
rtrim=RegExp(space + space + '*$');

var exporter=function exporter(KEY,exec){
var exp={};
exp[KEY] = exec(trim);
$export($export.P + $export.F * fails(function(){
return !!spaces[KEY]() || non[KEY]() != non;}),
'String',exp);};


// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim=exporter.trim = function(string,TYPE){
string = String(defined(string));
if(TYPE & 1)string = string.replace(ltrim,'');
if(TYPE & 2)string = string.replace(rtrim,'');
return string;};


module.exports = exporter;},
{"19":19,"23":23,"25":25}],76:[function(_dereq_,module,exports){
var ctx=_dereq_(18),
invoke=_dereq_(34),
html=_dereq_(33),
cel=_dereq_(21),
global=_dereq_(30),
process=global.process,
setTask=global.setImmediate,
clearTask=global.clearImmediate,
MessageChannel=global.MessageChannel,
counter=0,
queue={},
ONREADYSTATECHANGE='onreadystatechange',
defer,channel,port;
var run=function run(){
var id=+this;
if(queue.hasOwnProperty(id)){
var fn=queue[id];
delete queue[id];
fn();}};


var listner=function listner(event){
run.call(event.data);};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
setTask = function setImmediate(fn){
var args=[],i=1;
while(arguments.length > i) args.push(arguments[i++]);
queue[++counter] = function(){
invoke(typeof fn == 'function'?fn:Function(fn),args);};

defer(counter);
return counter;};

clearTask = function clearImmediate(id){
delete queue[id];};

// Node.js 0.8-
if(_dereq_(12)(process) == 'process'){
defer = function(id){
process.nextTick(ctx(run,id,1));};

// Browsers with MessageChannel, includes WebWorkers
}else if(MessageChannel){
channel = new MessageChannel();
port = channel.port2;
channel.port1.onmessage = listner;
defer = ctx(port.postMessage,port,1);
// Browsers with postMessage, skip WebWorkers
// IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
}else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
defer = function(id){
global.postMessage(id + '','*');};

global.addEventListener('message',listner,false);
// IE8-
}else if(ONREADYSTATECHANGE in cel('script')){
defer = function(id){
html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
html.removeChild(this);
run.call(id);};};


// Rest old browsers
}else {
defer = function(id){
setTimeout(ctx(run,id,1),0);};}}



module.exports = {
set:setTask,
clear:clearTask};},

{"12":12,"18":18,"21":21,"30":30,"33":33,"34":34}],77:[function(_dereq_,module,exports){
var toInteger=_dereq_(78),
max=Math.max,
min=Math.min;
module.exports = function(index,length){
index = toInteger(index);
return index < 0?max(index + length,0):min(index,length);};},

{"78":78}],78:[function(_dereq_,module,exports){
// 7.1.4 ToInteger
var ceil=Math.ceil,
floor=Math.floor;
module.exports = function(it){
return isNaN(it = +it)?0:(it > 0?floor:ceil)(it);};},

{}],79:[function(_dereq_,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject=_dereq_(35),
defined=_dereq_(19);
module.exports = function(it){
return IObject(defined(it));};},

{"19":19,"35":35}],80:[function(_dereq_,module,exports){
// 7.1.15 ToLength
var toInteger=_dereq_(78),
min=Math.min;
module.exports = function(it){
return it > 0?min(toInteger(it),0x1fffffffffffff):0; // pow(2, 53) - 1 == 9007199254740991
};},
{"78":78}],81:[function(_dereq_,module,exports){
// 7.1.13 ToObject(argument)
var defined=_dereq_(19);
module.exports = function(it){
return Object(defined(it));};},

{"19":19}],82:[function(_dereq_,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject=_dereq_(39);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it,S){
if(!isObject(it))return it;
var fn,val;
if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
throw TypeError("Can't convert object to primitive value");};},

{"39":39}],83:[function(_dereq_,module,exports){
var id=0,
px=Math.random();
module.exports = function(key){
return 'Symbol('.concat(key === undefined?'':key,')_',(++id + px).toString(36));};},

{}],84:[function(_dereq_,module,exports){
var store=_dereq_(68)('wks'),
uid=_dereq_(83),
Symbol=_dereq_(30).Symbol;
module.exports = function(name){
return store[name] || (store[name] = 
Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));};},

{"30":30,"68":68,"83":83}],85:[function(_dereq_,module,exports){
var classof=_dereq_(11),
ITERATOR=_dereq_(84)('iterator'),
Iterators=_dereq_(46);
module.exports = _dereq_(17).getIteratorMethod = function(it){
if(it != undefined)return it[ITERATOR] || 
it['@@iterator'] || 
Iterators[classof(it)];};},

{"11":11,"17":17,"46":46,"84":84}],86:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
$export=_dereq_(23),
DESCRIPTORS=_dereq_(20),
createDesc=_dereq_(60),
html=_dereq_(33),
cel=_dereq_(21),
has=_dereq_(31),
cof=_dereq_(12),
invoke=_dereq_(34),
fails=_dereq_(25),
anObject=_dereq_(5),
aFunction=_dereq_(3),
isObject=_dereq_(39),
toObject=_dereq_(81),
toIObject=_dereq_(79),
toInteger=_dereq_(78),
toIndex=_dereq_(77),
toLength=_dereq_(80),
IObject=_dereq_(35),
IE_PROTO=_dereq_(83)('__proto__'),
createArrayMethod=_dereq_(9),
arrayIndexOf=_dereq_(8)(false),
ObjectProto=Object.prototype,
ArrayProto=Array.prototype,
arraySlice=ArrayProto.slice,
arrayJoin=ArrayProto.join,
defineProperty=$.setDesc,
getOwnDescriptor=$.getDesc,
defineProperties=$.setDescs,
factories={},
IE8_DOM_DEFINE;

if(!DESCRIPTORS){
IE8_DOM_DEFINE = !fails(function(){
return defineProperty(cel('div'),'a',{get:function get(){return 7;}}).a != 7;});

$.setDesc = function(O,P,Attributes){
if(IE8_DOM_DEFINE)try{
return defineProperty(O,P,Attributes);}
catch(e) { /* empty */}
if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
if('value' in Attributes)anObject(O)[P] = Attributes.value;
return O;};

$.getDesc = function(O,P){
if(IE8_DOM_DEFINE)try{
return getOwnDescriptor(O,P);}
catch(e) { /* empty */}
if(has(O,P))return createDesc(!ObjectProto.propertyIsEnumerable.call(O,P),O[P]);};

$.setDescs = defineProperties = function(O,Properties){
anObject(O);
var keys=$.getKeys(Properties),
length=keys.length,
i=0,
P;
while(length > i) $.setDesc(O,P = keys[i++],Properties[P]);
return O;};}


$export($export.S + $export.F * !DESCRIPTORS,'Object',{
// 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
getOwnPropertyDescriptor:$.getDesc,
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
defineProperty:$.setDesc,
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
defineProperties:defineProperties});


// IE 8- don't enum bug keys
var keys1=('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' + 
'toLocaleString,toString,valueOf').split(',')
// Additional keys for getOwnPropertyNames
,keys2=keys1.concat('length','prototype'),
keysLen1=keys1.length;

// Create object with `null` prototype: use iframe Object with cleared prototype
var _createDict=function createDict(){
// Thrash, waste and sodomy: IE GC bug
var iframe=cel('iframe'),
i=keysLen1,
gt='>',
iframeDocument;
iframe.style.display = 'none';
html.appendChild(iframe);
iframe.src = 'javascript:'; // eslint-disable-line no-script-url
// createDict = iframe.contentWindow.Object;
// html.removeChild(iframe);
iframeDocument = iframe.contentWindow.document;
iframeDocument.open();
iframeDocument.write('<script>document.F=Object</script' + gt);
iframeDocument.close();
_createDict = iframeDocument.F;
while(i--) delete _createDict.prototype[keys1[i]];
return _createDict();};

var createGetKeys=function createGetKeys(names,length){
return function(object){
var O=toIObject(object),
i=0,
result=[],
key;
for(key in O) if(key != IE_PROTO)has(O,key) && result.push(key);
// Don't enum bug & hidden keys
while(length > i) if(has(O,key = names[i++])){
~arrayIndexOf(result,key) || result.push(key);}

return result;};};


var Empty=function Empty(){};
$export($export.S,'Object',{
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
getPrototypeOf:$.getProto = $.getProto || function(O){
O = toObject(O);
if(has(O,IE_PROTO))return O[IE_PROTO];
if(typeof O.constructor == 'function' && O instanceof O.constructor){
return O.constructor.prototype;}
return O instanceof Object?ObjectProto:null;},

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
getOwnPropertyNames:$.getNames = $.getNames || createGetKeys(keys2,keys2.length,true),
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
create:$.create = $.create || function(O, /*?*/Properties){
var result;
if(O !== null){
Empty.prototype = anObject(O);
result = new Empty();
Empty.prototype = null;
// add "__proto__" for Object.getPrototypeOf shim
result[IE_PROTO] = O;}else 
result = _createDict();
return Properties === undefined?result:defineProperties(result,Properties);},

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
keys:$.getKeys = $.getKeys || createGetKeys(keys1,keysLen1,false)});


var construct=function construct(F,len,args){
if(!(len in factories)){
for(var n=[],i=0;i < len;i++) n[i] = 'a[' + i + ']';
factories[len] = Function('F,a','return new F(' + n.join(',') + ')');}

return factories[len](F,args);};


// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
$export($export.P,'Function',{
bind:function bind(that /*, args... */){
var fn=aFunction(this),
partArgs=arraySlice.call(arguments,1);
var bound=function bound() /* args... */{
var args=partArgs.concat(arraySlice.call(arguments));
return this instanceof bound?construct(fn,args.length,args):invoke(fn,args,that);};

if(isObject(fn.prototype))bound.prototype = fn.prototype;
return bound;}});



// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * fails(function(){
if(html)arraySlice.call(html);}),
'Array',{
slice:function slice(begin,end){
var len=toLength(this.length),
klass=cof(this);
end = end === undefined?len:end;
if(klass == 'Array')return arraySlice.call(this,begin,end);
var start=toIndex(begin,len),
upTo=toIndex(end,len),
size=toLength(upTo - start),
cloned=Array(size),
i=0;
for(;i < size;i++) cloned[i] = klass == 'String'?
this.charAt(start + i):
this[start + i];
return cloned;}});


$export($export.P + $export.F * (IObject != Object),'Array',{
join:function join(separator){
return arrayJoin.call(IObject(this),separator === undefined?',':separator);}});



// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
$export($export.S,'Array',{isArray:_dereq_(37)});

var createArrayReduce=function createArrayReduce(isRight){
return function(callbackfn,memo){
aFunction(callbackfn);
var O=IObject(this),
length=toLength(O.length),
index=isRight?length - 1:0,
i=isRight?-1:1;
if(arguments.length < 2)for(;;) {
if(index in O){
memo = O[index];
index += i;
break;}

index += i;
if(isRight?index < 0:length <= index){
throw TypeError('Reduce of empty array with no initial value');}}


for(;isRight?index >= 0:length > index;index += i) if(index in O){
memo = callbackfn(memo,O[index],index,this);}

return memo;};};



var methodize=function methodize($fn){
return function(arg1 /*, arg2 = undefined */){
return $fn(this,arg1,arguments[1]);};};



$export($export.P,'Array',{
// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
forEach:$.each = $.each || methodize(createArrayMethod(0)),
// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
map:methodize(createArrayMethod(1)),
// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
filter:methodize(createArrayMethod(2)),
// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
some:methodize(createArrayMethod(3)),
// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
every:methodize(createArrayMethod(4)),
// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
reduce:createArrayReduce(false),
// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
reduceRight:createArrayReduce(true),
// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
indexOf:methodize(arrayIndexOf),
// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
lastIndexOf:function lastIndexOf(el,fromIndex /* = @[*-1] */){
var O=toIObject(this),
length=toLength(O.length),
index=length - 1;
if(arguments.length > 1)index = Math.min(index,toInteger(fromIndex));
if(index < 0)index = toLength(length + index);
for(;index >= 0;index--) if(index in O)if(O[index] === el)return index;
return -1;}});



// 20.3.3.1 / 15.9.4.4 Date.now()
$export($export.S,'Date',{now:function now(){return +new Date();}});

var lz=function lz(num){
return num > 9?num:'0' + num;};


// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';}) || 
!fails(function(){
new Date(NaN).toISOString();})),
'Date',{
toISOString:function toISOString(){
if(!isFinite(this))throw RangeError('Invalid time value');
var d=this,
y=d.getUTCFullYear(),
m=d.getUTCMilliseconds(),
s=y < 0?'-':y > 9999?'+':'';
return s + ('00000' + Math.abs(y)).slice(s?-6:-4) + 
'-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 
'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + 
':' + lz(d.getUTCSeconds()) + '.' + (m > 99?m:'0' + lz(m)) + 'Z';}});},


{"12":12,"20":20,"21":21,"23":23,"25":25,"3":3,"31":31,"33":33,"34":34,"35":35,"37":37,"39":39,"47":47,"5":5,"60":60,"77":77,"78":78,"79":79,"8":8,"80":80,"81":81,"83":83,"9":9}],87:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export=_dereq_(23);

$export($export.P,'Array',{copyWithin:_dereq_(6)});

_dereq_(4)('copyWithin');},
{"23":23,"4":4,"6":6}],88:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export=_dereq_(23);

$export($export.P,'Array',{fill:_dereq_(7)});

_dereq_(4)('fill');},
{"23":23,"4":4,"7":7}],89:[function(_dereq_,module,exports){
'use strict'
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
;var $export=_dereq_(23),
$find=_dereq_(9)(6),
KEY='findIndex',
forced=true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){forced = false;});
$export($export.P + $export.F * forced,'Array',{
findIndex:function findIndex(callbackfn /*, that = undefined */){
return $find(this,callbackfn,arguments.length > 1?arguments[1]:undefined);}});


_dereq_(4)(KEY);},
{"23":23,"4":4,"9":9}],90:[function(_dereq_,module,exports){
'use strict'
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
;var $export=_dereq_(23),
$find=_dereq_(9)(5),
KEY='find',
forced=true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){forced = false;});
$export($export.P + $export.F * forced,'Array',{
find:function find(callbackfn /*, that = undefined */){
return $find(this,callbackfn,arguments.length > 1?arguments[1]:undefined);}});


_dereq_(4)(KEY);},
{"23":23,"4":4,"9":9}],91:[function(_dereq_,module,exports){
'use strict';
var ctx=_dereq_(18),
$export=_dereq_(23),
toObject=_dereq_(81),
call=_dereq_(41),
isArrayIter=_dereq_(36),
toLength=_dereq_(80),
getIterFn=_dereq_(85);
$export($export.S + $export.F * !_dereq_(44)(function(iter){Array.from(iter);}),'Array',{
// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
from:function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/){
var O=toObject(arrayLike),
C=typeof this == 'function'?this:Array,
$$=arguments,
$$len=$$.length,
mapfn=$$len > 1?$$[1]:undefined,
mapping=mapfn !== undefined,
index=0,
iterFn=getIterFn(O),
length,result,step,iterator;
if(mapping)mapfn = ctx(mapfn,$$len > 2?$$[2]:undefined,2);
// if object isn't iterable or it's array with default iterator - use simple case
if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
for(iterator = iterFn.call(O),result = new C();!(step = iterator.next()).done;index++) {
result[index] = mapping?call(iterator,mapfn,[step.value,index],true):step.value;}}else 

{
length = toLength(O.length);
for(result = new C(length);length > index;index++) {
result[index] = mapping?mapfn(O[index],index):O[index];}}


result.length = index;
return result;}});},



{"18":18,"23":23,"36":36,"41":41,"44":44,"80":80,"81":81,"85":85}],92:[function(_dereq_,module,exports){
'use strict';
var addToUnscopables=_dereq_(4),
step=_dereq_(45),
Iterators=_dereq_(46),
toIObject=_dereq_(79);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = _dereq_(43)(Array,'Array',function(iterated,kind){
this._t = toIObject(iterated); // target
this._i = 0; // next index
this._k = kind; // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
},function(){
var O=this._t,
kind=this._k,
index=this._i++;
if(!O || index >= O.length){
this._t = undefined;
return step(1);}

if(kind == 'keys')return step(0,index);
if(kind == 'values')return step(0,O[index]);
return step(0,[index,O[index]]);},
'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');},
{"4":4,"43":43,"45":45,"46":46,"79":79}],93:[function(_dereq_,module,exports){
'use strict';
var $export=_dereq_(23);

// WebKit Array.of isn't generic
$export($export.S + $export.F * _dereq_(25)(function(){
function F(){}
return !(Array.of.call(F) instanceof F);}),
'Array',{
// 22.1.2.3 Array.of( ...items)
of:function of() /* ...args */{
var index=0,
$$=arguments,
$$len=$$.length,
result=new (typeof this == 'function'?this:Array)($$len);
while($$len > index) result[index] = $$[index++];
result.length = $$len;
return result;}});},


{"23":23,"25":25}],94:[function(_dereq_,module,exports){
_dereq_(66)('Array');},
{"66":66}],95:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
isObject=_dereq_(39),
HAS_INSTANCE=_dereq_(84)('hasInstance'),
FunctionProto=Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto,HAS_INSTANCE,{value:function value(O){
if(typeof this != 'function' || !isObject(O))return false;
if(!isObject(this.prototype))return O instanceof this;
// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
while(O = $.getProto(O)) if(this.prototype === O)return true;
return false;}});},

{"39":39,"47":47,"84":84}],96:[function(_dereq_,module,exports){
var setDesc=_dereq_(47).setDesc,
createDesc=_dereq_(60),
has=_dereq_(31),
FProto=Function.prototype,
nameRE=/^\s*function ([^ (]*)/,
NAME='name';
// 19.2.4.2 name
NAME in FProto || _dereq_(20) && setDesc(FProto,NAME,{
configurable:true,
get:function get(){
var match=('' + this).match(nameRE),
name=match?match[1]:'';
has(this,NAME) || setDesc(this,NAME,createDesc(5,name));
return name;}});},


{"20":20,"31":31,"47":47,"60":60}],97:[function(_dereq_,module,exports){
'use strict';
var strong=_dereq_(13);

// 23.1 Map Objects
_dereq_(16)('Map',function(get){
return function Map(){return get(this,arguments.length > 0?arguments[0]:undefined);};},
{
// 23.1.3.6 Map.prototype.get(key)
get:function get(key){
var entry=strong.getEntry(this,key);
return entry && entry.v;},

// 23.1.3.9 Map.prototype.set(key, value)
set:function set(key,value){
return strong.def(this,key === 0?0:key,value);}},

strong,true);},
{"13":13,"16":16}],98:[function(_dereq_,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export=_dereq_(23),
log1p=_dereq_(51),
sqrt=Math.sqrt,
$acosh=Math.acosh;

// V8 bug https://code.google.com/p/v8/issues/detail?id=3509
$export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710),'Math',{
acosh:function acosh(x){
return (x = +x) < 1?NaN:x > 94906265.62425156?
Math.log(x) + Math.LN2:
log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));}});},


{"23":23,"51":51}],99:[function(_dereq_,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export=_dereq_(23);

function asinh(x){
return !isFinite(x = +x) || x == 0?x:x < 0?-asinh(-x):Math.log(x + Math.sqrt(x * x + 1));}


$export($export.S,'Math',{asinh:asinh});},
{"23":23}],100:[function(_dereq_,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export=_dereq_(23);

$export($export.S,'Math',{
atanh:function atanh(x){
return (x = +x) == 0?x:Math.log((1 + x) / (1 - x)) / 2;}});},


{"23":23}],101:[function(_dereq_,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export=_dereq_(23),
sign=_dereq_(52);

$export($export.S,'Math',{
cbrt:function cbrt(x){
return sign(x = +x) * Math.pow(Math.abs(x),1 / 3);}});},


{"23":23,"52":52}],102:[function(_dereq_,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export=_dereq_(23);

$export($export.S,'Math',{
clz32:function clz32(x){
return (x >>>= 0)?31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E):32;}});},


{"23":23}],103:[function(_dereq_,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export=_dereq_(23),
exp=Math.exp;

$export($export.S,'Math',{
cosh:function cosh(x){
return (exp(x = +x) + exp(-x)) / 2;}});},


{"23":23}],104:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export=_dereq_(23);

$export($export.S,'Math',{expm1:_dereq_(50)});},
{"23":23,"50":50}],105:[function(_dereq_,module,exports){
// 20.2.2.16 Math.fround(x)
var $export=_dereq_(23),
sign=_dereq_(52),
pow=Math.pow,
EPSILON=pow(2,-52),
EPSILON32=pow(2,-23),
MAX32=pow(2,127) * (2 - EPSILON32),
MIN32=pow(2,-126);

var roundTiesToEven=function roundTiesToEven(n){
return n + 1 / EPSILON - 1 / EPSILON;};



$export($export.S,'Math',{
fround:function fround(x){
var $abs=Math.abs(x),
$sign=sign(x),
a,result;
if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
a = (1 + EPSILON32 / EPSILON) * $abs;
result = a - (a - $abs);
if(result > MAX32 || result != result)return $sign * Infinity;
return $sign * result;}});},


{"23":23,"52":52}],106:[function(_dereq_,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export=_dereq_(23),
abs=Math.abs;

$export($export.S,'Math',{
hypot:function hypot(value1,value2){ // eslint-disable-line no-unused-vars
var sum=0,
i=0,
$$=arguments,
$$len=$$.length,
larg=0,
arg,div;
while(i < $$len) {
arg = abs($$[i++]);
if(larg < arg){
div = larg / arg;
sum = sum * div * div + 1;
larg = arg;}else 
if(arg > 0){
div = arg / larg;
sum += div * div;}else 
sum += arg;}

return larg === Infinity?Infinity:larg * Math.sqrt(sum);}});},


{"23":23}],107:[function(_dereq_,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export=_dereq_(23),
$imul=Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * _dereq_(25)(function(){
return $imul(0xffffffff,5) != -5 || $imul.length != 2;}),
'Math',{
imul:function imul(x,y){
var UINT16=0xffff,
xn=+x,
yn=+y,
xl=UINT16 & xn,
yl=UINT16 & yn;
return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);}});},


{"23":23,"25":25}],108:[function(_dereq_,module,exports){
// 20.2.2.21 Math.log10(x)
var $export=_dereq_(23);

$export($export.S,'Math',{
log10:function log10(x){
return Math.log(x) / Math.LN10;}});},


{"23":23}],109:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export=_dereq_(23);

$export($export.S,'Math',{log1p:_dereq_(51)});},
{"23":23,"51":51}],110:[function(_dereq_,module,exports){
// 20.2.2.22 Math.log2(x)
var $export=_dereq_(23);

$export($export.S,'Math',{
log2:function log2(x){
return Math.log(x) / Math.LN2;}});},


{"23":23}],111:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
var $export=_dereq_(23);

$export($export.S,'Math',{sign:_dereq_(52)});},
{"23":23,"52":52}],112:[function(_dereq_,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export=_dereq_(23),
expm1=_dereq_(50),
exp=Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * _dereq_(25)(function(){
return !Math.sinh(-2e-17) != -2e-17;}),
'Math',{
sinh:function sinh(x){
return Math.abs(x = +x) < 1?
(expm1(x) - expm1(-x)) / 2:
(exp(x - 1) - exp(-x - 1)) * (Math.E / 2);}});},


{"23":23,"25":25,"50":50}],113:[function(_dereq_,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export=_dereq_(23),
expm1=_dereq_(50),
exp=Math.exp;

$export($export.S,'Math',{
tanh:function tanh(x){
var a=expm1(x = +x),
b=expm1(-x);
return a == Infinity?1:b == Infinity?-1:(a - b) / (exp(x) + exp(-x));}});},


{"23":23,"50":50}],114:[function(_dereq_,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export=_dereq_(23);

$export($export.S,'Math',{
trunc:function trunc(it){
return (it > 0?Math.floor:Math.ceil)(it);}});},


{"23":23}],115:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
global=_dereq_(30),
has=_dereq_(31),
cof=_dereq_(12),
toPrimitive=_dereq_(82),
fails=_dereq_(25),
$trim=_dereq_(75).trim,
NUMBER='Number',
$Number=global[NUMBER],
Base=$Number,
proto=$Number.prototype
// Opera ~12 has broken Object#toString
,BROKEN_COF=cof($.create(proto)) == NUMBER,
TRIM='trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber=function toNumber(argument){
var it=toPrimitive(argument,false);
if(typeof it == 'string' && it.length > 2){
it = TRIM?it.trim():$trim(it,3);
var first=it.charCodeAt(0),
third,radix,maxCode;
if(first === 43 || first === 45){
third = it.charCodeAt(2);
if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
}else if(first === 48){
switch(it.charCodeAt(1)){
case 66:case 98:radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
case 79:case 111:radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
default:return +it;}

for(var digits=it.slice(2),i=0,l=digits.length,code;i < l;i++) {
code = digits.charCodeAt(i);
// parseInt parses a string to a first unavailable symbol
// but ToNumber should return NaN if a string contains unavailable symbols
if(code < 48 || code > maxCode)return NaN;}
return parseInt(digits,radix);}}

return +it;};


if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
$Number = function Number(value){
var it=arguments.length < 1?0:value,
that=this;
return that instanceof $Number
// check on 1..constructor(foo) case
 && (BROKEN_COF?fails(function(){proto.valueOf.call(that);}):cof(that) != NUMBER)?
new Base(toNumber(it)):toNumber(it);};

$.each.call(_dereq_(20)?$.getNames(Base):(
// ES3:
'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + 
// ES6 (in case, if modules with ES6 Number statics required before):
'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 
'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').
split(','),function(key){
if(has(Base,key) && !has($Number,key)){
$.setDesc($Number,key,$.getDesc(Base,key));}});


$Number.prototype = proto;
proto.constructor = $Number;
_dereq_(62)(global,NUMBER,$Number);}},

{"12":12,"20":20,"25":25,"30":30,"31":31,"47":47,"62":62,"75":75,"82":82}],116:[function(_dereq_,module,exports){
// 20.1.2.1 Number.EPSILON
var $export=_dereq_(23);

$export($export.S,'Number',{EPSILON:Math.pow(2,-52)});},
{"23":23}],117:[function(_dereq_,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export=_dereq_(23),
_isFinite=_dereq_(30).isFinite;

$export($export.S,'Number',{
isFinite:function isFinite(it){
return typeof it == 'number' && _isFinite(it);}});},


{"23":23,"30":30}],118:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export=_dereq_(23);

$export($export.S,'Number',{isInteger:_dereq_(38)});},
{"23":23,"38":38}],119:[function(_dereq_,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export=_dereq_(23);

$export($export.S,'Number',{
isNaN:function isNaN(number){
return number != number;}});},


{"23":23}],120:[function(_dereq_,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export=_dereq_(23),
isInteger=_dereq_(38),
abs=Math.abs;

$export($export.S,'Number',{
isSafeInteger:function isSafeInteger(number){
return isInteger(number) && abs(number) <= 0x1fffffffffffff;}});},


{"23":23,"38":38}],121:[function(_dereq_,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export=_dereq_(23);

$export($export.S,'Number',{MAX_SAFE_INTEGER:0x1fffffffffffff});},
{"23":23}],122:[function(_dereq_,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export=_dereq_(23);

$export($export.S,'Number',{MIN_SAFE_INTEGER:-0x1fffffffffffff});},
{"23":23}],123:[function(_dereq_,module,exports){
// 20.1.2.12 Number.parseFloat(string)
var $export=_dereq_(23);

$export($export.S,'Number',{parseFloat:parseFloat});},
{"23":23}],124:[function(_dereq_,module,exports){
// 20.1.2.13 Number.parseInt(string, radix)
var $export=_dereq_(23);

$export($export.S,'Number',{parseInt:parseInt});},
{"23":23}],125:[function(_dereq_,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export=_dereq_(23);

$export($export.S + $export.F,'Object',{assign:_dereq_(54)});},
{"23":23,"54":54}],126:[function(_dereq_,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject=_dereq_(39);

_dereq_(55)('freeze',function($freeze){
return function freeze(it){
return $freeze && isObject(it)?$freeze(it):it;};});},


{"39":39,"55":55}],127:[function(_dereq_,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject=_dereq_(79);

_dereq_(55)('getOwnPropertyDescriptor',function($getOwnPropertyDescriptor){
return function getOwnPropertyDescriptor(it,key){
return $getOwnPropertyDescriptor(toIObject(it),key);};});},


{"55":55,"79":79}],128:[function(_dereq_,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
_dereq_(55)('getOwnPropertyNames',function(){
return _dereq_(29).get;});},

{"29":29,"55":55}],129:[function(_dereq_,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject=_dereq_(81);

_dereq_(55)('getPrototypeOf',function($getPrototypeOf){
return function getPrototypeOf(it){
return $getPrototypeOf(toObject(it));};});},


{"55":55,"81":81}],130:[function(_dereq_,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject=_dereq_(39);

_dereq_(55)('isExtensible',function($isExtensible){
return function isExtensible(it){
return isObject(it)?$isExtensible?$isExtensible(it):true:false;};});},


{"39":39,"55":55}],131:[function(_dereq_,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject=_dereq_(39);

_dereq_(55)('isFrozen',function($isFrozen){
return function isFrozen(it){
return isObject(it)?$isFrozen?$isFrozen(it):false:true;};});},


{"39":39,"55":55}],132:[function(_dereq_,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject=_dereq_(39);

_dereq_(55)('isSealed',function($isSealed){
return function isSealed(it){
return isObject(it)?$isSealed?$isSealed(it):false:true;};});},


{"39":39,"55":55}],133:[function(_dereq_,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export=_dereq_(23);
$export($export.S,'Object',{is:_dereq_(64)});},
{"23":23,"64":64}],134:[function(_dereq_,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject=_dereq_(81);

_dereq_(55)('keys',function($keys){
return function keys(it){
return $keys(toObject(it));};});},


{"55":55,"81":81}],135:[function(_dereq_,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject=_dereq_(39);

_dereq_(55)('preventExtensions',function($preventExtensions){
return function preventExtensions(it){
return $preventExtensions && isObject(it)?$preventExtensions(it):it;};});},


{"39":39,"55":55}],136:[function(_dereq_,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject=_dereq_(39);

_dereq_(55)('seal',function($seal){
return function seal(it){
return $seal && isObject(it)?$seal(it):it;};});},


{"39":39,"55":55}],137:[function(_dereq_,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export=_dereq_(23);
$export($export.S,'Object',{setPrototypeOf:_dereq_(65).set});},
{"23":23,"65":65}],138:[function(_dereq_,module,exports){
'use strict'
// 19.1.3.6 Object.prototype.toString()
;var classof=_dereq_(11),
test={};
test[_dereq_(84)('toStringTag')] = 'z';
if(test + '' != '[object z]'){
_dereq_(62)(Object.prototype,'toString',function toString(){
return '[object ' + classof(this) + ']';},
true);}},

{"11":11,"62":62,"84":84}],139:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
LIBRARY=_dereq_(49),
global=_dereq_(30),
ctx=_dereq_(18),
classof=_dereq_(11),
$export=_dereq_(23),
isObject=_dereq_(39),
anObject=_dereq_(5),
aFunction=_dereq_(3),
strictNew=_dereq_(70),
forOf=_dereq_(28),
setProto=_dereq_(65).set,
same=_dereq_(64),
SPECIES=_dereq_(84)('species'),
speciesConstructor=_dereq_(69),
asap=_dereq_(53),
PROMISE='Promise',
process=global.process,
isNode=classof(process) == 'process',
P=global[PROMISE],
Wrapper;

var testResolve=function testResolve(sub){
var test=new P(function(){});
if(sub)test.constructor = Object;
return P.resolve(test) === test;};


var USE_NATIVE=(function(){
var works=false;
function P2(x){
var self=new P(x);
setProto(self,P2.prototype);
return self;}

try{
works = P && P.resolve && testResolve();
setProto(P2,P);
P2.prototype = $.create(P.prototype,{constructor:{value:P2}});
// actual Firefox has broken subclass support, test that
if(!(P2.resolve(5).then(function(){}) instanceof P2)){
works = false;}

// actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
if(works && _dereq_(20)){
var thenableThenGotten=false;
P.resolve($.setDesc({},'then',{
get:function get(){thenableThenGotten = true;}}));

works = thenableThenGotten;}}

catch(e) {works = false;}
return works;})();


// helpers
var sameConstructor=function sameConstructor(a,b){
// library wrapper special case
if(LIBRARY && a === P && b === Wrapper)return true;
return same(a,b);};

var getConstructor=function getConstructor(C){
var S=anObject(C)[SPECIES];
return S != undefined?S:C;};

var isThenable=function isThenable(it){
var then;
return isObject(it) && typeof (then = it.then) == 'function'?then:false;};

var PromiseCapability=function PromiseCapability(C){
var resolve,reject;
this.promise = new C(function($$resolve,$$reject){
if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
resolve = $$resolve;
reject = $$reject;});

this.resolve = aFunction(resolve),
this.reject = aFunction(reject);};

var perform=function perform(exec){
try{
exec();}
catch(e) {
return {error:e};}};


var notify=function notify(record,isReject){
if(record.n)return;
record.n = true;
var chain=record.c;
asap(function(){
var value=record.v,
ok=record.s == 1,
i=0;
var run=function run(reaction){
var handler=ok?reaction.ok:reaction.fail,
resolve=reaction.resolve,
reject=reaction.reject,
result,then;
try{
if(handler){
if(!ok)record.h = true;
result = handler === true?value:handler(value);
if(result === reaction.promise){
reject(TypeError('Promise-chain cycle'));}else 
if(then = isThenable(result)){
then.call(result,resolve,reject);}else 
resolve(result);}else 
reject(value);}
catch(e) {
reject(e);}};


while(chain.length > i) run(chain[i++]); // variable length - can't use forEach
chain.length = 0;
record.n = false;
if(isReject)setTimeout(function(){
var promise=record.p,
handler,console;
if(isUnhandled(promise)){
if(isNode){
process.emit('unhandledRejection',value,promise);}else 
if(handler = global.onunhandledrejection){
handler({promise:promise,reason:value});}else 
if((console = global.console) && console.error){
console.error('Unhandled promise rejection',value);}}

record.a = undefined;},
1);});};


var isUnhandled=function isUnhandled(promise){
var record=promise._d,
chain=record.a || record.c,
i=0,
reaction;
if(record.h)return false;
while(chain.length > i) {
reaction = chain[i++];
if(reaction.fail || !isUnhandled(reaction.promise))return false;}
return true;};

var $reject=function $reject(value){
var record=this;
if(record.d)return;
record.d = true;
record = record.r || record; // unwrap
record.v = value;
record.s = 2;
record.a = record.c.slice();
notify(record,true);};

var $resolve=function $resolve(value){
var record=this,
then;
if(record.d)return;
record.d = true;
record = record.r || record; // unwrap
try{
if(record.p === value)throw TypeError("Promise can't be resolved itself");
if(then = isThenable(value)){
asap(function(){
var wrapper={r:record,d:false}; // wrap
try{
then.call(value,ctx($resolve,wrapper,1),ctx($reject,wrapper,1));}
catch(e) {
$reject.call(wrapper,e);}});}else 


{
record.v = value;
record.s = 1;
notify(record,false);}}

catch(e) {
$reject.call({r:record,d:false},e); // wrap
}};


// constructor polyfill
if(!USE_NATIVE){
// 25.4.3.1 Promise(executor)
P = function Promise(executor){
aFunction(executor);
var record=this._d = {
p:strictNew(this,P,PROMISE), // <- promise
c:[], // <- awaiting reactions
a:undefined, // <- checked in isUnhandled reactions
s:0, // <- state
d:false, // <- done
v:undefined, // <- value
h:false, // <- handled rejection
n:false // <- notify
};
try{
executor(ctx($resolve,record,1),ctx($reject,record,1));}
catch(err) {
$reject.call(record,err);}};


_dereq_(61)(P.prototype,{
// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
then:function then(onFulfilled,onRejected){
var reaction=new PromiseCapability(speciesConstructor(this,P)),
promise=reaction.promise,
record=this._d;
reaction.ok = typeof onFulfilled == 'function'?onFulfilled:true;
reaction.fail = typeof onRejected == 'function' && onRejected;
record.c.push(reaction);
if(record.a)record.a.push(reaction);
if(record.s)notify(record,false);
return promise;},

// 25.4.5.1 Promise.prototype.catch(onRejected)
'catch':function _catch(onRejected){
return this.then(undefined,onRejected);}});}




$export($export.G + $export.W + $export.F * !USE_NATIVE,{Promise:P});
_dereq_(67)(P,PROMISE);
_dereq_(66)(PROMISE);
Wrapper = _dereq_(17)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE,PROMISE,{
// 25.4.4.5 Promise.reject(r)
reject:function reject(r){
var capability=new PromiseCapability(this),
$$reject=capability.reject;
$$reject(r);
return capability.promise;}});


$export($export.S + $export.F * (!USE_NATIVE || testResolve(true)),PROMISE,{
// 25.4.4.6 Promise.resolve(x)
resolve:function resolve(x){
// instanceof instead of internal slot check because we should fix it without replacement native Promise core
if(x instanceof P && sameConstructor(x.constructor,this))return x;
var capability=new PromiseCapability(this),
$$resolve=capability.resolve;
$$resolve(x);
return capability.promise;}});


$export($export.S + $export.F * !(USE_NATIVE && _dereq_(44)(function(iter){
P.all(iter)['catch'](function(){});})),
PROMISE,{
// 25.4.4.1 Promise.all(iterable)
all:function all(iterable){
var C=getConstructor(this),
capability=new PromiseCapability(C),
resolve=capability.resolve,
reject=capability.reject,
values=[];
var abrupt=perform(function(){
forOf(iterable,false,values.push,values);
var remaining=values.length,
results=Array(remaining);
if(remaining)$.each.call(values,function(promise,index){
var alreadyCalled=false;
C.resolve(promise).then(function(value){
if(alreadyCalled)return;
alreadyCalled = true;
results[index] = value;
--remaining || resolve(results);},
reject);});else 

resolve(results);});

if(abrupt)reject(abrupt.error);
return capability.promise;},

// 25.4.4.4 Promise.race(iterable)
race:function race(iterable){
var C=getConstructor(this),
capability=new PromiseCapability(C),
reject=capability.reject;
var abrupt=perform(function(){
forOf(iterable,false,function(promise){
C.resolve(promise).then(capability.resolve,reject);});});


if(abrupt)reject(abrupt.error);
return capability.promise;}});},


{"11":11,"17":17,"18":18,"20":20,"23":23,"28":28,"3":3,"30":30,"39":39,"44":44,"47":47,"49":49,"5":5,"53":53,"61":61,"64":64,"65":65,"66":66,"67":67,"69":69,"70":70,"84":84}],140:[function(_dereq_,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export=_dereq_(23),
_apply=Function.apply;

$export($export.S,'Reflect',{
apply:function apply(target,thisArgument,argumentsList){
return _apply.call(target,thisArgument,argumentsList);}});},


{"23":23}],141:[function(_dereq_,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $=_dereq_(47),
$export=_dereq_(23),
aFunction=_dereq_(3),
anObject=_dereq_(5),
isObject=_dereq_(39),
bind=Function.bind || _dereq_(17).Function.prototype.bind;

// MS Edge supports only 2 arguments
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
$export($export.S + $export.F * _dereq_(25)(function(){
function F(){}
return !(Reflect.construct(function(){},[],F) instanceof F);}),
'Reflect',{
construct:function construct(Target,args /*, newTarget*/){
aFunction(Target);
var newTarget=arguments.length < 3?Target:aFunction(arguments[2]);
if(Target == newTarget){
// w/o altered newTarget, optimization for 0-4 arguments
if(args != undefined)switch(anObject(args).length){
case 0:return new Target();
case 1:return new Target(args[0]);
case 2:return new Target(args[0],args[1]);
case 3:return new Target(args[0],args[1],args[2]);
case 4:return new Target(args[0],args[1],args[2],args[3]);}

// w/o altered newTarget, lot of arguments case
var $args=[null];
$args.push.apply($args,args);
return new (bind.apply(Target,$args))();}

// with altered newTarget, not support built-in constructors
var proto=newTarget.prototype,
instance=$.create(isObject(proto)?proto:Object.prototype),
result=Function.apply.call(Target,instance,args);
return isObject(result)?result:instance;}});},


{"17":17,"23":23,"25":25,"3":3,"39":39,"47":47,"5":5}],142:[function(_dereq_,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var $=_dereq_(47),
$export=_dereq_(23),
anObject=_dereq_(5);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * _dereq_(25)(function(){
Reflect.defineProperty($.setDesc({},1,{value:1}),1,{value:2});}),
'Reflect',{
defineProperty:function defineProperty(target,propertyKey,attributes){
anObject(target);
try{
$.setDesc(target,propertyKey,attributes);
return true;}
catch(e) {
return false;}}});},



{"23":23,"25":25,"47":47,"5":5}],143:[function(_dereq_,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export=_dereq_(23),
getDesc=_dereq_(47).getDesc,
anObject=_dereq_(5);

$export($export.S,'Reflect',{
deleteProperty:function deleteProperty(target,propertyKey){
var desc=getDesc(anObject(target),propertyKey);
return desc && !desc.configurable?false:delete target[propertyKey];}});},


{"23":23,"47":47,"5":5}],144:[function(_dereq_,module,exports){
'use strict'
// 26.1.5 Reflect.enumerate(target)
;var $export=_dereq_(23),
anObject=_dereq_(5);
var Enumerate=function Enumerate(iterated){
this._t = anObject(iterated); // target
this._i = 0; // next index
var keys=this._k = [] // keys
,key;
for(key in iterated) keys.push(key);};

_dereq_(42)(Enumerate,'Object',function(){
var that=this,
keys=that._k,
key;
do {
if(that._i >= keys.length)return {value:undefined,done:true};}while(
!((key = keys[that._i++]) in that._t));
return {value:key,done:false};});


$export($export.S,'Reflect',{
enumerate:function enumerate(target){
return new Enumerate(target);}});},


{"23":23,"42":42,"5":5}],145:[function(_dereq_,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var $=_dereq_(47),
$export=_dereq_(23),
anObject=_dereq_(5);

$export($export.S,'Reflect',{
getOwnPropertyDescriptor:function getOwnPropertyDescriptor(target,propertyKey){
return $.getDesc(anObject(target),propertyKey);}});},


{"23":23,"47":47,"5":5}],146:[function(_dereq_,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export=_dereq_(23),
getProto=_dereq_(47).getProto,
anObject=_dereq_(5);

$export($export.S,'Reflect',{
getPrototypeOf:function getPrototypeOf(target){
return getProto(anObject(target));}});},


{"23":23,"47":47,"5":5}],147:[function(_dereq_,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var $=_dereq_(47),
has=_dereq_(31),
$export=_dereq_(23),
isObject=_dereq_(39),
anObject=_dereq_(5);

function get(target,propertyKey /*, receiver*/){
var receiver=arguments.length < 3?target:arguments[2],
desc,proto;
if(anObject(target) === receiver)return target[propertyKey];
if(desc = $.getDesc(target,propertyKey))return has(desc,'value')?
desc.value:
desc.get !== undefined?
desc.get.call(receiver):
undefined;
if(isObject(proto = $.getProto(target)))return get(proto,propertyKey,receiver);}


$export($export.S,'Reflect',{get:get});},
{"23":23,"31":31,"39":39,"47":47,"5":5}],148:[function(_dereq_,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export=_dereq_(23);

$export($export.S,'Reflect',{
has:function has(target,propertyKey){
return propertyKey in target;}});},


{"23":23}],149:[function(_dereq_,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export=_dereq_(23),
anObject=_dereq_(5),
$isExtensible=Object.isExtensible;

$export($export.S,'Reflect',{
isExtensible:function isExtensible(target){
anObject(target);
return $isExtensible?$isExtensible(target):true;}});},


{"23":23,"5":5}],150:[function(_dereq_,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export=_dereq_(23);

$export($export.S,'Reflect',{ownKeys:_dereq_(57)});},
{"23":23,"57":57}],151:[function(_dereq_,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export=_dereq_(23),
anObject=_dereq_(5),
$preventExtensions=Object.preventExtensions;

$export($export.S,'Reflect',{
preventExtensions:function preventExtensions(target){
anObject(target);
try{
if($preventExtensions)$preventExtensions(target);
return true;}
catch(e) {
return false;}}});},



{"23":23,"5":5}],152:[function(_dereq_,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export=_dereq_(23),
setProto=_dereq_(65);

if(setProto)$export($export.S,'Reflect',{
setPrototypeOf:function setPrototypeOf(target,proto){
setProto.check(target,proto);
try{
setProto.set(target,proto);
return true;}
catch(e) {
return false;}}});},



{"23":23,"65":65}],153:[function(_dereq_,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var $=_dereq_(47),
has=_dereq_(31),
$export=_dereq_(23),
createDesc=_dereq_(60),
anObject=_dereq_(5),
isObject=_dereq_(39);

function set(target,propertyKey,V /*, receiver*/){
var receiver=arguments.length < 4?target:arguments[3],
ownDesc=$.getDesc(anObject(target),propertyKey),
existingDescriptor,proto;
if(!ownDesc){
if(isObject(proto = $.getProto(target))){
return set(proto,propertyKey,V,receiver);}

ownDesc = createDesc(0);}

if(has(ownDesc,'value')){
if(ownDesc.writable === false || !isObject(receiver))return false;
existingDescriptor = $.getDesc(receiver,propertyKey) || createDesc(0);
existingDescriptor.value = V;
$.setDesc(receiver,propertyKey,existingDescriptor);
return true;}

return ownDesc.set === undefined?false:(ownDesc.set.call(receiver,V),true);}


$export($export.S,'Reflect',{set:set});},
{"23":23,"31":31,"39":39,"47":47,"5":5,"60":60}],154:[function(_dereq_,module,exports){
var $=_dereq_(47),
global=_dereq_(30),
isRegExp=_dereq_(40),
$flags=_dereq_(27),
$RegExp=global.RegExp,
Base=$RegExp,
proto=$RegExp.prototype,
re1=/a/g,
re2=/a/g
// "new" creates a new object, old webkit buggy here
,CORRECT_NEW=new $RegExp(re1) !== re1;

if(_dereq_(20) && (!CORRECT_NEW || _dereq_(25)(function(){
re2[_dereq_(84)('match')] = false;
// RegExp constructor can alter flags and IsRegExp works correct with @@match
return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1,'i') != '/a/i';})))
{
$RegExp = function RegExp(p,f){
var piRE=isRegExp(p),
fiU=f === undefined;
return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU?p:
CORRECT_NEW?
new Base(piRE && !fiU?p.source:p,f):
Base((piRE = p instanceof $RegExp)?p.source:p,piRE && fiU?$flags.call(p):f);};

$.each.call($.getNames(Base),function(key){
key in $RegExp || $.setDesc($RegExp,key,{
configurable:true,
get:function get(){return Base[key];},
set:function set(it){Base[key] = it;}});});


proto.constructor = $RegExp;
$RegExp.prototype = proto;
_dereq_(62)(global,'RegExp',$RegExp);}


_dereq_(66)('RegExp');},
{"20":20,"25":25,"27":27,"30":30,"40":40,"47":47,"62":62,"66":66,"84":84}],155:[function(_dereq_,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
var $=_dereq_(47);
if(_dereq_(20) && /./g.flags != 'g')$.setDesc(RegExp.prototype,'flags',{
configurable:true,
get:_dereq_(27)});},

{"20":20,"27":27,"47":47}],156:[function(_dereq_,module,exports){
// @@match logic
_dereq_(26)('match',1,function(defined,MATCH){
// 21.1.3.11 String.prototype.match(regexp)
return function match(regexp){
'use strict';
var O=defined(this),
fn=regexp == undefined?undefined:regexp[MATCH];
return fn !== undefined?fn.call(regexp,O):new RegExp(regexp)[MATCH](String(O));};});},


{"26":26}],157:[function(_dereq_,module,exports){
// @@replace logic
_dereq_(26)('replace',2,function(defined,REPLACE,$replace){
// 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
return function replace(searchValue,replaceValue){
'use strict';
var O=defined(this),
fn=searchValue == undefined?undefined:searchValue[REPLACE];
return fn !== undefined?
fn.call(searchValue,O,replaceValue):
$replace.call(String(O),searchValue,replaceValue);};});},


{"26":26}],158:[function(_dereq_,module,exports){
// @@search logic
_dereq_(26)('search',1,function(defined,SEARCH){
// 21.1.3.15 String.prototype.search(regexp)
return function search(regexp){
'use strict';
var O=defined(this),
fn=regexp == undefined?undefined:regexp[SEARCH];
return fn !== undefined?fn.call(regexp,O):new RegExp(regexp)[SEARCH](String(O));};});},


{"26":26}],159:[function(_dereq_,module,exports){
// @@split logic
_dereq_(26)('split',2,function(defined,SPLIT,$split){
// 21.1.3.17 String.prototype.split(separator, limit)
return function split(separator,limit){
'use strict';
var O=defined(this),
fn=separator == undefined?undefined:separator[SPLIT];
return fn !== undefined?
fn.call(separator,O,limit):
$split.call(String(O),separator,limit);};});},


{"26":26}],160:[function(_dereq_,module,exports){
'use strict';
var strong=_dereq_(13);

// 23.2 Set Objects
_dereq_(16)('Set',function(get){
return function Set(){return get(this,arguments.length > 0?arguments[0]:undefined);};},
{
// 23.2.3.1 Set.prototype.add(value)
add:function add(value){
return strong.def(this,value = value === 0?0:value,value);}},

strong);},
{"13":13,"16":16}],161:[function(_dereq_,module,exports){
'use strict';
var $export=_dereq_(23),
$at=_dereq_(71)(false);
$export($export.P,'String',{
// 21.1.3.3 String.prototype.codePointAt(pos)
codePointAt:function codePointAt(pos){
return $at(this,pos);}});},


{"23":23,"71":71}],162:[function(_dereq_,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export=_dereq_(23),
toLength=_dereq_(80),
context=_dereq_(72),
ENDS_WITH='endsWith',
$endsWith=''[ENDS_WITH];

$export($export.P + $export.F * _dereq_(24)(ENDS_WITH),'String',{
endsWith:function endsWith(searchString /*, endPosition = @length */){
var that=context(this,searchString,ENDS_WITH),
$$=arguments,
endPosition=$$.length > 1?$$[1]:undefined,
len=toLength(that.length),
end=endPosition === undefined?len:Math.min(toLength(endPosition),len),
search=String(searchString);
return $endsWith?
$endsWith.call(that,search,end):
that.slice(end - search.length,end) === search;}});},


{"23":23,"24":24,"72":72,"80":80}],163:[function(_dereq_,module,exports){
var $export=_dereq_(23),
toIndex=_dereq_(77),
fromCharCode=String.fromCharCode,
$fromCodePoint=String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1),'String',{
// 21.1.2.2 String.fromCodePoint(...codePoints)
fromCodePoint:function fromCodePoint(x){ // eslint-disable-line no-unused-vars
var res=[],
$$=arguments,
$$len=$$.length,
i=0,
code;
while($$len > i) {
code = +$$[i++];
if(toIndex(code,0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
res.push(code < 0x10000?
fromCharCode(code):
fromCharCode(((code -= 0x10000) >> 10) + 0xd800,code % 0x400 + 0xdc00));}

return res.join('');}});},


{"23":23,"77":77}],164:[function(_dereq_,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export=_dereq_(23),
context=_dereq_(72),
INCLUDES='includes';

$export($export.P + $export.F * _dereq_(24)(INCLUDES),'String',{
includes:function includes(searchString /*, position = 0 */){
return !! ~context(this,searchString,INCLUDES).
indexOf(searchString,arguments.length > 1?arguments[1]:undefined);}});},


{"23":23,"24":24,"72":72}],165:[function(_dereq_,module,exports){
'use strict';
var $at=_dereq_(71)(true);

// 21.1.3.27 String.prototype[@@iterator]()
_dereq_(43)(String,'String',function(iterated){
this._t = String(iterated); // target
this._i = 0; // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
},function(){
var O=this._t,
index=this._i,
point;
if(index >= O.length)return {value:undefined,done:true};
point = $at(O,index);
this._i += point.length;
return {value:point,done:false};});},

{"43":43,"71":71}],166:[function(_dereq_,module,exports){
var $export=_dereq_(23),
toIObject=_dereq_(79),
toLength=_dereq_(80);

$export($export.S,'String',{
// 21.1.2.4 String.raw(callSite, ...substitutions)
raw:function raw(callSite){
var tpl=toIObject(callSite.raw),
len=toLength(tpl.length),
$$=arguments,
$$len=$$.length,
res=[],
i=0;
while(len > i) {
res.push(String(tpl[i++]));
if(i < $$len)res.push(String($$[i]));}
return res.join('');}});},


{"23":23,"79":79,"80":80}],167:[function(_dereq_,module,exports){
var $export=_dereq_(23);

$export($export.P,'String',{
// 21.1.3.13 String.prototype.repeat(count)
repeat:_dereq_(74)});},

{"23":23,"74":74}],168:[function(_dereq_,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export=_dereq_(23),
toLength=_dereq_(80),
context=_dereq_(72),
STARTS_WITH='startsWith',
$startsWith=''[STARTS_WITH];

$export($export.P + $export.F * _dereq_(24)(STARTS_WITH),'String',{
startsWith:function startsWith(searchString /*, position = 0 */){
var that=context(this,searchString,STARTS_WITH),
$$=arguments,
index=toLength(Math.min($$.length > 1?$$[1]:undefined,that.length)),
search=String(searchString);
return $startsWith?
$startsWith.call(that,search,index):
that.slice(index,index + search.length) === search;}});},


{"23":23,"24":24,"72":72,"80":80}],169:[function(_dereq_,module,exports){
'use strict'
// 21.1.3.25 String.prototype.trim()
;_dereq_(75)('trim',function($trim){
return function trim(){
return $trim(this,3);};});},


{"75":75}],170:[function(_dereq_,module,exports){
'use strict'
// ECMAScript 6 symbols shim
;var $=_dereq_(47),
global=_dereq_(30),
has=_dereq_(31),
DESCRIPTORS=_dereq_(20),
$export=_dereq_(23),
redefine=_dereq_(62),
$fails=_dereq_(25),
shared=_dereq_(68),
setToStringTag=_dereq_(67),
uid=_dereq_(83),
wks=_dereq_(84),
keyOf=_dereq_(48),
$names=_dereq_(29),
enumKeys=_dereq_(22),
isArray=_dereq_(37),
anObject=_dereq_(5),
toIObject=_dereq_(79),
createDesc=_dereq_(60),
getDesc=$.getDesc,
setDesc=$.setDesc,
_create=$.create,
getNames=$names.get,
$Symbol=global.Symbol,
$JSON=global.JSON,
_stringify=$JSON && $JSON.stringify,
setter=false,
HIDDEN=wks('_hidden'),
isEnum=$.isEnum,
SymbolRegistry=shared('symbol-registry'),
AllSymbols=shared('symbols'),
useNative=typeof $Symbol == 'function',
ObjectProto=Object.prototype;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc=DESCRIPTORS && $fails(function(){
return _create(setDesc({},'a',{
get:function get(){return setDesc(this,'a',{value:7}).a;}})).
a != 7;})?
function(it,key,D){
var protoDesc=getDesc(ObjectProto,key);
if(protoDesc)delete ObjectProto[key];
setDesc(it,key,D);
if(protoDesc && it !== ObjectProto)setDesc(ObjectProto,key,protoDesc);}:
setDesc;

var wrap=function wrap(tag){
var sym=AllSymbols[tag] = _create($Symbol.prototype);
sym._k = tag;
DESCRIPTORS && setter && setSymbolDesc(ObjectProto,tag,{
configurable:true,
set:function set(value){
if(has(this,HIDDEN) && has(this[HIDDEN],tag))this[HIDDEN][tag] = false;
setSymbolDesc(this,tag,createDesc(1,value));}});


return sym;};


var isSymbol=function isSymbol(it){
return (typeof it === "undefined"?"undefined":_typeof(it)) == 'symbol';};


var $defineProperty=function defineProperty(it,key,D){
if(D && has(AllSymbols,key)){
if(!D.enumerable){
if(!has(it,HIDDEN))setDesc(it,HIDDEN,createDesc(1,{}));
it[HIDDEN][key] = true;}else 
{
if(has(it,HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
D = _create(D,{enumerable:createDesc(0,false)});}
return setSymbolDesc(it,key,D);}
return setDesc(it,key,D);};

var $defineProperties=function defineProperties(it,P){
anObject(it);
var keys=enumKeys(P = toIObject(P)),
i=0,
l=keys.length,
key;
while(l > i) $defineProperty(it,key = keys[i++],P[key]);
return it;};

var $create=function create(it,P){
return P === undefined?_create(it):$defineProperties(_create(it),P);};

var $propertyIsEnumerable=function propertyIsEnumerable(key){
var E=isEnum.call(this,key);
return E || !has(this,key) || !has(AllSymbols,key) || has(this,HIDDEN) && this[HIDDEN][key]?
E:true;};

var $getOwnPropertyDescriptor=function getOwnPropertyDescriptor(it,key){
var D=getDesc(it = toIObject(it),key);
if(D && has(AllSymbols,key) && !(has(it,HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
return D;};

var $getOwnPropertyNames=function getOwnPropertyNames(it){
var names=getNames(toIObject(it)),
result=[],
i=0,
key;
while(names.length > i) if(!has(AllSymbols,key = names[i++]) && key != HIDDEN)result.push(key);
return result;};

var $getOwnPropertySymbols=function getOwnPropertySymbols(it){
var names=getNames(toIObject(it)),
result=[],
i=0,
key;
while(names.length > i) if(has(AllSymbols,key = names[i++]))result.push(AllSymbols[key]);
return result;};

var $stringify=function stringify(it){
if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
var args=[it],
i=1,
$$=arguments,
replacer,$replacer;
while($$.length > i) args.push($$[i++]);
replacer = args[1];
if(typeof replacer == 'function')$replacer = replacer;
if($replacer || !isArray(replacer))replacer = function(key,value){
if($replacer)value = $replacer.call(this,key,value);
if(!isSymbol(value))return value;};

args[1] = replacer;
return _stringify.apply($JSON,args);};

var buggyJSON=$fails(function(){
var S=$Symbol();
// MS Edge converts symbol values to JSON as {}
// WebKit converts symbol values to JSON as null
// V8 throws on boxed symbols
return _stringify([S]) != '[null]' || _stringify({a:S}) != '{}' || _stringify(Object(S)) != '{}';});


// 19.4.1.1 Symbol([description])
if(!useNative){
$Symbol = function Symbol(){
if(isSymbol(this))throw TypeError('Symbol is not a constructor');
return wrap(uid(arguments.length > 0?arguments[0]:undefined));};

redefine($Symbol.prototype,'toString',function toString(){
return this._k;});


isSymbol = function(it){
return it instanceof $Symbol;};


$.create = $create;
$.isEnum = $propertyIsEnumerable;
$.getDesc = $getOwnPropertyDescriptor;
$.setDesc = $defineProperty;
$.setDescs = $defineProperties;
$.getNames = $names.get = $getOwnPropertyNames;
$.getSymbols = $getOwnPropertySymbols;

if(DESCRIPTORS && !_dereq_(49)){
redefine(ObjectProto,'propertyIsEnumerable',$propertyIsEnumerable,true);}}



var symbolStatics={
// 19.4.2.1 Symbol.for(key)
'for':function _for(key){
return has(SymbolRegistry,key += '')?
SymbolRegistry[key]:
SymbolRegistry[key] = $Symbol(key);},

// 19.4.2.5 Symbol.keyFor(sym)
keyFor:function keyFor(key){
return keyOf(SymbolRegistry,key);},

useSetter:function useSetter(){setter = true;},
useSimple:function useSimple(){setter = false;}};

// 19.4.2.2 Symbol.hasInstance
// 19.4.2.3 Symbol.isConcatSpreadable
// 19.4.2.4 Symbol.iterator
// 19.4.2.6 Symbol.match
// 19.4.2.8 Symbol.replace
// 19.4.2.9 Symbol.search
// 19.4.2.10 Symbol.species
// 19.4.2.11 Symbol.split
// 19.4.2.12 Symbol.toPrimitive
// 19.4.2.13 Symbol.toStringTag
// 19.4.2.14 Symbol.unscopables
$.each.call((
'hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 
'species,split,toPrimitive,toStringTag,unscopables').
split(','),function(it){
var sym=wks(it);
symbolStatics[it] = useNative?sym:wrap(sym);});


setter = true;

$export($export.G + $export.W,{Symbol:$Symbol});

$export($export.S,'Symbol',symbolStatics);

$export($export.S + $export.F * !useNative,'Object',{
// 19.1.2.2 Object.create(O [, Properties])
create:$create,
// 19.1.2.4 Object.defineProperty(O, P, Attributes)
defineProperty:$defineProperty,
// 19.1.2.3 Object.defineProperties(O, Properties)
defineProperties:$defineProperties,
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
getOwnPropertyDescriptor:$getOwnPropertyDescriptor,
// 19.1.2.7 Object.getOwnPropertyNames(O)
getOwnPropertyNames:$getOwnPropertyNames,
// 19.1.2.8 Object.getOwnPropertySymbols(O)
getOwnPropertySymbols:$getOwnPropertySymbols});


// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!useNative || buggyJSON),'JSON',{stringify:$stringify});

// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol,'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math,'Math',true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON,'JSON',true);},
{"20":20,"22":22,"23":23,"25":25,"29":29,"30":30,"31":31,"37":37,"47":47,"48":48,"49":49,"5":5,"60":60,"62":62,"67":67,"68":68,"79":79,"83":83,"84":84}],171:[function(_dereq_,module,exports){
'use strict';
var $=_dereq_(47),
redefine=_dereq_(62),
weak=_dereq_(15),
isObject=_dereq_(39),
has=_dereq_(31),
frozenStore=weak.frozenStore,
WEAK=weak.WEAK,
isExtensible=Object.isExtensible || isObject,
tmp={};

// 23.3 WeakMap Objects
var $WeakMap=_dereq_(16)('WeakMap',function(get){
return function WeakMap(){return get(this,arguments.length > 0?arguments[0]:undefined);};},
{
// 23.3.3.3 WeakMap.prototype.get(key)
get:function get(key){
if(isObject(key)){
if(!isExtensible(key))return frozenStore(this).get(key);
if(has(key,WEAK))return key[WEAK][this._i];}},


// 23.3.3.5 WeakMap.prototype.set(key, value)
set:function set(key,value){
return weak.def(this,key,value);}},

weak,true,true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp),7).get(tmp) != 7){
$.each.call(['delete','has','get','set'],function(key){
var proto=$WeakMap.prototype,
method=proto[key];
redefine(proto,key,function(a,b){
// store frozen objects on leaky map
if(isObject(a) && !isExtensible(a)){
var result=frozenStore(this)[key](a,b);
return key == 'set'?this:result;
// store all the rest on native weakmap
}return method.call(this,a,b);});});}},



{"15":15,"16":16,"31":31,"39":39,"47":47,"62":62}],172:[function(_dereq_,module,exports){
'use strict';
var weak=_dereq_(15);

// 23.4 WeakSet Objects
_dereq_(16)('WeakSet',function(get){
return function WeakSet(){return get(this,arguments.length > 0?arguments[0]:undefined);};},
{
// 23.4.3.1 WeakSet.prototype.add(value)
add:function add(value){
return weak.def(this,value,true);}},

weak,false,true);},
{"15":15,"16":16}],173:[function(_dereq_,module,exports){
'use strict';
var $export=_dereq_(23),
$includes=_dereq_(8)(true);

$export($export.P,'Array',{
// https://github.com/domenic/Array.prototype.includes
includes:function includes(el /*, fromIndex = 0 */){
return $includes(this,el,arguments.length > 1?arguments[1]:undefined);}});



_dereq_(4)('includes');},
{"23":23,"4":4,"8":8}],174:[function(_dereq_,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export=_dereq_(23);

$export($export.P,'Map',{toJSON:_dereq_(14)('Map')});},
{"14":14,"23":23}],175:[function(_dereq_,module,exports){
// http://goo.gl/XkBrjD
var $export=_dereq_(23),
$entries=_dereq_(56)(true);

$export($export.S,'Object',{
entries:function entries(it){
return $entries(it);}});},


{"23":23,"56":56}],176:[function(_dereq_,module,exports){
// https://gist.github.com/WebReflection/9353781
var $=_dereq_(47),
$export=_dereq_(23),
ownKeys=_dereq_(57),
toIObject=_dereq_(79),
createDesc=_dereq_(60);

$export($export.S,'Object',{
getOwnPropertyDescriptors:function getOwnPropertyDescriptors(object){
var O=toIObject(object),
setDesc=$.setDesc,
getDesc=$.getDesc,
keys=ownKeys(O),
result={},
i=0,
key,D;
while(keys.length > i) {
D = getDesc(O,key = keys[i++]);
if(key in result)setDesc(result,key,createDesc(0,D));else 
result[key] = D;}
return result;}});},


{"23":23,"47":47,"57":57,"60":60,"79":79}],177:[function(_dereq_,module,exports){
// http://goo.gl/XkBrjD
var $export=_dereq_(23),
$values=_dereq_(56)(false);

$export($export.S,'Object',{
values:function values(it){
return $values(it);}});},


{"23":23,"56":56}],178:[function(_dereq_,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export=_dereq_(23),
$re=_dereq_(63)(/[\\^$*+?.()|[\]{}]/g,'\\$&');

$export($export.S,'RegExp',{escape:function escape(it){return $re(it);}});},

{"23":23,"63":63}],179:[function(_dereq_,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export=_dereq_(23);

$export($export.P,'Set',{toJSON:_dereq_(14)('Set')});},
{"14":14,"23":23}],180:[function(_dereq_,module,exports){
'use strict'
// https://github.com/mathiasbynens/String.prototype.at
;var $export=_dereq_(23),
$at=_dereq_(71)(true);

$export($export.P,'String',{
at:function at(pos){
return $at(this,pos);}});},


{"23":23,"71":71}],181:[function(_dereq_,module,exports){
'use strict';
var $export=_dereq_(23),
$pad=_dereq_(73);

$export($export.P,'String',{
padLeft:function padLeft(maxLength /*, fillString = ' ' */){
return $pad(this,maxLength,arguments.length > 1?arguments[1]:undefined,true);}});},


{"23":23,"73":73}],182:[function(_dereq_,module,exports){
'use strict';
var $export=_dereq_(23),
$pad=_dereq_(73);

$export($export.P,'String',{
padRight:function padRight(maxLength /*, fillString = ' ' */){
return $pad(this,maxLength,arguments.length > 1?arguments[1]:undefined,false);}});},


{"23":23,"73":73}],183:[function(_dereq_,module,exports){
'use strict'
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
;_dereq_(75)('trimLeft',function($trim){
return function trimLeft(){
return $trim(this,1);};});},


{"75":75}],184:[function(_dereq_,module,exports){
'use strict'
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
;_dereq_(75)('trimRight',function($trim){
return function trimRight(){
return $trim(this,2);};});},


{"75":75}],185:[function(_dereq_,module,exports){
// JavaScript 1.6 / Strawman array statics shim
var $=_dereq_(47),
$export=_dereq_(23),
$ctx=_dereq_(18),
$Array=_dereq_(17).Array || Array,
statics={};
var setStatics=function setStatics(keys,length){
$.each.call(keys.split(','),function(key){
if(length == undefined && key in $Array)statics[key] = $Array[key];else 
if(key in [])statics[key] = $ctx(Function.call,[][key],length);});};


setStatics('pop,reverse,shift,keys,values,entries',1);
setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes',3);
setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' + 
'reduce,reduceRight,copyWithin,fill');
$export($export.S,'Array',statics);},
{"17":17,"18":18,"23":23,"47":47}],186:[function(_dereq_,module,exports){
_dereq_(92);
var global=_dereq_(30),
hide=_dereq_(32),
Iterators=_dereq_(46),
ITERATOR=_dereq_(84)('iterator'),
NL=global.NodeList,
HTC=global.HTMLCollection,
NLProto=NL && NL.prototype,
HTCProto=HTC && HTC.prototype,
ArrayValues=Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
if(NLProto && !NLProto[ITERATOR])hide(NLProto,ITERATOR,ArrayValues);
if(HTCProto && !HTCProto[ITERATOR])hide(HTCProto,ITERATOR,ArrayValues);},
{"30":30,"32":32,"46":46,"84":84,"92":92}],187:[function(_dereq_,module,exports){
var $export=_dereq_(23),
$task=_dereq_(76);
$export($export.G + $export.B,{
setImmediate:$task.set,
clearImmediate:$task.clear});},

{"23":23,"76":76}],188:[function(_dereq_,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global=_dereq_(30),
$export=_dereq_(23),
invoke=_dereq_(34),
partial=_dereq_(58),
navigator=global.navigator,
MSIE=!!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap=function wrap(set){
return MSIE?function(fn,time /*, ...args */){
return set(invoke(
partial,
[].slice.call(arguments,2),
typeof fn == 'function'?fn:Function(fn)),
time);}:
set;};

$export($export.G + $export.B + $export.F * MSIE,{
setTimeout:wrap(global.setTimeout),
setInterval:wrap(global.setInterval)});},

{"23":23,"30":30,"34":34,"58":58}],189:[function(_dereq_,module,exports){
_dereq_(86);
_dereq_(170);
_dereq_(125);
_dereq_(133);
_dereq_(137);
_dereq_(138);
_dereq_(126);
_dereq_(136);
_dereq_(135);
_dereq_(131);
_dereq_(132);
_dereq_(130);
_dereq_(127);
_dereq_(129);
_dereq_(134);
_dereq_(128);
_dereq_(96);
_dereq_(95);
_dereq_(115);
_dereq_(116);
_dereq_(117);
_dereq_(118);
_dereq_(119);
_dereq_(120);
_dereq_(121);
_dereq_(122);
_dereq_(123);
_dereq_(124);
_dereq_(98);
_dereq_(99);
_dereq_(100);
_dereq_(101);
_dereq_(102);
_dereq_(103);
_dereq_(104);
_dereq_(105);
_dereq_(106);
_dereq_(107);
_dereq_(108);
_dereq_(109);
_dereq_(110);
_dereq_(111);
_dereq_(112);
_dereq_(113);
_dereq_(114);
_dereq_(163);
_dereq_(166);
_dereq_(169);
_dereq_(165);
_dereq_(161);
_dereq_(162);
_dereq_(164);
_dereq_(167);
_dereq_(168);
_dereq_(91);
_dereq_(93);
_dereq_(92);
_dereq_(94);
_dereq_(87);
_dereq_(88);
_dereq_(90);
_dereq_(89);
_dereq_(154);
_dereq_(155);
_dereq_(156);
_dereq_(157);
_dereq_(158);
_dereq_(159);
_dereq_(139);
_dereq_(97);
_dereq_(160);
_dereq_(171);
_dereq_(172);
_dereq_(140);
_dereq_(141);
_dereq_(142);
_dereq_(143);
_dereq_(144);
_dereq_(147);
_dereq_(145);
_dereq_(146);
_dereq_(148);
_dereq_(149);
_dereq_(150);
_dereq_(151);
_dereq_(153);
_dereq_(152);
_dereq_(173);
_dereq_(180);
_dereq_(181);
_dereq_(182);
_dereq_(183);
_dereq_(184);
_dereq_(178);
_dereq_(176);
_dereq_(177);
_dereq_(175);
_dereq_(174);
_dereq_(179);
_dereq_(185);
_dereq_(188);
_dereq_(187);
_dereq_(186);
module.exports = _dereq_(17);},
{"100":100,"101":101,"102":102,"103":103,"104":104,"105":105,"106":106,"107":107,"108":108,"109":109,"110":110,"111":111,"112":112,"113":113,"114":114,"115":115,"116":116,"117":117,"118":118,"119":119,"120":120,"121":121,"122":122,"123":123,"124":124,"125":125,"126":126,"127":127,"128":128,"129":129,"130":130,"131":131,"132":132,"133":133,"134":134,"135":135,"136":136,"137":137,"138":138,"139":139,"140":140,"141":141,"142":142,"143":143,"144":144,"145":145,"146":146,"147":147,"148":148,"149":149,"150":150,"151":151,"152":152,"153":153,"154":154,"155":155,"156":156,"157":157,"158":158,"159":159,"160":160,"161":161,"162":162,"163":163,"164":164,"165":165,"166":166,"167":167,"168":168,"169":169,"17":17,"170":170,"171":171,"172":172,"173":173,"174":174,"175":175,"176":176,"177":177,"178":178,"179":179,"180":180,"181":181,"182":182,"183":183,"184":184,"185":185,"186":186,"187":187,"188":188,"86":86,"87":87,"88":88,"89":89,"90":90,"91":91,"92":92,"93":93,"94":94,"95":95,"96":96,"97":97,"98":98,"99":99}],190:[function(_dereq_,module,exports){
(function(global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global){
"use strict";

var hasOwn=Object.prototype.hasOwnProperty;
var undefined; // More compressible than void 0.
var iteratorSymbol=
typeof Symbol === "function" && Symbol.iterator || "@@iterator";

var inModule=(typeof module === "undefined"?"undefined":_typeof(module)) === "object";
var runtime=global.regeneratorRuntime;
if(runtime){
if(inModule){
// If regeneratorRuntime is defined globally and we're in a module,
// make the exports object identical to regeneratorRuntime.
module.exports = runtime;}

// Don't bother evaluating the rest of this file if the runtime was
// already defined globally.
return;}


// Define the runtime globally (as expected by generated code) as either
// module.exports (if we're in a module) or a new, empty object.
runtime = global.regeneratorRuntime = inModule?module.exports:{};

function wrap(innerFn,outerFn,self,tryLocsList){
// If outerFn provided, then outerFn.prototype instanceof Generator.
var generator=Object.create((outerFn || Generator).prototype);
var context=new Context(tryLocsList || []);

// The ._invoke method unifies the implementations of the .next,
// .throw, and .return methods.
generator._invoke = makeInvokeMethod(innerFn,self,context);

return generator;}

runtime.wrap = wrap;

// Try/catch helper to minimize deoptimizations. Returns a completion
// record like context.tryEntries[i].completion. This interface could
// have been (and was previously) designed to take a closure to be
// invoked without arguments, but in all the cases we care about we
// already have an existing method we want to call, so there's no need
// to create a new function object. We can even get away with assuming
// the method takes exactly one argument, since that happens to be true
// in every case, so we don't have to touch the arguments object. The
// only additional allocation required is the completion record, which
// has a stable shape and so hopefully should be cheap to allocate.
function tryCatch(fn,obj,arg){
try{
return {type:"normal",arg:fn.call(obj,arg)};}
catch(err) {
return {type:"throw",arg:err};}}



var GenStateSuspendedStart="suspendedStart";
var GenStateSuspendedYield="suspendedYield";
var GenStateExecuting="executing";
var GenStateCompleted="completed";

// Returning this object from the innerFn has the same effect as
// breaking out of the dispatch switch statement.
var ContinueSentinel={};

// Dummy constructor functions that we use as the .constructor and
// .constructor.prototype properties for functions that return Generator
// objects. For full spec compliance, you may wish to configure your
// minifier not to mangle the names of these two functions.
function Generator(){}
function GeneratorFunction(){}
function GeneratorFunctionPrototype(){}

var Gp=GeneratorFunctionPrototype.prototype = Generator.prototype;
GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
GeneratorFunctionPrototype.constructor = GeneratorFunction;
GeneratorFunction.displayName = "GeneratorFunction";

// Helper for defining the .next, .throw, and .return methods of the
// Iterator interface in terms of a single ._invoke method.
function defineIteratorMethods(prototype){
["next","throw","return"].forEach(function(method){
prototype[method] = function(arg){
return this._invoke(method,arg);};});}




runtime.isGeneratorFunction = function(genFun){
var ctor=typeof genFun === "function" && genFun.constructor;
return ctor?
ctor === GeneratorFunction || 
// For the native GeneratorFunction constructor, the best we can
// do is to check its .name property.
(ctor.displayName || ctor.name) === "GeneratorFunction":
false;};


runtime.mark = function(genFun){
if(Object.setPrototypeOf){
Object.setPrototypeOf(genFun,GeneratorFunctionPrototype);}else 
{
genFun.__proto__ = GeneratorFunctionPrototype;}

genFun.prototype = Object.create(Gp);
return genFun;};


// Within the body of any async function, `await x` is transformed to
// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
// `value instanceof AwaitArgument` to determine if the yielded value is
// meant to be awaited. Some may consider the name of this method too
// cutesy, but they are curmudgeons.
runtime.awrap = function(arg){
return new AwaitArgument(arg);};


function AwaitArgument(arg){
this.arg = arg;}


function AsyncIterator(generator){
// This invoke function is written in a style that assumes some
// calling function (or Promise) will handle exceptions.
function invoke(method,arg){
var result=generator[method](arg);
var value=result.value;
return value instanceof AwaitArgument?
Promise.resolve(value.arg).then(invokeNext,invokeThrow):
Promise.resolve(value).then(function(unwrapped){
// When a yielded Promise is resolved, its final value becomes
// the .value of the Promise<{value,done}> result for the
// current iteration. If the Promise is rejected, however, the
// result for this iteration will be rejected with the same
// reason. Note that rejections of yielded Promises are not
// thrown back into the generator function, as is the case
// when an awaited Promise is rejected. This difference in
// behavior between yield and await is important, because it
// allows the consumer to decide what to do with the yielded
// rejection (swallow it and continue, manually .throw it back
// into the generator, abandon iteration, whatever). With
// await, by contrast, there is no opportunity to examine the
// rejection reason outside the generator function, so the
// only option is to throw it from the await expression, and
// let the generator function handle the exception.
result.value = unwrapped;
return result;});}



if((typeof process === "undefined"?"undefined":_typeof(process)) === "object" && process.domain){
invoke = process.domain.bind(invoke);}


var invokeNext=invoke.bind(generator,"next");
var invokeThrow=invoke.bind(generator,"throw");
var invokeReturn=invoke.bind(generator,"return");
var previousPromise;

function enqueue(method,arg){
function callInvokeWithMethodAndArg(){
return invoke(method,arg);}


return previousPromise = 
// If enqueue has been called before, then we want to wait until
// all previous Promises have been resolved before calling invoke,
// so that results are always delivered in the correct order. If
// enqueue has not been called before, then it is important to
// call invoke immediately, without waiting on a callback to fire,
// so that the async generator function has the opportunity to do
// any necessary setup in a predictable way. This predictability
// is why the Promise constructor synchronously invokes its
// executor callback, and why async functions synchronously
// execute code before the first await. Since we implement simple
// async functions in terms of async generators, it is especially
// important to get this right, even though it requires care.
previousPromise?previousPromise.then(
callInvokeWithMethodAndArg,
// Avoid propagating failures to Promises returned by later
// invocations of the iterator.
callInvokeWithMethodAndArg):
new Promise(function(resolve){
resolve(callInvokeWithMethodAndArg());});}



// Define the unified helper method that is used to implement .next,
// .throw, and .return (see defineIteratorMethods).
this._invoke = enqueue;}


defineIteratorMethods(AsyncIterator.prototype);

// Note that simple async functions are implemented on top of
// AsyncIterator objects; they just return a Promise for the value of
// the final result produced by the iterator.
runtime.async = function(innerFn,outerFn,self,tryLocsList){
var iter=new AsyncIterator(
wrap(innerFn,outerFn,self,tryLocsList));


return runtime.isGeneratorFunction(outerFn)?
iter // If outerFn is a generator, return the full iterator.
:iter.next().then(function(result){
return result.done?result.value:iter.next();});};



function makeInvokeMethod(innerFn,self,context){
var state=GenStateSuspendedStart;

return function invoke(method,arg){
if(state === GenStateExecuting){
throw new Error("Generator is already running");}


if(state === GenStateCompleted){
if(method === "throw"){
throw arg;}


// Be forgiving, per 25.3.3.3.3 of the spec:
// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
return doneResult();}


while(true) {
var delegate=context.delegate;
if(delegate){
if(method === "return" || 
method === "throw" && delegate.iterator[method] === undefined){
// A return or throw (when the delegate iterator has no throw
// method) always terminates the yield* loop.
context.delegate = null;

// If the delegate iterator has a return method, give it a
// chance to clean up.
var returnMethod=delegate.iterator["return"];
if(returnMethod){
var record=tryCatch(returnMethod,delegate.iterator,arg);
if(record.type === "throw"){
// If the return method threw an exception, let that
// exception prevail over the original return or throw.
method = "throw";
arg = record.arg;
continue;}}



if(method === "return"){
// Continue with the outer return, now that the delegate
// iterator has been terminated.
continue;}}



var record=tryCatch(
delegate.iterator[method],
delegate.iterator,
arg);


if(record.type === "throw"){
context.delegate = null;

// Like returning generator.throw(uncaught), but without the
// overhead of an extra function call.
method = "throw";
arg = record.arg;
continue;}


// Delegate generator ran and handled its own exceptions so
// regardless of what the method was, we continue as if it is
// "next" with an undefined arg.
method = "next";
arg = undefined;

var info=record.arg;
if(info.done){
context[delegate.resultName] = info.value;
context.next = delegate.nextLoc;}else 
{
state = GenStateSuspendedYield;
return info;}


context.delegate = null;}


if(method === "next"){
context._sent = arg;

if(state === GenStateSuspendedYield){
context.sent = arg;}else 
{
context.sent = undefined;}}else 

if(method === "throw"){
if(state === GenStateSuspendedStart){
state = GenStateCompleted;
throw arg;}


if(context.dispatchException(arg)){
// If the dispatched exception was caught by a catch block,
// then let that catch block handle the exception normally.
method = "next";
arg = undefined;}}else 


if(method === "return"){
context.abrupt("return",arg);}


state = GenStateExecuting;

var record=tryCatch(innerFn,self,context);
if(record.type === "normal"){
// If an exception is thrown from innerFn, we leave state ===
// GenStateExecuting and loop back for another invocation.
state = context.done?
GenStateCompleted:
GenStateSuspendedYield;

var info={
value:record.arg,
done:context.done};


if(record.arg === ContinueSentinel){
if(context.delegate && method === "next"){
// Deliberately forget the last sent value so that we don't
// accidentally pass it on to the delegate.
arg = undefined;}}else 

{
return info;}}else 


if(record.type === "throw"){
state = GenStateCompleted;
// Dispatch the exception by looping back around to the
// context.dispatchException(arg) call above.
method = "throw";
arg = record.arg;}}};}





// Define Generator.prototype.{next,throw,return} in terms of the
// unified ._invoke helper method.
defineIteratorMethods(Gp);

Gp[iteratorSymbol] = function(){
return this;};


Gp.toString = function(){
return "[object Generator]";};


function pushTryEntry(locs){
var entry={tryLoc:locs[0]};

if(1 in locs){
entry.catchLoc = locs[1];}


if(2 in locs){
entry.finallyLoc = locs[2];
entry.afterLoc = locs[3];}


this.tryEntries.push(entry);}


function resetTryEntry(entry){
var record=entry.completion || {};
record.type = "normal";
delete record.arg;
entry.completion = record;}


function Context(tryLocsList){
// The root entry object (effectively a try statement without a catch
// or a finally block) gives us a place to store values thrown from
// locations where there is no enclosing try statement.
this.tryEntries = [{tryLoc:"root"}];
tryLocsList.forEach(pushTryEntry,this);
this.reset(true);}


runtime.keys = function(object){
var keys=[];
for(var key in object) {
keys.push(key);}

keys.reverse();

// Rather than returning an object with a next method, we keep
// things simple and return the next function itself.
return function next(){
while(keys.length) {
var key=keys.pop();
if(key in object){
next.value = key;
next.done = false;
return next;}}



// To avoid creating an additional object, we just hang the .value
// and .done properties off the next function object itself. This
// also ensures that the minifier will not anonymize the function.
next.done = true;
return next;};};



function values(iterable){
if(iterable){
var iteratorMethod=iterable[iteratorSymbol];
if(iteratorMethod){
return iteratorMethod.call(iterable);}


if(typeof iterable.next === "function"){
return iterable;}


if(!isNaN(iterable.length)){
var i=-1,next=function next(){
while(++i < iterable.length) {
if(hasOwn.call(iterable,i)){
next.value = iterable[i];
next.done = false;
return next;}}



next.value = undefined;
next.done = true;

return next;};


return next.next = next;}}



// Return an iterator with no values.
return {next:doneResult};}

runtime.values = values;

function doneResult(){
return {value:undefined,done:true};}


Context.prototype = {
constructor:Context,

reset:function reset(skipTempReset){
this.prev = 0;
this.next = 0;
this.sent = undefined;
this.done = false;
this.delegate = null;

this.tryEntries.forEach(resetTryEntry);

if(!skipTempReset){
for(var name in this) {
// Not sure about the optimal order of these conditions:
if(name.charAt(0) === "t" && 
hasOwn.call(this,name) && 
!isNaN(+name.slice(1))){
this[name] = undefined;}}}},





stop:function stop(){
this.done = true;

var rootEntry=this.tryEntries[0];
var rootRecord=rootEntry.completion;
if(rootRecord.type === "throw"){
throw rootRecord.arg;}


return this.rval;},


dispatchException:function dispatchException(exception){
if(this.done){
throw exception;}


var context=this;
function handle(loc,caught){
record.type = "throw";
record.arg = exception;
context.next = loc;
return !!caught;}


for(var i=this.tryEntries.length - 1;i >= 0;--i) {
var entry=this.tryEntries[i];
var record=entry.completion;

if(entry.tryLoc === "root"){
// Exception thrown outside of any try block that could handle
// it, so set the completion value of the entire function to
// throw the exception.
return handle("end");}


if(entry.tryLoc <= this.prev){
var hasCatch=hasOwn.call(entry,"catchLoc");
var hasFinally=hasOwn.call(entry,"finallyLoc");

if(hasCatch && hasFinally){
if(this.prev < entry.catchLoc){
return handle(entry.catchLoc,true);}else 
if(this.prev < entry.finallyLoc){
return handle(entry.finallyLoc);}}else 


if(hasCatch){
if(this.prev < entry.catchLoc){
return handle(entry.catchLoc,true);}}else 


if(hasFinally){
if(this.prev < entry.finallyLoc){
return handle(entry.finallyLoc);}}else 


{
throw new Error("try statement without catch or finally");}}}},





abrupt:function abrupt(type,arg){
for(var i=this.tryEntries.length - 1;i >= 0;--i) {
var entry=this.tryEntries[i];
if(entry.tryLoc <= this.prev && 
hasOwn.call(entry,"finallyLoc") && 
this.prev < entry.finallyLoc){
var finallyEntry=entry;
break;}}



if(finallyEntry && (
type === "break" || 
type === "continue") && 
finallyEntry.tryLoc <= arg && 
arg <= finallyEntry.finallyLoc){
// Ignore the finally entry if control is not jumping to a
// location outside the try/catch block.
finallyEntry = null;}


var record=finallyEntry?finallyEntry.completion:{};
record.type = type;
record.arg = arg;

if(finallyEntry){
this.next = finallyEntry.finallyLoc;}else 
{
this.complete(record);}


return ContinueSentinel;},


complete:function complete(record,afterLoc){
if(record.type === "throw"){
throw record.arg;}


if(record.type === "break" || 
record.type === "continue"){
this.next = record.arg;}else 
if(record.type === "return"){
this.rval = record.arg;
this.next = "end";}else 
if(record.type === "normal" && afterLoc){
this.next = afterLoc;}},



finish:function finish(finallyLoc){
for(var i=this.tryEntries.length - 1;i >= 0;--i) {
var entry=this.tryEntries[i];
if(entry.finallyLoc === finallyLoc){
this.complete(entry.completion,entry.afterLoc);
resetTryEntry(entry);
return ContinueSentinel;}}},




"catch":function _catch(tryLoc){
for(var i=this.tryEntries.length - 1;i >= 0;--i) {
var entry=this.tryEntries[i];
if(entry.tryLoc === tryLoc){
var record=entry.completion;
if(record.type === "throw"){
var thrown=record.arg;
resetTryEntry(entry);}

return thrown;}}



// The context.catch method must only be called with a location
// argument that corresponds to a known catch block.
throw new Error("illegal catch attempt");},


delegateYield:function delegateYield(iterable,resultName,nextLoc){
this.delegate = {
iterator:values(iterable),
resultName:resultName,
nextLoc:nextLoc};


return ContinueSentinel;}};})(



// Among the various tricks for obtaining a reference to the global
// object, this seems to be the most reliable technique that does not
// use indirect eval (which violates Content Security Policy).
(typeof global === "undefined"?"undefined":_typeof(global)) === "object"?global:
(typeof window === "undefined"?"undefined":_typeof(window)) === "object"?window:
(typeof self === "undefined"?"undefined":_typeof(self)) === "object"?self:this);}).


call(this,typeof global !== "undefined"?global:typeof self !== "undefined"?self:typeof window !== "undefined"?window:{});},
{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,

"use strict";function _typeof(obj) {return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;} /*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!(function (a, b) {"object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);} : b(a);})("undefined" != typeof window ? window : undefined, function (a, b) {var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = "1.11.1", m = function m(a, b) {return new m.fn.init(a, b);}, n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, o = /^-ms-/, p = /-([\da-z])/gi, q = function q(a, b) {return b.toUpperCase();};m.fn = m.prototype = { jquery: l, constructor: m, selector: "", length: 0, toArray: function toArray() {return d.call(this);}, get: function get(a) {return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);}, pushStack: function pushStack(a) {var b = m.merge(this.constructor(), a);return b.prevObject = this, b.context = this.context, b;}, each: function each(a, b) {return m.each(this, a, b);}, map: function map(a) {return this.pushStack(m.map(this, function (b, c) {return a.call(b, c, b);}));}, slice: function slice() {return this.pushStack(d.apply(this, arguments));}, first: function first() {return this.eq(0);}, last: function last() {return this.eq(-1);}, eq: function eq(a) {var b = this.length, c = +a + (0 > a ? b : 0);return this.pushStack(c >= 0 && b > c ? [this[c]] : []);}, end: function end() {return this.prevObject || this.constructor(null);}, push: f, sort: c.sort, splice: c.splice }, m.extend = m.fn.extend = function () {var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) if (null != (e = arguments[h])) for (d in e) a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));return g;}, m.extend({ expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {throw new Error(a);}, noop: function noop() {}, isFunction: function isFunction(a) {return "function" === m.type(a);}, isArray: Array.isArray || function (a) {return "array" === m.type(a);}, isWindow: function isWindow(a) {return null != a && a == a.window;}, isNumeric: function isNumeric(a) {return !m.isArray(a) && a - parseFloat(a) >= 0;}, isEmptyObject: function isEmptyObject(a) {var b;for (b in a) return !1;return !0;}, isPlainObject: function isPlainObject(a) {var b;if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;try {if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;} catch (c) {return !1;}if (k.ownLast) for (b in a) return j.call(a, b);for (b in a);return void 0 === b || j.call(a, b);}, type: function type(a) {return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? h[i.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);}, globalEval: function globalEval(b) {b && m.trim(b) && (a.execScript || function (b) {a.eval.call(a, b);})(b);}, camelCase: function camelCase(a) {return a.replace(o, "ms-").replace(p, q);}, nodeName: function nodeName(a, b) {return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();}, each: function each(a, b, c) {var d, e = 0, f = a.length, g = r(a);if (c) {if (g) {for (; f > e; e++) if ((d = b.apply(a[e], c), d === !1)) break;} else for (e in a) if ((d = b.apply(a[e], c), d === !1)) break;} else if (g) {for (; f > e; e++) if ((d = b.call(a[e], e, a[e]), d === !1)) break;} else for (e in a) if ((d = b.call(a[e], e, a[e]), d === !1)) break;return a;}, trim: function trim(a) {return null == a ? "" : (a + "").replace(n, "");}, makeArray: function makeArray(a, b) {var c = b || [];return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;}, inArray: function inArray(a, b, c) {var d;if (b) {if (g) return g.call(b, a, c);for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) if (c in b && b[c] === a) return c;}return -1;}, merge: function merge(a, b) {var c = +b.length, d = 0, e = a.length;while (c > d) a[e++] = b[d++];if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++];return a.length = e, a;}, grep: function grep(a, b, c) {for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) d = !b(a[f], f), d !== h && e.push(a[f]);return e;}, map: function map(a, b, c) {var d, f = 0, g = a.length, h = r(a), i = [];if (h) for (; g > f; f++) d = b(a[f], f, c), null != d && i.push(d);else for (f in a) d = b(a[f], f, c), null != d && i.push(d);return e.apply([], i);}, guid: 1, proxy: function proxy(a, b) {var c, e, f;return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function () {return a.apply(b || this, c.concat(d.call(arguments)));}, e.guid = a.guid = a.guid || m.guid++, e) : void 0;}, now: function now() {return +new Date();}, support: k }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {h["[object " + b + "]"] = b.toLowerCase();});function r(a) {var b = a.length, c = m.type(a);return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;}var s = (function (a) {var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + -new Date(), v = a.document, w = 0, x = 0, y = gb(), z = gb(), A = gb(), B = function B(a, b) {return a === b && (l = !0), 0;}, C = "undefined", D = 1 << 31, E = ({}).hasOwnProperty, F = [], G = F.pop, H = F.push, I = F.push, J = F.slice, K = F.indexOf || function (a) {for (var b = 0, c = this.length; c > b; b++) if (this[b] === a) return b;return -1;}, L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", O = N.replace("w", "w#"), P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]", Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)", R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), S = new RegExp("^" + M + "*," + M + "*"), T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"), V = new RegExp(Q), W = new RegExp("^" + O + "$"), X = { ID: new RegExp("^#(" + N + ")"), CLASS: new RegExp("^\\.(" + N + ")"), TAG: new RegExp("^(" + N.replace("w", "w*") + ")"), ATTR: new RegExp("^" + P), PSEUDO: new RegExp("^" + Q), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"), bool: new RegExp("^(?:" + L + ")$", "i"), needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i") }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ab = /[+~]/, bb = /'|\\/g, cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"), db = function db(a, b, c) {var d = "0x" + b - 65536;return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);};try {I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;} catch (eb) {I = { apply: F.length ? function (a, b) {H.apply(a, J.call(b));} : function (a, b) {var c = a.length, d = 0;while (a[c++] = b[d++]);a.length = c - 1;} };}function fb(a, b, d, e) {var f, h, j, k, l, o, r, s, w, x;if (((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || "string" != typeof a)) return d;if (1 !== (k = b.nodeType) && 9 !== k) return [];if (p && !e) {if (f = _.exec(a)) if (j = f[1]) {if (9 === k) {if ((h = b.getElementById(j), !h || !h.parentNode)) return d;if (h.id === j) return d.push(h), d;} else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;} else {if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;}if (c.qsa && (!q || !q.test(a))) {if ((s = r = u, w = b, x = 9 === k && a, 1 === k && "object" !== b.nodeName.toLowerCase())) {o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;while (l--) o[l] = s + qb(o[l]);w = ab.test(a) && ob(b.parentNode) || b, x = o.join(",");}if (x) try {return I.apply(d, w.querySelectorAll(x)), d;} catch (y) {} finally {r || b.removeAttribute("id");}}}return i(a.replace(R, "$1"), b, d, e);}function gb() {var a = [];function b(c, e) {return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;}return b;}function hb(a) {return a[u] = !0, a;}function ib(a) {var b = n.createElement("div");try {return !!a(b);} catch (c) {return !1;} finally {b.parentNode && b.parentNode.removeChild(b), b = null;}}function jb(a, b) {var c = a.split("|"), e = a.length;while (e--) d.attrHandle[c[e]] = b;}function kb(a, b) {var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);if (d) return d;if (c) while (c = c.nextSibling) if (c === b) return -1;return a ? 1 : -1;}function lb(a) {return function (b) {var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;};}function mb(a) {return function (b) {var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;};}function nb(a) {return hb(function (b) {return b = +b, hb(function (c, d) {var e, f = a([], c.length, b), g = f.length;while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]));});});}function ob(a) {return a && _typeof(a.getElementsByTagName) !== C && a;}c = fb.support = {}, f = fb.isXML = function (a) {var b = a && (a.ownerDocument || a).documentElement;return b ? "HTML" !== b.nodeName : !1;}, m = fb.setDocument = function (a) {var b, e = a ? a.ownerDocument || a : v, g = e.defaultView;return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function () {m();}, !1) : g.attachEvent && g.attachEvent("onunload", function () {m();})), c.attributes = ib(function (a) {return a.className = "i", !a.getAttribute("className");}), c.getElementsByTagName = ib(function (a) {return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length;}), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length;}), c.getById = ib(function (a) {return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;}), c.getById ? (d.find.ID = function (a, b) {if (_typeof(b.getElementById) !== C && p) {var c = b.getElementById(a);return c && c.parentNode ? [c] : [];}}, d.filter.ID = function (a) {var b = a.replace(cb, db);return function (a) {return a.getAttribute("id") === b;};}) : (delete d.find.ID, d.filter.ID = function (a) {var b = a.replace(cb, db);return function (a) {var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode("id");return c && c.value === b;};}), d.find.TAG = c.getElementsByTagName ? function (a, b) {return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;} : function (a, b) {var c, d = [], e = 0, f = b.getElementsByTagName(a);if ("*" === a) {while (c = f[e++]) 1 === c.nodeType && d.push(c);return d;}return f;}, d.find.CLASS = c.getElementsByClassName && function (a, b) {return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;}, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {a.innerHTML = "<select msallowclip=''><option selected=''></option></select>", a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"), a.querySelectorAll(":checked").length || q.push(":checked");}), ib(function (a) {var b = e.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");})), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", Q);}), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));} : function (a, b) {if (b) while (b = b.parentNode) if (b === a) return !0;return !1;}, B = b ? function (a, b) {if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);} : function (a, b) {if (a === b) return l = !0, 0;var c, d = 0, f = a.parentNode, g = b.parentNode, h = [a], i = [b];if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;if (f === g) return kb(a, b);c = a;while (c = c.parentNode) h.unshift(c);c = b;while (c = c.parentNode) i.unshift(c);while (h[d] === i[d]) d++;return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;}, e) : n;}, fb.matches = function (a, b) {return fb(a, null, null, b);}, fb.matchesSelector = function (a, b) {if (((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b)))) try {var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;} catch (e) {}return fb(b, n, null, [a]).length > 0;}, fb.contains = function (a, b) {return (a.ownerDocument || a) !== n && m(a), t(a, b);}, fb.attr = function (a, b) {(a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()], f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;}, fb.error = function (a) {throw new Error("Syntax error, unrecognized expression: " + a);}, fb.uniqueSort = function (a) {var b, d = [], e = 0, f = 0;if ((l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l)) {while (b = a[f++]) b === a[f] && (e = d.push(f));while (e--) a.splice(d[e], 1);}return k = null, a;}, e = fb.getText = function (a) {var b, c = "", d = 0, f = a.nodeType;if (f) {if (1 === f || 9 === f || 11 === f) {if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) c += e(a);} else if (3 === f || 4 === f) return a.nodeValue;} else while (b = a[d++]) c += e(b);return c;}, d = fb.selectors = { cacheLength: 50, createPseudo: hb, match: X, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);}, CHILD: function CHILD(a) {return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && fb.error(a[0]), a;}, PSEUDO: function PSEUDO(a) {var b, c = !a[6] && a[2];return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));} }, filter: { TAG: function TAG(a) {var b = a.replace(cb, db).toLowerCase();return "*" === a ? function () {return !0;} : function (a) {return a.nodeName && a.nodeName.toLowerCase() === b;};}, CLASS: function CLASS(a) {var b = y[a + " "];return b || (b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) && y(a, function (a) {return b.test("string" == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute("class") || "");});}, ATTR: function ATTR(a, b, c) {return function (d) {var e = fb.attr(d, a);return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;};}, CHILD: function CHILD(a, b, c, d, e) {var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice(-4), h = "of-type" === b;return 1 === d && 0 === e ? function (a) {return !!a.parentNode;} : function (b, c, i) {var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h;if (q) {if (f) {while (p) {l = b;while (l = l[p]) if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;o = p = "only" === a && !o && "nextSibling";}return !0;}if ((o = [g ? q.firstChild : q.lastChild], g && s)) {k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) if (1 === l.nodeType && ++m && l === b) {k[a] = [w, n, m];break;}} else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;return m -= e, m === d || m % d === 0 && m / d >= 0;}};}, PSEUDO: function PSEUDO(a, b) {var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {var d, f = e(a, b), g = f.length;while (g--) d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);}) : function (a) {return e(a, 0, c);}) : e;} }, pseudos: { not: hb(function (a) {var b = [], c = [], d = h(a.replace(R, "$1"));return d[u] ? hb(function (a, b, c, e) {var f, g = d(a, null, e, []), h = a.length;while (h--) (f = g[h]) && (a[h] = !(b[h] = f));}) : function (a, e, f) {return b[0] = a, d(b, null, f, c), !c.pop();};}), has: hb(function (a) {return function (b) {return fb(a, b).length > 0;};}), contains: hb(function (a) {return function (b) {return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;};}), lang: hb(function (a) {return W.test(a || "") || fb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), function (b) {var c;do if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType);return !1;};}), target: function target(b) {var c = a.location && a.location.hash;return c && c.slice(1) === b.id;}, root: function root(a) {return a === o;}, focus: function focus(a) {return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);}, enabled: function enabled(a) {return a.disabled === !1;}, disabled: function disabled(a) {return a.disabled === !0;}, checked: function checked(a) {var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;}, selected: function selected(a) {return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;}, empty: function empty(a) {for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;return !0;}, parent: function parent(a) {return !d.pseudos.empty(a);}, header: function header(a) {return Z.test(a.nodeName);}, input: function input(a) {return Y.test(a.nodeName);}, button: function button(a) {var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;}, text: function text(a) {var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());}, first: nb(function () {return [0];}), last: nb(function (a, b) {return [b - 1];}), eq: nb(function (a, b, c) {return [0 > c ? c + b : c];}), even: nb(function (a, b) {for (var c = 0; b > c; c += 2) a.push(c);return a;}), odd: nb(function (a, b) {for (var c = 1; b > c; c += 2) a.push(c);return a;}), lt: nb(function (a, b, c) {for (var d = 0 > c ? c + b : c; --d >= 0;) a.push(d);return a;}), gt: nb(function (a, b, c) {for (var d = 0 > c ? c + b : c; ++d < b;) a.push(d);return a;}) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = lb(b);for (b in { submit: !0, reset: !0 }) d.pseudos[b] = mb(b);function pb() {}pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {var c, e, f, g, h, i, j, k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {(!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(R, " ") }), h = h.slice(c.length));for (g in d.filter) !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));if (!c) break;}return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);};function qb(a) {for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;return d;}function rb(a, b, c) {var d = b.dir, e = c && "parentNode" === d, f = x++;return b.first ? function (b, c, f) {while (b = b[d]) if (1 === b.nodeType || e) return a(b, c, f);} : function (b, c, g) {var h, i, j = [w, f];if (g) {while (b = b[d]) if ((1 === b.nodeType || e) && a(b, c, g)) return !0;} else while (b = b[d]) if (1 === b.nodeType || e) {if ((i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f)) return j[2] = h[2];if ((i[d] = j, j[2] = a(b, c, g))) return !0;}};}function sb(a) {return a.length > 1 ? function (b, c, d) {var e = a.length;while (e--) if (!a[e](b, c, d)) return !1;return !0;} : a[0];}function tb(a, b, c) {for (var d = 0, e = b.length; e > d; d++) fb(a, b[d], c);return c;}function ub(a, b, c, d, e) {for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));return g;}function vb(a, b, c, d, e, f) {return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {var j, k, l, m = [], n = [], o = g.length, p = f || tb(b || "*", h.nodeType ? [h] : h, []), q = !a || !f && b ? p : ub(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;if ((c && c(q, r, h, i), d)) {j = ub(r, n), d(j, [], h, i), k = j.length;while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));}if (f) {if (e || a) {if (e) {j = [], k = r.length;while (k--) (l = r[k]) && j.push(q[k] = l);e(null, r = [], j, i);}k = r.length;while (k--) (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));}} else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);});}function wb(a) {for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = rb(function (a) {return a === b;}, h, !0), l = rb(function (a) {return K.call(b, a) > -1;}, h, !0), m = [function (a, c, d) {return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));}]; f > i; i++) if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {if ((c = d.filter[a[i].type].apply(null, a[i].matches), c[u])) {for (e = ++i; f > e; e++) if (d.relative[a[e].type]) break;return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));}m.push(c);}return sb(m);}function xb(a, b) {var c = b.length > 0, e = a.length > 0, f = function f(_f, g, h, i, k) {var l, m, o, p = 0, q = "0", r = _f && [], s = [], t = j, u = _f || e && d.find.TAG("*", k), v = w += null == t ? 1 : Math.random() || .1, x = u.length;for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {if (e && l) {m = 0;while (o = a[m++]) if (o(l, g, h)) {i.push(l);break;}k && (w = v);}c && ((l = !o && l) && p--, _f && r.push(l));}if ((p += q, c && q !== p)) {m = 0;while (o = b[m++]) o(r, s, g, h);if (_f) {if (p > 0) while (q--) r[q] || s[q] || (s[q] = G.call(i));s = ub(s);}I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);}return k && (w = v, j = t), r;};return c ? hb(f) : f;}return h = fb.compile = function (a, b) {var c, d = [], e = [], f = A[a + " "];if (!f) {b || (b = g(a)), c = b.length;while (c--) f = wb(b[c]), f[u] ? d.push(f) : e.push(f);f = A(a, xb(e, d)), f.selector = a;}return f;}, i = fb.select = function (a, b, e, f) {var i, j, k, l, m, n = "function" == typeof a && a, o = !f && g(a = n.selector || a);if ((e = e || [], 1 === o.length)) {if ((j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type])) {if ((b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b)) return e;n && (b = b.parentNode), a = a.slice(j.shift().value.length);}i = X.needsContext.test(a) ? 0 : j.length;while (i--) {if ((k = j[i], d.relative[l = k.type])) break;if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {if ((j.splice(i, 1), a = f.length && qb(j), !a)) return I.apply(e, f), e;break;}}}return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;}, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {return 1 & a.compareDocumentPosition(n.createElement("div"));}), ib(function (a) {return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");}) || jb("type|href|height|width", function (a, b, c) {return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);}), c.attributes && ib(function (a) {return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");}) || jb("value", function (a, b, c) {return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;}), ib(function (a) {return null == a.getAttribute("disabled");}) || jb(L, function (a, b, c) {var d;return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;}), fb;})(a);m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;var t = m.expr.match.needsContext, u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, v = /^.[^:#\[\.,]*$/;function w(a, b, c) {if (m.isFunction(b)) return m.grep(a, function (a, d) {return !!b.call(a, d, a) !== c;});if (b.nodeType) return m.grep(a, function (a) {return a === b !== c;});if ("string" == typeof b) {if (v.test(b)) return m.filter(b, a, c);b = m.filter(b, a);}return m.grep(a, function (a) {return m.inArray(a, b) >= 0 !== c;});}m.filter = function (a, b, c) {var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {return 1 === a.nodeType;}));}, m.fn.extend({ find: function find(a) {var b, c = [], d = this, e = d.length;if ("string" != typeof a) return this.pushStack(m(a).filter(function () {for (b = 0; e > b; b++) if (m.contains(d[b], this)) return !0;}));for (b = 0; e > b; b++) m.find(a, d[b], c);return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c;}, filter: function filter(a) {return this.pushStack(w(this, a || [], !1));}, not: function not(a) {return this.pushStack(w(this, a || [], !0));}, is: function is(a) {return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;} });var x, y = a.document, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, A = m.fn.init = function (a, b) {var c, d;if (!a) return this;if ("string" == typeof a) {if ((c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b)) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);if (c[1]) {if ((b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b))) for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);return this;}if ((d = y.getElementById(c[2]), d && d.parentNode)) {if (d.id !== c[2]) return x.find(a);this.length = 1, this[0] = d;}return this.context = y, this.selector = a, this;}return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));};A.prototype = m.fn, x = m(y);var B = /^(?:parents|prev(?:Until|All))/, C = { children: !0, contents: !0, next: !0, prev: !0 };m.extend({ dir: function dir(a, b, c) {var d = [], e = a[b];while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) 1 === e.nodeType && d.push(e), e = e[b];return d;}, sibling: function sibling(a, b) {for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);return c;} }), m.fn.extend({ has: function has(a) {var b, c = m(a, this), d = c.length;return this.filter(function () {for (b = 0; d > b; b++) if (m.contains(this, c[b])) return !0;});}, closest: function closest(a, b) {for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {f.push(c);break;}return this.pushStack(f.length > 1 ? m.unique(f) : f);}, index: function index(a) {return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;}, add: function add(a, b) {return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));}, addBack: function addBack(a) {return this.add(null == a ? this.prevObject : this.prevObject.filter(a));} });function D(a, b) {do a = a[b]; while (a && 1 !== a.nodeType);return a;}m.each({ parent: function parent(a) {var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;}, parents: function parents(a) {return m.dir(a, "parentNode");}, parentsUntil: function parentsUntil(a, b, c) {return m.dir(a, "parentNode", c);}, next: function next(a) {return D(a, "nextSibling");}, prev: function prev(a) {return D(a, "previousSibling");}, nextAll: function nextAll(a) {return m.dir(a, "nextSibling");}, prevAll: function prevAll(a) {return m.dir(a, "previousSibling");}, nextUntil: function nextUntil(a, b, c) {return m.dir(a, "nextSibling", c);}, prevUntil: function prevUntil(a, b, c) {return m.dir(a, "previousSibling", c);}, siblings: function siblings(a) {return m.sibling((a.parentNode || {}).firstChild, a);}, children: function children(a) {return m.sibling(a.firstChild);}, contents: function contents(a) {return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);} }, function (a, b) {m.fn[a] = function (c, d) {var e = m.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);};});var E = /\S+/g, F = {};function G(a) {var b = F[a] = {};return m.each(a.match(E) || [], function (a, c) {b[c] = !0;}), b;}m.Callbacks = function (a) {a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);var b, c, d, e, f, g, h = [], i = !a.once && [], j = function j(l) {for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {c = !1;break;}b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());}, k = { add: function add() {if (h) {var d = h.length;!(function f(b) {m.each(b, function (b, c) {var d = m.type(c);"function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c);});})(arguments), b ? e = h.length : c && (g = d, j(c));}return this;}, remove: function remove() {return h && m.each(arguments, function (a, c) {var d;while ((d = m.inArray(c, h, d)) > -1) h.splice(d, 1), b && (e >= d && e--, f >= d && f--);}), this;}, has: function has(a) {return a ? m.inArray(a, h) > -1 : !(!h || !h.length);}, empty: function empty() {return h = [], e = 0, this;}, disable: function disable() {return h = i = c = void 0, this;}, disabled: function disabled() {return !h;}, lock: function lock() {return i = void 0, c || k.disable(), this;}, locked: function locked() {return !i;}, fireWith: function fireWith(a, c) {return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this;}, fire: function fire() {return k.fireWith(this, arguments), this;}, fired: function fired() {return !!d;} };return k;}, m.extend({ Deferred: function Deferred(a) {var b = [["resolve", "done", m.Callbacks("once memory"), "resolved"], ["reject", "fail", m.Callbacks("once memory"), "rejected"], ["notify", "progress", m.Callbacks("memory")]], c = "pending", d = { state: function state() {return c;}, always: function always() {return e.done(arguments).fail(arguments), this;}, then: function then() {var a = arguments;return m.Deferred(function (c) {m.each(b, function (b, f) {var g = m.isFunction(a[b]) && a[b];e[f[1]](function () {var a = g && g.apply(this, arguments);a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);});}), a = null;}).promise();}, promise: function promise(a) {return null != a ? m.extend(a, d) : d;} }, e = {};return d.pipe = d.then, m.each(b, function (a, f) {var g = f[2], h = f[3];d[f[1]] = g.add, h && g.add(function () {c = h;}, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {return e[f[0] + "With"](this === e ? d : this, arguments), this;}, e[f[0] + "With"] = g.fireWith;}), d.promise(e), a && a.call(e, e), e;}, when: function when(a) {var b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && m.isFunction(a.promise) ? e : 0, g = 1 === f ? a : m.Deferred(), h = function h(a, b, c) {return function (e) {b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);};}, i, j, k;if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;return f || g.resolveWith(k, c), g.promise();} });var H;m.fn.ready = function (a) {return m.ready.promise().done(a), this;}, m.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(a) {a ? m.readyWait++ : m.ready(!0);}, ready: function ready(a) {if (a === !0 ? ! --m.readyWait : !m.isReady) {if (!y.body) return setTimeout(m.ready);m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")));}} });function I() {y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J));}function J() {(y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready());}m.ready.promise = function (b) {if (!H) if ((H = m.Deferred(), "complete" === y.readyState)) setTimeout(m.ready);else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);else {y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);var c = !1;try {c = null == a.frameElement && y.documentElement;} catch (d) {}c && c.doScroll && !(function e() {if (!m.isReady) {try {c.doScroll("left");} catch (a) {return setTimeout(e, 50);}I(), m.ready();}})();}return H.promise(b);};var K = "undefined", L;for (L in m(k)) break;k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function () {var a, b, c, d;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));}), (function () {var a = y.createElement("div");if (null == k.deleteExpando) {k.deleteExpando = !0;try {delete a.test;} catch (b) {k.deleteExpando = !1;}}a = null;})(), m.acceptData = function (a) {var b = m.noData[(a.nodeName + " ").toLowerCase()], c = +a.nodeType || 1;return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b;};var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, N = /([A-Z])/g;function O(a, b, c) {if (void 0 === c && 1 === a.nodeType) {var d = "data-" + b.replace(N, "-$1").toLowerCase();if ((c = a.getAttribute(d), "string" == typeof c)) {try {c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c;} catch (e) {}m.data(a, b, c);} else c = void 0;}return c;}function P(a) {var b;for (b in a) if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;return !0;}function Q(a, b, d, e) {if (m.acceptData(a)) {var f, g, h = m.expando, i = a.nodeType, j = i ? m.cache : a, k = i ? a[h] : a[h] && h;
      if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: m.noop }), ("object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;}}function R(a, b, c) {if (m.acceptData(a)) {var d, e, f = a.nodeType, g = f ? m.cache : a, h = f ? a[m.expando] : m.expando;if (g[h]) {if (b && (d = c ? g[h] : g[h].data)) {m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length;while (e--) delete d[b[e]];if (c ? !P(d) : !m.isEmptyObject(d)) return;}(c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);}}}m.extend({ cache: {}, noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function hasData(a) {return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);}, data: function data(a, b, c) {return Q(a, b, c);}, removeData: function removeData(a, b) {return R(a, b);}, _data: function _data(a, b, c) {return Q(a, b, c, !0);}, _removeData: function _removeData(a, b) {return R(a, b, !0);} }), m.fn.extend({ data: function data(a, b) {var c, d, e, f = this[0], g = f && f.attributes;if (void 0 === a) {if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {c = g.length;while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));m._data(f, "parsedAttrs", !0);}return e;}return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {m.data(this, a);}) : arguments.length > 1 ? this.each(function () {m.data(this, a, b);}) : f ? O(f, a, m.data(f, a)) : void 0;}, removeData: function removeData(a) {return this.each(function () {m.removeData(this, a);});} }), m.extend({ queue: function queue(a, b, c) {var d;return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;}, dequeue: function dequeue(a, b) {b = b || "fx";var c = m.queue(a, b), d = c.length, e = c.shift(), f = m._queueHooks(a, b), g = function g() {m.dequeue(a, b);};"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();}, _queueHooks: function _queueHooks(a, b) {var c = b + "queueHooks";return m._data(a, c) || m._data(a, c, { empty: m.Callbacks("once memory").add(function () {m._removeData(a, b + "queue"), m._removeData(a, c);}) });} }), m.fn.extend({ queue: function queue(a, b) {var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {var c = m.queue(this, a, b);m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);});}, dequeue: function dequeue(a) {return this.each(function () {m.dequeue(this, a);});}, clearQueue: function clearQueue(a) {return this.queue(a || "fx", []);}, promise: function promise(a, b) {var c, d = 1, e = m.Deferred(), f = this, g = this.length, h = function h() {--d || e.resolveWith(f, [f]);};"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));return h(), e.promise(b);} });var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, T = ["Top", "Right", "Bottom", "Left"], U = function U(a, b) {return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);}, V = m.access = function (a, b, c, d, e, f, g) {var h = 0, i = a.length, j = null == c;if ("object" === m.type(c)) {e = !0;for (h in c) m.access(a, b, h, c[h], !0, f, g);} else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {return j.call(m(a), c);})), b)) for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;}, W = /^(?:checkbox|radio)$/i;!(function () {var a = y.createElement("input"), b = y.createElement("div"), c = y.createDocumentFragment();if ((b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function () {k.noCloneEvent = !1;}), b.cloneNode(!0).click()), null == k.deleteExpando)) {k.deleteExpando = !0;try {delete b.test;} catch (d) {k.deleteExpando = !1;}}})(), (function () {var b, c, d = y.createElement("div");for (b in { submit: !0, change: !0, focusin: !0 }) c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);d = null;})();var X = /^(?:input|select|textarea)$/i, Y = /^key/, Z = /^(?:mouse|pointer|contextmenu)|click/, $ = /^(?:focusinfocus|focusoutblur)$/, _ = /^([^.]*)(?:\.(.+)|)$/;function ab() {return !0;}function bb() {return !1;}function cb() {try {return y.activeElement;} catch (a) {}}m.event = { global: {}, add: function add(a, b, c, d, e) {var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);if (r) {c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {return (typeof m === "undefined" ? "undefined" : _typeof(m)) === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);}, k.elem = a), b = (b || "").match(E) || [""], h = b.length;while (h--) f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && m.expr.match.needsContext.test(e), namespace: p.join(".") }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);a = null;}}, remove: function remove(a, b, c, d, e) {var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);if (r && (k = r.events)) {b = (b || "").match(E) || [""], j = b.length;while (j--) if ((h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o)) {l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;while (f--) g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);} else for (o in k) m.event.remove(a, o + b[j], c, d, !0);m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));}}, trigger: function trigger(b, c, d, e) {var f, g, h, i, k, l, n, o = [d || y], p = j.call(b, "type") ? b.type : b, q = j.call(b, "namespace") ? b.namespace.split(".") : [];if ((h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1))) {if (!e && !k.noBubble && !m.isWindow(d)) {for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), l = h;l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);}n = 0;while ((h = o[n++]) && !b.isPropagationStopped()) b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());if ((b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d))) {l = d[g], l && (d[g] = null), m.event.triggered = p;try {d[p]();} catch (r) {}m.event.triggered = void 0, l && (d[g] = l);}return b.result;}}, dispatch: function dispatch(a) {a = m.event.fix(a);var b, c, e, f, g, h = [], i = d.call(arguments), j = (m._data(this, "events") || {})[a.type] || [], k = m.event.special[a.type] || {};if ((i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1)) {h = m.event.handlers.call(this, a, j), b = 0;while ((f = h[b++]) && !a.isPropagationStopped()) {a.currentTarget = f.elem, g = 0;while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));}return k.postDispatch && k.postDispatch.call(this, a), a.result;}}, handlers: function handlers(a, b) {var c, d, e, f, g = [], h = b.delegateCount, i = a.target;if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i != this; i = i.parentNode || this) if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {for (e = [], f = 0; h > f; f++) d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);e.length && g.push({ elem: i, handlers: e });}return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;}, fix: function fix(a) {if (a[m.expando]) return a;var b, c, d, e = a.type, f = a, g = this.fixHooks[e];g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;while (b--) c = d[b], a[c] = f[c];return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;}, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(a, b) {return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;} }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(a, b) {var c, d, e, f = b.button, g = b.fromElement;return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;} }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {if (this !== cb() && this.focus) try {return this.focus(), !1;} catch (a) {}}, delegateType: "focusin" }, blur: { trigger: function trigger() {return this === cb() && this.blur ? (this.blur(), !1) : void 0;}, delegateType: "focusout" }, click: { trigger: function trigger() {return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0;}, _default: function _default(a) {return m.nodeName(a.target, "a");} }, beforeunload: { postDispatch: function postDispatch(a) {void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);} } }, simulate: function simulate(a, b, c, d) {var e = m.extend(new m.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();} }, m.removeEvent = y.removeEventListener ? function (a, b, c) {a.removeEventListener && a.removeEventListener(b, c, !1);} : function (a, b, c) {var d = "on" + b;a.detachEvent && (_typeof(a[d]) === K && (a[d] = null), a.detachEvent(d, c));}, m.Event = function (a, b) {return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);}, m.Event.prototype = { isDefaultPrevented: bb, isPropagationStopped: bb, isImmediatePropagationStopped: bb, preventDefault: function preventDefault() {var a = this.originalEvent;this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);}, stopPropagation: function stopPropagation() {var a = this.originalEvent;this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);}, stopImmediatePropagation: function stopImmediatePropagation() {var a = this.originalEvent;this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();} }, m.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {m.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {var c, d = this, e = a.relatedTarget, f = a.handleObj;return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;} };}), k.submitBubbles || (m.event.special.submit = { setup: function setup() {return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function (a) {var b = a.target, c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function (a) {a._submit_bubble = !0;}), m._data(c, "submitBubbles", !0));});}, postDispatch: function postDispatch(a) {a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));}, teardown: function teardown() {return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit");} }), k.changeBubbles || (m.event.special.change = { setup: function setup() {return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function (a) {"checked" === a.originalEvent.propertyName && (this._just_changed = !0);}), m.event.add(this, "click._change", function (a) {this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);})), !1) : void m.event.add(this, "beforeactivate._change", function (a) {var b = a.target;X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function (a) {!this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);}), m._data(b, "changeBubbles", !0));});}, handle: function handle(a) {var b = a.target;return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;}, teardown: function teardown() {return m.event.remove(this, "._change"), !X.test(this.nodeName);} }), k.focusinBubbles || m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {var c = function c(a) {m.event.simulate(b, a.target, m.event.fix(a), !0);};m.event.special[b] = { setup: function setup() {var d = this.ownerDocument || this, e = m._data(d, b);e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);}, teardown: function teardown() {var d = this.ownerDocument || this, e = m._data(d, b) - 1;e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));} };}), m.fn.extend({ on: function on(a, b, c, d, e) {var f, g;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {"string" != typeof b && (c = c || b, b = void 0);for (f in a) this.on(f, b, c, a[f], e);return this;}if ((null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1)) d = bb;else if (!d) return this;return 1 === e && (g = d, d = function (a) {return m().off(a), g.apply(this, arguments);}, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {m.event.add(this, a, d, c, b);});}, one: function one(a, b, c, d) {return this.on(a, b, c, d, 1);}, off: function off(a, b, c) {var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {for (e in a) this.off(e, b, a[e]);return this;}return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {m.event.remove(this, a, c, b);});}, trigger: function trigger(a, b) {return this.each(function () {m.event.trigger(a, b, this);});}, triggerHandler: function triggerHandler(a, b) {var c = this[0];return c ? m.event.trigger(a, b, c, !0) : void 0;} });function db(a) {var b = eb.split("|"), c = a.createDocumentFragment();if (c.createElement) while (b.length) c.createElement(b.pop());return c;}var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", fb = / jQuery\d+="(?:null|\d+)"/g, gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"), hb = /^\s+/, ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, jb = /<([\w:]+)/, kb = /<tbody/i, lb = /<|&#?\w+;/, mb = /<(?:script|style|link)/i, nb = /checked\s*(?:[^=]|=\s*.checked.)/i, ob = /^$|\/(?:java|ecma)script/i, pb = /^true\/(.*)/, qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, rb = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] }, sb = db(y), tb = sb.appendChild(y.createElement("div"));rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;function ub(a, b) {var c, d, e = 0, f = _typeof(a.getElementsByTagName) !== K ? a.getElementsByTagName(b || "*") : _typeof(a.querySelectorAll) !== K ? a.querySelectorAll(b || "*") : void 0;if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;}function vb(a) {W.test(a.type) && (a.defaultChecked = a.checked);}function wb(a, b) {return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;}function xb(a) {return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a;}function yb(a) {var b = pb.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;}function zb(a, b) {for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));}function Ab(a, b) {if (1 === b.nodeType && m.hasData(a)) {var c, d, e, f = m._data(a), g = m._data(b, f), h = f.events;if (h) {delete g.handle, g.events = {};for (c in h) for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d]);}g.data && (g.data = m.extend({}, g.data));}}function Bb(a, b) {var c, d, e;if (1 === b.nodeType) {if ((c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando])) {e = m._data(b);for (d in e.events) m.removeEvent(b, d, e.handle);b.removeAttribute(m.expando);}"script" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);}}m.extend({ clone: function clone(a, b, c) {var d, e, f, g, h, i = m.contains(a.ownerDocument, a);if ((k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a)))) for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) d[g] && Bb(e, d[g]);if (b) if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) Ab(e, d[g]);else Ab(a, f);return d = ub(f, "script"), d.length > 0 && zb(d, !i && ub(a, "script")), d = h = e = null, f;}, buildFragment: function buildFragment(a, b, c, d) {for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++) if ((f = a[q], f || 0 === f)) if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);else if (lb.test(f)) {h = h || o.appendChild(b.createElement("div")), i = (jb.exec(f) || ["", ""])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2], e = l[0];while (e--) h = h.lastChild;if ((!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody)) {f = "table" !== i || kb.test(f) ? "<table>" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;while (e--) m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j);}m.merge(p, h.childNodes), h.textContent = "";while (h.firstChild) h.removeChild(h.firstChild);h = o.lastChild;} else p.push(b.createTextNode(f));h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), q = 0;while (f = p[q++]) if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), "script"), g && zb(h), c)) {e = 0;while (f = h[e++]) ob.test(f.type || "") && c.push(f);}return h = null, o;}, cleanData: function cleanData(a, b) {for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {if (g.events) for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);j[f] && (delete j[f], l ? delete d[i] : _typeof(d.removeAttribute) !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));}} }), m.fn.extend({ text: function text(a) {return V(this, function (a) {return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));}, null, a, arguments.length);}, append: function append() {return this.domManip(arguments, function (a) {if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {var b = wb(this, a);b.appendChild(a);}});}, prepend: function prepend() {return this.domManip(arguments, function (a) {if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {var b = wb(this, a);b.insertBefore(a, b.firstChild);}});}, before: function before() {return this.domManip(arguments, function (a) {this.parentNode && this.parentNode.insertBefore(a, this);});}, after: function after() {return this.domManip(arguments, function (a) {this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);});}, remove: function remove(a, b) {for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));return this;}, empty: function empty() {for (var a, b = 0; null != (a = this[b]); b++) {1 === a.nodeType && m.cleanData(ub(a, !1));while (a.firstChild) a.removeChild(a.firstChild);a.options && m.nodeName(a, "select") && (a.options.length = 0);}return this;}, clone: function clone(a, b) {return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {return m.clone(this, a, b);});}, html: function html(a) {return V(this, function (a) {var b = this[0] || {}, c = 0, d = this.length;if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;if (!("string" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || ["", ""])[1].toLowerCase()])) {a = a.replace(ib, "<$1></$2>");try {for (; d > c; c++) b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);b = 0;} catch (e) {}}b && this.empty().append(a);}, null, a, arguments.length);}, replaceWith: function replaceWith() {var a = arguments[0];return this.domManip(arguments, function (b) {a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);}), a && (a.length || a.nodeType) ? this : this.remove();}, detach: function detach(a) {return this.remove(a, !0);}, domManip: function domManip(a, b) {a = e.apply([], a);var c, d, f, g, h, i, j = 0, l = this.length, n = this, o = l - 1, p = a[0], q = m.isFunction(p);if (q || l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)) return this.each(function (c) {var d = n.eq(c);q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);});if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) d = g[j], ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));i = c = null;}return this;} }), m.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {m.fn[a] = function (a) {for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());return this.pushStack(e);};});var Cb, Db = {};function Eb(b, c) {var d, e = m(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");return e.detach(), f;}function Fb(a) {var b = y, c = Db[a];return c || (c = Eb(a, b), "none" !== c && c || (Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c;}!(function () {var a;k.shrinkWrapBlocks = function () {if (null != a) return a;a = !1;var b, c, d;return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;};})();var Gb = /^margin/, Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"), Ib, Jb, Kb = /^(top|right|bottom|left)$/;a.getComputedStyle ? (Ib = function (a) {return a.ownerDocument.defaultView.getComputedStyle(a, null);}, Jb = function (a, b, c) {var d, e, f, g, h = a.style;return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "";}) : y.documentElement.currentStyle && (Ib = function (a) {return a.currentStyle;}, Jb = function (a, b, c) {var d, e, f, g, h = a.style;return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto";});function Lb(a, b) {return { get: function get() {var c = a();if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);} };}!(function () {var b, c, d, e, f, g, h;if ((b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = d && d.style)) {(function () {var i = function i() {var b, c, d, i;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, f = "4px" === (a.getComputedStyle(b, null) || { width: "4px" }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", g = 0 === i[0].offsetHeight), c.removeChild(d));};c.cssText = "float:left;opacity:.5", k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, m.extend(k, { reliableHiddenOffsets: function reliableHiddenOffsets() {return null == g && i(), g;}, boxSizingReliable: function boxSizingReliable() {return null == f && i(), f;}, pixelPosition: function pixelPosition() {return null == e && i(), e;}, reliableMarginRight: function reliableMarginRight() {return null == h && i(), h;} });})();}})(), m.swap = function (a, b, c, d) {var e, f, g = {};for (f in b) g[f] = a.style[f], a.style[f] = b[f];e = c.apply(a, d || []);for (f in b) a.style[f] = g[f];return e;};var Mb = /alpha\([^)]*\)/i, Nb = /opacity\s*=\s*([^)]*)/, Ob = /^(none|table(?!-c[ea]).+)/, Pb = new RegExp("^(" + S + ")(.*)$", "i"), Qb = new RegExp("^([+-])=(" + S + ")", "i"), Rb = { position: "absolute", visibility: "hidden", display: "block" }, Sb = { letterSpacing: "0", fontWeight: "400" }, Tb = ["Webkit", "O", "Moz", "ms"];function Ub(a, b) {if (b in a) return b;var c = b.charAt(0).toUpperCase() + b.slice(1), d = b, e = Tb.length;while (e--) if ((b = Tb[e] + c, b in a)) return b;return d;}function Vb(a, b) {for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName)))) : (e = U(d), (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));for (g = 0; h > g; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));return a;}function Wb(a, b, c) {var d = Pb.exec(b);return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;}function Xb(a, b, c, d, e) {for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) "margin" === c && (g += m.css(a, c + T[f], !0, e)), d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));return g;}function Yb(a, b, c) {var d = !0, e = "width" === b ? a.offsetWidth : a.offsetHeight, f = Ib(a), g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);if (0 >= e || null == e) {if ((e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e))) return e;d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;}return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px";}m.extend({ cssHooks: { opacity: { get: function get(a, b) {if (b) {var c = Jb(a, "opacity");return "" === c ? "1" : c;}} } }, cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": k.cssFloat ? "cssFloat" : "styleFloat" }, style: function style(a, b, c, d) {if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {var e, f, g, h = m.camelCase(b), i = a.style;if ((b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c)) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];if ((f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d)))))) try {i[b] = c;} catch (j) {}}}, css: function css(a, b, c, d) {var e, f, g, h = m.camelCase(b);return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), "normal" === f && b in Sb && (f = Sb[b]), "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;} }), m.each(["height", "width"], function (a, b) {m.cssHooks[b] = { get: function get(a, c, d) {return c ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {return Yb(a, b, d);}) : Yb(a, b, d) : void 0;}, set: function set(a, c, d) {var e = d && Ib(a);return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);} };}), k.opacity || (m.cssHooks.opacity = { get: function get(a, b) {return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";}, set: function set(a, b) {var c = a.style, d = a.currentStyle, e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "", f = d && d.filter || c.filter || "";c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e);} }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {return b ? m.swap(a, { display: "inline-block" }, Jb, [a, "marginRight"]) : void 0;}), m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {m.cssHooks[a + b] = { expand: function expand(c) {for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];return e;} }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);}), m.fn.extend({ css: function css(a, b) {return V(this, function (a, b, c) {var d, e, f = {}, g = 0;if (m.isArray(b)) {for (d = Ib(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);return f;}return void 0 !== c ? m.style(a, b, c) : m.css(a, b);}, a, b, arguments.length > 1);}, show: function show() {return Vb(this, !0);}, hide: function hide() {return Vb(this);}, toggle: function toggle(a) {return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {U(this) ? m(this).show() : m(this).hide();});} });function Zb(a, b, c, d, e) {return new Zb.prototype.init(a, b, c, d, e);}m.Tween = Zb, Zb.prototype = { constructor: Zb, init: function init(a, b, c, d, e, f) {this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px");}, 
    cur: function cur() {var a = Zb.propHooks[this.prop];return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);}, run: function run(a) {var b, c = Zb.propHooks[this.prop];return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;} }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = { _default: { get: function get(a) {var b;return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];}, set: function set(a) {m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;} } }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = { set: function set(a) {a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);} }, m.easing = { linear: function linear(a) {return a;}, swing: function swing(a) {return .5 - Math.cos(a * Math.PI) / 2;} }, m.fx = Zb.prototype.init, m.fx.step = {};var $b, _b, ac = /^(?:toggle|show|hide)$/, bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"), cc = /queueHooks$/, dc = [ic], ec = { "*": [function (a, b) {var c = this.createTween(a, b), d = c.cur(), e = bc.exec(b), f = e && e[3] || (m.cssNumber[a] ? "" : "px"), g = (m.cssNumber[a] || "px" !== f && +d) && bc.exec(m.css(c.elem, a)), h = 1, i = 20;if (g && g[3] !== f) {f = f || g[3], e = e || [], g = +d || 1;do h = h || ".5", g /= h, m.style(c.elem, a, g + f); while (h !== (h = c.cur() / d) && 1 !== h && --i);}return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;}] };function fc() {return setTimeout(function () {$b = void 0;}), $b = m.now();}function gc(a, b) {var c, d = { height: a }, e = 0;for (b = b ? 1 : 0; 4 > e; e += 2 - b) c = T[e], d["margin" + c] = d["padding" + c] = a;return b && (d.opacity = d.width = a), d;}function hc(a, b, c) {for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++) if (d = e[f].call(c, b, a)) return d;}function ic(a, b, c) {var d, e, f, g, h, i, j, l, n = this, o = {}, p = a.style, q = a.nodeType && U(a), r = m._data(a, "fxshow");c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {h.unqueued || i();}), h.unqueued++, n.always(function () {n.always(function () {h.unqueued--, m.queue(a, "fx").length || h.empty.fire();});})), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j, "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function () {p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];}));for (d in b) if ((e = b[d], ac.exec(e))) {if ((delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show"))) {if ("show" !== e || !r || void 0 === r[d]) continue;q = !0;}o[d] = r && r[d] || m.style(a, d);} else j = void 0;if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);else {r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {m(a).hide();}), n.done(function () {var b;m._removeData(a, "fxshow");for (b in o) m.style(a, b, o[b]);});for (d in o) g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));}}function jc(a, b) {var c, d, e, f, g;for (c in a) if ((d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g)) {f = g.expand(f), delete a[d];for (c in f) c in a || (a[c] = f[c], b[c] = e);} else b[d] = e;}function kc(a, b, c) {var d, e, f = 0, g = dc.length, h = m.Deferred().always(function () {delete i.elem;}), i = function i() {if (e) return !1;for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);}, j = h.promise({ elem: a, props: m.extend({}, b), opts: m.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: $b || fc(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;}, stop: function stop(b) {var c = 0, d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; d > c; c++) j.tweens[c].run(1);return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;} }), k = j.props;for (jc(k, j.opts.specialEasing); g > f; f++) if (d = dc[f].call(j, a, k, j.opts)) return d;return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);}m.Animation = m.extend(kc, { tweener: function tweener(a, b) {m.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");for (var c, d = 0, e = a.length; e > d; d++) c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);}, prefilter: function prefilter(a, b) {b ? dc.unshift(a) : dc.push(a);} }), m.speed = function (a, b, c) {var d = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? m.extend({}, a) : { complete: c || !c && b || m.isFunction(a) && a, duration: a, easing: c && b || b && !m.isFunction(b) && b };return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);}, d;}, m.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {return this.filter(U).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);}, animate: function animate(a, b, c, d) {var e = m.isEmptyObject(a), f = m.speed(b, c, d), g = function g() {var b = kc(this, m.extend({}, a), f);(e || m._data(this, "finish")) && b.stop(!0);};return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);}, stop: function stop(a, b, c) {var d = function d(a) {var b = a.stop;delete a.stop, b(c);};return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {var b = !0, e = null != a && a + "queueHooks", f = m.timers, g = m._data(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) g[e] && g[e].stop && cc.test(e) && d(g[e]);for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));(b || !c) && m.dequeue(this, a);});}, finish: function finish(a) {return a !== !1 && (a = a || "fx"), this.each(function () {var b, c = m._data(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = m.timers, g = d ? d.length : 0;for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);delete c.finish;});} }), m.each(["toggle", "show", "hide"], function (a, b) {var c = m.fn[b];m.fn[b] = function (a, d, e) {return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);};}), m.each({ slideDown: gc("show"), slideUp: gc("hide"), slideToggle: gc("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {m.fn[a] = function (a, c, d) {return this.animate(b, a, c, d);};}), m.timers = [], m.fx.tick = function () {var a, b = m.timers, c = 0;for ($b = m.now(); c < b.length; c++) a = b[c], a() || b[c] !== a || b.splice(c--, 1);b.length || m.fx.stop(), $b = void 0;}, m.fx.timer = function (a) {m.timers.push(a), a() ? m.fx.start() : m.timers.pop();}, m.fx.interval = 13, m.fx.start = function () {_b || (_b = setInterval(m.fx.tick, m.fx.interval));}, m.fx.stop = function () {clearInterval(_b), _b = null;}, m.fx.speeds = { slow: 600, fast: 200, _default: 400 }, m.fn.delay = function (a, b) {return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {var d = setTimeout(b, a);c.stop = function () {clearTimeout(d);};});}, (function () {var a, b, c, d, e;b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), k.radioValue = "t" === a.value;})();var lc = /\r/g;m.fn.extend({ val: function val(a) {var b, c, d, e = this[0];{if (arguments.length) return d = m.isFunction(a), this.each(function (c) {var e;1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function (a) {return null == a ? "" : a + "";})), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));});if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c);}} }), m.extend({ valHooks: { option: { get: function get(a) {var b = m.find.attr(a, "value");return null != b ? b : m.trim(m.text(a));} }, select: { get: function get(a) {for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) if ((c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup")))) {if ((b = m(c).val(), f)) return b;g.push(b);}return g;}, set: function set(a, b) {var c, d, e = a.options, f = m.makeArray(b), g = e.length;while (g--) if ((d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0)) try {d.selected = c = !0;} catch (h) {d.scrollHeight;} else d.selected = !1;return c || (a.selectedIndex = -1), e;} } } }), m.each(["radio", "checkbox"], function () {m.valHooks[this] = { set: function set(a, b) {return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;} }, k.checkOn || (m.valHooks[this].get = function (a) {return null === a.getAttribute("value") ? "on" : a.value;});});var mc, nc, oc = m.expr.attrHandle, pc = /^(?:checked|selected)$/i, qc = k.getSetAttribute, rc = k.input;m.fn.extend({ attr: function attr(a, b) {return V(this, m.attr, a, b, arguments.length > 1);}, removeAttr: function removeAttr(a) {return this.each(function () {m.removeAttr(this, a);});} }), m.extend({ attr: function attr(a, b, c) {var d, e, f = a.nodeType;if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void m.removeAttr(a, b));}, removeAttr: function removeAttr(a, b) {var c, d, e = 0, f = b && b.match(E);if (f && 1 === a.nodeType) while (c = f[e++]) d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), a.removeAttribute(qc ? c : d);}, attrHooks: { type: { set: function set(a, b) {if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;}} } } }), nc = { set: function set(a, b, c) {return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, c;} }, m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {var c = oc[b] || m.find.attr;oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {var e, f;return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e;} : function (a, b, c) {return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;};}), rc && qc || (m.attrHooks.value = { set: function set(a, b, c) {return m.nodeName(a, "input") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);} }), qc || (mc = { set: function set(a, b, c) {var d = a.getAttributeNode(c);return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0;} }, oc.id = oc.name = oc.coords = function (a, b, c) {var d;return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;}, m.valHooks.button = { get: function get(a, b) {var c = a.getAttributeNode(b);return c && c.specified ? c.value : void 0;}, set: mc.set }, m.attrHooks.contenteditable = { set: function set(a, b, c) {mc.set(a, "" === b ? !1 : b, c);} }, m.each(["width", "height"], function (a, b) {m.attrHooks[b] = { set: function set(a, c) {return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;} };})), k.style || (m.attrHooks.style = { get: function get(a) {return a.style.cssText || void 0;}, set: function set(a, b) {return a.style.cssText = b + "";} });var sc = /^(?:input|select|textarea|button|object)$/i, tc = /^(?:a|area)$/i;m.fn.extend({ prop: function prop(a, b) {return V(this, m.prop, a, b, arguments.length > 1);}, removeProp: function removeProp(a) {return a = m.propFix[a] || a, this.each(function () {try {this[a] = void 0, delete this[a];} catch (b) {}});} }), m.extend({ propFix: { "for": "htmlFor", "class": "className" }, prop: function prop(a, b, c) {var d, e, f, g = a.nodeType;if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];}, propHooks: { tabIndex: { get: function get(a) {var b = m.find.attr(a, "tabindex");return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;} } } }), k.hrefNormalized || m.each(["href", "src"], function (a, b) {m.propHooks[b] = { get: function get(a) {return a.getAttribute(b, 4);} };}), k.optSelected || (m.propHooks.selected = { get: function get(a) {var b = a.parentNode;return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;} }), m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {m.propFix[this.toLowerCase()] = this;}), k.enctype || (m.propFix.enctype = "encoding");var uc = /[\t\r\n\f]/g;m.fn.extend({ addClass: function addClass(a) {var b, c, d, e, f, g, h = 0, i = this.length, j = "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {m(this).addClass(a.call(this, b, this.className));});if (j) for (b = (a || "").match(E) || []; i > h; h++) if ((c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " "))) {f = 0;while (e = b[f++]) d.indexOf(" " + e + " ") < 0 && (d += e + " ");g = m.trim(d), c.className !== g && (c.className = g);}return this;}, removeClass: function removeClass(a) {var b, c, d, e, f, g, h = 0, i = this.length, j = 0 === arguments.length || "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {m(this).removeClass(a.call(this, b, this.className));});if (j) for (b = (a || "").match(E) || []; i > h; h++) if ((c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : ""))) {f = 0;while (e = b[f++]) while (d.indexOf(" " + e + " ") >= 0) d = d.replace(" " + e + " ", " ");g = a ? m.trim(d) : "", c.className !== g && (c.className = g);}return this;}, toggleClass: function toggleClass(a, b) {var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {m(this).toggleClass(a.call(this, c, this.className, b), b);} : function () {if ("string" === c) {var b, d = 0, e = m(this), f = a.match(E) || [];while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);} else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "");});}, hasClass: function hasClass(a) {for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;return !1;} }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {m.fn[b] = function (a, c) {return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);};}), m.fn.extend({ hover: function hover(a, b) {return this.mouseenter(a).mouseleave(b || a);}, bind: function bind(a, b, c) {return this.on(a, null, b, c);}, unbind: function unbind(a, b) {return this.off(a, null, b);}, delegate: function delegate(a, b, c, d) {return this.on(b, a, c, d);}, undelegate: function undelegate(a, b, c) {return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);} });var vc = m.now(), wc = /\?/, xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON = function (b) {if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");var c, d = null, e = m.trim(b + "");return e && !m.trim(e.replace(xc, function (a, b, e, f) {return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "");})) ? Function("return " + e)() : m.error("Invalid JSON: " + b);}, m.parseXML = function (b) {var c, d;if (!b || "string" != typeof b) return null;try {a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b));} catch (e) {c = void 0;}return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), c;};var yc, zc, Ac = /#.*$/, Bc = /([?&])_=[^&]*/, Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Ec = /^(?:GET|HEAD)$/, Fc = /^\/\//, Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Hc = {}, Ic = {}, Jc = "*/".concat("*");try {zc = location.href;} catch (Kc) {zc = y.createElement("a"), zc.href = "", zc = zc.href;}yc = Gc.exec(zc.toLowerCase()) || [];function Lc(a) {return function (b, c) {"string" != typeof b && (c = b, b = "*");var d, e = 0, f = b.toLowerCase().match(E) || [];if (m.isFunction(c)) while (d = f[e++]) "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);};}function Mc(a, b, c, d) {var e = {}, f = a === Ic;function g(h) {var i;return e[h] = !0, m.each(a[h] || [], function (a, h) {var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);}), i;}return g(b.dataTypes[0]) || !e["*"] && g("*");}function Nc(a, b) {var c, d, e = m.ajaxSettings.flatOptions || {};for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);return c && m.extend(!0, a, c), a;}function Oc(a, b, c) {var d, e, f, g, h = a.contents, i = a.dataTypes;while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));if (e) for (g in h) if (h[g] && h[g].test(e)) {i.unshift(g);break;}if (i[0] in c) f = i[0];else {for (g in c) {if (!i[0] || a.converters[g + " " + i[0]]) {f = g;break;}d || (d = g);}f = f || d;}return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;}function Pc(a, b, c, d) {var e, f, g, h, i, j = {}, k = a.dataTypes.slice();if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];f = k.shift();while (f) if ((a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())) if ("*" === f) f = i;else if ("*" !== i && i !== f) {if ((g = j[i + " " + f] || j["* " + f], !g)) for (e in j) if ((h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]]))) {g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;}if (g !== !0) if (g && a["throws"]) b = g(b);else try {b = g(b);} catch (l) {return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };}}return { state: "success", data: b };}m.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: zc, type: "GET", isLocal: Dc.test(yc[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Jc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": m.parseJSON, "text xml": m.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);}, ajaxPrefilter: Lc(Hc), ajaxTransport: Lc(Ic), ajax: function ajax(a, b) {"object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && (b = a, a = void 0), b = b || {};var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b), l = k.context || k, n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event, o = m.Deferred(), p = m.Callbacks("once memory"), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = "canceled", v = { readyState: 0, getResponseHeader: function getResponseHeader(a) {var b;if (2 === t) {if (!j) {j = {};while (b = Cc.exec(f)) j[b[1].toLowerCase()] = b[2];}b = j[a.toLowerCase()];}return null == b ? null : b;}, getAllResponseHeaders: function getAllResponseHeaders() {return 2 === t ? f : null;}, setRequestHeader: function setRequestHeader(a, b) {var c = a.toLowerCase();return t || (a = s[c] = s[c] || a, r[a] = b), this;}, overrideMimeType: function overrideMimeType(a) {return t || (k.mimeType = a), this;}, statusCode: function statusCode(a) {var b;if (a) if (2 > t) for (b in a) q[b] = [q[b], a[b]];else v.always(a[v.status]);return this;}, abort: function abort(a) {var b = a || u;return i && i.abort(b), x(0, b), this;} };if ((o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t)) return v;h = k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);for (d in k.headers) v.setRequestHeader(d, k.headers[d]);if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();u = "abort";for (d in { success: 1, error: 1, complete: 1 }) v[d](k[d]);if (i = Mc(Ic, k, b, v)) {v.readyState = 1, h && n.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {v.abort("timeout");}, k.timeout));try {t = 1, i.send(r, x);} catch (w) {if (!(2 > t)) throw w;x(-1, w);}} else x(-1, "No Transport");function x(a, b, c, d) {var j, r, s, u, w, x = b;2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")));}return v;}, getJSON: function getJSON(a, b, c) {return m.get(a, b, c, "json");}, getScript: function getScript(a, b) {return m.get(a, void 0, b, "script");} }), m.each(["get", "post"], function (a, b) {m[b] = function (a, c, d, e) {return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({ url: a, type: b, dataType: e, data: c, success: d });};}), m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {m.fn[b] = function (a) {return this.on(b, a);};}), m._evalUrl = function (a) {return m.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 });}, m.fn.extend({ wrapAll: function wrapAll(a) {if (m.isFunction(a)) return this.each(function (b) {m(this).wrapAll(a.call(this, b));});if (this[0]) {var b = m(a, this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode && b.insertBefore(this[0]), b.map(function () {var a = this;while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild;return a;}).append(this);}return this;}, wrapInner: function wrapInner(a) {return this.each(m.isFunction(a) ? function (b) {m(this).wrapInner(a.call(this, b));} : function () {var b = m(this), c = b.contents();c.length ? c.wrapAll(a) : b.append(a);});}, wrap: function wrap(a) {var b = m.isFunction(a);return this.each(function (c) {m(this).wrapAll(b ? a.call(this, c) : a);});}, unwrap: function unwrap() {return this.parent().each(function () {m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);}).end();} }), m.expr.filters.hidden = function (a) {return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"));}, m.expr.filters.visible = function (a) {return !m.expr.filters.hidden(a);};var Qc = /%20/g, Rc = /\[\]$/, Sc = /\r?\n/g, Tc = /^(?:submit|button|image|reset|file)$/i, Uc = /^(?:input|select|textarea|keygen)/i;function Vc(a, b, c, d) {var e;if (m.isArray(b)) m.each(b, function (b, e) {c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? b : "") + "]", e, c, d);});else if (c || "object" !== m.type(b)) d(a, b);else for (e in b) Vc(a + "[" + e + "]", b[e], c, d);}m.param = function (a, b) {var c, d = [], e = function e(a, b) {b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);};if ((void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a))) m.each(a, function () {e(this.name, this.value);});else for (c in a) Vc(c, a[c], b, e);return d.join("&").replace(Qc, "+");}, m.fn.extend({ serialize: function serialize() {return m.param(this.serializeArray());}, serializeArray: function serializeArray() {return this.map(function () {var a = m.prop(this, "elements");return a ? m.makeArray(a) : this;}).filter(function () {var a = this.type;return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));}).map(function (a, b) {var c = m(this).val();return null == c ? null : m.isArray(c) ? m.map(c, function (a) {return { name: b.name, value: a.replace(Sc, "\r\n") };}) : { name: b.name, value: c.replace(Sc, "\r\n") };}).get();} }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();} : Zc;var Wc = 0, Xc = {}, Yc = m.ajaxSettings.xhr();a.ActiveXObject && m(a).on("unload", function () {for (var a in Xc) Xc[a](void 0, !0);}), k.cors = !!Yc && "withCredentials" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {if (!a.crossDomain || k.cors) {var b;return { send: function send(c, d) {var e, f = a.xhr(), g = ++Wc;if ((f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)) for (e in a.xhrFields) f[e] = a.xhrFields[e];a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");f.send(a.hasContent && a.data || null), b = function (c, e) {var h, i, j;if (b && (e || 4 === f.readyState)) if ((delete Xc[g], b = void 0, f.onreadystatechange = m.noop, e)) 4 !== f.readyState && f.abort();else {j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);try {i = f.statusText;} catch (k) {i = "";}h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;}j && d(h, i, j, f.getAllResponseHeaders());}, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xc[g] = b : b();}, abort: function abort() {b && b(void 0, !0);} };}});function Zc() {try {return new a.XMLHttpRequest();} catch (b) {}}function $c() {try {return new a.ActiveXObject("Microsoft.XMLHTTP");} catch (b) {}}m.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function textScript(a) {return m.globalEval(a), a;} } }), m.ajaxPrefilter("script", function (a) {void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);}), m.ajaxTransport("script", function (a) {if (a.crossDomain) {var b, c = y.head || m("head")[0] || y.documentElement;return { send: function send(d, e) {b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {(c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"));}, c.insertBefore(b, c.firstChild);}, abort: function abort() {b && b.onload(void 0, !0);} };}});var _c = [], ad = /(=)\?(?=&|$)|\?\?/;m.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {var a = _c.pop() || m.expando + "_" + vc++;return this[a] = !0, a;} }), m.ajaxPrefilter("json jsonp", function (b, c, d) {var e, f, g, h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, "$1" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {return g || m.error(e + " was not called"), g[0];}, b.dataTypes[0] = "json", f = a[e], a[e] = function () {g = arguments;}, d.always(function () {a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;}), "script") : void 0;}), m.parseHTML = function (a, b, c) {if (!a || "string" != typeof a) return null;"boolean" == typeof b && (c = b, b = !1), b = b || y;var d = u.exec(a), e = !c && [];return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));};var bd = m.fn.load;m.fn.load = function (a, b, c) {if ("string" != typeof a && bd) return bd.apply(this, arguments);var d, e, f, g = this, h = a.indexOf(" ");return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (f = "POST"), g.length > 0 && m.ajax({ url: a, type: f, dataType: "html", data: b }).done(function (a) {e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);}).complete(c && function (a, b) {g.each(c, e || [a.responseText, b, a]);}), this;}, m.expr.filters.animated = function (a) {return m.grep(m.timers, function (b) {return a === b.elem;}).length;};var cd = a.document.documentElement;function dd(a) {return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;}m.offset = { setOffset: function setOffset(a, b, c) {var d, e, f, g, h, i, j, k = m.css(a, "position"), l = m(a), n = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n);} }, m.fn.extend({ offset: function offset(a) {if (arguments.length) return void 0 === a ? this : this.each(function (b) {m.offset.setOffset(this, a, b);});var b, c, d = { top: 0, left: 0 }, e = this[0], f = e && e.ownerDocument;if (f) return b = f.documentElement, m.contains(b, e) ? (_typeof(e.getBoundingClientRect) !== K && (d = e.getBoundingClientRect()), c = dd(f), { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) }) : d;}, position: function position() {if (this[0]) {var a, b, c = { top: 0, left: 0 }, d = this[0];return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), c.left += m.css(a[0], "borderLeftWidth", !0)), { top: b.top - c.top - m.css(d, "marginTop", !0), left: b.left - c.left - m.css(d, "marginLeft", !0) };}}, offsetParent: function offsetParent() {return this.map(function () {var a = this.offsetParent || cd;while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) a = a.offsetParent;return a || cd;});} }), m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {var c = /Y/.test(b);m.fn[a] = function (d) {return V(this, function (a, d, e) {var f = dd(a);return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);}, a, d, arguments.length, null);};}), m.each(["top", "left"], function (a, b) {m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0;});}), m.each({ Height: "height", Width: "width" }, function (a, b) {m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {m.fn[d] = function (d, e) {var f = arguments.length && (c || "boolean" != typeof d), g = c || (d === !0 || e === !0 ? "margin" : "border");return V(this, function (b, c, d) {var e;return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);}, b, f ? d : void 0, f, null);};});}), m.fn.size = function () {return this.length;}, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {return m;});var ed = a.jQuery, fd = a.$;return m.noConflict = function (b) {return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;}, (typeof b === "undefined" ? "undefined" : _typeof(b)) === K && (a.jQuery = a.$ = m), m;});
//# sourceMappingURL=data:application/json;base64,

// extensions.js
// (c) Dmitry Sadakov - 2015 All rights reserved.

'use strict';

if (typeof String.prototype.endsWith !== 'function') {
	String.prototype.endsWith = function (suffix) {
		return this.indexOf(suffix, this.length - suffix.length) !== -1;};}



if (typeof String.prototype.startsWith !== 'function') {
	String.prototype.startsWith = function (prefix) {
		return this.indexOf(prefix) !== -1;};}




var brokenPromises = [];

if (typeof Promise !== 'undefined' && Promise) {
	Promise.any = function (arrayOfPromises) {
		if (!arrayOfPromises || !(arrayOfPromises instanceof Array)) {
			throw new Error('Must pass Promise.any an array');}


		if (arrayOfPromises.length === 0) {
			return Promise.resolve([]);}



		// For each promise that resolves or rejects, 
		// make them all resolve.
		// Record which ones did resolve or reject
		var i = 0;
		var resolvingPromises = arrayOfPromises.map(function (promise) {
			promise.id = i;
			var localI = i;
			brokenPromises[localI] = promise;
			i++;

			return promise.then(function (result) {
				console.log('resolved ' + localI);
				delete brokenPromises[localI];
				return { 
					resolve: true, 
					result: result };}, 

			function (error) {
				console.log('rejected ' + localI);
				delete brokenPromises[localI];
				return { 
					resolve: false, 
					result: error };});});




		return Promise.all(resolvingPromises).then(function (results) {
			// Count how many passed/failed
			var passed = [], failed = [], allFailed = true;
			results.forEach(function (result) {
				if (result.resolve) {
					allFailed = false;}

				if (result.resolve) {
					passed.push(result.result);} else 
				{
					failed.push(result.result);}});



			if (allFailed) {
				throw failed;} else 
			{
				return passed;}});};}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsWUFBWSxDQUFDOztBQUViLElBQUksT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7QUFDakQsT0FBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBUyxNQUFNLEVBQUU7QUFDekMsU0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUNuRSxDQUFDLENBQ0w7Ozs7QUFFRCxJQUFJLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO0FBQ25ELE9BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVMsTUFBTSxFQUFFO0FBQzNDLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUN0QyxDQUFDLENBQ0w7Ozs7O0FBR0QsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDOztBQUV4QixJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxPQUFPLEVBQUU7QUFDOUMsUUFBTyxDQUFDLEdBQUcsR0FBRyxVQUFTLGVBQWUsRUFBRTtBQUN0QyxNQUFHLENBQUMsZUFBZSxJQUFJLEVBQUUsZUFBZSxZQUFZLEtBQUssQ0FBQSxBQUFDLEVBQUU7QUFDMUQsU0FBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQ25EOzs7QUFFRCxNQUFHLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQy9CLFVBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUM1Qjs7Ozs7OztBQUFBLEFBTUQsTUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1YsTUFBSSxpQkFBaUIsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVMsT0FBTyxFQUFFO0FBQzdELFVBQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsT0FBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsaUJBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDakMsSUFBQyxFQUFFLENBQUM7O0FBRUgsVUFBTyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVMsTUFBTSxFQUFFO0FBQ25DLFdBQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLFdBQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLFdBQU87QUFDTCxZQUFPLEVBQUUsSUFBSTtBQUNiLFdBQU0sRUFBRSxNQUFNLEVBQ2YsQ0FBQyxDQUNIOztBQUFFLGFBQVMsS0FBSyxFQUFFO0FBQ2hCLFdBQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLFdBQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLFdBQU87QUFDTCxZQUFPLEVBQUUsS0FBSztBQUNkLFdBQU0sRUFBRSxLQUFLLEVBQ2QsQ0FBQyxDQUNILENBQUMsQ0FBQyxDQUNKLENBQUMsQ0FBQzs7Ozs7QUFFSCxTQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxPQUFPLEVBQUU7O0FBRTNELE9BQUksTUFBTSxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDL0MsVUFBTyxDQUFDLE9BQU8sQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUMvQixRQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDakIsY0FBUyxHQUFHLEtBQUssQ0FBQyxDQUNuQjs7QUFDRCxRQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDbEIsV0FBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDNUI7QUFBTTtBQUNMLFdBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQzVCLENBQ0YsQ0FBQyxDQUFDOzs7O0FBRUgsT0FBRyxTQUFTLEVBQUU7QUFDWixVQUFNLE1BQU0sQ0FBQyxDQUNkO0FBQU07QUFDTCxXQUFPLE1BQU0sQ0FBQyxDQUNmLENBQ0YsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUVGIiwiZmlsZSI6ImV4dGVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRlbnNpb25zLmpzXHJcbi8vIChjKSBEbWl0cnkgU2FkYWtvdiAtIDIwMTUgQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmlmICh0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGZ1bmN0aW9uKHN1ZmZpeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc3VmZml4LCB0aGlzLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcclxuICAgIH07XHJcbn1cclxuIFxyXG5pZiAodHlwZW9mIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24ocHJlZml4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihwcmVmaXgpICE9PSAtMTtcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG52YXIgYnJva2VuUHJvbWlzZXMgPSBbXTtcclxuXHJcbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgUHJvbWlzZSkge1xyXG5cdFByb21pc2UuYW55ID0gZnVuY3Rpb24oYXJyYXlPZlByb21pc2VzKSB7XHJcblx0ICBpZighYXJyYXlPZlByb21pc2VzIHx8ICEoYXJyYXlPZlByb21pc2VzIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcblx0ICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwYXNzIFByb21pc2UuYW55IGFuIGFycmF5Jyk7XHJcblx0ICB9XHJcblx0ICAgIFxyXG5cdCAgaWYoYXJyYXlPZlByb21pc2VzLmxlbmd0aCA9PT0gMCkge1xyXG5cdCAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuXHQgIH1cclxuXHQgICBcclxuXHQgICAgXHJcblx0ICAvLyBGb3IgZWFjaCBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cywgXHJcblx0ICAvLyBtYWtlIHRoZW0gYWxsIHJlc29sdmUuXHJcblx0ICAvLyBSZWNvcmQgd2hpY2ggb25lcyBkaWQgcmVzb2x2ZSBvciByZWplY3RcclxuXHQgIHZhciBpID0gMDtcclxuXHQgIHZhciByZXNvbHZpbmdQcm9taXNlcyA9IGFycmF5T2ZQcm9taXNlcy5tYXAoZnVuY3Rpb24ocHJvbWlzZSkge1xyXG5cdCAgXHRwcm9taXNlLmlkID0gaTtcclxuXHQgIFx0dmFyIGxvY2FsSSA9IGk7XHJcblx0ICBcdGJyb2tlblByb21pc2VzW2xvY2FsSV0gPSBwcm9taXNlO1xyXG5cdCAgXHRpKys7XHJcblxyXG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG5cdCAgICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlZCAnICsgbG9jYWxJKTtcclxuXHQgICAgICBkZWxldGUgYnJva2VuUHJvbWlzZXNbbG9jYWxJXTtcclxuXHQgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgcmVzb2x2ZTogdHJ1ZSxcclxuXHQgICAgICAgIHJlc3VsdDogcmVzdWx0XHJcblx0ICAgICAgfTtcclxuXHQgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuXHQgICAgICAgY29uc29sZS5sb2coJ3JlamVjdGVkICcgKyBsb2NhbEkpO1xyXG5cdCAgICAgICBkZWxldGUgYnJva2VuUHJvbWlzZXNbbG9jYWxJXTtcclxuXHQgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgcmVzb2x2ZTogZmFsc2UsXHJcblx0ICAgICAgICByZXN1bHQ6IGVycm9yXHJcblx0ICAgICAgfTtcclxuXHQgICAgfSk7XHJcblx0ICB9KTtcclxuXHJcblx0ICByZXR1cm4gUHJvbWlzZS5hbGwocmVzb2x2aW5nUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xyXG5cdCAgICAvLyBDb3VudCBob3cgbWFueSBwYXNzZWQvZmFpbGVkXHJcblx0ICAgIHZhciBwYXNzZWQgPSBbXSwgZmFpbGVkID0gW10sIGFsbEZhaWxlZCA9IHRydWU7XHJcblx0ICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihyZXN1bHQpIHtcclxuXHQgICAgICBpZihyZXN1bHQucmVzb2x2ZSkge1xyXG5cdCAgICAgICAgYWxsRmFpbGVkID0gZmFsc2U7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIGlmIChyZXN1bHQucmVzb2x2ZSkge1xyXG5cdCAgICAgICAgcGFzc2VkLnB1c2gocmVzdWx0LnJlc3VsdCk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIGZhaWxlZC5wdXNoKHJlc3VsdC5yZXN1bHQpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBpZihhbGxGYWlsZWQpIHtcclxuXHQgICAgICB0aHJvdyBmYWlsZWQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIHBhc3NlZDtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

/*
 *  Copyright 2015 Dmitry Sadakov. All rights reserved.
 */

'use strict';var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var 

AjaxLite = (function () {function AjaxLite() {_classCallCheck(this, AjaxLite);}_createClass(AjaxLite, null, [{ key: 'ajax', value: function ajax(
    options) {
      var url = options.url;
      var type = options.type || 'GET';
      var headers = options.headers || {};
      var body = options.data || null;
      var timeout = options.timeout || 1000;
      var success = options.success || function () {
        console.log('options.success was missing for this request');};

      var contentType = options.contentType || 'application/json';
      var error = options.error || function () {
        console.log('options.error was missing for this request');};


      if (!url) {
        error(null, 'loadURL requires a url argument');}


      var xhr = new XMLHttpRequest();
      xhr.contentType = 'json';
      xhr.ontimeout = function () {
        //error(xhr, 'timeout', xhr.response);
      };
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.contentType === 'json') {
            if (xhr.responseText === '') {
              xhr.responseJSON = null;} else 
            {
              try {
                xhr.responseJSON = JSON.parse(xhr.responseText);} 
              catch (err) {
                console.error('JSON parsing error: ' + url + '. Error: ' + err);
                xhr.responseJSON = null;}}}



          if (xhr.status === 200) {
            success(xhr.responseJSON || xhr.responseText, 'success', xhr);} else 
          if (xhr.status === 0) {
            // xhr.statusText = 'timeout';
            error(xhr, 'timeout', xhr.response);} else 
          {
            error(xhr, 'error', xhr.response);}}};





      xhr.open(type, url, true);

      xhr.setRequestHeader('Content-Type', contentType);
      xhr.setRequestHeader('Accept', 'application/json, text/javascript, */*');
      xhr.timeout = timeout;

      Object.keys(headers).forEach(function (key) {
        xhr.setRequestHeader(key, headers[key]);});


      console.log('AjaxLite sending: ' + url);
      if (body) {
        xhr.send(body);} else 
      {
        xhr.send();}


      return xhr;} }]);return AjaxLite;})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXhsaXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxZQUFZLENBQUM7O0FBRVAsUUFBUSwwQkFBUixRQUFRLDBCQUFSLFFBQVEsZ0JBQVIsUUFBUTtBQUNBLFdBQU8sRUFBRTtBQUNuQixVQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQ3RCLFVBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDO0FBQ2pDLFVBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQ3BDLFVBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQ2hDLFVBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO0FBQ3RDLFVBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksWUFBVztBQUMxQyxlQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUMsQ0FDN0QsQ0FBQzs7QUFDRixVQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxJQUFJLGtCQUFrQixDQUFDO0FBQzVELFVBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksWUFBVztBQUN0QyxlQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FDM0QsQ0FBQzs7O0FBRUYsVUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLGFBQUssQ0FBQyxJQUFJLEVBQUUsaUNBQWlDLENBQUMsQ0FBQyxDQUNoRDs7O0FBRUQsVUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQixTQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztBQUN6QixTQUFHLENBQUMsU0FBUyxHQUFHLFlBQVc7O09BRTFCLENBQUM7QUFDRixTQUFHLENBQUMsa0JBQWtCLEdBQUcsWUFBVztBQUNsQyxZQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO0FBQ3hCLGNBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLEVBQUU7QUFDOUIsZ0JBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxFQUFFLEVBQUU7QUFDM0IsaUJBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQ3pCO0FBQU07QUFDTCxrQkFBSTtBQUNGLG1CQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQ2pEO0FBQUMscUJBQU8sR0FBRyxFQUFFO0FBQ1osdUJBQU8sQ0FBQyxLQUFLLDBCQUF3QixHQUFHLGlCQUFZLEdBQUcsQ0FBRyxDQUFDO0FBQzNELG1CQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUN6QixDQUNGLENBQ0Y7Ozs7QUFDRCxjQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO0FBQ3RCLG1CQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUMvRDtBQUFNLGNBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTNCLGlCQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDckM7QUFBTTtBQUNMLGlCQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDbkMsQ0FDRixDQUVGLENBQUM7Ozs7OztBQUVGLFNBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFMUIsU0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNsRCxTQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7QUFDekUsU0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7O0FBRXRCLFlBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsR0FBRyxFQUFFO0FBQ3pDLFdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDekMsQ0FBQyxDQUFDOzs7QUFFSCxhQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLFVBQUksSUFBSSxFQUFFO0FBQ1IsV0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNoQjtBQUFNO0FBQ0wsV0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQ1o7OztBQUVELGFBQU8sR0FBRyxDQUFDLENBQ1osWUFwRUcsUUFBUSIsImZpbGUiOiJhamF4bGl0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqICBDb3B5cmlnaHQgMjAxNSBEbWl0cnkgU2FkYWtvdi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jbGFzcyBBamF4TGl0ZSB7XHJcbiAgc3RhdGljIGFqYXgob3B0aW9ucykge1xyXG4gICAgdmFyIHVybCA9IG9wdGlvbnMudXJsO1xyXG4gICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGUgfHwgJ0dFVCc7XHJcbiAgICB2YXIgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcclxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5kYXRhIHx8IG51bGw7XHJcbiAgICB2YXIgdGltZW91dCA9IG9wdGlvbnMudGltZW91dCB8fCAxMDAwO1xyXG4gICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdvcHRpb25zLnN1Y2Nlc3Mgd2FzIG1pc3NpbmcgZm9yIHRoaXMgcmVxdWVzdCcpO1xyXG4gICAgfTtcclxuICAgIHZhciBjb250ZW50VHlwZSA9IG9wdGlvbnMuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCBmdW5jdGlvbigpIHtcclxuICAgICAgY29uc29sZS5sb2coJ29wdGlvbnMuZXJyb3Igd2FzIG1pc3NpbmcgZm9yIHRoaXMgcmVxdWVzdCcpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICBlcnJvcihudWxsLCAnbG9hZFVSTCByZXF1aXJlcyBhIHVybCBhcmd1bWVudCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHhoci5jb250ZW50VHlwZSA9ICdqc29uJztcclxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgLy9lcnJvcih4aHIsICd0aW1lb3V0JywgeGhyLnJlc3BvbnNlKTtcclxuICAgIH07XHJcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgIGlmICh4aHIuY29udGVudFR5cGUgPT09ICdqc29uJykge1xyXG4gICAgICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHhoci5yZXNwb25zZUpTT04gPSBudWxsO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSlNPTiBwYXJzaW5nIGVycm9yOiAke3VybH0uIEVycm9yOiAke2Vycn1gKTtcclxuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VKU09OID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBzdWNjZXNzKHhoci5yZXNwb25zZUpTT04gfHwgeGhyLnJlc3BvbnNlVGV4dCwgJ3N1Y2Nlc3MnLCB4aHIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMCkge1xyXG4gICAgICAgICAgLy8geGhyLnN0YXR1c1RleHQgPSAndGltZW91dCc7XHJcbiAgICAgICAgICBlcnJvcih4aHIsICd0aW1lb3V0JywgeGhyLnJlc3BvbnNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZXJyb3IoeGhyLCAnZXJyb3InLCB4aHIucmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICB9O1xyXG5cclxuICAgIHhoci5vcGVuKHR5cGUsIHVybCwgdHJ1ZSk7XHJcblxyXG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcclxuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyonKTtcclxuICAgIHhoci50aW1lb3V0ID0gdGltZW91dDtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnQWpheExpdGUgc2VuZGluZzogJyArIHVybCk7XHJcbiAgICBpZiAoYm9keSkge1xyXG4gICAgICB4aHIuc2VuZChib2R5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHhoci5zZW5kKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHhocjtcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

/* (C) 2014 Dmitry Sadakov */

'use strict'

/*exported config */;

var config = { 
  //app: 'light' // light, ambieye, pro, web
  app: 'eye' };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztvQkFBWSxDQUFDOztBQUlaLElBQUksTUFBTSxHQUFHOztBQUVaLEtBQUcsRUFBRSxLQUFLLEVBSVYsQ0FBQyIsImZpbGUiOiJjb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoQykgMjAxNCBEbWl0cnkgU2FkYWtvdiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLypleHBvcnRlZCBjb25maWcgKi9cclxuXHJcbiB2YXIgY29uZmlnID0ge1xyXG4gIC8vYXBwOiAnbGlnaHQnIC8vIGxpZ2h0LCBhbWJpZXllLCBwcm8sIHdlYlxyXG4gIGFwcDogJ2V5ZScsXHJcbiAgLy9hcHA6ICdwcm8nLFxyXG4gIC8vYXBwOiAnYXBwJyxcclxuICAvL2FwcDogJ3dlYicsXHJcbiB9O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

/* (C) 2014 Dmitry Sadakov */

'use strict'

/*global config:true */;

config.ambieye = true;
config.scenes = true;
config.search = true;
config.tabs = true;
config.feedback = true;
config.voice = true;

switch (config.app) {
    case 'light':
        config.ambieye = false;
        config.scenes = false;
        config.search = false;
        config.tabs = false;
        config.voice = false;
        break;
    case 'pro':
        config.ambieye = true;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'web':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = true;
        break;
    case 'app':
        config.ambieye = false;
        config.scenes = true;
        config.search = false;
        config.tabs = true;
        config.feedback = false;
        config.voice = false;
        break;
    case 'eye':
        config.ambieye = true;
        config.scenes = false;
        config.search = false;
        config.tabs = true;
        config.voice = false;
        break;
    case 'win':
        config.ambieye = false;
        config.scenes = true;
        config.search = true;
        config.tabs = true;
        config.voice = false;
        break;}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5mZWF0dXJlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOzt1QkFBWSxDQUFDOztBQUliLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDOztBQUVwQixRQUFPLE1BQU0sQ0FBQyxHQUFHO0FBQ2YsU0FBSyxPQUFPO0FBQ1IsY0FBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDdkIsY0FBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDcEIsY0FBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDckIsY0FBTTtBQUNWLFNBQUssS0FBSztBQUNOLGNBQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLGNBQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLGNBQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLGNBQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLGNBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLGNBQU07QUFDVixTQUFLLEtBQUs7QUFDTixjQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN2QixjQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUNyQixjQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUNyQixjQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixjQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNwQixjQUFNO0FBQ1YsU0FBSyxLQUFLO0FBQ04sY0FBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDdkIsY0FBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDckIsY0FBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDdEIsY0FBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbkIsY0FBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDeEIsY0FBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDckIsY0FBTTtBQUNWLFNBQUssS0FBSztBQUNOLGNBQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLGNBQU0sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQU0sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLGNBQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ25CLGNBQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLGNBQU07QUFDVixTQUFLLEtBQUs7QUFDTixjQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN2QixjQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUNyQixjQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUNyQixjQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNuQixjQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNyQixjQUFNLENBQ1YiLCJmaWxlIjoiY29uZmlnLmZlYXR1cmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKEMpIDIwMTQgRG1pdHJ5IFNhZGFrb3YgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qZ2xvYmFsIGNvbmZpZzp0cnVlICovXHJcblxyXG5jb25maWcuYW1iaWV5ZSA9IHRydWU7XHJcbmNvbmZpZy5zY2VuZXMgPSB0cnVlO1xyXG5jb25maWcuc2VhcmNoID0gdHJ1ZTtcclxuY29uZmlnLnRhYnMgPSB0cnVlO1xyXG5jb25maWcuZmVlZGJhY2sgPSB0cnVlO1xyXG5jb25maWcudm9pY2UgPSB0cnVlO1xyXG5cclxuc3dpdGNoKGNvbmZpZy5hcHApIHtcclxuICBjYXNlICdsaWdodCc6XHJcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XHJcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSBmYWxzZTtcclxuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xyXG4gICAgICBjb25maWcudGFicyA9IGZhbHNlO1xyXG4gICAgICBjb25maWcudm9pY2UgPSBmYWxzZTtcclxuICAgICAgYnJlYWs7XHJcbiAgY2FzZSAncHJvJzpcclxuICAgICAgY29uZmlnLmFtYmlleWUgPSB0cnVlO1xyXG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcclxuICAgICAgY29uZmlnLnNlYXJjaCA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy50YWJzID0gdHJ1ZTtcclxuICAgICAgY29uZmlnLnZvaWNlID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgY2FzZSAnd2ViJzpcclxuICAgICAgY29uZmlnLmFtYmlleWUgPSBmYWxzZTtcclxuICAgICAgY29uZmlnLnNjZW5lcyA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy5zZWFyY2ggPSB0cnVlO1xyXG4gICAgICBjb25maWcudGFicyA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy52b2ljZSA9IHRydWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gIGNhc2UgJ2FwcCc6XHJcbiAgICAgIGNvbmZpZy5hbWJpZXllID0gZmFsc2U7XHJcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSB0cnVlO1xyXG4gICAgICBjb25maWcuc2VhcmNoID0gZmFsc2U7XHJcbiAgICAgIGNvbmZpZy50YWJzID0gdHJ1ZTtcclxuICAgICAgY29uZmlnLmZlZWRiYWNrID0gZmFsc2U7XHJcbiAgICAgIGNvbmZpZy52b2ljZSA9IGZhbHNlO1xyXG4gICAgICBicmVhaztcclxuICBjYXNlICdleWUnOlxyXG4gICAgICBjb25maWcuYW1iaWV5ZSA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy5zY2VuZXMgPSBmYWxzZTtcclxuICAgICAgY29uZmlnLnNlYXJjaCA9IGZhbHNlO1xyXG4gICAgICBjb25maWcudGFicyA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy52b2ljZSA9IGZhbHNlO1xyXG4gICAgICBicmVhaztcclxuICBjYXNlICd3aW4nOlxyXG4gICAgICBjb25maWcuYW1iaWV5ZSA9IGZhbHNlO1xyXG4gICAgICBjb25maWcuc2NlbmVzID0gdHJ1ZTtcclxuICAgICAgY29uZmlnLnNlYXJjaCA9IHRydWU7XHJcbiAgICAgIGNvbmZpZy50YWJzID0gdHJ1ZTtcclxuICAgICAgY29uZmlnLnZvaWNlID0gZmFsc2U7XHJcbiAgICAgIGJyZWFrO1xyXG4gfVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

'use strict';function _typeof(obj) {return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;}

(function () {var aa = encodeURIComponent, f = window, ba = setTimeout, n = Math;function Pc(a, b) {return a.href = b;}function fa(a, b) {return a.name = b;}
	var Qc = "replace", q = "data", m = "match", xc = "send", ja = "port", u = "createElement", id = "setAttribute", da = "getTime", x = "host", A = "split", B = "location", ra = "hasOwnProperty", ma = "hostname", ga = "search", E = "protocol", Ab = "href", kd = "action", G = "apply", p = "push", h = "hash", s = "test", ha = "slice", r = "cookie", t = "indexOf", ia = "defaultValue", v = "name", y = "length", z = "prototype", la = "clientWidth", jd = "target", C = "call", na = "clientHeight", F = "substring", oa = "navigator", Ub = "parentNode", H = "join", I = "toLowerCase";var pa = new (function () {var a = [];this.set = function (b) {a[b] = !0;};this.M = function () {for (var b = [], c = 0; c < a[y]; c++) a[c] && (b[n.floor(c / 6)] = b[n.floor(c / 6)] ^ 1 << c % 6);for (c = 0; c < b[y]; c++) b[c] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(b[c] || 0);return b[H]("") + "~";};})();function J(a) {pa.set(a);};var ea = function ea(a) {return "function" == typeof a;}, ka = function ka(a) {return "[object Array]" == Object[z].toString[C](Object(a));}, qa = function qa(a) {return void 0 != a && -1 < (a.constructor + "")[t]("String");}, D = function D(a, b) {return 0 == a[t](b);}, sa = function sa(a) {return a ? a[Qc](/^[\s\xa0]+|[\s\xa0]+$/g, "") : "";}, ta = function ta(a) {var b = M[u]("img");b.width = 1;b.height = 1;b.src = a;return b;}, ua = function ua() {}, K = function K(a) {if (aa instanceof Function) return aa(a);J(28);return a;}, L = function L(a, b, c, d) {try {a.addEventListener ? a.addEventListener(b, 
			c, !!d) : a.attachEvent && a.attachEvent("on" + b, c);} catch (e) {J(27);}}, va = function va(a, b, c) {a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent("on" + b, c);}, wa = function wa(a, b) {if (a) {var c = M[u]("script");c.type = "text/javascript";c.async = !0;c.src = a;b && (c.id = b);var d = M.getElementsByTagName("script")[0];d[Ub].insertBefore(c, d);}}, xa = function xa() {var a = "" + M[B][ma];return 0 == a[t]("www.") ? a[F](4) : a;}, ya = function ya(a) {var b = M.referrer;if (/^https?:\/\//i[s](b)) {if (a) return b;a = "//" + M[B][ma];var c = 
			b[t](a);if (5 == c || 6 == c) if ((a = b.charAt(c + a[y]), "/" == a || "?" == a || "" == a || ":" == a)) return;return b;}}, za = function za(a, b) {if (1 == b[y] && null != b[0] && "object" === _typeof(b[0])) return b[0];for (var c = {}, d = n.min(a[y] + 1, b[y]), e = 0; e < d; e++) if ("object" === _typeof(b[e])) {for (var g in b[e]) b[e][ra](g) && (c[g] = b[e][g]);break;} else e < a[y] && (c[a[e]] = b[e]);return c;};var N = function N() {this.keys = [];this.w = {};this.m = {};};N[z].set = function (a, b, c) {this.keys[p](a);c ? this.m[":" + a] = b : this.w[":" + a] = b;};N[z].get = function (a) {return this.m[ra](":" + a) ? this.m[":" + a] : this.w[":" + a];};N[z].map = function (a) {for (var b = 0; b < this.keys[y]; b++) {var c = this.keys[b], d = this.get(c);d && a(c, d);}};var O = f, M = document, fb = function fb(a) {ba(a, 100);}, Mc = function Mc() {for (var a = O[oa].userAgent + (M[r] ? M[r] : "") + (M.referrer ? M.referrer : ""), b = a[y], c = O.history[y]; 0 < c;) a += c-- ^ b++;return La(a);};var Aa = function Aa(a) {var b = O._gaUserPrefs;if (b && b.ioo && b.ioo() || a && !0 === O["ga-disable-" + a]) return !0;try {var c = O.external;if (c && c._gaUserPrefs && "oo" == c._gaUserPrefs) return !0;} catch (d) {}return !1;};var Ca = function Ca(a) {var b = [], c = M[r][A](";");a = new RegExp("^\\s*" + a + "=\\s*(.*?)\\s*$");for (var d = 0; d < c[y]; d++) {var e = c[d][m](a);e && b[p](e[1]);}return b;}, zc = function zc(a, b, c, d, e, g) {e = Aa(e) ? !1 : eb[s](M[B][ma]) || "/" == c && vc[s](d) ? !1 : !0;if (!e) return !1;b && 1200 < b[y] && (b = b[F](0, 1200), J(24));c = a + "=" + b + "; path=" + c + "; ";g && (c += "expires=" + new Date(new Date()[da]() + g).toGMTString() + "; ");d && "none" != d && (c += "domain=" + d + ";");d = M[r];M.cookie = c;if (!(d = d != M[r])) t: {a = Ca(a);for (d = 0; d < a[y]; d++) if (b == a[d]) {d = !0;break t;}d = !1;}return d;}, 
	Cc = function Cc(a) {return K(a)[Qc](/\(/g, "%28")[Qc](/\)/g, "%29");}, vc = /^(www\.)?google(\.com?)?(\.[a-z]{2})?$/, eb = /(^|\.)doubleclick\.net$/i;var oc = function oc() {return (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com";}, Da = function Da(a) {fa(this, "len");this.message = a + "-8192";}, Ea = function Ea(a) {fa(this, "ff2post");this.message = a + "-2036";}, Ga = function Ga(a, b, c, d) {c = c || ua;d && (d = c, O[oa].sendBeacon ? O[oa].sendBeacon(a, b) ? (d(), d = !0) : d = !1 : d = !1);if (!d) if (2036 >= b[y]) wc(a, b, c);else if (8192 >= b[y]) {if (0 <= O[oa].userAgent[t]("Firefox") && ![].reduce) throw new Ea(b[y]);wd(a, b, c) || xd(a, b, c) || Fa(b, c) || c();} else throw new Da(b[y]);}, wc = function wc(a, b, c) {var d = 
		ta(a + "?" + b);d.onload = d.onerror = function () {d.onload = null;d.onerror = null;c();};}, xd = function xd(a, b, c) {var d;d = O.XDomainRequest;if (!d) return !1;d = new d();d.open("POST", a);d.onerror = function () {c();};d.onload = c;d[xc](b);return !0;}, wd = function wd(a, b, c) {var d = O.XMLHttpRequest;if (!d) return !1;var e = new d();if (!("withCredentials" in e)) return !1;e.open("POST", a, !0);e.withCredentials = !0;e.setRequestHeader("Content-Type", "text/plain");e.onreadystatechange = function () {4 == e.readyState && (c(), e = null);};e[xc](b);return !0;}, Fa = function Fa(a, 
	b) {if (!M.body) return fb(function () {Fa(a, b);}), !0;a = aa(a);try {var c = M[u]('<iframe name="' + a + '"></iframe>');} catch (d) {c = M[u]("iframe"), fa(c, a);}c.height = "0";c.width = "0";c.style.display = "none";c.style.visibility = "hidden";var e = M[B], e = oc() + "/analytics_iframe.html#" + aa(e[E] + "//" + e[x] + "/favicon.ico"), g = function g() {c.src = "";c[Ub] && c[Ub].removeChild(c);};L(O, "beforeunload", g);var ca = !1, l = 0, k = function k() {if (!ca) {try {if (9 < l || c.contentWindow[B][x] == M[B][x]) {ca = !0;g();va(O, "beforeunload", g);b();return;}} catch (a) {}l++;
				ba(k, 200);}};L(c, "load", k);M.body.appendChild(c);c.src = e;return !0;};var Ha = function Ha() {this.t = [];};Ha[z].add = function (a) {this.t[p](a);};Ha[z].D = function (a) {try {for (var b = 0; b < this.t[y]; b++) {var c = a.get(this.t[b]);c && ea(c) && c[C](O, a);}} catch (d) {}b = a.get(Ia);b != ua && ea(b) && (a.set(Ia, ua, !0), ba(b, 10));};function Ja(a) {if (100 != a.get(Ka) && La(P(a, Q)) % 1E4 >= 100 * R(a, Ka)) throw "abort";}function Ma(a) {if (Aa(P(a, Na))) throw "abort";}function Oa() {var a = M[B][E];if ("http:" != a && "https:" != a) throw "abort";}
	function Pa(a) {try {O.XMLHttpRequest && "withCredentials" in new O.XMLHttpRequest() ? J(40) : O.XDomainRequest && J(41), O[oa].sendBeacon && J(42);} catch (b) {}a.set(Ac, R(a, Ac) + 1);var c = [];Qa.map(function (b, e) {if (e.p) {var g = a.get(b);void 0 != g && g != e[ia] && ("boolean" == typeof g && (g *= 1), c[p](e.p + "=" + K("" + g)));}});c[p]("z=" + Bd());a.set(Ra, c[H]("&"), !0);}function Sa(a) {var b = P(a, gd) || oc() + "/collect";Ga(b, P(a, Ra), a.get(Ia), a.get(Vd));a.set(Ia, ua, !0);}
	function Hc(a) {var b = O.gaData;b && (b.expId && a.set(Nc, b.expId), b.expVar && a.set(Oc, b.expVar));}function cd() {if (O[oa] && "preview" == O[oa].loadPurpose) throw "abort";}function yd(a) {var b = O.gaDevIds;ka(b) && 0 != b[y] && a.set("&did", b[H](","), !0);}function vb(a) {if (!a.get(Na)) throw "abort";};var hd = function hd() {return n.round(2147483647 * n.random());}, Bd = function Bd() {try {var a = new Uint32Array(1);O.crypto.getRandomValues(a);return a[0] & 2147483647;} catch (b) {return hd();}};function Ta(a) {var b = R(a, Ua);500 <= b && J(15);var c = P(a, Va);if ("transaction" != c && "item" != c) {var c = R(a, Wa), d = new Date()[da](), e = R(a, Xa);0 == e && a.set(Xa, d);e = n.round(2 * (d - e) / 1E3);0 < e && (c = n.min(c + e, 20), a.set(Xa, d));if (0 >= c) throw "abort";a.set(Wa, --c);}a.set(Ua, ++b);};var Ya = function Ya() {this.data = new N();}, Qa = new N(), Za = [];Ya[z].get = function (a) {var b = $a(a), c = this[q].get(a);b && void 0 == c && (c = ea(b[ia]) ? b[ia]() : b[ia]);return b && b.n ? b.n(this, a, c) : c;};var P = function P(a, b) {var c = a.get(b);return void 0 == c ? "" : "" + c;}, R = function R(a, b) {var c = a.get(b);return void 0 == c || "" === c ? 0 : 1 * c;};Ya[z].set = function (a, b, c) {if (a) if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) for (var d in a) a[ra](d) && ab(this, d, a[d], c);else ab(this, a, b, c);};
	var ab = function ab(a, b, c, d) {if (void 0 != c) switch (b) {case Na:wb[s](c);}var e = $a(b);e && e.o ? e.o(a, b, c, d) : a[q].set(b, c, d);}, bb = function bb(a, b, c, d, e) {fa(this, a);this.p = b;this.n = d;this.o = e;this.defaultValue = c;}, $a = function $a(a) {var b = Qa.get(a);if (!b) for (var c = 0; c < Za[y]; c++) {var d = Za[c], e = d[0].exec(a);if (e) {b = d[1](e);Qa.set(b[v], b);break;}}return b;}, yc = function yc(a) {var b;Qa.map(function (c, d) {d.p == a && (b = d);});return b && b[v];}, S = function S(a, b, c, d, e) {a = new bb(a, b, c, d, e);Qa.set(a[v], a);return a[v];}, cb = function cb(a, b) {Za[p]([new RegExp("^" + 
		a + "$"), b]);}, T = function T(a, b, c) {return S(a, b, c, void 0, db);}, db = function db() {};var gb = qa(f.GoogleAnalyticsObject) && sa(f.GoogleAnalyticsObject) || "ga", Ba = !1, hb = T("apiVersion", "v"), ib = T("clientVersion", "_v");S("anonymizeIp", "aip");var jb = S("adSenseId", "a"), Va = S("hitType", "t"), Ia = S("hitCallback"), Ra = S("hitPayload");S("nonInteraction", "ni");S("currencyCode", "cu");var Vd = S("useBeacon", void 0, !1);S("dataSource", "ds");S("sessionControl", "sc", "");S("sessionGroup", "sg");S("queueTime", "qt");var Ac = S("_s", "_s");S("screenName", "cd");
	var kb = S("location", "dl", ""), lb = S("referrer", "dr"), mb = S("page", "dp", "");S("hostname", "dh");var nb = S("language", "ul"), ob = S("encoding", "de");S("title", "dt", function () {return M.title || void 0;});cb("contentGroup([0-9]+)", function (a) {return new bb(a[0], "cg" + a[1]);});var pb = S("screenColors", "sd"), qb = S("screenResolution", "sr"), rb = S("viewportSize", "vp"), sb = S("javaEnabled", "je"), tb = S("flashVersion", "fl");S("campaignId", "ci");S("campaignName", "cn");S("campaignSource", "cs");S("campaignMedium", "cm");
	S("campaignKeyword", "ck");S("campaignContent", "cc");var ub = S("eventCategory", "ec"), xb = S("eventAction", "ea"), yb = S("eventLabel", "el"), zb = S("eventValue", "ev"), Bb = S("socialNetwork", "sn"), Cb = S("socialAction", "sa"), Db = S("socialTarget", "st"), Eb = S("l1", "plt"), Fb = S("l2", "pdt"), Gb = S("l3", "dns"), Hb = S("l4", "rrt"), Ib = S("l5", "srt"), Jb = S("l6", "tcp"), Kb = S("l7", "dit"), Lb = S("l8", "clt"), Mb = S("timingCategory", "utc"), Nb = S("timingVar", "utv"), Ob = S("timingLabel", "utl"), Pb = S("timingValue", "utt");S("appName", "an");
	S("appVersion", "av", "");S("appId", "aid", "");S("appInstallerId", "aiid", "");S("exDescription", "exd");S("exFatal", "exf");var Nc = S("expId", "xid"), Oc = S("expVar", "xvar"), Rc = S("_utma", "_utma"), Sc = S("_utmz", "_utmz"), Tc = S("_utmht", "_utmht"), Ua = S("_hc", void 0, 0), Xa = S("_ti", void 0, 0), Wa = S("_to", void 0, 20);cb("dimension([0-9]+)", function (a) {return new bb(a[0], "cd" + a[1]);});cb("metric([0-9]+)", function (a) {return new bb(a[0], "cm" + a[1]);});S("linkerParam", void 0, void 0, Bc, db);
	var ld = S("usage", "_u", void 0, function () {return pa.M();}, db);S("forceSSL", void 0, void 0, function () {return Ba;}, function (a, b, c) {J(34);Ba = !!c;});var ed = S("_j1", "jid"), Hd = S("_j2", "gjid");cb("\\&(.*)", function (a) {var b = new bb(a[0], a[1]), c = yc(a[0][F](1));c && (b.n = function (a) {return a.get(c);}, b.o = function (a, b, g, ca) {a.set(c, g, ca);}, b.p = void 0);return b;});
	var Qb = T("_oot"), dd = S("previewTask"), Rb = S("checkProtocolTask"), md = S("validationTask"), Sb = S("checkStorageTask"), Uc = S("historyImportTask"), Tb = S("samplerTask"), Vb = T("_rlt"), Wb = S("buildHitTask"), Xb = S("sendHitTask"), Vc = S("ceTask"), zd = S("devIdTask"), Cd = S("timingTask"), Ld = S("displayFeaturesTask"), V = T("name"), Q = T("clientId", "cid"), Ad = S("userId", "uid"), Na = T("trackingId", "tid"), U = T("cookieName", void 0, "_ga"), W = T("cookieDomain"), Yb = T("cookiePath", void 0, "/"), Zb = T("cookieExpires", void 0, 63072E3), $b = T("legacyCookieDomain"), 
	Wc = T("legacyHistoryImport", void 0, !0), ac = T("storage", void 0, "cookie"), bc = T("allowLinker", void 0, !1), cc = T("allowAnchor", void 0, !0), Ka = T("sampleRate", "sf", 100), dc = T("siteSpeedSampleRate", void 0, 1), ec = T("alwaysSendReferrer", void 0, !1), gd = S("transportUrl"), Md = S("_r", "_r");
	function X(a, b, c, d) {b[a] = function () {try {return d && J(d), c[G](this, arguments);} catch (b) {var g = b && b[v];if (!(1 <= 100 * n.random() || Aa("?"))) {var ca = ["t=error", "_e=exc", "_v=j31", "sr=1"];a && ca[p]("_f=" + a);g && ca[p]("_m=" + K(g[F](0, 100)));ca[p]("aip=1");ca[p]("z=" + hd());Ga(oc() + "/collect", ca[H]("&"));}throw b;}};};var Od = function Od() {this.V = 1E4;this.fa = void 0;this.$ = !1;this.ea = 1;}, Ed = function Ed() {var a = new Od(), b;if (a.fa && a.$) return 0;a.$ = !0;if (0 == a.V) return 0;void 0 === b && (b = Bd());return 0 == b % a.V ? n.floor(b / a.V) % a.ea + 1 : 0;};function fc() {var a, b, c;if ((c = (c = O[oa]) ? c.plugins : null) && c[y]) for (var d = 0; d < c[y] && !b; d++) {var e = c[d];-1 < e[v][t]("Shockwave Flash") && (b = e.description);}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"), b = a.GetVariable("$version");} catch (g) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), b = "WIN 6,0,21,0", a.AllowScriptAccess = "always", b = a.GetVariable("$version");} catch (ca) {}if (!b) try {a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), b = a.GetVariable("$version");} catch (l) {}b && (
		a = b[m](/[\d]+/g)) && 3 <= a[y] && (b = a[0] + "." + a[1] + " r" + a[2]);return b || void 0;};var gc = function gc(a, b) {var c = n.min(R(a, dc), 100);if (!(La(P(a, Q)) % 100 >= c) && (c = {}, Ec(c) || Fc(c))) {var d = c[Eb];void 0 == d || Infinity == d || isNaN(d) || (0 < d ? (Y(c, Gb), Y(c, Jb), Y(c, Ib), Y(c, Fb), Y(c, Hb), Y(c, Kb), Y(c, Lb), b(c)) : L(O, "load", function () {gc(a, b);}, !1));}}, Ec = function Ec(a) {var b = O.performance || O.webkitPerformance, b = b && b.timing;if (!b) return !1;var c = b.navigationStart;if (0 == c) return !1;a[Eb] = b.loadEventStart - c;a[Gb] = b.domainLookupEnd - b.domainLookupStart;a[Jb] = b.connectEnd - b.connectStart;a[Ib] = b.responseStart - b.requestStart;
		a[Fb] = b.responseEnd - b.responseStart;a[Hb] = b.fetchStart - c;a[Kb] = b.domInteractive - c;a[Lb] = b.domContentLoadedEventStart - c;return !0;}, Fc = function Fc(a) {if (O.top != O) return !1;var b = O.external, c = b && b.onloadT;b && !b.isValidLoadTime && (c = void 0);2147483648 < c && (c = void 0);0 < c && b.setPageReadyTime();if (void 0 == c) return !1;a[Eb] = c;return !0;}, Y = function Y(a, b) {var c = a[b];if (isNaN(c) || Infinity == c || 0 > c) a[b] = void 0;}, Fd = function Fd(a) {return function (b) {"pageview" != b.get(Va) || a.I || (a.I = !0, gc(b, function (b) {a[xc]("timing", b);}));};};var hc = !1, mc = function mc(a) {if ("cookie" == P(a, ac)) {var b = P(a, U), c = nd(a), d = kc(P(a, Yb)), e = lc(P(a, W)), g = 1E3 * R(a, Zb), ca = P(a, Na);if ("auto" != e) zc(b, c, d, e, ca, g) && (hc = !0);else {J(32);var l;t: {c = [];e = xa()[A](".");if (4 == e[y] && (l = e[e[y] - 1], parseInt(l, 10) == l)) {l = ["none"];break t;}for (l = e[y] - 2; 0 <= l; l--) c[p](e[ha](l)[H]("."));c[p]("none");l = c;}for (var k = 0; k < l[y]; k++) if ((e = l[k], a[q].set(W, e), c = nd(a), zc(b, c, d, e, ca, g))) {hc = !0;return;}a[q].set(W, "auto");}}}, nc = function nc(a) {if ("cookie" == P(a, ac) && !hc && (mc(a), !hc)) throw "abort";}, 
	Yc = function Yc(a) {if (a.get(Wc)) {var b = P(a, W), c = P(a, $b) || xa(), d = Xc("__utma", c, b);d && (J(19), a.set(Tc, new Date()[da](), !0), a.set(Rc, d.R), (b = Xc("__utmz", c, b)) && d[h] == b[h] && a.set(Sc, b.R));}}, nd = function nd(a) {var b = Cc(P(a, Q)), c = ic(P(a, W));a = jc(P(a, Yb));1 < a && (c += "-" + a);return ["GA1", c, b][H](".");}, Gc = function Gc(a, b, c) {for (var d = [], e = [], g, ca = 0; ca < a[y]; ca++) {var l = a[ca];if (l.r[c] == b) d[p](l);else void 0 == g || l.r[c] < g ? (e = [l], g = l.r[c]) : l.r[c] == g && e[p](l);}return 0 < d[y] ? d : e;}, lc = function lc(a) {return 0 == a[t](".") ? a.substr(1) : 
		a;}, ic = function ic(a) {return lc(a)[A](".")[y];}, kc = function kc(a) {if (!a) return "/";1 < a[y] && a.lastIndexOf("/") == a[y] - 1 && (a = a.substr(0, a[y] - 1));0 != a[t]("/") && (a = "/" + a);return a;}, jc = function jc(a) {a = kc(a);return "/" == a ? 1 : a[A]("/")[y];};function Xc(a, b, c) {"none" == b && (b = "");var d = [], e = Ca(a);a = "__utma" == a ? 6 : 2;for (var g = 0; g < e[y]; g++) {var ca = ("" + e[g])[A](".");ca[y] >= a && d[p]({ hash: ca[0], R: e[g], O: ca });}return 0 == d[y] ? void 0 : 1 == d[y] ? d[0] : Zc(b, d) || Zc(c, d) || Zc(null, d) || d[0];}function Zc(a, b) {var c, d;null == a ? c = d = 1 : (c = La(a), d = La(D(a, ".") ? a[F](1) : "." + a));for (var e = 0; e < b[y]; e++) if (b[e][h] == c || b[e][h] == d) return b[e];};var od = new RegExp(/^https?:\/\/([^\/:]+)/), pd = /(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/;function Bc(a) {a = a.get(Q);var b = Ic(a, 0);return "_ga=1." + K(b + "." + a);}function Ic(a, b) {for (var c = new Date(), d = O[oa], e = d.plugins || [], c = [a, d.userAgent, c.getTimezoneOffset(), c.getYear(), c.getDate(), c.getHours(), c.getMinutes() + b], d = 0; d < e[y]; ++d) c[p](e[d].description);return La(c[H]("."));}var Dc = function Dc(a) {J(48);this.target = a;this.T = !1;};
	Dc[z].Q = function (a, b) {if (a.tagName) {if ("a" == a.tagName[I]()) {a[Ab] && Pc(a, qd(this, a[Ab], b));return;}if ("form" == a.tagName[I]()) return rd(this, a);}if ("string" == typeof a) return qd(this, a, b);};
	var qd = function qd(a, b, c) {var d = pd.exec(b);d && 3 <= d[y] && (b = d[1] + (d[3] ? d[2] + d[3] : ""));a = a[jd].get("linkerParam");var e = b[t]("?"), d = b[t]("#");c ? b += (-1 == d ? "#" : "&") + a : (c = -1 == e ? "?" : "&", b = -1 == d ? b + (c + a) : b[F](0, d) + c + a + b[F](d));return b;}, rd = function rd(a, b) {if (b && b[kd]) {var c = a[jd].get("linkerParam")[A]("=")[1];if ("get" == b.method[I]()) {for (var d = b.childNodes || [], e = 0; e < d[y]; e++) if ("_ga" == d[e][v]) {d[e][id]("value", c);return;}d = M[u]("input");d[id]("type", "hidden");d[id]("name", "_ga");d[id]("value", c);b.appendChild(d);} else "post" == 
			b.method[I]() && (b.action = qd(a, b[kd]));}};
	Dc[z].S = function (a, b, c) {function d(c) {try {c = c || O.event;var d;t: {var g = c[jd] || c.srcElement;for (c = 100; g && 0 < c;) {if (g[Ab] && g.nodeName[m](/^a(?:rea)?$/i)) {d = g;break t;}g = g[Ub];c--;}d = {};}("http:" == d[E] || "https:" == d[E]) && sd(a, d[ma] || "") && d[Ab] && Pc(d, qd(e, d[Ab], b));} catch (w) {J(26);}}var e = this;this.T || (this.T = !0, L(M, "mousedown", d, !1), L(M, "touchstart", d, !1), L(M, "keyup", d, !1));if (c) {c = function (b) {b = b || O.event;if ((b = b[jd] || b.srcElement) && b[kd]) {var c = b[kd][m](od);c && sd(a, c[1]) && rd(e, b);}};for (var g = 0; g < M.forms[y]; g++) L(M.forms[g], 
			"submit", c);}};function sd(a, b) {if (b == M[B][ma]) return !1;for (var c = 0; c < a[y]; c++) if (a[c] instanceof RegExp) {if (a[c][s](b)) return !0;} else if (0 <= b[t](a[c])) return !0;return !1;};var Jd = function Jd(a, b, c, d) {this.U = b;this.aa = c;(b = d) || (b = (b = P(a, V)) && "t0" != b ? Wd[s](b) ? "_gat_" + Cc(P(a, Na)) : "_gat_" + Cc(b) : "_gat");this.Y = b;}, Rd = function Rd(a, b) {var c = b.get(Wb);b.set(Wb, function (b) {Pd(a, b);var d = c(b);Qd(a, b);return d;});var d = b.get(Xb);b.set(Xb, function (b) {var c = d(b);Id(a, b);return c;});}, Pd = function Pd(a, b) {b.get(a.U) || ("1" == Ca(a.Y)[0] ? b.set(a.U, "", !0) : b.set(a.U, "" + hd(), !0));}, Qd = function Qd(a, b) {b.get(a.U) && zc(a.Y, "1", b.get(Yb), b.get(W), b.get(Na), 6E5);}, Id = function Id(a, b) {if (b.get(a.U)) {var c = new N(), 
			d = function d(a) {c.set($a(a).p, b.get(a));};d(hb);d(ib);d(Na);d(Q);d(a.U);d(ld);var e = a.aa;c.map(function (a, b) {e += K(a) + "=";e += K("" + b) + "&";});e += "z=" + hd();ta(e);b.set(a.U, "", !0);}}, Wd = /^gtm\d+$/;var fd = function fd(a, b) {var c = a.b;if (!c.get("dcLoaded")) {J(29);O._gaq && J(52);b = b || {};var d;b[U] && (d = Cc(b[U]));d = new Jd(c, ed, "https://stats.g.doubleclick.net/collect?t=dc&aip=1&", d);Rd(d, c);c.set("dcLoaded", !0);}};var Sd = function Sd(a) {var b;b = a.get("dcLoaded") ? !1 : "cookie" != a.get(ac) ? !1 : !0;b && (J(51), b = new Jd(a, ed), Pd(b, a), Qd(b, a), a.get(b.U) && (a.set(Md, 1, !0), a.set(gd, oc() + "/r/collect", !0)));};var Kd = function Kd(a, b) {var c = a.b;if (!c.get("_rlsaLoaded")) {J(38);b = b || {};if (b[U]) var d = Cc(b[U]);d = new Jd(c, Hd, "https://www.google.com/ads/ga-audiences?t=sr&aip=1&", d);Rd(d, c);c.set("_rlsaLoaded", !0);tc("displayfeatures", a, b);}};var Lc = function Lc() {var a = O.gaGlobal = O.gaGlobal || {};return a.hid = a.hid || hd();};var ad, bd = function bd(a, b, c) {if (!ad) {var d;d = M[B][h];var e = O[v], g = /^#?gaso=([^&]*)/;if (e = (d = (d = d && d[m](g) || e && e[m](g)) ? d[1] : Ca("GASO")[0] || "") && d[m](/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i)) zc("GASO", "" + d, c, b, a, 0), f._udo || (f._udo = b), f._utcp || (f._utcp = c), a = e[1], wa("https://www.google.com/analytics/web/inpage/pub/inpage.js?" + (a ? "prefix=" + a + "&" : "") + hd(), "_gasojs");ad = !0;}};var wb = /^(UA|YT|MO|GP)-(\d+)-(\d+)$/, pc = function pc(a) {function b(a, b) {d.b[q].set(a, b);}function c(a, c) {b(a, c);d.filters.add(a);}var d = this;this.b = new Ya();this.filters = new Ha();b(V, a[V]);b(Na, sa(a[Na]));b(U, a[U]);b(W, a[W] || xa());b(Yb, a[Yb]);b(Zb, a[Zb]);b($b, a[$b]);b(Wc, a[Wc]);b(bc, a[bc]);b(cc, a[cc]);b(Ka, a[Ka]);b(dc, a[dc]);b(ec, a[ec]);b(ac, a[ac]);b(Ad, a[Ad]);b(hb, 1);b(ib, "j31");c(Qb, Ma);c(dd, cd);c(Rb, Oa);c(md, vb);c(Sb, nc);c(Uc, Yc);c(Tb, Ja);c(Vb, Ta);c(Vc, Hc);c(zd, yd);c(Ld, Sd);c(Wb, Pa);c(Xb, Sa);c(Cd, Fd(this));
		Jc(this.b, a[Q]);Kc(this.b);this.b.set(jb, Lc());bd(this.b.get(Na), this.b.get(W), this.b.get(Yb));}, Jc = function Jc(a, b) {if ("cookie" == P(a, ac)) {hc = !1;var c;i: {var d = Ca(P(a, U));if (d && !(1 > d[y])) {c = [];for (var e = 0; e < d[y]; e++) {var g;g = d[e][A](".");var ca = g.shift();("GA1" == ca || "1" == ca) && 1 < g[y] ? (ca = g.shift()[A]("-"), 1 == ca[y] && (ca[1] = "1"), ca[0] *= 1, ca[1] *= 1, g = { r: ca, s: g[H](".") }) : g = void 0;g && c[p](g);}if (1 == c[y]) {J(13);c = c[0].s;break i;}if (0 == c[y]) J(12);else {J(14);d = ic(P(a, W));c = Gc(c, d, 0);if (1 == c[y]) {c = c[0].s;break i;}d = 
						jc(P(a, Yb));c = Gc(c, d, 1);c = c[0] && c[0].s;break i;}}c = void 0;}c || (c = P(a, W), d = P(a, $b) || xa(), c = Xc("__utma", d, c), (c = void 0 == c ? void 0 : c.O[1] + "." + c.O[2]) && J(10));c && (a[q].set(Q, c), hc = !0);}c = a.get(cc);if (e = (c = M[B][c ? "href" : "search"][m]("(?:&|#|\\?)" + K("_ga")[Qc](/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + "=([^&#]*)")) && 2 == c[y] ? c[1] : "") a.get(bc) ? (c = e[t]("."), -1 == c ? J(22) : (d = e[F](c + 1), "1" != e[F](0, c) ? J(22) : (c = d[t]("."), -1 == c ? J(22) : (e = d[F](0, c), c = d[F](c + 1), e != Ic(c, 0) && e != Ic(c, -1) && e != Ic(c, -2) ? J(23) : (J(11), a[q].set(Q, c)))))) : 
		J(21);b && (J(9), a[q].set(Q, K(b)));a.get(Q) || ((c = (c = O.gaGlobal && O.gaGlobal.vid) && -1 != c[ga](/^(?:utma\.)?\d+\.\d+$/) ? c : void 0) ? (J(17), a[q].set(Q, c)) : (J(8), a[q].set(Q, [hd() ^ Mc() & 2147483647, n.round(new Date()[da]() / 1E3)][H]("."))));mc(a);}, Kc = function Kc(a) {var b = O[oa], c = O.screen, d = M[B];a.set(lb, ya(a.get(ec)));if (d) {var e = d.pathname || "";"/" != e.charAt(0) && (J(31), e = "/" + e);a.set(kb, d[E] + "//" + d[ma] + e + d[ga]);}c && a.set(qb, c.width + "x" + c.height);c && a.set(pb, c.colorDepth + "-bit");var c = M.documentElement, g = (e = M.body) && 
		e[la] && e[na], ca = [];c && c[la] && c[na] && ("CSS1Compat" === M.compatMode || !g) ? ca = [c[la], c[na]] : g && (ca = [e[la], e[na]]);c = 0 >= ca[0] || 0 >= ca[1] ? "" : ca[H]("x");a.set(rb, c);a.set(tb, fc());a.set(ob, M.characterSet || M.charset);a.set(sb, b && "function" === typeof b.javaEnabled && b.javaEnabled() || !1);a.set(nb, (b && (b.language || b.browserLanguage) || "")[I]());if (d && a.get(cc) && (b = M[B][h])) {b = b[A](/[?&#]+/);d = [];for (c = 0; c < b[y]; ++c) (D(b[c], "utm_id") || D(b[c], "utm_campaign") || D(b[c], "utm_source") || D(b[c], "utm_medium") || D(b[c], "utm_term") || 
			D(b[c], "utm_content") || D(b[c], "gclid") || D(b[c], "dclid") || D(b[c], "gclsrc")) && d[p](b[c]);0 < d[y] && (b = "#" + d[H]("&"), a.set(kb, a.get(kb) + b));}};pc[z].get = function (a) {return this.b.get(a);};pc[z].set = function (a, b) {this.b.set(a, b);};var qc = { pageview: [mb], event: [ub, xb, yb, zb], social: [Bb, Cb, Db], timing: [Mb, Nb, Pb, Ob] };
	pc[z].send = function (a) {if (!(1 > arguments[y])) {var b, c;"string" === typeof arguments[0] ? (b = arguments[0], c = [][ha][C](arguments, 1)) : (b = arguments[0] && arguments[0][Va], c = arguments);b && (c = za(qc[b] || [], c), c[Va] = b, this.b.set(c, void 0, !0), this.filters.D(this.b), this.b[q].m = {}, J(44));}};var rc = function rc(a) {if ("prerender" == M.visibilityState) return !1;a();return !0;};var td = /^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/, sc = function sc(a) {if (ea(a[0])) this.u = a[0];else {var b = td.exec(a[0]);null != b && 4 == b[y] && (this.c = b[1] || "t0", this.e = b[2] || "", this.d = b[3], this.a = [][ha][C](a, 1), this.e || (this.A = "create" == this.d, this.i = "require" == this.d, this.g = "provide" == this.d, this.ba = "remove" == this.d), this.i && (3 <= this.a[y] ? (this.X = this.a[1], this.W = this.a[2]) : this.a[1] && (qa(this.a[1]) ? this.X = this.a[1] : this.W = this.a[1])));b = a[1];a = a[2];if (!this.d) throw "abort";if (this.i && (!qa(b) || "" == b)) throw "abort";if (this.g && (
			!qa(b) || "" == b || !ea(a))) throw "abort";if (ud(this.c) || ud(this.e)) throw "abort";if (this.g && "t0" != this.c) throw "abort";}};function ud(a) {return 0 <= a[t](".") || 0 <= a[t](":");};var Yd, Zd, $d;Yd = new N();$d = new N();Zd = { ec: 45, ecommerce: 46, linkid: 47 };
	var tc = function tc(a, b, c) {b == $ ? J(35) : b.get(V);var d = Yd.get(a);if (!ea(d)) return !1;b.plugins_ = b.plugins_ || new N();if (b.plugins_.get(a)) return !0;b.plugins_.set(a, new d(b, c || {}));return !0;}, ae = function ae(a) {function b(a) {var b = (a[ma] || "")[A](":")[0][I](), c = (a[E] || "")[I](), c = 1 * a[ja] || ("http:" == c ? 80 : "https:" == c ? 443 : "");a = a.pathname || "";D(a, "/") || (a = "/" + a);return [b, "" + c, a];}var c = M[u]("a");Pc(c, M[B][Ab]);var d = (c[E] || "")[I](), e = b(c), g = c[ga] || "", ca = d + "//" + e[0] + (e[1] ? ":" + e[1] : "");D(a, "//") ? a = d + a : D(a, "/") ? a = ca + a : !a || 
		D(a, "?") ? a = ca + e[2] + (a || g) : 0 > a[A]("/")[0][t](":") && (a = ca + e[2][F](0, e[2].lastIndexOf("/")) + "/" + a);Pc(c, a);d = b(c);return { protocol: (c[E] || "")[I](), host: d[0], port: d[1], path: d[2], G: c[ga] || "", url: a || "" };};var Z = { ga: function ga() {Z.f = [];} };Z.ga();Z.D = function (a) {var b = Z.J[G](Z, arguments), b = Z.f.concat(b);for (Z.f = []; 0 < b[y] && !Z.v(b[0]) && !(b.shift(), 0 < Z.f[y]););Z.f = Z.f.concat(b);};
	Z.J = function (a) {for (var b = [], c = 0; c < arguments[y]; c++) try {var d = new sc(arguments[c]);if (d.g) Yd.set(d.a[0], d.a[1]);else {if (d.i) {var e = d, g = e.a[0];if (!ea(Yd.get(g)) && !$d.get(g)) {Zd[ra](g) && J(Zd[g]);var ca = e.X;!ca && Zd[ra](g) ? (J(39), ca = g + ".js") : J(43);if (ca) {ca && 0 <= ca[t]("/") || (ca = (Ba || "https:" == M[B][E] ? "https:" : "http:") + "//www.google-analytics.com/plugins/ua/" + ca);var l = ae(ca), e = void 0;var k = l[E], w = M[B][E], e = "https:" == k || k == w ? !0 : "http:" != k ? !1 : "http:" == w;var Xd;if (Xd = e) {var e = l, be = ae(M[B][Ab]);if (e.G || 0 <= 
								e.url[t]("?") || 0 <= e.path[t]("://")) Xd = !1;else if (e[x] == be[x] && e[ja] == be[ja]) Xd = !0;else {var ce = "http:" == e[E] ? 80 : 443;Xd = "www.google-analytics.com" == e[x] && (e[ja] || ce) == ce && D(e.path, "/plugins/") ? !0 : !1;}}Xd && (wa(l.url), $d.set(g, !0));}}}b[p](d);}} catch (de) {}return b;};
	Z.v = function (a) {try {if (a.u) a.u[C](O, $.j("t0"));else {var b = a.c == gb ? $ : $.j(a.c);if (a.A) "t0" == a.c && $.create[G]($, a.a);else if (a.ba) $.remove(a.c);else if (b) if (a.i) {if (!tc(a.a[0], b, a.W)) return !0;} else if (a.e) {var c = a.d, d = a.a, e = b.plugins_.get(a.e);e[c][G](e, d);} else b[a.d][G](b, a.a);}} catch (g) {}};var $ = function $(a) {J(1);Z.D[G](Z, [arguments]);};$.h = {};$.P = [];$.L = 0;$.answer = 42;var uc = [Na, W, V];$.create = function (a) {var b = za(uc, [][ha][C](arguments));b[V] || (b[V] = "t0");var c = "" + b[V];if ($.h[c]) return $.h[c];b = new pc(b);$.h[c] = b;$.P[p](b);return b;};$.remove = function (a) {for (var b = 0; b < $.P[y]; b++) if ($.P[b].get(V) == a) {$.P.splice(b, 1);$.h[a] = null;break;}};$.j = function (a) {return $.h[a];};$.K = function () {return $.P[ha](0);};
	$.N = function () {"ga" != gb && J(49);var a = O[gb];if (!a || 42 != a.answer) {$.L = a && a.l;$.loaded = !0;var b = O[gb] = $;X("create", b, b.create, 3);X("remove", b, b.remove);X("getByName", b, b.j, 5);X("getAll", b, b.K, 6);b = pc[z];X("get", b, b.get, 7);X("set", b, b.set, 4);X("send", b, b[xc], 2);b = Ya[z];X("get", b, b.get);X("set", b, b.set);t: for (var b = M.getElementsByTagName("script"), c = 0; c < b[y] && 100 > c; c++) {var d;d = (d = b[c].src) ? 0 != d[t]("https://www.google-analytics.com/analytics") ? !1 : !0 : !1;if (d) {J(33);break t;}}"https:" != M[B][E] && !Ba && Ed() && (
			J(36), Ba = !0);(O.gaplugins = O.gaplugins || {}).Linker = Dc;b = Dc[z];Yd.set("linker", Dc);X("decorate", b, b.Q, 20);X("autoLink", b, b.S, 25);Yd.set("displayfeatures", fd);Yd.set("adfeatures", Kd);a = a && a.q;ka(a) ? Z.D[G]($, a) : J(50);}};$.k = function () {for (var a = $.K(), b = 0; b < a[y]; b++) a[b].get(V);};(function () {var a = $.N;if (!rc(a)) {J(16);var b = !1, c = function c() {!b && rc(a) && (b = !0, va(M, "visibilitychange", c));};L(M, "visibilitychange", c);}})();function La(a) {var b = 1, c = 0, d;if (a) for (b = 0, d = a[y] - 1; 0 <= d; d--) c = a.charCodeAt(d), b = (b << 6 & 268435455) + c + (c << 14), c = b & 266338304, b = 0 != c ? b ^ c >> 21 : b;return b;};})(window);

//mix panel
(function (f, b) {
	if (!b.__SV) {var a, e, i, g;
		window.mixpanel = b;b._i = [];
		b.init = function (a, e, d) {
			function f(b, h) {
				var a = h.split(".");
				2 == a.length && (b = b[a[0]], h = a[1]);
				b[h] = function () {
					b.push([h].concat(Array.prototype.slice.call(arguments, 0)));};}

			var c = b;
			"undefined" !== typeof d ? c = b[d] = [] : d = "mixpanel";
			c.people = c.people || [];
			c.toString = function (b) {var a = "mixpanel";"mixpanel" !== d && (a += "." + d);b || (a += " (stub)");
				return a;};

			c.people.toString = function () {
				return c.toString(1) + ".people (stub)";};
			i = "disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");
			for (g = 0; g < i.length; g++) f(c, i[g]);
			b._i.push([a, e, d]);};
		b.__SV = 1.2;
		a = f.createElement("script");
		a.type = "text/javascript";a.async = !0;
		a.src = "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
		e = f.getElementsByTagName("script")[0];
		//e.parentNode.insertBefore(a,e)
	}})(document, window.mixpanel || []);

if (config.app === 'app') {

	// mixpanel 

	(function () {
		var n = !0, p = null, s = !1;function C() {return function () {};}
		(function (r) {function o() {}function i() {}function F(a, b, e) {var f, d = "mixpanel" === e ? r : r[e];if (d && !c.isArray(d)) q.error("You have already initialized " + e);else return f = new i(), f.Fa(a, b, e), f.people = new o(), f.people.Fa(f), w = w || f.d("debug"), c.h(d) || (f.Da.call(f.people, d.people), f.Da(d)), f;}function m(a) {this.props = {};this.kb = s;this.name = a.cookie_name ? "mp_" + a.cookie_name : "mp_" + a.token + "_mixpanel";this.load();this.Kb(a);this.Qc(a);this.save();}function G() {this.Ab = "submit";}function A() {this.Ab = "click";}function v() {}
			function x() {if (!x.tc) K = x.tc = n, L = s, c.a(y, function (a) {a.Wb();});}var J = Array.prototype, N = Function.prototype, z = Object.prototype, B = J.slice, D = z.toString, H = z.hasOwnProperty, u = window.console, E = window.navigator, k = window.document, t = E.userAgent, O = "__mps,__mpso,__mpa,__mpap,$people_distinct_id,__alias,__cmpns".split(","), z = r && r.__SV || 0, I = window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest(), L = !I && -1 == t.indexOf("MSIE") && -1 == t.indexOf("Mozilla"), c = {}, w = s, P = { api_host: ("https:" == k.location.protocol ? "https://" : 
				"http://") + "api.mixpanel.com", cross_subdomain_cookie: n, cookie_name: "", loaded: C(), store_google: n, save_referrer: n, test: s, verbose: s, img: s, track_pageview: n, debug: s, track_links_timeout: 300, cookie_expiration: 365, upgrade: s, disable_cookie: s, secure_cookie: s, ip: n }, K = s;(function () {var a = N.bind, b = J.forEach, e = J.indexOf, f = Array.isArray, d = {};c.bind = function (b, e) {var d, f;if (a && b.bind === a) return a.apply(b, B.call(arguments, 1));if (!c.wb(b)) throw new TypeError();d = B.call(arguments, 2);return f = function () {if (!(this instanceof 
						f)) return b.apply(e, d.concat(B.call(arguments)));ctor.prototype = b.prototype;var a = new ctor();ctor.prototype = p;var c = b.apply(a, d.concat(B.call(arguments)));return Object(c) === c ? c : a;};};c.ic = function (a) {for (var b in a) "function" === typeof a[b] && (a[b] = c.bind(a[b], a));};var l = c.a = function (a, e, c) {if (a != p) if (b && a.forEach === b) a.forEach(e, c);else if (a.length === +a.length) for (var f = 0, l = a.length; f < l && !(f in a && e.call(c, a[f], f, a) === d); f++);else for (f in a) if (H.call(a, f) && e.call(c, a[f], f, a) === d) break;};c.p = function (a) {a && 
					c.Ua(a) && (a = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;"));return a;};c.extend = function (a) {l(B.call(arguments, 1), function (b) {for (var e in b) void 0 !== b[e] && (a[e] = b[e]);});return a;};c.isArray = f || function (a) {return "[object Array]" === D.call(a);};c.wb = function (a) {try {return (/^\s*\bfunction\b/.test(a));} catch (b) {return s;}};c.xc = function (a) {return !(!a || !H.call(a, "callee"));};c.$ = function (a) {return !a ? [] : a.$ ? a.$() : c.isArray(a) || c.xc(a) ? B.call(a) : c.Sc(a);};
				c.Sc = function (a) {var b = [];if (a == p) return b;l(a, function (a) {b[b.length] = a;});return b;};c.Wc = function (a) {return a;};c.sb = function (a, b) {var c = s;if (a == p) return c;if (e && a.indexOf === e) return -1 != a.indexOf(b);l(a, function (a) {if (c || (c = a === b)) return d;});return c;};c.o = function (a, b) {return -1 !== a.indexOf(b);};})();c.ub = function (a, b) {a.prototype = new b();a.Lc = b.prototype;};c.j = function (a) {return a === Object(a) && !c.isArray(a);};c.W = function (a) {if (c.j(a)) {for (var b in a) if (H.call(a, b)) return s;return n;}return s;};c.h = function (a) {return void 0 === 
				a;};c.Ua = function (a) {return "[object String]" == D.call(a);};c.yc = function (a) {return "[object Date]" == D.call(a);};c.zc = function (a) {return "[object Number]" == D.call(a);};c.ob = function (a) {c.a(a, function (b, e) {c.yc(b) ? a[e] = c.uc(b) : c.j(b) && (a[e] = c.ob(b));});return a;};c.uc = function (a) {function b(a) {return 10 > a ? "0" + a : a;}return a.getUTCFullYear() + "-" + b(a.getUTCMonth() + 1) + "-" + b(a.getUTCDate()) + "T" + b(a.getUTCHours()) + ":" + b(a.getUTCMinutes()) + ":" + b(a.getUTCSeconds());};c.s = function (a) {return function () {try {a.apply(this, 
						arguments);} catch (b) {q.na("Implementation error. Please contact support@mixpanel.com.");}};};c.Cb = function (a, b) {for (var e = 0; e < b.length; e++) a.prototype[b[e]] = c.s(a.prototype[b[e]]);};c.ra = function (a) {var b = {};c.a(a, function (a, f) {c.Ua(a) && 0 < a.length && (b[f] = a);});return b;};c.truncate = function (a, b) {var e;"string" === typeof a ? e = a.slice(0, b) : c.isArray(a) ? (e = [], c.a(a, function (a) {e.push(c.truncate(a, b));})) : c.j(a) ? (e = {}, c.a(a, function (a, d) {e[d] = c.truncate(a, b);})) : e = a;return e;};c.ca = (function () {return function (a) {function b(a, 
					c) {var l = "", j = 0, h = j = "", h = 0, g = l, i = [], k = c[a];k && "object" === (typeof k === "undefined" ? "undefined" : _typeof(k)) && "function" === typeof k.toJSON && (k = k.toJSON(a));switch (typeof k === "undefined" ? "undefined" : _typeof(k)) {case "string":return e(k);case "number":return isFinite(k) ? "" + k : "null";case "boolean":case "null":return "" + k;case "object":if (!k) return "null";l += "    ";i = [];if ("[object Array]" === D.apply(k)) {h = k.length;for (j = 0; j < h; j += 1) i[j] = b(j, k) || "null";return h = 0 === i.length ? "[]" : l ? "[\n" + l + i.join(",\n" + l) + "\n" + g + "]" : "[" + i.join(",") + "]";}for (j in k) H.call(k, j) && (h = b(j, k)) && i.push(e(j) + (
								l ? ": " : ":") + h);return h = 0 === i.length ? "{}" : l ? "{" + i.join(",") + "" + g + "}" : "{" + i.join(",") + "}";}}function e(a) {var b = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, e = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" };b.lastIndex = 0;return b.test(a) ? '"' + a.replace(b, function (a) {var b = e[a];return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);}) + '"' : '"' + a + '"';}return b("", 
					{ "": a });};})();c.wa = (function () {function a() {switch (h) {case "t":return d("t"), d("r"), d("u"), d("e"), n;case "f":return d("f"), d("a"), d("l"), d("s"), d("e"), s;case "n":return d("n"), d("u"), d("l"), d("l"), p;}l("Unexpected '" + h + "'");}function b() {for (; h && " " >= h;) d();}function e() {var a, b, e = "", c;if ('"' === h) for (; d();) {if ('"' === h) return d(), e;if ("\\" === h) if ((d(), "u" === h)) {for (b = c = 0; 4 > b; b += 1) {a = parseInt(d(), 16);if (!isFinite(a)) break;c = 16 * c + a;}e += String.fromCharCode(c);} else if ("string" === typeof g[h]) e += g[h];else break;else 
						e += h;}l("Bad string");}function c() {var a;a = "";"-" === h && (a = "-", d("-"));for (; "0" <= h && "9" >= h;) a += h, d();if ("." === h) for (a += "."; d() && "0" <= h && "9" >= h;) a += h;if ("e" === h || "E" === h) {a += h;d();if ("-" === h || "+" === h) a += h, d();for (; "0" <= h && "9" >= h;) a += h, d();}a = +a;if (isFinite(a)) return a;l("Bad number");}function d(a) {a && a !== h && l("Expected '" + a + "' instead of '" + h + "'");h = i.charAt(j);j += 1;return h;}function l(a) {throw { name: "SyntaxError", message: a, Vc: j, text: i };}var j, h, g = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", 
					n: "\n", r: "\r", t: "\t" }, i, k;k = function () {b();switch (h) {case "{":var j;a: {var g, i = {};if ("{" === h) {d("{");b();if ("}" === h) {d("}");j = i;break a;}for (; h;) {g = e();b();d(":");Object.hasOwnProperty.call(i, g) && l('Duplicate key "' + g + '"');i[g] = k();b();if ("}" === h) {d("}");j = i;break a;}d(",");b();}}l("Bad object");}return j;case "[":a: {j = [];if ("[" === h) {d("[");b();if ("]" === h) {d("]");g = j;break a;}for (; h;) {j.push(k());b();if ("]" === h) {d("]");g = j;break a;}d(",");b();}}l("Bad array");}return g;case '"':return e();case "-":return c();
						default:return "0" <= h && "9" >= h ? c() : a();}};return function (a) {i = a;j = 0;h = " ";a = k();b();h && l("Syntax error");return a;};})();c.ib = function (a) {var b, e, f, d, l = 0, j = 0, h = "", h = [];if (!a) return a;a = c.Rc(a);do b = a.charCodeAt(l++), e = a.charCodeAt(l++), f = a.charCodeAt(l++), d = b << 16 | e << 8 | f, b = d >> 18 & 63, e = d >> 12 & 63, f = d >> 6 & 63, d &= 63, h[j++] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(b) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e) + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(f) + 
				"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d); while (l < a.length);h = h.join("");switch (a.length % 3) {case 1:h = h.slice(0, -2) + "==";break;case 2:h = h.slice(0, -1) + "=";}return h;};c.Rc = function (a) {var a = (a + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n"), b = "", e, c, d = 0, l;e = c = 0;d = a.length;for (l = 0; l < d; l++) {var j = a.charCodeAt(l), h = p;128 > j ? c++ : h = 127 < j && 2048 > j ? String.fromCharCode(j >> 6 | 192, j & 63 | 128) : String.fromCharCode(j >> 12 | 224, j >> 6 & 63 | 128, j & 63 | 128);h !== p && (c > e && (b += a.substring(e, c)), b += 
					h, e = c = l + 1);}c > e && (b += a.substring(e, a.length));return b;};c.Rb = (function () {function a() {function a(b, e) {var c, d = 0;for (c = 0; c < e.length; c++) d |= l[c] << 8 * c;return b ^ d;}var b, c, l = [], j = 0;for (b = 0; b < t.length; b++) c = t.charCodeAt(b), l.unshift(c & 255), 4 <= l.length && (j = a(j, l), l = []);0 < l.length && (j = a(j, l));return j.toString(16);}function b() {for (var a = 1 * new Date(), b = 0; a == 1 * new Date();) b++;return a.toString(16) + b.toString(16);}return function () {var c = (screen.height * screen.width).toString(16);return b() + "-" + Math.random().toString(16).replace(".", 
					"") + "-" + a() + "-" + c + "-" + b();};})();c.vb = function (a) {return (/(google web preview|baiduspider|yandexbot|bingbot|googlebot|yahoo! slurp)/i.test(a) ? n : s);};c.Qb = function (a) {var b, e, f, d = [];"undefined" === typeof b && (b = "&");c.a(a, function (a, b) {e = encodeURIComponent(a.toString());f = encodeURIComponent(b);d[d.length] = f + "=" + e;});return d.join(b);};c.pb = function (a, b) {var b = b.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"), c = RegExp("[\\?&]" + b + "=([^&#]*)").exec(a);return c === p || c && "string" !== typeof c[1] && c[1].length ? "" : decodeURIComponent(c[1]).replace(/\+/g, 
				" ");};c.cookie = { get: function get(a) {for (var a = a + "=", b = k.cookie.split(";"), c = 0; c < b.length; c++) {for (var f = b[c]; " " == f.charAt(0);) f = f.substring(1, f.length);if (0 == f.indexOf(a)) return decodeURIComponent(f.substring(a.length, f.length));}return p;}, parse: function parse(a) {var b;try {b = c.wa(c.cookie.get(a)) || {};} catch (e) {}return b;}, set: function set(a, b, c, f, d) {var e;var l = "", j = "", h = "";f && (e = (l = (l = k.location.hostname.match(/[a-z0-9][a-z0-9\-]+\.[a-z\.]{2,6}$/i)) ? l[0] : "") ? "; domain=." + l : "", l = e);c && (j = new Date(), j.setTime(j.getTime() + 
					864E5 * c), j = "; expires=" + j.toGMTString());d && (h = "; secure");k.cookie = a + "=" + encodeURIComponent(b) + j + "; path=/" + l + h;}, remove: function remove(a, b) {c.cookie.set(a, "", -1, b);} };c.N = (function () {function a(a, f, d) {return function (l) {if (l = l || b(window.event)) {var j = n, h;c.wb(d) && (h = d(l));l = f.call(a, l);if (s === h || s === l) j = s;return j;}};}function b(a) {if (a) a.preventDefault = b.preventDefault, a.stopPropagation = b.stopPropagation;return a;}b.preventDefault = function () {this.returnValue = s;};b.stopPropagation = function () {this.cancelBubble = 
					n;};return function (b, c, d, l) {b ? b.addEventListener && !l ? b.addEventListener(c, d, s) : (c = "on" + c, b[c] = a(b, d, b[c])) : q.error("No valid element provided to register_event");};})();c.sc = (function () {function a(a, c) {return 0 <= (" " + a.className + " ").replace(b, " ").indexOf(" " + c + " ");}var b = /[\t\r\n]/g;return function (b) {if (!k.getElementsByTagName) return [];for (var b = b.split(" "), f, d = Array(k), l = 0; l < b.length; l++) if ((f = b[l].replace(/^\s+/, "").replace(/\s+$/, ""), -1 < f.indexOf("#"))) {f = f.split("#");var j = f[0], d = k.getElementById(f[1]);
						if (!d || j && d.nodeName.toLowerCase() != j) return [];d = Array(d);} else if (-1 < f.indexOf(".")) {f = f.split(".");var j = f[0], h = f[1];j || (j = "*");f = [];for (var g = 0, i = 0; i < d.length; i++) {var m;m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (var o = 0; o < m.length; o++) f[g++] = m[o];}d = [];for (g = j = 0; g < f.length; g++) f[g].className && c.Ua(f[g].className) && a(f[g], h) && (d[j++] = f[g]);} else if (f.match(/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/)) {var j = RegExp.$1, q = RegExp.$2, h = RegExp.$3, r = RegExp.$4;
						j || (j = "*");f = [];for (i = g = 0; i < d.length; i++) {m = "*" == j ? d[i].all ? d[i].all : d[i].getElementsByTagName("*") : d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) f[g++] = m[o];}d = [];j = 0;switch (h) {case "=":h = function (a) {return a.getAttribute(q) == r;};break;case "~":h = function (a) {return a.getAttribute(q).match(RegExp("\\b" + r + "\\b"));};break;case "|":h = function (a) {return a.getAttribute(q).match(RegExp("^" + r + "-?"));};break;case "^":h = function (a) {return 0 == a.getAttribute(q).indexOf(r);};break;case "$":h = function (a) {return a.getAttribute(q).lastIndexOf(r) == 
									a.getAttribute(q).length - r.length;};break;case "*":h = function (a) {return -1 < a.getAttribute(q).indexOf(r);};break;default:h = function (a) {return a.getAttribute(q);};}d = [];for (g = j = 0; g < f.length; g++) h(f[g]) && (d[j++] = f[g]);} else {j = f;f = [];for (i = g = 0; i < d.length; i++) {m = d[i].getElementsByTagName(j);for (o = 0; o < m.length; o++) f[g++] = m[o];}d = f;}return d;};})();c.info = { lc: function lc() {var a = "", b = {};c.a("utm_source utm_medium utm_campaign utm_content utm_term".split(" "), function (e) {a = c.pb(k.URL, e);a.length && (b[e] = a);});return b;}, 
				Ec: function Ec(a) {return 0 === a.search("https?://(.*)google.([^/?]*)") ? "google" : 0 === a.search("https?://(.*)bing.com") ? "bing" : 0 === a.search("https?://(.*)yahoo.com") ? "yahoo" : 0 === a.search("https?://(.*)duckduckgo.com") ? "duckduckgo" : p;}, Fc: function Fc(a) {var b = c.info.Ec(a), e = {};if (b !== p) e.$search_engine = b, a = c.pb(a, "yahoo" != b ? "q" : "p"), a.length && (e.mp_keyword = a);return e;}, ka: function ka(a, b, e) {b = b || "";return e ? c.o(a, "Mini") ? "Opera Mini" : "Opera" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : c.o(a, "FBIOS") ? "Facebook Mobile" : 
					c.o(a, "Chrome") ? "Chrome" : c.o(a, "CriOS") ? "Chrome iOS" : c.o(b, "Apple") ? c.o(a, "Mobile") ? "Mobile Safari" : "Safari" : c.o(a, "Android") ? "Android Mobile" : c.o(a, "Konqueror") ? "Konqueror" : c.o(a, "Firefox") ? "Firefox" : c.o(a, "MSIE") || c.o(a, "Trident/") ? "Internet Explorer" : c.o(a, "Gecko") ? "Mozilla" : "";}, Xa: function Xa() {return (/Windows/i.test(t) ? /Phone/.test(t) ? "Windows Mobile" : "Windows" : /(iPhone|iPad|iPod)/.test(t) ? "iOS" : /Android/.test(t) ? "Android" : /(BlackBerry|PlayBook|BB10)/i.test(t) ? "BlackBerry" : /Mac/i.test(t) ? "Mac OS X" : 
						/Linux/.test(t) ? "Linux" : "");}, nb: function nb(a) {return (/iPad/.test(a) ? "iPad" : /iPod/.test(a) ? "iPod Touch" : /iPhone/.test(a) ? "iPhone" : /(BlackBerry|PlayBook|BB10)/i.test(a) ? "BlackBerry" : /Windows Phone/i.test(a) ? "Windows Phone" : /Android/.test(a) ? "Android" : "");}, Bb: function Bb(a) {a = a.split("/");return 3 <= a.length ? a[2] : "";}, qa: function qa() {return c.extend(c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera), $referrer: k.referrer, $referring_domain: c.info.Bb(k.referrer), $device: c.info.nb(t) }), { $screen_height: screen.height, 
						$screen_width: screen.width, mp_lib: "web", $lib_version: "2.3.2" });}, Dc: function Dc() {return c.ra({ $os: c.info.Xa(), $browser: c.info.ka(t, E.vendor, window.opera) });}, Cc: function Cc(a) {return c.ra({ mp_page: a, mp_referrer: k.referrer, mp_browser: c.info.ka(t, E.vendor, window.opera), mp_platform: c.info.Xa() });} };var q = { log: function log() {if (w && !c.h(u) && u) try {u.log.apply(u, arguments);} catch (a) {c.a(arguments, function (a) {u.log(a);});}}, error: function error() {if (w && !c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u, 
							a);} catch (b) {c.a(a, function (a) {u.error(a);});}}}, na: function na() {if (!c.h(u) && u) {var a = ["Mixpanel error:"].concat(c.$(arguments));try {u.error.apply(u, a);} catch (b) {c.a(a, function (a) {u.error(a);});}}} };v.prototype.ma = C();v.prototype.Oa = C();v.prototype.Ka = C();v.prototype.Ta = function (a) {this.yb = a;return this;};v.prototype.P = function (a, b, e, f) {var d = this, g = c.sc(a);if (0 == g.length) q.error("The DOM query (" + a + ") returned 0 elements");else return c.a(g, function (a) {c.N(a, this.Ab, function (a) {var c = {}, j = d.ma(e, this), g = 
						d.yb.d("track_links_timeout");d.Oa(a, this, c);window.setTimeout(d.Ib(f, j, c, n), g);d.yb.P(b, j, d.Ib(f, j, c));});}, this), n;};v.prototype.Ib = function (a, b, c, f) {var f = f || s, d = this;return function () {if (!c.kc) c.kc = n, a && a(f, b) === s || d.Ka(b, c, f);};};v.prototype.ma = function (a, b) {return "function" === typeof a ? a(b) : c.extend({}, a);};c.ub(A, v);A.prototype.ma = function (a, b) {var c = A.Lc.ma.apply(this, arguments);if (b.href) c.url = b.href;return c;};A.prototype.Oa = function (a, b, c) {c.zb = 2 === a.which || a.metaKey || "_blank" === b.target;c.href = 
				b.href;c.zb || a.preventDefault();};A.prototype.Ka = function (a, b) {b.zb || setTimeout(function () {window.location = b.href;}, 0);};c.ub(G, v);G.prototype.Oa = function (a, b, c) {c.element = b;a.preventDefault();};G.prototype.Ka = function (a, b) {setTimeout(function () {b.element.submit();}, 0);};m.prototype.qa = function () {var a = {};c.a(this.props, function (b, e) {c.sb(O, e) || (a[e] = b);});return a;};m.prototype.load = function () {if (!this.disabled) {var a = c.cookie.parse(this.name);a && (this.props = c.extend({}, a));}};m.prototype.Qc = function (a) {var b = 
				a.upgrade, e;if (b) e = "mp_super_properties", "string" === typeof b && (e = b), b = c.cookie.parse(e), c.cookie.remove(e), c.cookie.remove(e, n), b && (this.props = c.extend(this.props, b.all, b.events));if (!a.cookie_name && "mixpanel" !== a.name && (e = "mp_" + a.token + "_" + a.name, b = c.cookie.parse(e))) c.cookie.remove(e), c.cookie.remove(e, n), this.G(b);};m.prototype.save = function () {this.disabled || (this.Yb(), c.cookie.set(this.name, c.ca(this.props), this.Pa, this.Ma, this.Db));};m.prototype.remove = function () {c.cookie.remove(this.name, s);c.cookie.remove(this.name, 
				n);};m.prototype.clear = function () {this.remove();this.props = {};};m.prototype.G = function (a, b, e) {return c.j(a) ? ("undefined" === typeof b && (b = "None"), this.Pa = "undefined" === typeof e ? this.mb : e, c.a(a, function (a, c) {if (!this.props[c] || this.props[c] === b) this.props[c] = a;}, this), this.save(), n) : s;};m.prototype.Z = function (a, b) {return c.j(a) ? (this.Pa = "undefined" === typeof b ? this.mb : b, c.extend(this.props, a), this.save(), n) : s;};m.prototype.ua = function (a) {a in this.props && (delete this.props[a], this.save());};m.prototype.Yb = 
			function () {var a = this.props.__cmpns, b = w ? 6E4 : 36E5;if (a) {for (var e in a) 1 * new Date() - a[e] > b && delete a[e];c.W(a) && delete this.props.__cmpns;}};m.prototype.Pc = function () {if (!this.kb) this.G(c.info.lc()), this.kb = n;};m.prototype.Lb = function (a) {this.Z(c.info.Fc(a));};m.prototype.Za = function (a) {this.G({ $initial_referrer: a || "$direct", $initial_referring_domain: c.info.Bb(a) || "$direct" }, "");};m.prototype.wc = function () {return c.ra({ $initial_referrer: this.props.$initial_referrer, $initial_referring_domain: this.props.$initial_referring_domain });};
			m.prototype.Kb = function (a) {this.mb = this.Pa = a.cookie_expiration;this.Hc(a.disable_cookie);this.Gc(a.cross_subdomain_cookie);this.Ic(a.secure_cookie);};m.prototype.Hc = function (a) {(this.disabled = a) && this.remove();};m.prototype.Gc = function (a) {if (a !== this.Ma) this.Ma = a, this.remove(), this.save();};m.prototype.vc = function () {return this.Ma;};m.prototype.Ic = function (a) {if (a !== this.Db) this.Db = a ? n : s, this.remove(), this.save();};m.prototype.C = function (a, b) {var e = this.Ea(a), f = b[a], d = this.ga("$set"), g = this.ga("$set_once"), 
				j = this.ga("$add"), h = this.ga("$append", []);"__mps" === e ? (c.extend(d, f), this.ia("$add", f)) : "__mpso" === e ? c.a(f, function (a, b) {b in g || (g[b] = a);}) : "__mpa" === e ? c.a(f, function (a, b) {b in d ? d[b] += a : (b in j || (j[b] = 0), j[b] += a);}, this) : "__mpap" === e && h.push(f);q.log("MIXPANEL PEOPLE REQUEST (QUEUED, PENDING IDENTIFY):");q.log(b);this.save();};m.prototype.ia = function (a, b) {var e = this.T(a);c.h(e) || (c.a(b, function (a, b) {delete e[b];}, this), this.save());};m.prototype.Ea = function (a) {if ("$set" === a) return "__mps";if ("$set_once" === 
				a) return "__mpso";if ("$add" === a) return "__mpa";if ("$append" === a) return "__mpap";q.error("Invalid queue:", a);};m.prototype.T = function (a) {return this.props[this.Ea(a)];};m.prototype.ga = function (a, b) {var e = this.Ea(a), b = c.h(b) ? {} : b;return this.props[e] || (this.props[e] = b);};i.prototype.Ta = function (a, b, c) {if ("undefined" === typeof c) q.error("You must name your new library: init(token, config, name)");else if ("mixpanel" === c) q.error("You must initialize the main mixpanel object right after you include the Mixpanel js snippet");else 
				return a = F(a, b, c), r[c] = a, a.ha(), a;};i.prototype.Fa = function (a, b, e) {this.__loaded = n;this.config = {};this.Eb(c.extend({}, P, b, { name: e, token: a, callback_fn: ("mixpanel" === e ? e : "mixpanel." + e) + "._jsc" }));this._jsc = C();this.Ba = [];this.Ca = [];this.Aa = [];this.S = { disable_all_events: s, identify_called: s };this.cookie = new m(this.config);this.G({ distinct_id: c.Rb() }, "");};i.prototype.ha = function () {this.d("loaded")(this);this.d("track_pageview") && this.Jb();};i.prototype.Wb = function () {c.a(this.Ba, function (a) {this.Ia.apply(this, 
					a);}, this);c.a(this.Ca, function (a) {this.w.apply(this, a);}, this);delete this.Ba;delete this.Ca;};i.prototype.Ia = function (a, b) {if (this.d("img")) return q.error("You can't use DOM tracking functions with img = true."), s;if (!K) return this.Ba.push([a, b]), s;var c = new a().Ta(this);return c.P.apply(c, b);};i.prototype.Ga = function (a, b) {if (c.h(a)) return p;if (I) return function (c) {a(c, b);};var e = this._jsc, f = "" + Math.floor(1E8 * Math.random()), d = this.d("callback_fn") + '["' + f + '"]';e[f] = function (c) {delete e[f];a(c, b);};return d;};
			i.prototype.w = function (a, b, e) {if (L) this.Ca.push(arguments);else {var f = this.d("verbose");b.verbose && (f = n);this.d("test") && (b.test = 1);f && (b.verbose = 1);this.d("img") && (b.img = 1);if (!I) if (e) b.callback = e;else if (f || this.d("test")) b.callback = "(function(){})";b.ip = this.d("ip") ? 1 : 0;b._ = new Date().getTime().toString();a += "?" + c.Qb(b);if ("img" in b) {var d = k.createElement("img");d.src = a;k.body.appendChild(d);} else if (I) {var g = new XMLHttpRequest();g.open("GET", a, n);g.withCredentials = n;g.onreadystatechange = function () {if (4 === 
							g.readyState) if (200 === g.status) e && (f ? e(c.wa(g.responseText)) : e(Number(g.responseText)));else {var a = "Bad HTTP status: " + g.status + " " + g.statusText;q.error(a);e && (f ? e({ status: 0, error: a }) : e(0));}};g.send(p);} else {d = k.createElement("script");d.type = "text/javascript";d.async = n;d.defer = n;d.src = a;var j = k.getElementsByTagName("script")[0];j.parentNode.insertBefore(d, j);}}};i.prototype.Da = function (a) {function b(a, b) {c.a(a, function (a) {this[a[0]].apply(this, a.slice(1));}, b);}var e, f = [], d = [], g = [];c.a(a, function (a) {a && (
					e = a[0], "function" === typeof a ? a.call(this) : c.isArray(a) && "alias" === e ? f.push(a) : c.isArray(a) && -1 != e.indexOf("track") && "function" === typeof this[e] ? g.push(a) : d.push(a));}, this);b(f, this);b(d, this);b(g, this);};i.prototype.push = function (a) {this.Da([a]);};i.prototype.disable = function (a) {"undefined" === typeof a ? this.S.pc = n : this.Aa = this.Aa.concat(a);};i.prototype.P = function (a, b, e) {if ("undefined" === typeof a) q.error("No event name provided to mixpanel.track");else if (c.vb(t) || this.S.pc || c.sb(this.Aa, a)) "undefined" !== 
				typeof e && e(0);else return b = b || {}, b.token = b.Xc || this.d("token"), this.cookie.Lb(k.referrer), this.d("store_google") && this.cookie.Pc(), this.d("save_referrer") && this.cookie.Za(k.referrer), b = c.extend({}, c.info.qa(), this.cookie.qa(), b), a = c.truncate({ event: a, properties: b }, 255), b = c.ca(a), b = c.ib(b), q.log("MIXPANEL REQUEST:"), q.log(a), this.w(this.d("api_host") + "/track/", { data: b }, this.Ga(e, a)), a;};i.prototype.Jb = function (a) {if ("undefined" === typeof a) a = k.location.href;this.P("mp_page_view", c.info.Cc(a));};i.prototype.Oc = 
			function () {return this.Ia.call(this, A, arguments);};i.prototype.Nc = function () {return this.Ia.call(this, G, arguments);};i.prototype.Z = function (a, b) {this.cookie.Z(a, b);};i.prototype.G = function (a, b, c) {this.cookie.G(a, b, c);};i.prototype.ua = function (a) {this.cookie.ua(a);};i.prototype.Ha = function (a, b) {var c = {};c[a] = b;this.Z(c);};i.prototype.Ra = function (a, b, c, f, d) {a != this.M() && a != this.oa("__alias") && (this.ua("__alias"), this.Ha("distinct_id", a));this.$a(this.M());this.S.qb = n;this.people.Zb(b, c, f, d);};i.prototype.M = 
			function () {return this.oa("distinct_id");};i.prototype.hc = function (a, b) {if (a === this.oa("$people_distinct_id")) return q.na("Attempting to create alias for existing People user - aborting."), -2;var e = this;c.h(b) && (b = this.M());if (a !== b) return this.Ha("__alias", a), this.P("$create_alias", { alias: a, distinct_id: b }, function () {e.Ra(a);});q.error("alias matches current distinct_id - skipping api call.");this.Ra(a);return -1;};i.prototype.Ac = function (a) {this.Ha("mp_name_tag", a);};i.prototype.Eb = function (a) {c.j(a) && (
				c.extend(this.config, a), this.cookie && this.cookie.Kb(this.config), w = w || this.d("debug"));};i.prototype.d = function (a) {return this.config[a];};i.prototype.oa = function (a) {return this.cookie.props[a];};i.prototype.toString = function () {var a = this.d("name");"mixpanel" !== a && (a = "mixpanel." + a);return a;};i.prototype.$a = function (a) {if (a && !this.S.qb && !this.d("disable_notifications")) {q.log("MIXPANEL NOTIFICATION CHECK");var b = this;this.w(this.d("api_host") + "/decide/", { verbose: n, version: "1", lib: "web", token: this.d("token"), 
						distinct_id: a }, this.Ga(function (a) {a.notifications && 0 < a.notifications.length && b.gb.call(b, a.notifications[0]);}));}};i.prototype.gb = function (a) {new g(a, this).show();};o.prototype.Fa = function (a) {this.c = a;};o.prototype.set = function (a, b, e) {var f = {}, d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;this.fa("save_referrer") && this.c.cookie.Za(k.referrer);d = c.extend({}, c.info.Dc(), this.c.cookie.wc(), d);f.$set = d;return this.w(f, e);};o.prototype.Fb = function (a, b, e) {var f = 
				{}, d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$set_once = d;return this.w(f, e);};o.prototype.tb = function (a, b, e) {var f = {}, d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == b || "$token" == b || (isNaN(parseFloat(a)) ? q.error("Invalid increment value passed to mixpanel.people.increment - must be a number") : d[b] = a);}), e = b) : (c.h(b) && (b = 1), d[a] = b);f.$add = d;return this.w(f, e);};o.prototype.append = function (a, b, e) {var f = {}, d = {};c.j(a) ? (c.a(a, function (a, b) {"$distinct_id" == 
					b || "$token" == b || (d[b] = a);}), e = b) : d[a] = b;f.$append = d;return this.w(f, e);};o.prototype.Mc = function (a, b, e) {if (!c.zc(a) && (a = parseFloat(a), isNaN(a))) {q.error("Invalid value passed to mixpanel.people.track_charge - must be a number");return;}return this.append("$transactions", c.extend({ $amount: a }, b), e);};o.prototype.mc = function (a) {return this.set("$transactions", [], a);};o.prototype.oc = function () {if (this.bb()) return this.w({ $delete: this.c.M() });q.error("mixpanel.people.delete_user() requires you to call identify() first");};
			o.prototype.toString = function () {return this.c.toString() + ".people";};o.prototype.w = function (a, b) {a.$token = this.fa("token");a.$distinct_id = this.c.M();var e = c.ob(a), f = c.truncate(e, 255), e = c.ca(e), e = c.ib(e);if (!this.bb()) return this.Xb(a), c.h(b) || (this.fa("verbose") ? b({ status: -1, error: p }) : b(-1)), f;q.log("MIXPANEL PEOPLE REQUEST:");q.log(f);this.c.w(this.fa("api_host") + "/engage/", { data: e }, this.c.Ga(b, f));return f;};o.prototype.fa = function (a) {return this.c.d(a);};o.prototype.bb = function () {return this.c.S.qb === 
				n;};o.prototype.Xb = function (a) {"$set" in a ? this.c.cookie.C("$set", a) : "$set_once" in a ? this.c.cookie.C("$set_once", a) : "$add" in a ? this.c.cookie.C("$add", a) : "$append" in a ? this.c.cookie.C("$append", a) : q.error("Invalid call to _enqueue():", a);};o.prototype.Zb = function (a, b, e, f) {var d = this, g = c.extend({}, this.c.cookie.T("$set")), j = c.extend({}, this.c.cookie.T("$set_once")), h = c.extend({}, this.c.cookie.T("$add")), i = this.c.cookie.T("$append");!c.h(g) && c.j(g) && !c.W(g) && (d.c.cookie.ia("$set", g), this.set(g, function (b, 
				e) {0 == b && d.c.cookie.C("$set", g);c.h(a) || a(b, e);}));!c.h(j) && c.j(j) && !c.W(j) && (d.c.cookie.ia("$set_once", j), this.Fb(j, function (a, b) {0 == a && d.c.cookie.C("$set_once", j);c.h(f) || f(a, b);}));!c.h(h) && c.j(h) && !c.W(h) && (d.c.cookie.ia("$add", h), this.tb(h, function (a, e) {0 == a && d.c.cookie.C("$add", h);c.h(b) || b(a, e);}));if (!c.h(i) && c.isArray(i) && i.length) {for (var k = i.length - 1; 0 <= k; k--) {var m = i.pop();d.append(m, function (a, b) {0 == a && d.c.cookie.C("$append", m);c.h(e) || e(a, b);});}d.c.cookie.save();}};i.Ub = function (a, b) {c.ic(this);
				this.Wa = b;this.cookie = this.Wa.cookie;this.D = c.p(a.id);this.xb = c.p(a.message_id);this.body = (c.p(a.body) || "").replace(/\n/g, "<br/>");this.nc = c.p(a.cta) || "Close";this.V = c.p(a.cta_url) || p;this.Sa = c.p(a.image_url) || p;this.X = c.p(a.type) || "takeover";this.style = c.p(a.style) || "light";this.H = c.p(a.thumb_image_url) || p;this.title = c.p(a.title) || "";this.va = c.p(a.video_url) || p;this.aa = g.Tb;this.Q = g.Sb;this.la = n;if (!this.V) this.V = "#dismiss", this.la = s;this.q = "mini" === this.X;if (!this.q) this.X = "takeover";this.Bc = !this.q ? 
				g.R : g.xa;this.fb();this.pa = this.$b();this.cc();};var g = i.Ub;g.I = 200;g.u = "mixpanel-notification";g.ba = 0.6;g.B = 25;g.da = 200;g.R = 388;g.xa = 420;g.v = 85;g.ya = 5;g.F = 60;g.za = Math.round(g.F / 2);g.Tb = 595;g.Sb = 334;g.prototype.show = function () {var a = this;this.fb();this.l ? (this.bc(), this.ac(), this.dc(this.Vb)) : setTimeout(function () {a.show();}, 300);};g.prototype.Na = c.s(function () {var a = this.Jc ? this.g("video") : this.L();if (this.Mb) this.ec("bg", "visible"), this.J(a, "exiting"), setTimeout(this.eb, g.I);else {var b, c, f;this.q ? (
					b = "right", c = 20, f = -100) : (b = "top", c = g.B, f = g.da + g.B);this.ea([{ m: this.g("bg"), k: "opacity", start: g.ba, i: 0 }, { m: a, k: "opacity", start: 1, i: 0 }, { m: a, k: b, start: c, i: f }], g.I, this.eb);}});g.prototype.J = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));a.className ? ~(" " + a.className + " ").indexOf(" " + b + " ") || (a.className += " " + b) : a.className = b;});g.prototype.ec = c.s(function (a, b) {b = g.u + "-" + b;"string" === typeof a && (a = this.g(a));if (a.className) a.className = (" " + a.className + " ").replace(" " + b + " ", "").replace(/^[\s\xA0]+/, 
				"").replace(/[\s\xA0]+$/, "");});g.prototype.ea = c.s(function (a, b, c, f) {var d = this, g = s, j, h;j = 1 * new Date();var i, f = f || j;i = j - f;for (j = 0; j < a.length; j++) {h = a[j];if ("undefined" === typeof h.A) h.A = h.start;if (h.A !== h.i) {var g = n, k = h.i >= h.start ? 1 : -1;h.A = h.start + (h.i - h.start) * i / b;if ("opacity" !== h.k) h.A = Math.round(h.A);if (0 < k && h.A >= h.i || 0 > k && h.A <= h.i) h.A = h.i;}}if (g) {for (j = 0; j < a.length; j++) h = a[j], h.m && (h.m.style[h.k] = "" + h.A + ("opacity" === h.k ? "" : "px"));setTimeout(function () {d.ea(a, b, c, f);}, 10);} else c && c();});g.prototype.Vb = 
			c.s(function () {var a = this;if (!this.Kc && !this.ab()[this.D]) this.Kc = n, this.l.appendChild(this.Y), setTimeout(function () {var b = a.L();if (a.Mb) a.q || a.J("bg", "visible"), a.J(b, "visible"), a.cb();else {var c, f, d;a.q ? (c = "right", f = -100, d = 20) : (c = "top", f = g.da + g.B, d = g.B);a.ea([{ m: a.g("bg"), k: "opacity", start: 0, i: g.ba }, { m: b, k: "opacity", start: 0, i: 1 }, { m: b, k: c, start: f, i: d }], g.I, a.cb);}}, 100), c.N(a.g("cancel"), "click", function (b) {b.preventDefault();a.Na();}), c.N(a.g("button") || a.g("mini-content"), "click", function (b) {b.preventDefault();
					a.O ? (a.Ja("$campaign_open", { $resource_type: "video" }), a.fc()) : (a.Na(), a.la && a.Ja("$campaign_open", { $resource_type: "link" }, function () {window.location.href = a.V;}));});});g.prototype.g = function (a) {return k.getElementById(g.u + "-" + a);};g.prototype.L = function () {return this.g(this.X);};g.prototype.ab = function () {return this.cookie.props.__cmpns || (this.cookie.props.__cmpns = {});};g.prototype.K = function (a, b) {return this.z[a] && this.z[a] <= b;};g.prototype.$b = function () {var a = [];this.q ? (this.H = this.H || "//cdn.mxpnl.com/site_media/images/icons/notifications/mini-news-dark.png", 
				a.push(this.H)) : (this.Sa ? (a.push(this.Sa), this.rb = '<img id="img" src="' + this.Sa + '"/>') : this.rb = "", this.H ? (a.push(this.H), this.Hb = '<div id="thumbborder-wrapper"><div id="thumbborder"></div></div><img id="thumbnail" src="' + this.H + '" width="' + g.F + '" height="' + g.F + '"/><div id="thumbspacer"></div>') : this.Hb = "");return a;};g.prototype.ac = function () {var a = "", b = "", c = "";this.Y = k.createElement("div");this.Y.id = g.u + "-wrapper";if (this.q) a = '<div id="mini"><div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="mini-content"><div id="mini-icon"><div id="mini-icon-img"></div></div><div id="body"><div id="body-text"><div>' + 
				this.body + '</div></div></div></div></div><div id="mini-border"></div></div>';else {var a = this.la || this.O ? "" : '<div id="button-close"></div>', f = this.O ? '<div id="button-play"></div>' : "";this.K("ie", 7) && (f = a = "");a = '<div id="takeover">' + this.Hb + '<div id="mainbox"><div id="cancel"><div id="cancel-icon"></div></div><div id="content">' + this.rb + '<div id="title">' + this.title + '</div><div id="body">' + this.body + '</div><div id="tagline"><a href="http://mixpanel.com?from=inapp" target="_blank">POWERED BY MIXPANEL</a></div></div><div id="button">' + 
					a + '<a id="button-link" href="' + this.V + '">' + this.nc + "</a>" + f + "</div></div></div>";}this.Ob ? (b = "//www.youtube.com/embed/" + this.Ob + "?wmode=transparent&showinfo=0&modestbranding=0&rel=0&autoplay=1&loop=0&vq=hd1080", this.Pb && (b += "&enablejsapi=1&html5=1&controls=0", c = '<div id="video-controls"><div id="video-progress" class="video-progress-el"><div id="video-progress-total" class="video-progress-el"></div><div id="video-elapsed" class="video-progress-el"></div></div><div id="video-time" class="video-progress-el"></div></div>')) : 
				this.Nb && (b = "//player.vimeo.com/video/" + this.Nb + "?autoplay=1&title=0&byline=0&portrait=0");if (this.O) this.Tc = '<iframe id="' + g.u + '-video-frame" width="' + this.aa + '" height="' + this.Q + '"  src="' + b + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen="1" scrolling="no"></iframe>', c = '<div id="video-' + (this.Qa ? "" : "no") + 'flip"><div id="video"><div id="video-holder"></div>' + c + "</div></div>";b = c + a;this.Qa && (b = (this.q ? a : "") + '<div id="flipcontainer"><div id="flipper">' + (this.q ? c : b) + "</div></div>");
				this.Y.innerHTML = ('<div id="overlay" class="' + this.X + '"><div id="campaignid-' + this.D + '"><div id="bgwrapper"><div id="bg"></div>' + b + "</div></div></div>").replace(/class=\"/g, 'class="' + g.u + "-").replace(/id=\"/g, 'id="' + g.u + "-");};g.prototype.bc = function () {this.e = "dark" === this.style ? { La: "#1d1f25", U: "#282b32", ja: "#3a4147", jb: "#4a5157", jc: "#32353c", lb: "0.4", Va: "#2a3137", ta: "#fff", Ya: "#9498a3", Gb: "#464851", sa: "#ddd" } : { La: "#fff", U: "#e7eaee", ja: "#eceff3", jb: "#f5f5f5", jc: "#e4ecf2", lb: "1.0", Va: "#fafafa", ta: "#5c6578", 
					Ya: "#8b949b", Gb: "#ced9e6", sa: "#7c8598" };var a = "0px 0px 35px 0px rgba(45, 49, 56, 0.7)", b = a, e = a, f = g.F + 2 * g.ya, d = g.I / 1E3 + "s";this.q && (a = "none");var i = {};i["@media only screen and (max-width: " + (g.xa + 20 - 1) + "px)"] = { "#overlay": { display: "none" } };a = { ".flipped": { transform: "rotateY(180deg)" }, "#overlay": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", overflow: "auto", "text-align": "center", "z-index": "10000", "font-family": '"Helvetica", "Arial", sans-serif', "-webkit-font-smoothing": "antialiased", "-moz-osx-font-smoothing": "grayscale" }, 
					"#overlay.mini": { height: "0", overflow: "visible" }, "#overlay a": { width: "initial", padding: "0", "text-decoration": "none", "text-transform": "none", color: "inherit" }, "#bgwrapper": { position: "relative", width: "100%", height: "100%" }, "#bg": { position: "fixed", top: "0", left: "0", width: "100%", height: "100%", "min-width": 4 * this.rc + "px", "min-height": 4 * this.qc + "px", "background-color": "black", opacity: "0.0", "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)", filter: "alpha(opacity=60)", transition: "opacity " + d }, 
					"#bg.visible": { opacity: g.ba }, ".mini #bg": { width: "0", height: "0", "min-width": "0" }, "#flipcontainer": { perspective: "1000px", position: "absolute", width: "100%" }, "#flipper": { position: "relative", "transform-style": "preserve-3d", transition: "0.3s" }, "#takeover": { position: "absolute", left: "50%", width: g.R + "px", "margin-left": Math.round(-g.R / 2) + "px", "backface-visibility": "hidden", transform: "rotateY(0deg)", opacity: "0.0", top: g.da + "px", transition: "opacity " + d + ", top " + d }, "#takeover.visible": { opacity: "1.0", top: g.B + "px" }, 
					"#takeover.exiting": { opacity: "0.0", top: g.da + "px" }, "#thumbspacer": { height: g.za + "px" }, "#thumbborder-wrapper": { position: "absolute", top: -g.ya + "px", left: g.R / 2 - g.za - g.ya + "px", width: f + "px", height: f / 2 + "px", overflow: "hidden" }, "#thumbborder": { position: "absolute", width: f + "px", height: f + "px", "border-radius": f + "px", "background-color": this.e.U, opacity: "0.5" }, "#thumbnail": { position: "absolute", top: "0px", left: g.R / 2 - g.za + "px", width: g.F + "px", height: g.F + "px", overflow: "hidden", "z-index": "100", "border-radius": g.F + "px" }, 
					"#mini": { position: "absolute", right: "20px", top: g.B + "px", width: this.Bc + "px", height: 2 * g.v + "px", "margin-top": 20 - g.v + "px", "backface-visibility": "hidden", opacity: "0.0", transform: "rotateX(90deg)", transition: "opacity 0.3s, transform 0.3s, right 0.3s" }, "#mini.visible": { opacity: "1.0", transform: "rotateX(0deg)" }, "#mini.exiting": { opacity: "0.0", right: "-150px" }, "#mainbox": { "border-radius": "4px", "box-shadow": a, "text-align": "center", "background-color": this.e.La, "font-size": "14px", color: this.e.Ya }, "#mini #mainbox": { height: g.v + 
						"px", "margin-top": g.v + "px", "border-radius": "3px", transition: "background-color " + d }, "#mini-border": { height: g.v + 6 + "px", width: g.xa + 6 + "px", position: "absolute", top: "-3px", left: "-3px", "margin-top": g.v + "px", "border-radius": "6px", opacity: "0.25", "background-color": "#fff", "z-index": "-1", "box-shadow": e }, "#mini-icon": { position: "relative", display: "inline-block", width: "75px", height: g.v + "px", "border-radius": "3px 0 0 3px", "background-color": this.e.U, background: "linear-gradient(135deg, " + this.e.jb + " 0%, " + this.e.U + 
						" 100%)", transition: "background-color " + d }, "#mini:hover #mini-icon": { "background-color": this.e.Va }, "#mini:hover #mainbox": { "background-color": this.e.Va }, "#mini-icon-img": { position: "absolute", "background-image": "url(" + this.H + ")", width: "48px", height: "48px", top: "20px", left: "12px" }, "#content": { padding: "30px 20px 0px 20px" }, "#mini-content": { "text-align": "left", height: g.v + "px", cursor: "pointer" }, "#img": { width: "328px", "margin-top": "30px", "border-radius": "5px" }, "#title": { "max-height": "600px", overflow: "hidden", 
						"word-wrap": "break-word", padding: "25px 0px 20px 0px", "font-size": "19px", "font-weight": "bold", color: this.e.ta }, "#body": { "max-height": "600px", "margin-bottom": "25px", overflow: "hidden", "word-wrap": "break-word", "line-height": "21px", "font-size": "15px", "font-weight": "normal", "text-align": "left" }, "#mini #body": { display: "inline-block", "max-width": "250px", margin: "0 0 0 30px", height: g.v + "px", "font-size": "16px", "letter-spacing": "0.8px", color: this.e.ta }, "#mini #body-text": { display: "table", height: g.v + "px" }, "#mini #body-text div": { display: "table-cell", 
						"vertical-align": "middle" }, "#tagline": { "margin-bottom": "15px", "font-size": "10px", "font-weight": "600", "letter-spacing": "0.8px", color: "#ccd7e0", "text-align": "left" }, "#tagline a": { color: this.e.Gb, transition: "color " + d }, "#tagline a:hover": { color: this.e.sa }, "#cancel": { position: "absolute", right: "0", width: "8px", height: "8px", padding: "10px", "border-radius": "20px", margin: "12px 12px 0 0", "box-sizing": "content-box", cursor: "pointer", transition: "background-color " + d }, "#mini #cancel": { margin: "7px 7px 0 0" }, "#cancel-icon": { width: "8px", 
						height: "8px", overflow: "hidden", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/cancel-x.png)", opacity: this.e.lb }, "#cancel:hover": { "background-color": this.e.ja }, "#button": { display: "block", height: "60px", "line-height": "60px", "text-align": "center", "background-color": this.e.U, "border-radius": "0 0 4px 4px", overflow: "hidden", cursor: "pointer", transition: "background-color " + d }, "#button-close": { display: "inline-block", width: "9px", height: "60px", "margin-right": "8px", "vertical-align": "top", 
						"background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/close-x-" + this.style + ".png)", "background-repeat": "no-repeat", "background-position": "0px 25px" }, "#button-play": { display: "inline-block", width: "30px", height: "60px", "margin-left": "15px", "background-image": "url(//cdn.mxpnl.com/site_media/images/icons/notifications/play-" + this.style + "-small.png)", "background-repeat": "no-repeat", "background-position": "0px 15px" }, "a#button-link": { display: "inline-block", "vertical-align": "top", "text-align": "center", 
						"font-size": "17px", "font-weight": "bold", overflow: "hidden", "word-wrap": "break-word", color: this.e.ta, transition: "color " + d }, "#button:hover": { "background-color": this.e.ja, color: this.e.sa }, "#button:hover a": { color: this.e.sa }, "#video-noflip": { position: "relative", top: 2 * -this.Q + "px" }, "#video-flip": { "backface-visibility": "hidden", transform: "rotateY(180deg)" }, "#video": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", top: g.B + "px", "margin-top": "100px", left: "50%", "margin-left": Math.round(-this.aa / 
						2) + "px", overflow: "hidden", "border-radius": "5px", "box-shadow": b, transform: "translateZ(1px)", transition: "opacity " + d + ", top " + d }, "#video.exiting": { opacity: "0.0", top: this.Q + "px" }, "#video-holder": { position: "absolute", width: this.aa - 1 + "px", height: this.Q + "px", overflow: "hidden", "border-radius": "5px" }, "#video-frame": { "margin-left": "-1px", width: this.aa + "px" }, "#video-controls": { opacity: "0", transition: "opacity 0.5s" }, "#video:hover #video-controls": { opacity: "1.0" }, "#video .video-progress-el": { position: "absolute", 
						bottom: "0", height: "25px", "border-radius": "0 0 0 5px" }, "#video-progress": { width: "90%" }, "#video-progress-total": { width: "100%", "background-color": this.e.La, opacity: "0.7" }, "#video-elapsed": { width: "0", "background-color": "#6cb6f5", opacity: "0.9" }, "#video #video-time": { width: "10%", right: "0", "font-size": "11px", "line-height": "25px", color: this.e.Ya, "background-color": "#666", "border-radius": "0 0 5px 0" } };this.K("ie", 8) && c.extend(a, { "* html #overlay": { position: "absolute" }, "* html #bg": { position: "absolute" }, "html, body": { height: "100%" } });
				this.K("ie", 7) && c.extend(a, { "#mini #body": { display: "inline", zoom: "1", border: "1px solid " + this.e.ja }, "#mini #body-text": { padding: "20px" }, "#mini #mini-icon": { display: "none" } });var b = "backface-visibility,border-radius,box-shadow,opacity,perspective,transform,transform-style,transition".split(","), e = ["khtml", "moz", "ms", "o", "webkit"], j;for (j in a) for (f = 0; f < b.length; f++) if ((d = b[f], d in a[j])) for (var h = a[j][d], m = 0; m < e.length; m++) a[j]["-" + e[m] + "-" + d] = h;(function (a, b) {function c(a) {var b = "", d;for (d in a) {var e = 
							d.replace(/#/g, "#" + g.u + "-").replace(/\./g, "." + g.u + "-"), b = b + ("\n" + e + " {"), e = a[d], f;for (f in e) b += f + ":" + e[f] + ";";b += "}";}return b;}var d = c(a) + (function (a) {var b = "", d;for (d in a) b += "\n" + d + " {" + c(a[d]) + "\n}";return b;})(b), e = k.head || k.getElementsByTagName("head")[0] || k.documentElement, f = k.createElement("style");e.appendChild(f);f.setAttribute("type", "text/css");f.styleSheet ? f.styleSheet.cssText = d : f.textContent = d;})(a, i);};g.prototype.cc = c.s(function () {if (this.va) {var a = this;a.Pb = "postMessage" in window;k.createElement("div");
					a.V = a.va;var b = a.va.match(/(?:youtube(?:-nocookie)?\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i), c = a.va.match(/vimeo\.com\/.*?(\d+)/i);if (b) {if ((a.O = n, a.Ob = b[1], a.Pb)) window.onYouTubeIframeAPIReady = function () {a.g("video-frame") && a.hb();}, b = k.createElement("script"), b.src = "//www.youtube.com/iframe_api", c = k.getElementsByTagName("script")[0], c.parentNode.insertBefore(b, c);} else if (c) a.O = n, a.Nb = c[1];if (a.K("ie", 7) || a.K("firefox", 3)) a.O = s, a.la = n;}});g.prototype.cb = c.s(function () {function a(a, 
				b) {var c = {};if (k.defaultView && k.defaultView.getComputedStyle) c = k.defaultView.getComputedStyle(a, p);else if (a.currentStyle) c = a.currentStyle;return c[b];}var b = this;c.N(b.g("bg"), "click", function () {b.Na();});if (this.D) {var e = this.g("overlay");e && "hidden" !== a(e, "visibility") && "none" !== a(e, "display") && (this.ab()[this.D] = 1 * new Date(), this.cookie.save(), this.Ja("$campaign_delivery"), this.Wa.people.append({ $campaigns: this.D, $notifications: { campaign_id: this.D, message_id: this.xb, type: "web", time: new Date() } }));}});
			g.prototype.dc = function (a) {var b = this;if (0 === this.pa.length) a();else {for (var c = 0, f = [], d = 0; d < this.pa.length; d++) {var g = new Image(), i = function i() {c++;c === b.pa.length && a && (a(), a = p);};g.onload = i;g.src = this.pa[d];g.complete && i();f.push(g);}this.K("ie", 7) && setTimeout(function () {var b = n;for (d = 0; d < f.length; d++) f[d].complete || (b = s);b && a && (a(), a = p);}, 500);}};g.prototype.eb = c.s(function () {window.clearInterval(this.gc);this.Y.style.visibility = "hidden";this.l.removeChild(this.Y);});g.prototype.fb = function () {function a(a) {if (a in 
					f) return n;if (!c) for (var a = a[0].toUpperCase() + a.slice(1), a = ["O" + a, "Webkit" + a, "Moz" + a], b = 0; b < a.length; b++) if (a[b] in f) return n;return s;}function b(a) {return (a = E.userAgent.match(a)) && a[1];}this.z = {};this.z.chrome = b(/Chrome\/(\d+)/);this.z.firefox = b(/Firefox\/(\d+)/);this.z.ie = b(/MSIE (\d+).+/);!this.z.ie && !window.ActiveXObject && "ActiveXObject" in window && (this.z.ie = 11);if (this.l = k.body || k.getElementsByTagName("body")[0]) this.rc = Math.max(this.l.scrollWidth, k.documentElement.scrollWidth, this.l.offsetWidth, 
				k.documentElement.offsetWidth, this.l.clientWidth, k.documentElement.clientWidth), this.qc = Math.max(this.l.scrollHeight, k.documentElement.scrollHeight, this.l.offsetHeight, k.documentElement.offsetHeight, this.l.clientHeight, k.documentElement.clientHeight);var c = this.z.ie, f = k.createElement("div").style;this.Mb = this.l && a("transition") && a("transform");this.Qa = (33 <= this.z.chrome || 15 <= this.z.firefox) && this.l && a("backfaceVisibility") && a("perspective") && a("transform");};g.prototype.fc = c.s(function () {function a() {window.YT && 
					window.YT.loaded && b.hb();b.Jc = n;b.L().style.visibility = "hidden";}var b = this, c = [{ m: b.L(), k: "opacity", start: 1, i: 0 }, { m: b.L(), k: "top", start: g.B, i: -500 }, { m: b.g("video-noflip"), k: "opacity", start: 0, i: 1 }, { m: b.g("video-noflip"), k: "top", start: 2 * -b.Q, i: 0 }];if (b.q) {var f = b.g("bg"), d = b.g("overlay");f.style.width = "100%";f.style.height = "100%";d.style.width = "100%";b.J(b.L(), "exiting");b.J(f, "visible");c.push({ m: b.g("bg"), k: "opacity", start: 0, i: g.ba });}b.g("video-holder").innerHTML = b.Tc;b.Qa ? (b.J("flipper", "flipped"), 
				setTimeout(a, g.I)) : b.ea(c, g.I, a);});g.prototype.Ja = function (a, b, e) {this.D ? (b = b || {}, b = c.extend(b, { campaign_id: this.D, message_id: this.xb, message_type: "web_inapp", message_subtype: this.X }), this.Wa.track(a, b, e)) : e && e.call();};g.prototype.hb = c.s(function () {var a = this;if (!a.Uc) {a.Uc = n;var b = a.g("video-elapsed"), e = a.g("video-time"), f = a.g("video-progress");new window.YT.Player(g.u + "-video-frame", { events: { onReady: function onReady(d) {function g(a) {var a = Math.round(h - a), b = Math.floor(a / 60), c = Math.floor(b / 60), a = a - 60 * b;e.innerHTML = 
									"-" + (c ? c + ":" : "") + ("00" + (b - 60 * c)).slice(-2) + ":" + ("00" + a).slice(-2);}var i = d.target, h = i.getDuration();g(0);a.gc = window.setInterval(function () {var a = i.getCurrentTime();b.style.width = 100 * (a / h) + "%";g(a);}, 250);c.N(f, "click", function (a) {a = Math.max(0, a.pageX - f.getBoundingClientRect().left);i.seekTo(h * a / f.clientWidth, n);});} } });}});c.toArray = c.$;c.isObject = c.j;c.JSONEncode = c.ca;c.JSONDecode = c.wa;c.isBlockedUA = c.vb;c.isEmptyObject = c.W;c.info = c.info;c.info.device = c.info.nb;c.info.browser = c.info.ka;i.prototype.init = 
			i.prototype.Ta;i.prototype.disable = i.prototype.disable;i.prototype.track = i.prototype.P;i.prototype.track_links = i.prototype.Oc;i.prototype.track_forms = i.prototype.Nc;i.prototype.track_pageview = i.prototype.Jb;i.prototype.register = i.prototype.Z;i.prototype.register_once = i.prototype.G;i.prototype.unregister = i.prototype.ua;i.prototype.identify = i.prototype.Ra;i.prototype.alias = i.prototype.hc;i.prototype.name_tag = i.prototype.Ac;i.prototype.set_config = i.prototype.Eb;i.prototype.get_config = i.prototype.d;i.prototype.get_property = 
			i.prototype.oa;i.prototype.get_distinct_id = i.prototype.M;i.prototype.toString = i.prototype.toString;i.prototype._check_and_handle_notifications = i.prototype.$a;i.prototype._show_notification = i.prototype.gb;m.prototype.properties = m.prototype.qa;m.prototype.update_search_keyword = m.prototype.Lb;m.prototype.update_referrer_info = m.prototype.Za;m.prototype.get_cross_subdomain = m.prototype.vc;m.prototype.clear = m.prototype.clear;o.prototype.set = o.prototype.set;o.prototype.set_once = o.prototype.Fb;o.prototype.increment = 
			o.prototype.tb;o.prototype.append = o.prototype.append;o.prototype.track_charge = o.prototype.Mc;o.prototype.clear_charges = o.prototype.mc;o.prototype.delete_user = o.prototype.oc;o.prototype.toString = o.prototype.toString;c.Cb(m, ["_expire_notification_campaigns"]);c.Cb(i, ["identify", "_check_and_handle_notifications", "_show_notification"]);if (c.h(r)) q.na("'mixpanel' object not initialized. Ensure you are using the latest version of the Mixpanel JS Library along with the snippet we provide.");else if (r.__loaded || 
			r.config && r.cookie) q.error("Mixpanel library has already been downloaded at least once.");else if (1.1 > z) q.na("Version mismatch; please ensure you're using the latest version of the Mixpanel code snippet.");else {var y = {};c.a(r._i, function (a) {var b;a && c.isArray(a) && (b = a[a.length - 1], a = F.apply(this, a), y[b] = a);});var Q = function Q() {c.a(y, function (a, b) {"mixpanel" !== b && (r[b] = a);});r._ = c;};r.init = function (a, b, c) {c ? r[c] || (r[c] = y[c] = F(a, b, c), r[c].ha()) : (c = r, y.mixpanel ? c = y.mixpanel : a && (c = F(a, b, "mixpanel"), c.ha()), 
					window.mixpanel = r = c, Q());};r.init();c.a(y, function (a) {a.ha();});if (k.addEventListener) "complete" == k.readyState ? x() : k.addEventListener("DOMContentLoaded", x, s);else if (k.attachEvent) {k.attachEvent("onreadystatechange", x);z = s;try {z = window.frameElement == p;} catch (R) {}if (k.documentElement.doScroll && z) {var M = function M() {try {k.documentElement.doScroll("left");} catch (a) {setTimeout(M, 1);return;}x();};M();}}c.N(window, "load", x, n);}})(window.mixpanel);})();}



//else
{}



//Google Analytics

if (typeof ga !== 'undefined') {
	// light
	switch (config.app) {
		case 'light':
			ga('create', 'UA-55863666-1', 'auto');
			break;
		case 'pro':
			ga('create', 'UA-55863666-2', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'web':
			ga('create', 'UA-58183317-1', 'auto');
			mixpanel.init("339e511cfff7fdcd146d3a4dd60f03a8");
			break;
		case 'app':
			ga('create', 'UA-55863666-8', 'auto');
			break;
		case 'ambieye':
			ga('create', 'UA-55863666-6', 'auto');
			break;}

	//ga('create', 'UA-55863666-2', 'auto');
	// ambieye ga('create', 'UA-55863666-6', 'auto');

	ga('require', 'displayfeatures');
	ga('send', 'pageview');}


if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
	mixpanel.track_links("a", "click", { 
		"referrer": document.referrer });}


/**/

function trackState(name, state) {
	return;}


function trackEvent(category, action, label, value, data) {
	if (typeof ga !== 'undefined') {
		ga('send', 'event', category, action, { 
			'nonInteraction': 1, 
			'label': label, 
			'value': value });}



	var obj = { 
		'category': category, 
		'action': action, 
		'value': value, 
		'data': data };


	if (typeof mixpanel !== "undefined" && mixpanel.track_links !== undefined) {
		mixpanel.track(label, obj);}


	if (data) {
		trackState(category, obj);}}




var gOldOnError = window.onerror;
// Override previous handler.
window.onerror = function myErrorHandler(errorMsg, url, lineNumber) {
	if (gOldOnError) 
		// Call previous handler.
		return gOldOnError(errorMsg, url, lineNumber);

	// Just let default handler run.
	return false;};


if (config.app === 'pro' || config.app === 'web') {
	// script.fail remvoed
	/*
 (function(_, __) {
 _._errs = []; var h = _.onerror; var f = function() { var a = arguments; _errs.push(a); h && h.apply(this, a)};
 var sf = __.createElement('script');sf.type = 'text/javascript';sf.async = true;sf.id = 'onscriptfail';
 sf.src = '//script.fail/inform?c2FkYWtvdkBnbWFpbC5jb20=$mnNMzeR8oEfK7OC4MOA7MZBhyn+fSI8xaWQ2qHXHCXE=';
 var s = __.getElementsByTagName('script')[0]; s.parentNode.insertBefore(sf, s);
 _.onerror = f;
 })(window, document);
 */}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixDQUFDLFlBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBQyxrQkFBa0IsRUFBQyxDQUFDLEdBQUMsTUFBTSxFQUFDLEVBQUUsR0FBQyxVQUFVLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFBLENBQUM7QUFDdEksS0FBSSxFQUFFLEdBQUMsU0FBUyxFQUFDLENBQUMsR0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLE9BQU8sRUFBQyxFQUFFLEdBQUMsTUFBTSxFQUFDLEVBQUUsR0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLGVBQWUsRUFBQyxFQUFFLEdBQUMsY0FBYyxFQUFDLEVBQUUsR0FBQyxTQUFTLEVBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsT0FBTyxFQUFDLENBQUMsR0FBQyxVQUFVLEVBQUMsRUFBRSxHQUFDLGdCQUFnQixFQUFDLEVBQUUsR0FBQyxVQUFVLEVBQUMsRUFBRSxHQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsVUFBVSxFQUFDLEVBQUUsR0FBQyxNQUFNLEVBQUMsRUFBRSxHQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsT0FBTyxFQUFDLENBQUMsR0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsTUFBTSxFQUFDLEVBQUUsR0FBQyxPQUFPLEVBQUMsQ0FBQyxHQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsU0FBUyxFQUFDLEVBQUUsR0FBQyxjQUFjLEVBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsUUFBUSxFQUFDLENBQUMsR0FBQyxXQUFXLEVBQUMsRUFBRSxHQUFDLGFBQWEsRUFBQyxFQUFFLEdBQUMsUUFBUSxFQUFDLENBQUMsR0FBQyxNQUFNLEVBQUMsRUFBRSxHQUFDLGNBQWMsRUFBQyxDQUFDLEdBQUMsV0FBVyxFQUFDLEVBQUUsR0FBQyxXQUFXLEVBQUMsRUFBRSxHQUFDLFlBQVksRUFBQyxDQUFDLEdBQUMsTUFBTSxFQUFDLENBQUMsR0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUMsS0FBSSxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsWUFBVSxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxrRUFBa0UsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLEVBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxPQUFNLFVBQVUsSUFBRSxPQUFPLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLE9BQU0sZ0JBQWdCLElBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxFQUFFLENBQUEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsd0JBQXdCLEVBQUMsRUFBRSxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLEdBQVcsRUFBRSxFQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFHLEVBQUUsWUFBWSxRQUFRLEVBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsRUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNsd0MsSUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3JmLElBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsRUFBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFHLElBQUUsQ0FBQyxJQUFFLEdBQUcsSUFBRSxDQUFDLElBQUUsRUFBRSxJQUFFLENBQUMsSUFBRSxHQUFHLElBQUUsQ0FBQyxDQUFBLEVBQUMsT0FBTyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLFFBQVEsYUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxJQUFHLFFBQVEsYUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxNQUFLLENBQUMsTUFBSyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLFFBQVEsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxHQUFXLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsSUFBRSxDQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsRUFBRSxDQUFBLEFBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksSUFBRSxJQUFJLElBQUUsQ0FBQyxDQUFDLFlBQVksRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxFQUFFLE9BQU0sQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEdBQUMsQ0FBQyxHQUFDLGlCQUFpQixDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFFLEdBQUcsSUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxTQUFTLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLFVBQVUsR0FBQyxBQUFDLElBQUksSUFBSSxDQUFDLEFBQUMsSUFBSSxJQUFJLEVBQUEsQ0FBRSxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFFLFdBQVcsRUFBRSxHQUFDLElBQUksQ0FBQSxBQUFDLENBQUMsQ0FBQyxJQUFFLE1BQU0sSUFBRSxDQUFDLEtBQUcsQ0FBQyxJQUFFLFNBQVMsR0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLElBQUcsRUFBRSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO0FBQ3orQyxHQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLHdDQUF3QyxFQUFDLEVBQUUsR0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsR0FBVyxDQUFDLE9BQU0sQ0FBQyxFQUFFLElBQUUsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFBLEdBQUUsNEJBQTRCLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLEdBQUMsT0FBTyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLElBQUcsSUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUcsSUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUUsQ0FBQSxDQUFDLE1BQUssTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDO0FBQ25vQixJQUFFLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsWUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsWUFBVSxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUEsQ0FBQyxJQUFHLEVBQUUsaUJBQWlCLElBQUcsQ0FBQyxDQUFBLEFBQUMsRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEdBQUMsWUFBVSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxLQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUM7QUFDM2YsRUFBQyxFQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsT0FBTyxFQUFFLENBQUMsWUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFDLENBQUMsR0FBQyxhQUFhLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxFQUFFLEdBQUMseUJBQXlCLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLGNBQWMsQ0FBQyxFQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLGNBQWMsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVyxDQUFDLElBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUN4ZixNQUFFLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxHQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsSUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsR0FBRyxJQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLElBQUUsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLE9BQU8sSUFBRSxDQUFDLElBQUUsUUFBUSxJQUFFLENBQUMsRUFBQyxNQUFLLE9BQU8sQ0FBQyxDQUFDO0FBQ2plLFVBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYyxJQUFFLGlCQUFpQixJQUFHLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBQSxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUcsU0FBUyxJQUFFLE9BQU8sQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsSUFBRSxFQUFFLEVBQUUsR0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7QUFDMWEsVUFBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsU0FBUyxFQUFFLEdBQUUsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxTQUFTLElBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBQyxNQUFLLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLEdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLEdBQVcsQ0FBQyxJQUFHLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBVSxDQUFBLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUcsYUFBYSxJQUFFLENBQUMsSUFBRSxNQUFNLElBQUUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQUFBQyxJQUFJLElBQUksRUFBQSxDQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxHQUFXLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsRUFBQSxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUEsRUFBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEtBQUssQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQSxBQUFDLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFFLENBQUMsR0FBQyxFQUFFLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUUsQ0FBQyxJQUFFLEVBQUUsS0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxFQUFDLElBQUcsUUFBUSxZQUFTLENBQUMseUNBQUQsQ0FBQyxFQUFBLEVBQUMsS0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDcG1DLEtBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsS0FBSyxDQUFDLElBQUUsQ0FBQyxFQUFDLFFBQU8sQ0FBQyxHQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHO0FBQ25nQixHQUFDLEdBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsR0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsSUFBRSxJQUFJLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsZUFBZSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hnQixLQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLElBQUksRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLFlBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLElBQUUsS0FBSyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxJQUFJLENBQUMsQ0FBQztBQUMzZSxFQUFDLENBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO0FBQzllLEVBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxNQUFNLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFDLEtBQUssQ0FBQyxFQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUNoZCxLQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxLQUFLLENBQUMsRUFBQyxZQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsS0FBSyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsWUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFBLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztBQUN4VixLQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxLQUFLLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxLQUFLLENBQUMsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLEtBQUssQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsZUFBZSxFQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUM7QUFDbmdCLEdBQUUsR0FBQyxDQUFDLENBQUMscUJBQXFCLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxLQUFLLENBQUMsRUFBQyxRQUFRLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxFQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMscUJBQXFCLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUM7QUFDN1EsVUFBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVUsQ0FBQyxJQUFHLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLEVBQUUsQ0FBQyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsU0FBUyxFQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFDLFVBQVUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxHQUFXLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxFQUFFLEVBQUEsRUFBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsRUFBRSxFQUFFLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxHQUFFLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFBLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQyxJQUFHLENBQUMsQ0FBQyxHQUFDLElBQUksYUFBYSxDQUFDLGlDQUFpQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLEVBQUUsSUFBRyxDQUFDLENBQUMsRUFBQyxJQUFHLENBQUMsQ0FBQyxHQUFDLElBQUksYUFBYSxDQUFDLGlDQUFpQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLGNBQWMsRUFBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUMsUUFBUSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFNLEVBQUUsRUFBQyxFQUFFLElBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBRyxDQUFDLENBQUMsR0FBQyxJQUFJLGFBQWEsQ0FBQywrQkFBK0IsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxFQUFFLENBQUM7QUFDai9CLEdBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUEsQUFBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLEtBQUssQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsSUFBRSxDQUFDLENBQUEsQUFBQyxLQUFHLENBQUMsR0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUUsQ0FBQyxJQUFFLFFBQVEsSUFBRSxDQUFDLElBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxZQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLGlCQUFpQixFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUN6a0IsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsMEJBQTBCLEdBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxHQUFHLElBQUUsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsS0FBRyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUEsQUFBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUcsS0FBSyxDQUFDLElBQUUsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBRSxRQUFRLElBQUUsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsT0FBTyxVQUFTLENBQUMsRUFBQyxDQUFDLFVBQVUsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsSUFBRyxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsSUFBRyxNQUFNLElBQUUsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxLQUFHLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsSUFBRSxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQSxFQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFHLFFBQVEsSUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRSxLQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQSxBQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsQ0FBQztBQUMzK0IsR0FBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLElBQUUsRUFBRSxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsQUFBQyxJQUFJLElBQUksRUFBQSxDQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsR0FBRyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsT0FBTSxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3JmLEdBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQyxPQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsUUFBUSxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsSUFBSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsRUFBQyxFQUFFLEdBQUMscUNBQXFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLFFBQVEsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBRSxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUMsSUFBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQzUrQixHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLElBQUcsR0FBRyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUcsTUFBTSxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxJQUFHLFFBQVEsSUFBRSxPQUFPLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUN4TCxLQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQUFBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUEsR0FBRSxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxHQUFHLEdBQUMsR0FBRyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxLQUFLLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBRyxLQUFLLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsTUFBSSxNQUFNO0FBQ2pnQixJQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQztBQUN4QyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxHQUFDLEdBQUcsRUFBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFBLElBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3ZnQixXQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVcsTUFBTSxFQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLE1BQUssSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEtBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsSUFBRyxJQUFJLElBQUUsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxPQUFPLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxPQUFPLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLEdBQUcsSUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsRUFBQyxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUE7QUFDNXBCLElBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxHQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMscURBQXFELEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEdBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLHFEQUFxRCxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLFNBQUgsRUFBRSxHQUFXLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBRSxFQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxpQkFBaUIsQ0FBQyxJQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywrQ0FBK0MsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyw0REFBNEQsSUFBRSxDQUFDLEdBQUMsU0FBUyxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFBLEFBQUMsR0FBQyxFQUFFLEVBQUUsRUFBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsNkJBQTZCLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBRSxFQUFBLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxJQUFJLEVBQUUsRUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDNXRELElBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBRSxFQUFFLElBQUUsR0FBRyxJQUFFLEVBQUUsQ0FBQSxJQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUEsQUFBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQSxHQUFFLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDdGYsUUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLElBQUUsRUFBRSxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxJQUFFLENBQUMsR0FBQyxLQUFLLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsTUFBTSxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsNkJBQTZCLEVBQUMsTUFBTSxDQUFDLEdBQUMsV0FBVyxDQUFDLENBQUEsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQUFBQyxDQUFBLEFBQUMsQ0FBQSxBQUFDLENBQUE7QUFDMWYsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQSxJQUFHLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFDLEVBQUUsRUFBRSxHQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEFBQUMsSUFBSSxJQUFJLEVBQUEsQ0FBRSxFQUFFLENBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDLEFBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsS0FBSyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNwZixHQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsR0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUcsWUFBWSxLQUFHLENBQUMsQ0FBQyxVQUFVLElBQUUsQ0FBQyxDQUFDLENBQUEsQUFBQyxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLEtBQUcsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsWUFBWSxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUUsVUFBVSxLQUFHLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxlQUFlLENBQUEsQUFBQyxJQUFFLEVBQUUsQ0FBQSxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLGNBQWMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsWUFBWSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxZQUFZLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVUsQ0FBQztBQUMzZixJQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLGFBQWEsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUNoVCxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxFQUFFLENBQUMsR0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBRyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLFNBQVMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxJQUFHLFdBQVcsSUFBRSxDQUFDLENBQUMsZUFBZSxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsZ0NBQWdDLEVBQUMsRUFBRSxHQUFDLFNBQUgsRUFBRSxDQUFVLENBQUMsRUFBQyxDQUFDLElBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxTQUFTLElBQUUsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLFNBQVMsSUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxBQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxNQUFLLE9BQU8sQ0FBQyxJQUFHLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxJQUFFLENBQUMsQ0FBQSxBQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsSUFBRyxJQUFJLENBQUMsQ0FBQztBQUN6MUIsSUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxJQUFFLENBQUMsSUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsSUFBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBSyxPQUFPLENBQUMsSUFBRyxJQUFJLENBQUMsQ0FBQyxJQUFFLElBQUksSUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFDLE1BQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBQSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBQSxDQUFDLEVBQUUsR0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDLENBQUM7QUFDdk8sS0FBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxJQUFJLENBQUMsRUFBQSxDQUFDLElBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsR0FBQyxTQUFILEVBQUUsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxFQUFFLENBQUEsQ0FBRSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFHLE9BQU8sSUFBRSxDQUFDLEdBQUMsRUFBRSxHQUFDLFFBQVEsSUFBRSxDQUFDLEdBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQSxBQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQSxDQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLEVBQUUsRUFBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0FBQ3JmLEdBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQSxBQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLEVBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQSxDQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFDLENBQUMsSUFBRSxFQUFFLEVBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUMsY0FBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQzlXLEVBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxLQUFLLENBQUEsR0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBRyxFQUFFLEVBQUMsQ0FBQyxFQUFFLElBQUUsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBRyxFQUFFLEdBQUMsQ0FBQyxFQUFFLElBQUUsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFBLEdBQUUsd0NBQXdDLEdBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxRQUFRLElBQUUsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsT0FBTyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUcsRUFBRSxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDO0FBQ3BmLFNBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsR0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsRUFBRSxHQUFDLDBCQUEwQixJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxFQUFFLENBQUEsSUFBRyxFQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsV0FBVyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsS0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxPQUFNLEVBQUUsRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNuUSxFQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLEVBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLE1BQUssSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxZQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUM5ckIsRUFBQyxDQUFDLENBQUMsR0FBQyxZQUFVLENBQUMsSUFBSSxJQUFFLEVBQUUsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLElBQUUsRUFBRSxJQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEdBQUcsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQSxHQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsNENBQTRDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUUsSUFBRSxFQUFFLEVBQUU7QUFDcGYsSUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsRUFBRSxDQUFBLENBQUUsTUFBTSxHQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsWUFBVSxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxHQUFXLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxFQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsU0FBUyxDQUFBLEdBQUUsQ0FBQyxJQUFFLENBQUMsSUFBRSxFQUFFLENBQUEsQUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsU0FBUyxFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUUsTUFBTSxDQUFDOzs7QUFBQyxBQUczakIsQ0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFDWixLQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQ3hCLFFBQU0sQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDO0FBQzFCLEdBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUNwQixZQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQ2IsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixLQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDO0FBQ3BDLEtBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxZQUFVO0FBQ2IsTUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FDN0Q7O0FBQ0QsT0FBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDO0FBQ1IsY0FBVyxLQUFHLE9BQU8sQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxVQUFVLENBQUM7QUFDOUMsSUFBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLEVBQUUsQ0FBQztBQUN0QixJQUFDLENBQUMsUUFBUSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsVUFBVSxDQUFDLFVBQVUsS0FBRyxDQUFDLEtBQUcsQ0FBQyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsU0FBUyxDQUFBLEFBQUMsQ0FBQztBQUNyRixXQUFPLENBQUMsQ0FBQSxDQUNULENBQUM7O0FBQ0YsSUFBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUMsWUFBVTtBQUMxQixXQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsZ0JBQWdCLENBQUEsQ0FBQyxDQUFDO0FBQ3ZDLElBQUMsR0FBQyxpUEFBaVAsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDalEsUUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsSUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQ3BCLEdBQUMsQ0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDO0FBQ1gsR0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsR0FBQyxDQUFDLElBQUksR0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLEdBQUMsQ0FBQyxHQUFHLEdBQUMscURBQXFELENBQUM7QUFDNUQsR0FBQyxHQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBQUMsRUFFdkMsQ0FBQyxDQUFBLENBQUUsUUFBUSxFQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUUsRUFBRSxDQUFDLENBQUM7O0FBRW5DLElBQUksTUFBTSxDQUFDLEdBQUcsS0FBSyxLQUFLLEVBQUU7Ozs7QUFJekIsRUFBQyxZQUFXO0FBQ1osTUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUUsQ0FBQyxPQUFPLFlBQVUsRUFBRSxDQUFBLENBQUM7QUFDdEQsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxHQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxVQUFVLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsK0JBQStCLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBQSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxFQUFBLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxRQUFRLENBQUEsQ0FBQyxTQUFTLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsT0FBTyxDQUFBLENBQUMsU0FBUyxDQUFDLEdBQUUsRUFBRTtBQUM1ZixZQUFTLENBQUMsR0FBRSxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUMsS0FBSyxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsUUFBUSxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLEdBQUMsK0RBQStELENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUUsaUJBQWlCLElBQUcsSUFBSSxjQUFjLEVBQUEsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUMsVUFBVTtBQUMxZixhQUFTLENBQUEsR0FBRSxrQkFBa0IsRUFBQyxzQkFBc0IsRUFBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLGNBQWMsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxtQkFBbUIsRUFBQyxHQUFHLEVBQUMsaUJBQWlCLEVBQUMsR0FBRyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsY0FBYyxFQUFDLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxJQUFJLFNBQVMsRUFBQSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBQyxZQUFVLENBQUMsSUFBRyxFQUFFLElBQUk7QUFDaGYsT0FBQyxDQUFBLEFBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxVQUFVLEtBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxFQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsRUFBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUN6ZixNQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLFFBQVEsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLElBQUUsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFNLGdCQUFnQixLQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsT0FBTSxtQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLFFBQVEsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBQzdmLEtBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBRyxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQSxBQUFDLEVBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsRUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsRUFBQSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxLQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQztBQUN6Z0IsS0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTSxpQkFBaUIsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTSxlQUFlLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU0saUJBQWlCLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxZQUFVLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtBQUNyZixlQUFTLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLDREQUE0RCxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBRyxPQUFPLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQSxZQUFVLENBQUMsT0FBTyxVQUFTLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbGdCLE1BQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLFFBQVEsYUFBVSxDQUFDLHlDQUFELENBQUMsRUFBQSxJQUFFLFVBQVUsS0FBRyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLGVBQWMsQ0FBQyx5Q0FBRCxDQUFDLElBQUUsS0FBSyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsS0FBSyxTQUFTLENBQUMsS0FBSyxNQUFNLENBQUMsT0FBTSxFQUFFLEdBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTSxNQUFNLENBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLElBQUcsZ0JBQWdCLEtBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxHQUFDLElBQUksR0FBQyxDQUFDLEdBQUMsS0FBSyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBQyxHQUFHLENBQUEsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuZixTQUFDLEdBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQSxBQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUMsSUFBSSxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBQyxHQUFHLENBQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLDBIQUEwSCxFQUFDLENBQUMsR0FBQyxFQUFDLElBQVEsRUFBQyxLQUFLLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLElBQVEsRUFBQyxLQUFLLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sUUFBUSxLQUFHLE9BQU8sQ0FBQyxHQUFDLENBQUMsR0FBQyxLQUFLLEdBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxHQUFHLENBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO0FBQ3RmLE9BQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFBLFlBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRSxDQUFDLFFBQU8sQ0FBQyxHQUFFLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLEdBQUUsQ0FBQyxPQUFLLENBQUMsSUFBRSxHQUFHLElBQUUsQ0FBQyxHQUFFLENBQUMsRUFBRSxDQUFBLENBQUMsU0FBUyxDQUFDLEdBQUUsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxFQUFDLE9BQUssQ0FBQyxFQUFFLEdBQUUsQ0FBQyxJQUFHLEdBQUcsS0FBRyxDQUFDLEVBQUMsT0FBTyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBRyxJQUFJLEtBQUcsQ0FBQyxFQUFDLEtBQUcsQ0FBQyxFQUFFLEVBQUMsR0FBRyxLQUFHLENBQUMsQ0FBQSxFQUFDLENBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLE1BQUssSUFBRyxRQUFRLEtBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU07QUFDaGYsT0FBQyxJQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFLLEdBQUcsSUFBRSxDQUFDLElBQUUsR0FBRyxJQUFFLENBQUMsR0FBRSxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLElBQUcsR0FBRyxLQUFHLENBQUMsRUFBQyxLQUFJLENBQUMsSUFBRSxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUUsR0FBRyxJQUFFLENBQUMsSUFBRSxHQUFHLElBQUUsQ0FBQyxHQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxJQUFFLEdBQUcsS0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUcsR0FBRyxLQUFHLENBQUMsSUFBRSxHQUFHLEtBQUcsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsT0FBSyxHQUFHLElBQUUsQ0FBQyxJQUFFLEdBQUcsSUFBRSxDQUFDLEdBQUUsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsWUFBWSxHQUFDLENBQUMsR0FBQyxnQkFBZ0IsR0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE1BQUssRUFBQyxJQUFJLEVBQUMsYUFBYSxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLElBQVEsRUFBQyxDQUFDLEVBQUMsSUFBUTtBQUNwZixNQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFPLENBQUMsR0FBRSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLElBQUcsR0FBRyxLQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFHLEdBQUcsS0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLE9BQUssQ0FBQyxHQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUcsR0FBRyxLQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsT0FBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRyxHQUFHLEtBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUMxZixjQUFRLE9BQU0sR0FBRyxJQUFFLENBQUMsSUFBRSxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsRUFBRSxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxtRUFBbUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsbUVBQW1FLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLG1FQUFtRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaGlCLHVFQUFtRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBRSxPQUFPLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLElBQUUsSUFBSSxHQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsR0FBRyxFQUFDLENBQUMsR0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLEdBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUUsRUFBRSxHQUFDLEdBQUcsRUFBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLEVBQUUsR0FBQyxHQUFHLEVBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDO0FBQ25mLE1BQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFBLFlBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxBQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxHQUFFLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLEVBQUEsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsSUFBSSxJQUFJLEVBQUEsR0FBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLE9BQU8sWUFBVSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBLENBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUc7QUFDdmdCLE9BQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTSw2RUFBNEUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxXQUFXLEtBQUcsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsUUFBUSxHQUFDLENBQUMsR0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsSUFBRSxRQUFRLEtBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxFQUFFLEdBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUs7QUFDcGhCLE9BQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLEVBQUMsR0FBRyxFQUFDLGFBQVMsQ0FBQyxFQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsR0FBRyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQSxDQUFDLEVBQUMsR0FBRyxFQUFDLGFBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsR0FBRSxZQUFZLEdBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO0FBQzNmLFVBQUssR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQSxBQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxVQUFVLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsVUFBVSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLE1BQU0sRUFBQyxnQkFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUEsWUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN2ZixNQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixJQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQSxZQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFBLENBQUUsT0FBTyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFDLFdBQVcsQ0FBQyxPQUFPLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBQyxPQUFNLEVBQUUsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5ZixVQUFHLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFFLENBQUMsRUFBQyxPQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsTUFBSyxJQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsTUFBSyxJQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0RBQWdELENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDOWYsT0FBQyxLQUFHLENBQUMsR0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsR0FBQyxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBTyxDQUFDLEdBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ3poQixVQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLE1BQU0sUUFBUSxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsTUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsRUFBQyxFQUFFLEVBQUMsY0FBVSxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMseURBQXlELENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7QUFDcGYsTUFBRSxFQUFDLFlBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxHQUFDLFFBQVEsR0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxHQUFDLE1BQU0sR0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFDLE9BQU8sR0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxHQUFDLFlBQVksR0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUUsRUFBQyxZQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxDQUFDLEtBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxPQUFPLElBQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxFQUFDLFlBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsR0FBQyxZQUFZLEdBQUMsT0FBTyxHQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLEdBQUMsaUJBQWlCO0FBQ25nQixNQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsR0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLEdBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsQ0FBQyxHQUFDLGVBQWUsR0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLEdBQUMsZ0JBQWdCLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxDQUFDLEdBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxHQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLENBQUMsR0FBQyxtQkFBbUIsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsR0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFBLENBQUMsRUFBQyxFQUFFLEVBQUMsY0FBVSxDQUFDLE9BQU0sV0FBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLGdCQUFnQixHQUFDLFNBQVMsR0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsS0FBSyxHQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsU0FBUyxHQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxZQUFZLEdBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFVO0FBQ3hmLGFBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsT0FBTyxHQUFDLEVBQUUsRUFBQSxDQUFDLEVBQUMsRUFBRSxFQUFDLFlBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTSxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sR0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVksR0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsR0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsWUFBWSxHQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxlQUFlLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxTQUFTLEdBQUMsRUFBRSxFQUFBLENBQUMsRUFBQyxFQUFFLEVBQUMsWUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBQyxFQUFDLEVBQUUsRUFBQyxjQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFDLGlCQUFpQixFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUMsY0FBYyxFQUFDLE1BQU0sQ0FBQyxNQUFNO0FBQ3BnQixtQkFBYSxFQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxZQUFZLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxFQUFDLGNBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxFQUFDLFlBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLFdBQVcsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFDLEdBQUcsRUFBQyxlQUFVLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsaUJBQVUsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNWYsUUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLGNBQVUsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixHQUFDLENBQUMsR0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUM7QUFDcGYsT0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxZQUFVLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLE9BQU0sVUFBVSxLQUFHLE9BQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxTQUFTLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsT0FBTyxJQUFFLFFBQVEsS0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJO0FBQ3RmLEtBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBRSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUUsVUFBVSxDQUFDLFlBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxVQUFVLENBQUMsWUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUMsWUFBVSxDQUFDLElBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQztBQUMxZixLQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMscUJBQXFCLEVBQUMsUUFBUSxLQUFHLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBRSxVQUFVLEtBQUcsQ0FBQyxDQUFDLElBQUksS0FBRyxDQUFDLEdBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFDLFlBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJO0FBQzdnQixLQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxXQUFXLEtBQUcsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLE1BQU0sQ0FBQSxBQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxXQUFXLEtBQUcsT0FBTyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLFdBQVcsS0FBRyxPQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssS0FBRyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3BmLGVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLEVBQUEsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxpQkFBaUIsRUFBQyxDQUFDLElBQUUsU0FBUyxFQUFDLHlCQUF5QixFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLFNBQVMsRUFBQyxFQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBQyx5QkFBeUIsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDamhCLElBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUEsSUFBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO0FBQzFmLEtBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUUsUUFBUSxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLE9BQU8sS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFDLFFBQVEsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHFEQUFxRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFHLE1BQU0sS0FBRyxDQUFDLEVBQUMsT0FBTSxPQUFPLENBQUMsSUFBRyxXQUFXO0FBQ3hmLEtBQUMsRUFBQyxPQUFNLFFBQVEsQ0FBQyxJQUFHLE1BQU0sS0FBRyxDQUFDLEVBQUMsT0FBTSxPQUFPLENBQUMsSUFBRyxTQUFTLEtBQUcsQ0FBQyxFQUFDLE9BQU0sUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLFdBQVcsS0FBRyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUMsS0FBSyxJQUFHLFVBQVUsS0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyw4RkFBOEYsQ0FBQyxDQUFDO0FBQ2hnQixXQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsVUFBVSxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQSxHQUFFLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBQyxrQkFBa0IsRUFBQyxDQUFDLEVBQUMsZUFBZSxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFDLEVBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFlBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJO0FBQy9mLE1BQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsdURBQXVELENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEFBQUMsSUFBSSxDQUFDLEVBQUEsQ0FBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFHLENBQUMsRUFBQyxPQUFPLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFDLElBQUksR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUM1ZixJQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsS0FBSyxJQUFHLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxBQUFDLElBQUksSUFBSSxFQUFBLENBQUUsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsS0FBSyxJQUFHLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxNQUFLLElBQUcsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxjQUFjLEVBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFDLFlBQVUsQ0FBQyxJQUFHLENBQUM7QUFDNWYsUUFBQyxDQUFDLFVBQVUsRUFBQyxJQUFHLEdBQUcsS0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFDLG1CQUFtQixHQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsTUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUN0ZixNQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVUsS0FBRyxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsT0FBTyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBRSxVQUFVLEtBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsV0FBVyxLQUFHLE9BQU8sQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxXQUFXLEtBQUcsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxXQUFXO0FBQ3hmLFdBQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFDLFNBQVMsRUFBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFHLFdBQVcsS0FBRyxPQUFPLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ2hnQixlQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFFLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdGYsZUFBVSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpRUFBaUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUEsQUFBQyxDQUFDLElBQUcsQ0FBQyxLQUFHLENBQUMsRUFBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxFQUFDLEVBQUMsWUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwZixLQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sSUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxLQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFDLFVBQVUsRUFBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM3ZixpQkFBVyxFQUFDLENBQUMsRUFBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxBQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBRSxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsY0FBYyxJQUFFLENBQUMsSUFBRSxRQUFRLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3BmLE1BQUUsRUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsY0FBYyxJQUFFLENBQUMsSUFBRSxRQUFRLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLGNBQWMsSUFBRSxDQUFDLElBQUUsUUFBUSxJQUFFLENBQUMsS0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnRkFBZ0YsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLGNBQWM7QUFDcGYsTUFBQyxJQUFFLFFBQVEsSUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQyxPQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsSUFBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDcmdCLElBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFDLFlBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFDLFVBQVUsRUFBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3ZmLEtBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxNQUFNLElBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEdBQUMsV0FBVyxJQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sSUFBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsR0FBQyxTQUFTLElBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUM7QUFDdmYsS0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN2YsUUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFFLEVBQUUsQ0FBQSxDQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLE1BQU0sS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxZixLQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxHQUFFLFVBQVUsQ0FBQyxZQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFHLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLEVBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BmLE1BQUMsR0FBQyxPQUFPLEVBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFHLENBQUEsSUFBRyxDQUFDLEdBQUMsS0FBSyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsUUFBUSxLQUFHLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxHQUFHLENBQUEsQ0FBRSxPQUFPLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsU0FBUyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUcsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFBLENBQUUsT0FBTyxDQUFDLEdBQUcsR0FBQyxDQUFDLEdBQUMsR0FBRyxFQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZO0FBQ25nQixNQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLEVBQUEsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsV0FBVyxLQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBLEdBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFHLFNBQVMsS0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDLENBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsU0FBUyxLQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLElBQUksQ0FBQSxBQUFDLENBQUEsQUFBQyxDQUFDLFVBQVUsQ0FBQyxZQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxNQUFLLENBQUMsSUFBRSxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDdGYsSUFBQyxDQUFDLENBQUMsQ0FBQyxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBVSxDQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLE9BQU8sRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxJQUFHLENBQUMsR0FBQyxLQUFLLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBQyxPQUFPLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDcmdCLE1BQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBQyxFQUFDLGNBQWMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQSxJQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUMsRUFBQyxjQUFjLEVBQUMsTUFBTSxFQUFDLEVBQUMsWUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxZQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUMsWUFBVSxDQUFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxFQUFFLENBQUEsQUFBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsMEVBQTBFO0FBQzlpQixLQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxxQkFBcUIsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQSxHQUFFLElBQUksQ0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQywyRkFBMkYsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLGlDQUFpQyxDQUFBLEdBQUUsSUFBSSxDQUFDLEVBQUUsR0FBQyxFQUFFLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxVQUFVLENBQUMsSUFBRyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyw2TUFBNk07QUFDM25CLFFBQUksQ0FBQyxJQUFJLEdBQUMsa0VBQWtFLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxFQUFFLEdBQUMsK0JBQStCLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsOEJBQThCLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQyxDQUFDLEdBQUMscUJBQXFCLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyx5RkFBeUYsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsdUJBQXVCLEdBQUMsSUFBSSxDQUFDLElBQUksR0FBQyx1SUFBdUk7QUFDeGhCLE1BQUMsR0FBQyw0QkFBNEIsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUMsb0JBQW9CLENBQUEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsR0FBQywwQkFBMEIsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLGtGQUFrRixFQUFDLElBQUksQ0FBQyxFQUFFLEtBQUcsQ0FBQyxJQUFFLG1DQUFtQyxFQUFDLENBQUMsR0FBQyxzUUFBc1EsQ0FBQSxBQUFDLENBQUE7QUFDNWdCLFFBQUksQ0FBQyxFQUFFLEtBQUcsQ0FBQyxHQUFDLDJCQUEyQixHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMseUNBQXlDLENBQUEsQUFBQyxDQUFDLElBQUcsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLHVCQUF1QixHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsWUFBWSxHQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsVUFBVSxHQUFDLENBQUMsR0FBQyx5R0FBeUcsRUFBQyxDQUFDLEdBQUMsaUJBQWlCLElBQUUsSUFBSSxDQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFBLEFBQUMsR0FBQyxxREFBcUQsR0FBQyxDQUFDLEdBQUMsY0FBYyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUcsQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEdBQUUsNENBQTRDLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsR0FBQyxjQUFjLENBQUEsQUFBQyxDQUFDO0FBQ2xnQixRQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLDJCQUEyQixHQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsd0JBQXdCLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQywyQ0FBMkMsR0FBQyxDQUFDLEdBQUMsb0JBQW9CLENBQUEsQ0FBRSxPQUFPLENBQUMsV0FBVyxFQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLE1BQU0sS0FBRyxJQUFJLENBQUMsS0FBSyxHQUFDLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsTUFBTSxFQUFDLEdBQUMsRUFBQyxFQUFFLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBQyxTQUFTO0FBQzdmLE9BQUUsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsU0FBUyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsd0NBQXdDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHFDQUFxQyxJQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxBQUFDLEdBQUMsS0FBSyxDQUFDLEdBQUMsRUFBQyxVQUFVLEVBQUMsRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBQyxVQUFVLEVBQUMsRUFBQyxTQUFTLEVBQUMsaUJBQWlCLEVBQUMsRUFBQyxVQUFVLEVBQUMsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLE1BQU0sRUFBQyxZQUFZLEVBQUMsUUFBUSxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsYUFBYSxFQUFDLGtDQUFrQyxFQUFDLHdCQUF3QixFQUFDLGFBQWEsRUFBQyx5QkFBeUIsRUFBQyxXQUFXLEVBQUM7QUFDMWhCLG9CQUFlLEVBQUMsRUFBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsRUFBQyxZQUFZLEVBQUMsRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFDLE9BQU8sRUFBQyxHQUFHLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxFQUFDLGdCQUFnQixFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFDLEVBQUMsWUFBWSxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsRUFBQyxLQUFLLEVBQUMsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsV0FBVyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksRUFBQyxZQUFZLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxFQUFDLGtCQUFrQixFQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxxREFBcUQsRUFBQyxNQUFNLEVBQUMsbUJBQW1CLEVBQUMsVUFBVSxFQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUM7QUFDcGYsa0JBQWEsRUFBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsV0FBVyxFQUFDLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLFdBQVcsRUFBQyxHQUFHLEVBQUMsRUFBQyxnQkFBZ0IsRUFBQyxFQUFDLFdBQVcsRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEVBQUMsVUFBVSxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxpQkFBaUIsRUFBQyxhQUFhLEVBQUMsVUFBVSxFQUFDLE1BQU0sRUFBQyxFQUFDLFdBQVcsRUFBQyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsYUFBYSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxxQkFBcUIsRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLGVBQWUsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBRSxHQUFDLElBQUksRUFBQyxVQUFVLEVBQUMsVUFBVSxHQUFDLENBQUMsR0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLEVBQUMsbUJBQW1CLEVBQUMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQztBQUN0Zix3QkFBbUIsRUFBQyxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxFQUFDLEVBQUMsY0FBYyxFQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxFQUFDLEVBQUMsc0JBQXNCLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLEVBQUMsY0FBYyxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxlQUFlLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEVBQUMsWUFBWSxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUM7QUFDcmYsWUFBTyxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxZQUFZLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLHFCQUFxQixFQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxnQkFBZ0IsRUFBQyxVQUFVLEVBQUMsMENBQTBDLEVBQUMsRUFBQyxlQUFlLEVBQUMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxlQUFlLEVBQUMsRUFBQyxlQUFlLEVBQUMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxRQUFRLEVBQUMsRUFBQyxVQUFVLEVBQUMsRUFBQyxlQUFlLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLFFBQVEsRUFBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFDLGdCQUFnQixFQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pnQixVQUFJLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLGVBQWUsRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLG1CQUFtQixHQUFDLENBQUMsRUFBQyxFQUFDLGNBQWMsRUFBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEdBQUcsRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsZUFBZSxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLGtCQUFrQixFQUFDLE1BQU0sRUFBQyxTQUFTLEVBQUMsSUFBSSxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsRUFBQyxZQUFZLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLE9BQU8sRUFBQyxjQUFjLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsZUFBZSxFQUFDLGFBQWEsRUFBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLEVBQUMsMEJBQTBCLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0ZixjQUFRLEVBQUMsVUFBVSxFQUFDLG1CQUFtQixHQUFDLENBQUMsRUFBQyxFQUFDLHdCQUF3QixFQUFDLEVBQUMsa0JBQWtCLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBQyxzQkFBc0IsRUFBQyxFQUFDLGtCQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsZ0JBQWdCLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLGtCQUFrQixFQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLEVBQUMsVUFBVSxFQUFDLEVBQUMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLEVBQUMsZUFBZSxFQUFDLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLFNBQVMsRUFBQyxFQUFDLE1BQU0sRUFBQyxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxlQUFlLEVBQUMsS0FBSyxFQUFDLEVBQUMsUUFBUSxFQUFDLEVBQUMsWUFBWSxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsUUFBUTtBQUN6ZixpQkFBVyxFQUFDLFlBQVksRUFBQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxhQUFhLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFDLE9BQU8sRUFBQyxFQUFDLFlBQVksRUFBQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLFdBQVcsRUFBQyxZQUFZLEVBQUMsYUFBYSxFQUFDLE1BQU0sRUFBQyxXQUFXLEVBQUMsTUFBTSxFQUFDLGFBQWEsRUFBQyxRQUFRLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFDLGFBQWEsRUFBQyxFQUFDLE9BQU8sRUFBQyxjQUFjLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxXQUFXLEVBQUMsTUFBTSxFQUFDLGdCQUFnQixFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBQyxrQkFBa0IsRUFBQyxFQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLEVBQUMsc0JBQXNCLEVBQUMsRUFBQyxPQUFPLEVBQUMsWUFBWTtBQUM5aEIsc0JBQWdCLEVBQUMsUUFBUSxFQUFDLEVBQUMsVUFBVSxFQUFDLEVBQUMsZUFBZSxFQUFDLE1BQU0sRUFBQyxXQUFXLEVBQUMsTUFBTSxFQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUMsZ0JBQWdCLEVBQUMsT0FBTyxFQUFDLEtBQUssRUFBQyxTQUFTLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFDLFlBQVksRUFBQyxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUMsUUFBUSxHQUFDLENBQUMsRUFBQyxFQUFDLGtCQUFrQixFQUFDLEVBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLGVBQWUsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLGVBQWUsRUFBQyxZQUFZLEVBQUMsYUFBYSxFQUFDLE1BQU0sRUFBQyxTQUFTLEVBQUMsVUFBVSxFQUFDLG1CQUFtQixHQUFDLENBQUMsRUFBQyxFQUFDLGVBQWUsRUFBQyxFQUFDLE1BQU0sRUFBQyxhQUFhLEVBQUMsRUFBQyxjQUFjLEVBQUMsRUFBQyxLQUFLLEVBQUMsS0FBSztBQUM1Z0IsWUFBTSxFQUFDLEtBQUssRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLGtCQUFrQixFQUFDLHlFQUF5RSxFQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFDLGVBQWUsRUFBQyxFQUFDLGtCQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLGFBQWEsRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLFFBQVEsRUFBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxlQUFlLEVBQUMsYUFBYSxFQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsTUFBTSxFQUFDLFNBQVMsRUFBQyxVQUFVLEVBQUMsbUJBQW1CLEdBQUMsQ0FBQyxFQUFDLEVBQUMsZUFBZSxFQUFDLEVBQUMsT0FBTyxFQUFDLGNBQWMsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsY0FBYyxFQUFDLEtBQUssRUFBQyxnQkFBZ0IsRUFBQyxLQUFLO0FBQzlmLHdCQUFrQixFQUFDLG9FQUFvRSxHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLFdBQVcsRUFBQyxxQkFBcUIsRUFBQyxVQUFVLEVBQUMsRUFBQyxjQUFjLEVBQUMsRUFBQyxPQUFPLEVBQUMsY0FBYyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxhQUFhLEVBQUMsTUFBTSxFQUFDLGtCQUFrQixFQUFDLGlFQUFpRSxHQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsYUFBYSxFQUFDLG1CQUFtQixFQUFDLFdBQVcsRUFBQyxxQkFBcUIsRUFBQyxVQUFVLEVBQUMsRUFBQyxlQUFlLEVBQUMsRUFBQyxPQUFPLEVBQUMsY0FBYyxFQUFDLGdCQUFnQixFQUFDLEtBQUssRUFBQyxZQUFZLEVBQUMsUUFBUTtBQUN4Z0IsaUJBQVcsRUFBQyxNQUFNLEVBQUMsYUFBYSxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLFdBQVcsRUFBQyxZQUFZLEVBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFVBQVUsRUFBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLEVBQUMsZUFBZSxFQUFDLEVBQUMsa0JBQWtCLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUMsaUJBQWlCLEVBQUMsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBQyxlQUFlLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEdBQUcsRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxFQUFDLGFBQWEsRUFBQyxFQUFDLHFCQUFxQixFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsaUJBQWlCLEVBQUMsRUFBQyxRQUFRLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxZQUFZLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsYUFBYSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNyZixPQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBQyxlQUFlLEVBQUMsS0FBSyxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLGlCQUFpQixFQUFDLFVBQVUsRUFBQyxVQUFVLEdBQUMsQ0FBQyxHQUFDLFFBQVEsR0FBQyxDQUFDLEVBQUMsRUFBQyxnQkFBZ0IsRUFBQyxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLEVBQUMsZUFBZSxFQUFDLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLGVBQWUsRUFBQyxLQUFLLEVBQUMsRUFBQyxjQUFjLEVBQUMsRUFBQyxhQUFhLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksRUFBQyxFQUFDLGlCQUFpQixFQUFDLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxVQUFVLEVBQUMsY0FBYyxFQUFDLEVBQUMsOEJBQThCLEVBQUMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEVBQUMsMkJBQTJCLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVTtBQUN4ZixZQUFNLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsZUFBZSxFQUFDLFdBQVcsRUFBQyxFQUFDLGlCQUFpQixFQUFDLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxFQUFDLHVCQUF1QixFQUFDLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEVBQUMsZ0JBQWdCLEVBQUMsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLGtCQUFrQixFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLEVBQUMsb0JBQW9CLEVBQUMsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxhQUFhLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxrQkFBa0IsRUFBQyxNQUFNLEVBQUMsZUFBZSxFQUFDLFdBQVcsRUFBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsRUFBQyxpQkFBaUIsRUFBQyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsRUFBQyxZQUFZLEVBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEVBQUMsWUFBWSxFQUFDLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxFQUFDLENBQUMsQ0FBQztBQUNsaEIsUUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsRUFBQyxhQUFhLEVBQUMsRUFBQyxPQUFPLEVBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsTUFBTSxFQUFDLFlBQVksR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFDLGtCQUFrQixFQUFDLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxFQUFDLGtCQUFrQixFQUFDLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyx1R0FBdUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsT0FBTyxFQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsR0FBRyxFQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUM7QUFDeGYsUUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLElBQUksR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFBLEFBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUUsR0FBRyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQSxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFJLEdBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsZUFBZSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVUsQ0FBQyxJQUFHLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxhQUFhLElBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdmdCLE1BQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQywwR0FBMEcsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFBLEVBQUMsTUFBTSxDQUFDLHVCQUF1QixHQUFDLFlBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyw4QkFBOEIsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLE1BQUssSUFBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDM2dCLEtBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxJQUFHLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBQyxZQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUcsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFFLFFBQVEsS0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLFlBQVksQ0FBQyxJQUFFLE1BQU0sS0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsY0FBYyxFQUFDLEVBQUMsV0FBVyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsSUFBSSxJQUFJLEVBQUEsRUFBQyxFQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2ZixJQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFHLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsQ0FBQyxLQUFJLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksS0FBSyxFQUFBLEVBQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxHQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFFLFVBQVUsQ0FBQyxZQUFVLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFlBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFHLENBQUM7QUFDOWYsTUFBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLFFBQVEsR0FBQyxDQUFDLEVBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUUsZUFBZSxJQUFHLE1BQU0sS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLENBQUEsQUFBQyxDQUFDLElBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXO0FBQ3hmLEtBQUMsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsRUFBRSxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBLElBQUcsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsb0JBQW9CLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ2xnQixXQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxFQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxTQUFTLENBQUM7QUFDdGYsY0FBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLElBQUUsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxFQUFDLFdBQVcsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFDLFlBQVksRUFBQyxXQUFXLEVBQUMsZUFBZSxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLGNBQWMsRUFBQyxFQUFDLE1BQU0sRUFBQyxFQUFDLE9BQU8sRUFBQyxpQkFBUyxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztBQUMvZixZQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFBLEFBQUMsR0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQSxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBVSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxHQUFHLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUN4ZixJQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVk7QUFDNWdCLElBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsK0JBQStCLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVM7QUFDL2YsSUFBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxVQUFVLEVBQUMsaUNBQWlDLEVBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLDBJQUEwSSxDQUFDLENBQUMsS0FBSyxJQUFHLENBQUMsQ0FBQyxRQUFRO0FBQzNmLElBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUMsS0FBSyxJQUFHLEdBQUcsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQywrRkFBK0YsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLFVBQVUsS0FBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUEsQUFBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQSxBQUFDO0FBQ3RmLFdBQU0sQ0FBQyxRQUFRLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQSxBQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxVQUFVLElBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDLEVBQUUsSUFBRyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsSUFBRSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTSxDQUFDLEVBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDbGIsQ0FBQSxFQUFHLENBQUMsQ0FFTDs7Ozs7QUFBQSxBQUVBOzs7OztBQUVBO0FBSUQsSUFBSSxPQUFPLEVBQUUsS0FBSyxXQUFXLEVBQUU7O0FBRTlCLFNBQU8sTUFBTSxDQUFDLEdBQUc7QUFDZixPQUFLLE9BQU87QUFDWCxLQUFFLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxTQUFNO0FBQ1AsT0FBSyxLQUFLO0FBQ1QsS0FBRSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsV0FBUSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ2xELFNBQU07QUFDUCxPQUFLLEtBQUs7QUFDVCxLQUFFLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxXQUFRLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDbEQsU0FBTTtBQUNQLE9BQUssS0FBSztBQUNULEtBQUUsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLFNBQU07QUFDUCxPQUFLLFNBQVM7QUFDYixLQUFFLENBQUMsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxTQUFNOzs7O0FBQ1I7QUFJRCxHQUFFLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDakMsR0FBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUN2Qjs7O0FBRUQsSUFBSSxPQUFPLFFBQVEsQUFBQyxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUMzRSxTQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7QUFDL0IsWUFBVSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQ2hDLENBQUMsQ0FBQyxDQUNIOzs7SUFBQTs7QUFHRCxTQUFTLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ2hDLFFBQU8sQ0FDUDs7O0FBRUQsU0FBUyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6RCxLQUFJLE9BQU8sRUFBRSxLQUFLLFdBQVcsRUFBRTtBQUM5QixJQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0FBQ3JDLG1CQUFnQixFQUFFLENBQUM7QUFDbkIsVUFBTyxFQUFFLEtBQUs7QUFDZCxVQUFPLEVBQUUsS0FBSyxFQUNkLENBQUMsQ0FBQyxDQUNIOzs7O0FBRUQsS0FBSSxHQUFHLEdBQUc7QUFDVCxZQUFVLEVBQUUsUUFBUTtBQUNwQixVQUFRLEVBQUUsTUFBTTtBQUNoQixTQUFPLEVBQUUsS0FBSztBQUNkLFFBQU0sRUFBRSxJQUFJLEVBQ1osQ0FBQzs7O0FBRUYsS0FBSSxPQUFPLFFBQVEsQUFBQyxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUMzRSxVQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUMzQjs7O0FBRUQsS0FBSSxJQUFJLEVBQUU7QUFDVCxZQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBLENBQ3pCLENBQ0Q7Ozs7O0FBR0QsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU87O0FBQUMsQUFFakMsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLGNBQWMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRTtBQUNsRSxLQUFJLFdBQVc7O0FBRWIsU0FBTyxXQUFXLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQzs7O0FBQUEsQUFHaEQsUUFBTyxLQUFLLENBQUMsQ0FDZCxDQUFBOzs7QUFFRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssS0FBSyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFOzs7Ozs7Ozs7O0lBV2pEIiwiZmlsZSI6ImdhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuKGZ1bmN0aW9uKCl7dmFyIGFhPWVuY29kZVVSSUNvbXBvbmVudCxmPXdpbmRvdyxiYT1zZXRUaW1lb3V0LG49TWF0aDtmdW5jdGlvbiBQYyhhLGIpe3JldHVybiBhLmhyZWY9Yn1mdW5jdGlvbiBmYShhLGIpe3JldHVybiBhLm5hbWU9Yn1cclxudmFyIFFjPVwicmVwbGFjZVwiLHE9XCJkYXRhXCIsbT1cIm1hdGNoXCIseGM9XCJzZW5kXCIsamE9XCJwb3J0XCIsdT1cImNyZWF0ZUVsZW1lbnRcIixpZD1cInNldEF0dHJpYnV0ZVwiLGRhPVwiZ2V0VGltZVwiLHg9XCJob3N0XCIsQT1cInNwbGl0XCIsQj1cImxvY2F0aW9uXCIscmE9XCJoYXNPd25Qcm9wZXJ0eVwiLG1hPVwiaG9zdG5hbWVcIixnYT1cInNlYXJjaFwiLEU9XCJwcm90b2NvbFwiLEFiPVwiaHJlZlwiLGtkPVwiYWN0aW9uXCIsRz1cImFwcGx5XCIscD1cInB1c2hcIixoPVwiaGFzaFwiLHM9XCJ0ZXN0XCIsaGE9XCJzbGljZVwiLHI9XCJjb29raWVcIix0PVwiaW5kZXhPZlwiLGlhPVwiZGVmYXVsdFZhbHVlXCIsdj1cIm5hbWVcIix5PVwibGVuZ3RoXCIsej1cInByb3RvdHlwZVwiLGxhPVwiY2xpZW50V2lkdGhcIixqZD1cInRhcmdldFwiLEM9XCJjYWxsXCIsbmE9XCJjbGllbnRIZWlnaHRcIixGPVwic3Vic3RyaW5nXCIsb2E9XCJuYXZpZ2F0b3JcIixVYj1cInBhcmVudE5vZGVcIixIPVwiam9pblwiLEk9XCJ0b0xvd2VyQ2FzZVwiO3ZhciBwYT1uZXcgZnVuY3Rpb24oKXt2YXIgYT1bXTt0aGlzLnNldD1mdW5jdGlvbihiKXthW2JdPSEwfTt0aGlzLk09ZnVuY3Rpb24oKXtmb3IodmFyIGI9W10sYz0wO2M8YVt5XTtjKyspYVtjXSYmKGJbbi5mbG9vcihjLzYpXT1iW24uZmxvb3IoYy82KV1eMTw8YyU2KTtmb3IoYz0wO2M8Ylt5XTtjKyspYltjXT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV9cIi5jaGFyQXQoYltjXXx8MCk7cmV0dXJuIGJbSF0oXCJcIikrXCJ+XCJ9fTtmdW5jdGlvbiBKKGEpe3BhLnNldChhKX07dmFyIGVhPWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGF9LGthPWZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09T2JqZWN0W3pdLnRvU3RyaW5nW0NdKE9iamVjdChhKSl9LHFhPWZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDAhPWEmJi0xPChhLmNvbnN0cnVjdG9yK1wiXCIpW3RdKFwiU3RyaW5nXCIpfSxEPWZ1bmN0aW9uKGEsYil7cmV0dXJuIDA9PWFbdF0oYil9LHNhPWZ1bmN0aW9uKGEpe3JldHVybiBhP2FbUWNdKC9eW1xcc1xceGEwXSt8W1xcc1xceGEwXSskL2csXCJcIik6XCJcIn0sdGE9ZnVuY3Rpb24oYSl7dmFyIGI9TVt1XShcImltZ1wiKTtiLndpZHRoPTE7Yi5oZWlnaHQ9MTtiLnNyYz1hO3JldHVybiBifSx1YT1mdW5jdGlvbigpe30sSz1mdW5jdGlvbihhKXtpZihhYSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXJldHVybiBhYShhKTtKKDI4KTtyZXR1cm4gYX0sTD1mdW5jdGlvbihhLGIsYyxkKXt0cnl7YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihiLFxyXG5jLCEhZCk6YS5hdHRhY2hFdmVudCYmYS5hdHRhY2hFdmVudChcIm9uXCIrYixjKX1jYXRjaChlKXtKKDI3KX19LHZhPWZ1bmN0aW9uKGEsYixjKXthLnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYywhMSk6YS5kZXRhY2hFdmVudCYmYS5kZXRhY2hFdmVudChcIm9uXCIrYixjKX0sd2E9ZnVuY3Rpb24oYSxiKXtpZihhKXt2YXIgYz1NW3VdKFwic2NyaXB0XCIpO2MudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2MuYXN5bmM9ITA7Yy5zcmM9YTtiJiYoYy5pZD1iKTt2YXIgZD1NLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO2RbVWJdLmluc2VydEJlZm9yZShjLGQpfX0seGE9ZnVuY3Rpb24oKXt2YXIgYT1cIlwiK01bQl1bbWFdO3JldHVybiAwPT1hW3RdKFwid3d3LlwiKT9hW0ZdKDQpOmF9LHlhPWZ1bmN0aW9uKGEpe3ZhciBiPU0ucmVmZXJyZXI7aWYoL15odHRwcz86XFwvXFwvL2lbc10oYikpe2lmKGEpcmV0dXJuIGI7YT1cIi8vXCIrTVtCXVttYV07dmFyIGM9XHJcbmJbdF0oYSk7aWYoNT09Y3x8Nj09YylpZihhPWIuY2hhckF0KGMrYVt5XSksXCIvXCI9PWF8fFwiP1wiPT1hfHxcIlwiPT1hfHxcIjpcIj09YSlyZXR1cm47cmV0dXJuIGJ9fSx6YT1mdW5jdGlvbihhLGIpe2lmKDE9PWJbeV0mJm51bGwhPWJbMF0mJlwib2JqZWN0XCI9PT10eXBlb2YgYlswXSlyZXR1cm4gYlswXTtmb3IodmFyIGM9e30sZD1uLm1pbihhW3ldKzEsYlt5XSksZT0wO2U8ZDtlKyspaWYoXCJvYmplY3RcIj09PXR5cGVvZiBiW2VdKXtmb3IodmFyIGcgaW4gYltlXSliW2VdW3JhXShnKSYmKGNbZ109YltlXVtnXSk7YnJlYWt9ZWxzZSBlPGFbeV0mJihjW2FbZV1dPWJbZV0pO3JldHVybiBjfTt2YXIgTj1mdW5jdGlvbigpe3RoaXMua2V5cz1bXTt0aGlzLnc9e307dGhpcy5tPXt9fTtOW3pdLnNldD1mdW5jdGlvbihhLGIsYyl7dGhpcy5rZXlzW3BdKGEpO2M/dGhpcy5tW1wiOlwiK2FdPWI6dGhpcy53W1wiOlwiK2FdPWJ9O05bel0uZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1bcmFdKFwiOlwiK2EpP3RoaXMubVtcIjpcIithXTp0aGlzLndbXCI6XCIrYV19O05bel0ubWFwPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8dGhpcy5rZXlzW3ldO2IrKyl7dmFyIGM9dGhpcy5rZXlzW2JdLGQ9dGhpcy5nZXQoYyk7ZCYmYShjLGQpfX07dmFyIE89ZixNPWRvY3VtZW50LGZiPWZ1bmN0aW9uKGEpe2JhKGEsMTAwKX0sTWM9ZnVuY3Rpb24oKXtmb3IodmFyIGE9T1tvYV0udXNlckFnZW50KyhNW3JdP01bcl06XCJcIikrKE0ucmVmZXJyZXI/TS5yZWZlcnJlcjpcIlwiKSxiPWFbeV0sYz1PLmhpc3RvcnlbeV07MDxjOylhKz1jLS1eYisrO3JldHVybiBMYShhKX07dmFyIEFhPWZ1bmN0aW9uKGEpe3ZhciBiPU8uX2dhVXNlclByZWZzO2lmKGImJmIuaW9vJiZiLmlvbygpfHxhJiYhMD09PU9bXCJnYS1kaXNhYmxlLVwiK2FdKXJldHVybiEwO3RyeXt2YXIgYz1PLmV4dGVybmFsO2lmKGMmJmMuX2dhVXNlclByZWZzJiZcIm9vXCI9PWMuX2dhVXNlclByZWZzKXJldHVybiEwfWNhdGNoKGQpe31yZXR1cm4hMX07dmFyIENhPWZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9TVtyXVtBXShcIjtcIik7YT1uZXcgUmVnRXhwKFwiXlxcXFxzKlwiK2ErXCI9XFxcXHMqKC4qPylcXFxccyokXCIpO2Zvcih2YXIgZD0wO2Q8Y1t5XTtkKyspe3ZhciBlPWNbZF1bbV0oYSk7ZSYmYltwXShlWzFdKX1yZXR1cm4gYn0semM9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe2U9QWEoZSk/ITE6ZWJbc10oTVtCXVttYV0pfHxcIi9cIj09YyYmdmNbc10oZCk/ITE6ITA7aWYoIWUpcmV0dXJuITE7YiYmMTIwMDxiW3ldJiYoYj1iW0ZdKDAsMTIwMCksSigyNCkpO2M9YStcIj1cIitiK1wiOyBwYXRoPVwiK2MrXCI7IFwiO2cmJihjKz1cImV4cGlyZXM9XCIrKG5ldyBEYXRlKChuZXcgRGF0ZSlbZGFdKCkrZykpLnRvR01UU3RyaW5nKCkrXCI7IFwiKTtkJiZcIm5vbmVcIiE9ZCYmKGMrPVwiZG9tYWluPVwiK2QrXCI7XCIpO2Q9TVtyXTtNLmNvb2tpZT1jO2lmKCEoZD1kIT1NW3JdKSl0OnthPUNhKGEpO2ZvcihkPTA7ZDxhW3ldO2QrKylpZihiPT1hW2RdKXtkPSEwO2JyZWFrIHR9ZD0hMX1yZXR1cm4gZH0sXHJcbkNjPWZ1bmN0aW9uKGEpe3JldHVybiBLKGEpW1FjXSgvXFwoL2csXCIlMjhcIilbUWNdKC9cXCkvZyxcIiUyOVwiKX0sdmM9L14od3d3XFwuKT9nb29nbGUoXFwuY29tPyk/KFxcLlthLXpdezJ9KT8kLyxlYj0vKF58XFwuKWRvdWJsZWNsaWNrXFwubmV0JC9pO3ZhciBvYz1mdW5jdGlvbigpe3JldHVybihCYXx8XCJodHRwczpcIj09TVtCXVtFXT9cImh0dHBzOlwiOlwiaHR0cDpcIikrXCIvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbVwifSxEYT1mdW5jdGlvbihhKXtmYSh0aGlzLFwibGVuXCIpO3RoaXMubWVzc2FnZT1hK1wiLTgxOTJcIn0sRWE9ZnVuY3Rpb24oYSl7ZmEodGhpcyxcImZmMnBvc3RcIik7dGhpcy5tZXNzYWdlPWErXCItMjAzNlwifSxHYT1mdW5jdGlvbihhLGIsYyxkKXtjPWN8fHVhO2QmJihkPWMsT1tvYV0uc2VuZEJlYWNvbj9PW29hXS5zZW5kQmVhY29uKGEsYik/KGQoKSxkPSEwKTpkPSExOmQ9ITEpO2lmKCFkKWlmKDIwMzY+PWJbeV0pd2MoYSxiLGMpO2Vsc2UgaWYoODE5Mj49Ylt5XSl7aWYoMDw9T1tvYV0udXNlckFnZW50W3RdKFwiRmlyZWZveFwiKSYmIVtdLnJlZHVjZSl0aHJvdyBuZXcgRWEoYlt5XSk7d2QoYSxiLGMpfHx4ZChhLGIsYyl8fEZhKGIsYyl8fGMoKX1lbHNlIHRocm93IG5ldyBEYShiW3ldKTt9LHdjPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cclxudGEoYStcIj9cIitiKTtkLm9ubG9hZD1kLm9uZXJyb3I9ZnVuY3Rpb24oKXtkLm9ubG9hZD1udWxsO2Qub25lcnJvcj1udWxsO2MoKX19LHhkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZDtkPU8uWERvbWFpblJlcXVlc3Q7aWYoIWQpcmV0dXJuITE7ZD1uZXcgZDtkLm9wZW4oXCJQT1NUXCIsYSk7ZC5vbmVycm9yPWZ1bmN0aW9uKCl7YygpfTtkLm9ubG9hZD1jO2RbeGNdKGIpO3JldHVybiEwfSx3ZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Ty5YTUxIdHRwUmVxdWVzdDtpZighZClyZXR1cm4hMTt2YXIgZT1uZXcgZDtpZighKFwid2l0aENyZWRlbnRpYWxzXCJpbiBlKSlyZXR1cm4hMTtlLm9wZW4oXCJQT1NUXCIsYSwhMCk7ZS53aXRoQ3JlZGVudGlhbHM9ITA7ZS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJ0ZXh0L3BsYWluXCIpO2Uub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09ZS5yZWFkeVN0YXRlJiYoYygpLGU9bnVsbCl9O2VbeGNdKGIpO3JldHVybiEwfSxGYT1mdW5jdGlvbihhLFxyXG5iKXtpZighTS5ib2R5KXJldHVybiBmYihmdW5jdGlvbigpe0ZhKGEsYil9KSwhMDthPWFhKGEpO3RyeXt2YXIgYz1NW3VdKCc8aWZyYW1lIG5hbWU9XCInK2ErJ1wiPjwvaWZyYW1lPicpfWNhdGNoKGQpe2M9TVt1XShcImlmcmFtZVwiKSxmYShjLGEpfWMuaGVpZ2h0PVwiMFwiO2Mud2lkdGg9XCIwXCI7Yy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Muc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO3ZhciBlPU1bQl0sZT1vYygpK1wiL2FuYWx5dGljc19pZnJhbWUuaHRtbCNcIithYShlW0VdK1wiLy9cIitlW3hdK1wiL2Zhdmljb24uaWNvXCIpLGc9ZnVuY3Rpb24oKXtjLnNyYz1cIlwiO2NbVWJdJiZjW1ViXS5yZW1vdmVDaGlsZChjKX07TChPLFwiYmVmb3JldW5sb2FkXCIsZyk7dmFyIGNhPSExLGw9MCxrPWZ1bmN0aW9uKCl7aWYoIWNhKXt0cnl7aWYoOTxsfHxjLmNvbnRlbnRXaW5kb3dbQl1beF09PU1bQl1beF0pe2NhPSEwO2coKTt2YShPLFwiYmVmb3JldW5sb2FkXCIsZyk7YigpO3JldHVybn19Y2F0Y2goYSl7fWwrKztcclxuYmEoaywyMDApfX07TChjLFwibG9hZFwiLGspO00uYm9keS5hcHBlbmRDaGlsZChjKTtjLnNyYz1lO3JldHVybiEwfTt2YXIgSGE9ZnVuY3Rpb24oKXt0aGlzLnQ9W119O0hhW3pdLmFkZD1mdW5jdGlvbihhKXt0aGlzLnRbcF0oYSl9O0hhW3pdLkQ9ZnVuY3Rpb24oYSl7dHJ5e2Zvcih2YXIgYj0wO2I8dGhpcy50W3ldO2IrKyl7dmFyIGM9YS5nZXQodGhpcy50W2JdKTtjJiZlYShjKSYmY1tDXShPLGEpfX1jYXRjaChkKXt9Yj1hLmdldChJYSk7YiE9dWEmJmVhKGIpJiYoYS5zZXQoSWEsdWEsITApLGJhKGIsMTApKX07ZnVuY3Rpb24gSmEoYSl7aWYoMTAwIT1hLmdldChLYSkmJkxhKFAoYSxRKSklMUU0Pj0xMDAqUihhLEthKSl0aHJvd1wiYWJvcnRcIjt9ZnVuY3Rpb24gTWEoYSl7aWYoQWEoUChhLE5hKSkpdGhyb3dcImFib3J0XCI7fWZ1bmN0aW9uIE9hKCl7dmFyIGE9TVtCXVtFXTtpZihcImh0dHA6XCIhPWEmJlwiaHR0cHM6XCIhPWEpdGhyb3dcImFib3J0XCI7fVxyXG5mdW5jdGlvbiBQYShhKXt0cnl7Ty5YTUxIdHRwUmVxdWVzdCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIG5ldyBPLlhNTEh0dHBSZXF1ZXN0P0ooNDApOk8uWERvbWFpblJlcXVlc3QmJkooNDEpLE9bb2FdLnNlbmRCZWFjb24mJkooNDIpfWNhdGNoKGIpe31hLnNldChBYyxSKGEsQWMpKzEpO3ZhciBjPVtdO1FhLm1hcChmdW5jdGlvbihiLGUpe2lmKGUucCl7dmFyIGc9YS5nZXQoYik7dm9pZCAwIT1nJiZnIT1lW2lhXSYmKFwiYm9vbGVhblwiPT10eXBlb2YgZyYmKGcqPTEpLGNbcF0oZS5wK1wiPVwiK0soXCJcIitnKSkpfX0pO2NbcF0oXCJ6PVwiK0JkKCkpO2Euc2V0KFJhLGNbSF0oXCImXCIpLCEwKX1mdW5jdGlvbiBTYShhKXt2YXIgYj1QKGEsZ2QpfHxvYygpK1wiL2NvbGxlY3RcIjtHYShiLFAoYSxSYSksYS5nZXQoSWEpLGEuZ2V0KFZkKSk7YS5zZXQoSWEsdWEsITApfVxyXG5mdW5jdGlvbiBIYyhhKXt2YXIgYj1PLmdhRGF0YTtiJiYoYi5leHBJZCYmYS5zZXQoTmMsYi5leHBJZCksYi5leHBWYXImJmEuc2V0KE9jLGIuZXhwVmFyKSl9ZnVuY3Rpb24gY2QoKXtpZihPW29hXSYmXCJwcmV2aWV3XCI9PU9bb2FdLmxvYWRQdXJwb3NlKXRocm93XCJhYm9ydFwiO31mdW5jdGlvbiB5ZChhKXt2YXIgYj1PLmdhRGV2SWRzO2thKGIpJiYwIT1iW3ldJiZhLnNldChcIiZkaWRcIixiW0hdKFwiLFwiKSwhMCl9ZnVuY3Rpb24gdmIoYSl7aWYoIWEuZ2V0KE5hKSl0aHJvd1wiYWJvcnRcIjt9O3ZhciBoZD1mdW5jdGlvbigpe3JldHVybiBuLnJvdW5kKDIxNDc0ODM2NDcqbi5yYW5kb20oKSl9LEJkPWZ1bmN0aW9uKCl7dHJ5e3ZhciBhPW5ldyBVaW50MzJBcnJheSgxKTtPLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYSk7cmV0dXJuIGFbMF0mMjE0NzQ4MzY0N31jYXRjaChiKXtyZXR1cm4gaGQoKX19O2Z1bmN0aW9uIFRhKGEpe3ZhciBiPVIoYSxVYSk7NTAwPD1iJiZKKDE1KTt2YXIgYz1QKGEsVmEpO2lmKFwidHJhbnNhY3Rpb25cIiE9YyYmXCJpdGVtXCIhPWMpe3ZhciBjPVIoYSxXYSksZD0obmV3IERhdGUpW2RhXSgpLGU9UihhLFhhKTswPT1lJiZhLnNldChYYSxkKTtlPW4ucm91bmQoMiooZC1lKS8xRTMpOzA8ZSYmKGM9bi5taW4oYytlLDIwKSxhLnNldChYYSxkKSk7aWYoMD49Yyl0aHJvd1wiYWJvcnRcIjthLnNldChXYSwtLWMpfWEuc2V0KFVhLCsrYil9O3ZhciBZYT1mdW5jdGlvbigpe3RoaXMuZGF0YT1uZXcgTn0sUWE9bmV3IE4sWmE9W107WWFbel0uZ2V0PWZ1bmN0aW9uKGEpe3ZhciBiPSRhKGEpLGM9dGhpc1txXS5nZXQoYSk7YiYmdm9pZCAwPT1jJiYoYz1lYShiW2lhXSk/YltpYV0oKTpiW2lhXSk7cmV0dXJuIGImJmIubj9iLm4odGhpcyxhLGMpOmN9O3ZhciBQPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5nZXQoYik7cmV0dXJuIHZvaWQgMD09Yz9cIlwiOlwiXCIrY30sUj1mdW5jdGlvbihhLGIpe3ZhciBjPWEuZ2V0KGIpO3JldHVybiB2b2lkIDA9PWN8fFwiXCI9PT1jPzA6MSpjfTtZYVt6XS5zZXQ9ZnVuY3Rpb24oYSxiLGMpe2lmKGEpaWYoXCJvYmplY3RcIj09dHlwZW9mIGEpZm9yKHZhciBkIGluIGEpYVtyYV0oZCkmJmFiKHRoaXMsZCxhW2RdLGMpO2Vsc2UgYWIodGhpcyxhLGIsYyl9O1xyXG52YXIgYWI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYodm9pZCAwIT1jKXN3aXRjaChiKXtjYXNlIE5hOndiW3NdKGMpfXZhciBlPSRhKGIpO2UmJmUubz9lLm8oYSxiLGMsZCk6YVtxXS5zZXQoYixjLGQpfSxiYj1mdW5jdGlvbihhLGIsYyxkLGUpe2ZhKHRoaXMsYSk7dGhpcy5wPWI7dGhpcy5uPWQ7dGhpcy5vPWU7dGhpcy5kZWZhdWx0VmFsdWU9Y30sJGE9ZnVuY3Rpb24oYSl7dmFyIGI9UWEuZ2V0KGEpO2lmKCFiKWZvcih2YXIgYz0wO2M8WmFbeV07YysrKXt2YXIgZD1aYVtjXSxlPWRbMF0uZXhlYyhhKTtpZihlKXtiPWRbMV0oZSk7UWEuc2V0KGJbdl0sYik7YnJlYWt9fXJldHVybiBifSx5Yz1mdW5jdGlvbihhKXt2YXIgYjtRYS5tYXAoZnVuY3Rpb24oYyxkKXtkLnA9PWEmJihiPWQpfSk7cmV0dXJuIGImJmJbdl19LFM9ZnVuY3Rpb24oYSxiLGMsZCxlKXthPW5ldyBiYihhLGIsYyxkLGUpO1FhLnNldChhW3ZdLGEpO3JldHVybiBhW3ZdfSxjYj1mdW5jdGlvbihhLGIpe1phW3BdKFtuZXcgUmVnRXhwKFwiXlwiK1xyXG5hK1wiJFwiKSxiXSl9LFQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKGEsYixjLHZvaWQgMCxkYil9LGRiPWZ1bmN0aW9uKCl7fTt2YXIgZ2I9cWEoZi5Hb29nbGVBbmFseXRpY3NPYmplY3QpJiZzYShmLkdvb2dsZUFuYWx5dGljc09iamVjdCl8fFwiZ2FcIixCYT0hMSxoYj1UKFwiYXBpVmVyc2lvblwiLFwidlwiKSxpYj1UKFwiY2xpZW50VmVyc2lvblwiLFwiX3ZcIik7UyhcImFub255bWl6ZUlwXCIsXCJhaXBcIik7dmFyIGpiPVMoXCJhZFNlbnNlSWRcIixcImFcIiksVmE9UyhcImhpdFR5cGVcIixcInRcIiksSWE9UyhcImhpdENhbGxiYWNrXCIpLFJhPVMoXCJoaXRQYXlsb2FkXCIpO1MoXCJub25JbnRlcmFjdGlvblwiLFwibmlcIik7UyhcImN1cnJlbmN5Q29kZVwiLFwiY3VcIik7dmFyIFZkPVMoXCJ1c2VCZWFjb25cIix2b2lkIDAsITEpO1MoXCJkYXRhU291cmNlXCIsXCJkc1wiKTtTKFwic2Vzc2lvbkNvbnRyb2xcIixcInNjXCIsXCJcIik7UyhcInNlc3Npb25Hcm91cFwiLFwic2dcIik7UyhcInF1ZXVlVGltZVwiLFwicXRcIik7dmFyIEFjPVMoXCJfc1wiLFwiX3NcIik7UyhcInNjcmVlbk5hbWVcIixcImNkXCIpO1xyXG52YXIga2I9UyhcImxvY2F0aW9uXCIsXCJkbFwiLFwiXCIpLGxiPVMoXCJyZWZlcnJlclwiLFwiZHJcIiksbWI9UyhcInBhZ2VcIixcImRwXCIsXCJcIik7UyhcImhvc3RuYW1lXCIsXCJkaFwiKTt2YXIgbmI9UyhcImxhbmd1YWdlXCIsXCJ1bFwiKSxvYj1TKFwiZW5jb2RpbmdcIixcImRlXCIpO1MoXCJ0aXRsZVwiLFwiZHRcIixmdW5jdGlvbigpe3JldHVybiBNLnRpdGxlfHx2b2lkIDB9KTtjYihcImNvbnRlbnRHcm91cChbMC05XSspXCIsZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBiYihhWzBdLFwiY2dcIithWzFdKX0pO3ZhciBwYj1TKFwic2NyZWVuQ29sb3JzXCIsXCJzZFwiKSxxYj1TKFwic2NyZWVuUmVzb2x1dGlvblwiLFwic3JcIikscmI9UyhcInZpZXdwb3J0U2l6ZVwiLFwidnBcIiksc2I9UyhcImphdmFFbmFibGVkXCIsXCJqZVwiKSx0Yj1TKFwiZmxhc2hWZXJzaW9uXCIsXCJmbFwiKTtTKFwiY2FtcGFpZ25JZFwiLFwiY2lcIik7UyhcImNhbXBhaWduTmFtZVwiLFwiY25cIik7UyhcImNhbXBhaWduU291cmNlXCIsXCJjc1wiKTtTKFwiY2FtcGFpZ25NZWRpdW1cIixcImNtXCIpO1xyXG5TKFwiY2FtcGFpZ25LZXl3b3JkXCIsXCJja1wiKTtTKFwiY2FtcGFpZ25Db250ZW50XCIsXCJjY1wiKTt2YXIgdWI9UyhcImV2ZW50Q2F0ZWdvcnlcIixcImVjXCIpLHhiPVMoXCJldmVudEFjdGlvblwiLFwiZWFcIikseWI9UyhcImV2ZW50TGFiZWxcIixcImVsXCIpLHpiPVMoXCJldmVudFZhbHVlXCIsXCJldlwiKSxCYj1TKFwic29jaWFsTmV0d29ya1wiLFwic25cIiksQ2I9UyhcInNvY2lhbEFjdGlvblwiLFwic2FcIiksRGI9UyhcInNvY2lhbFRhcmdldFwiLFwic3RcIiksRWI9UyhcImwxXCIsXCJwbHRcIiksRmI9UyhcImwyXCIsXCJwZHRcIiksR2I9UyhcImwzXCIsXCJkbnNcIiksSGI9UyhcImw0XCIsXCJycnRcIiksSWI9UyhcImw1XCIsXCJzcnRcIiksSmI9UyhcImw2XCIsXCJ0Y3BcIiksS2I9UyhcImw3XCIsXCJkaXRcIiksTGI9UyhcImw4XCIsXCJjbHRcIiksTWI9UyhcInRpbWluZ0NhdGVnb3J5XCIsXCJ1dGNcIiksTmI9UyhcInRpbWluZ1ZhclwiLFwidXR2XCIpLE9iPVMoXCJ0aW1pbmdMYWJlbFwiLFwidXRsXCIpLFBiPVMoXCJ0aW1pbmdWYWx1ZVwiLFwidXR0XCIpO1MoXCJhcHBOYW1lXCIsXCJhblwiKTtcclxuUyhcImFwcFZlcnNpb25cIixcImF2XCIsXCJcIik7UyhcImFwcElkXCIsXCJhaWRcIixcIlwiKTtTKFwiYXBwSW5zdGFsbGVySWRcIixcImFpaWRcIixcIlwiKTtTKFwiZXhEZXNjcmlwdGlvblwiLFwiZXhkXCIpO1MoXCJleEZhdGFsXCIsXCJleGZcIik7dmFyIE5jPVMoXCJleHBJZFwiLFwieGlkXCIpLE9jPVMoXCJleHBWYXJcIixcInh2YXJcIiksUmM9UyhcIl91dG1hXCIsXCJfdXRtYVwiKSxTYz1TKFwiX3V0bXpcIixcIl91dG16XCIpLFRjPVMoXCJfdXRtaHRcIixcIl91dG1odFwiKSxVYT1TKFwiX2hjXCIsdm9pZCAwLDApLFhhPVMoXCJfdGlcIix2b2lkIDAsMCksV2E9UyhcIl90b1wiLHZvaWQgMCwyMCk7Y2IoXCJkaW1lbnNpb24oWzAtOV0rKVwiLGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYmIoYVswXSxcImNkXCIrYVsxXSl9KTtjYihcIm1ldHJpYyhbMC05XSspXCIsZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBiYihhWzBdLFwiY21cIithWzFdKX0pO1MoXCJsaW5rZXJQYXJhbVwiLHZvaWQgMCx2b2lkIDAsQmMsZGIpO1xyXG52YXIgbGQ9UyhcInVzYWdlXCIsXCJfdVwiLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiBwYS5NKCl9LGRiKTtTKFwiZm9yY2VTU0xcIix2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIEJhfSxmdW5jdGlvbihhLGIsYyl7SigzNCk7QmE9ISFjfSk7dmFyIGVkPVMoXCJfajFcIixcImppZFwiKSxIZD1TKFwiX2oyXCIsXCJnamlkXCIpO2NiKFwiXFxcXCYoLiopXCIsZnVuY3Rpb24oYSl7dmFyIGI9bmV3IGJiKGFbMF0sYVsxXSksYz15YyhhWzBdW0ZdKDEpKTtjJiYoYi5uPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldChjKX0sYi5vPWZ1bmN0aW9uKGEsYixnLGNhKXthLnNldChjLGcsY2EpfSxiLnA9dm9pZCAwKTtyZXR1cm4gYn0pO1xyXG52YXIgUWI9VChcIl9vb3RcIiksZGQ9UyhcInByZXZpZXdUYXNrXCIpLFJiPVMoXCJjaGVja1Byb3RvY29sVGFza1wiKSxtZD1TKFwidmFsaWRhdGlvblRhc2tcIiksU2I9UyhcImNoZWNrU3RvcmFnZVRhc2tcIiksVWM9UyhcImhpc3RvcnlJbXBvcnRUYXNrXCIpLFRiPVMoXCJzYW1wbGVyVGFza1wiKSxWYj1UKFwiX3JsdFwiKSxXYj1TKFwiYnVpbGRIaXRUYXNrXCIpLFhiPVMoXCJzZW5kSGl0VGFza1wiKSxWYz1TKFwiY2VUYXNrXCIpLHpkPVMoXCJkZXZJZFRhc2tcIiksQ2Q9UyhcInRpbWluZ1Rhc2tcIiksTGQ9UyhcImRpc3BsYXlGZWF0dXJlc1Rhc2tcIiksVj1UKFwibmFtZVwiKSxRPVQoXCJjbGllbnRJZFwiLFwiY2lkXCIpLEFkPVMoXCJ1c2VySWRcIixcInVpZFwiKSxOYT1UKFwidHJhY2tpbmdJZFwiLFwidGlkXCIpLFU9VChcImNvb2tpZU5hbWVcIix2b2lkIDAsXCJfZ2FcIiksVz1UKFwiY29va2llRG9tYWluXCIpLFliPVQoXCJjb29raWVQYXRoXCIsdm9pZCAwLFwiL1wiKSxaYj1UKFwiY29va2llRXhwaXJlc1wiLHZvaWQgMCw2MzA3MkUzKSwkYj1UKFwibGVnYWN5Q29va2llRG9tYWluXCIpLFxyXG5XYz1UKFwibGVnYWN5SGlzdG9yeUltcG9ydFwiLHZvaWQgMCwhMCksYWM9VChcInN0b3JhZ2VcIix2b2lkIDAsXCJjb29raWVcIiksYmM9VChcImFsbG93TGlua2VyXCIsdm9pZCAwLCExKSxjYz1UKFwiYWxsb3dBbmNob3JcIix2b2lkIDAsITApLEthPVQoXCJzYW1wbGVSYXRlXCIsXCJzZlwiLDEwMCksZGM9VChcInNpdGVTcGVlZFNhbXBsZVJhdGVcIix2b2lkIDAsMSksZWM9VChcImFsd2F5c1NlbmRSZWZlcnJlclwiLHZvaWQgMCwhMSksZ2Q9UyhcInRyYW5zcG9ydFVybFwiKSxNZD1TKFwiX3JcIixcIl9yXCIpO1xyXG5mdW5jdGlvbiBYKGEsYixjLGQpe2JbYV09ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGQmJkooZCksY1tHXSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goYil7dmFyIGc9YiYmYlt2XTtpZighKDE8PTEwMCpuLnJhbmRvbSgpfHxBYShcIj9cIikpKXt2YXIgY2E9W1widD1lcnJvclwiLFwiX2U9ZXhjXCIsXCJfdj1qMzFcIixcInNyPTFcIl07YSYmY2FbcF0oXCJfZj1cIithKTtnJiZjYVtwXShcIl9tPVwiK0soZ1tGXSgwLDEwMCkpKTtjYVtwXShcImFpcD0xXCIpO2NhW3BdKFwiej1cIitoZCgpKTtHYShvYygpK1wiL2NvbGxlY3RcIixjYVtIXShcIiZcIikpfXRocm93IGI7fX19O3ZhciBPZD1mdW5jdGlvbigpe3RoaXMuVj0xRTQ7dGhpcy5mYT12b2lkIDA7dGhpcy4kPSExO3RoaXMuZWE9MX0sRWQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgT2QsYjtpZihhLmZhJiZhLiQpcmV0dXJuIDA7YS4kPSEwO2lmKDA9PWEuVilyZXR1cm4gMDt2b2lkIDA9PT1iJiYoYj1CZCgpKTtyZXR1cm4gMD09YiVhLlY/bi5mbG9vcihiL2EuViklYS5lYSsxOjB9O2Z1bmN0aW9uIGZjKCl7dmFyIGEsYixjO2lmKChjPShjPU9bb2FdKT9jLnBsdWdpbnM6bnVsbCkmJmNbeV0pZm9yKHZhciBkPTA7ZDxjW3ldJiYhYjtkKyspe3ZhciBlPWNbZF07LTE8ZVt2XVt0XShcIlNob2Nrd2F2ZSBGbGFzaFwiKSYmKGI9ZS5kZXNjcmlwdGlvbil9aWYoIWIpdHJ5e2E9bmV3IEFjdGl2ZVhPYmplY3QoXCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC43XCIpLGI9YS5HZXRWYXJpYWJsZShcIiR2ZXJzaW9uXCIpfWNhdGNoKGcpe31pZighYil0cnl7YT1uZXcgQWN0aXZlWE9iamVjdChcIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoLjZcIiksYj1cIldJTiA2LDAsMjEsMFwiLGEuQWxsb3dTY3JpcHRBY2Nlc3M9XCJhbHdheXNcIixiPWEuR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKX1jYXRjaChjYSl7fWlmKCFiKXRyeXthPW5ldyBBY3RpdmVYT2JqZWN0KFwiU2hvY2t3YXZlRmxhc2guU2hvY2t3YXZlRmxhc2hcIiksYj1hLkdldFZhcmlhYmxlKFwiJHZlcnNpb25cIil9Y2F0Y2gobCl7fWImJlxyXG4oYT1iW21dKC9bXFxkXSsvZykpJiYzPD1hW3ldJiYoYj1hWzBdK1wiLlwiK2FbMV0rXCIgclwiK2FbMl0pO3JldHVybiBifHx2b2lkIDB9O3ZhciBnYz1mdW5jdGlvbihhLGIpe3ZhciBjPW4ubWluKFIoYSxkYyksMTAwKTtpZighKExhKFAoYSxRKSklMTAwPj1jKSYmKGM9e30sRWMoYyl8fEZjKGMpKSl7dmFyIGQ9Y1tFYl07dm9pZCAwPT1kfHxJbmZpbml0eT09ZHx8aXNOYU4oZCl8fCgwPGQ/KFkoYyxHYiksWShjLEpiKSxZKGMsSWIpLFkoYyxGYiksWShjLEhiKSxZKGMsS2IpLFkoYyxMYiksYihjKSk6TChPLFwibG9hZFwiLGZ1bmN0aW9uKCl7Z2MoYSxiKX0sITEpKX19LEVjPWZ1bmN0aW9uKGEpe3ZhciBiPU8ucGVyZm9ybWFuY2V8fE8ud2Via2l0UGVyZm9ybWFuY2UsYj1iJiZiLnRpbWluZztpZighYilyZXR1cm4hMTt2YXIgYz1iLm5hdmlnYXRpb25TdGFydDtpZigwPT1jKXJldHVybiExO2FbRWJdPWIubG9hZEV2ZW50U3RhcnQtYzthW0diXT1iLmRvbWFpbkxvb2t1cEVuZC1iLmRvbWFpbkxvb2t1cFN0YXJ0O2FbSmJdPWIuY29ubmVjdEVuZC1iLmNvbm5lY3RTdGFydDthW0liXT1iLnJlc3BvbnNlU3RhcnQtYi5yZXF1ZXN0U3RhcnQ7XHJcbmFbRmJdPWIucmVzcG9uc2VFbmQtYi5yZXNwb25zZVN0YXJ0O2FbSGJdPWIuZmV0Y2hTdGFydC1jO2FbS2JdPWIuZG9tSW50ZXJhY3RpdmUtYzthW0xiXT1iLmRvbUNvbnRlbnRMb2FkZWRFdmVudFN0YXJ0LWM7cmV0dXJuITB9LEZjPWZ1bmN0aW9uKGEpe2lmKE8udG9wIT1PKXJldHVybiExO3ZhciBiPU8uZXh0ZXJuYWwsYz1iJiZiLm9ubG9hZFQ7YiYmIWIuaXNWYWxpZExvYWRUaW1lJiYoYz12b2lkIDApOzIxNDc0ODM2NDg8YyYmKGM9dm9pZCAwKTswPGMmJmIuc2V0UGFnZVJlYWR5VGltZSgpO2lmKHZvaWQgMD09YylyZXR1cm4hMTthW0ViXT1jO3JldHVybiEwfSxZPWZ1bmN0aW9uKGEsYil7dmFyIGM9YVtiXTtpZihpc05hTihjKXx8SW5maW5pdHk9PWN8fDA+YylhW2JdPXZvaWQgMH0sRmQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe1wicGFnZXZpZXdcIiE9Yi5nZXQoVmEpfHxhLkl8fChhLkk9ITAsZ2MoYixmdW5jdGlvbihiKXthW3hjXShcInRpbWluZ1wiLGIpfSkpfX07dmFyIGhjPSExLG1jPWZ1bmN0aW9uKGEpe2lmKFwiY29va2llXCI9PVAoYSxhYykpe3ZhciBiPVAoYSxVKSxjPW5kKGEpLGQ9a2MoUChhLFliKSksZT1sYyhQKGEsVykpLGc9MUUzKlIoYSxaYiksY2E9UChhLE5hKTtpZihcImF1dG9cIiE9ZSl6YyhiLGMsZCxlLGNhLGcpJiYoaGM9ITApO2Vsc2V7SigzMik7dmFyIGw7dDp7Yz1bXTtlPXhhKClbQV0oXCIuXCIpO2lmKDQ9PWVbeV0mJihsPWVbZVt5XS0xXSxwYXJzZUludChsLDEwKT09bCkpe2w9W1wibm9uZVwiXTticmVhayB0fWZvcihsPWVbeV0tMjswPD1sO2wtLSljW3BdKGVbaGFdKGwpW0hdKFwiLlwiKSk7Y1twXShcIm5vbmVcIik7bD1jfWZvcih2YXIgaz0wO2s8bFt5XTtrKyspaWYoZT1sW2tdLGFbcV0uc2V0KFcsZSksYz1uZChhKSx6YyhiLGMsZCxlLGNhLGcpKXtoYz0hMDtyZXR1cm59YVtxXS5zZXQoVyxcImF1dG9cIil9fX0sbmM9ZnVuY3Rpb24oYSl7aWYoXCJjb29raWVcIj09UChhLGFjKSYmIWhjJiYobWMoYSksIWhjKSl0aHJvd1wiYWJvcnRcIjt9LFxyXG5ZYz1mdW5jdGlvbihhKXtpZihhLmdldChXYykpe3ZhciBiPVAoYSxXKSxjPVAoYSwkYil8fHhhKCksZD1YYyhcIl9fdXRtYVwiLGMsYik7ZCYmKEooMTkpLGEuc2V0KFRjLChuZXcgRGF0ZSlbZGFdKCksITApLGEuc2V0KFJjLGQuUiksKGI9WGMoXCJfX3V0bXpcIixjLGIpKSYmZFtoXT09YltoXSYmYS5zZXQoU2MsYi5SKSl9fSxuZD1mdW5jdGlvbihhKXt2YXIgYj1DYyhQKGEsUSkpLGM9aWMoUChhLFcpKTthPWpjKFAoYSxZYikpOzE8YSYmKGMrPVwiLVwiK2EpO3JldHVybltcIkdBMVwiLGMsYl1bSF0oXCIuXCIpfSxHYz1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPVtdLGU9W10sZyxjYT0wO2NhPGFbeV07Y2ErKyl7dmFyIGw9YVtjYV07aWYobC5yW2NdPT1iKWRbcF0obCk7ZWxzZSB2b2lkIDA9PWd8fGwucltjXTxnPyhlPVtsXSxnPWwucltjXSk6bC5yW2NdPT1nJiZlW3BdKGwpfXJldHVybiAwPGRbeV0/ZDplfSxsYz1mdW5jdGlvbihhKXtyZXR1cm4gMD09YVt0XShcIi5cIik/YS5zdWJzdHIoMSk6XHJcbmF9LGljPWZ1bmN0aW9uKGEpe3JldHVybiBsYyhhKVtBXShcIi5cIilbeV19LGtjPWZ1bmN0aW9uKGEpe2lmKCFhKXJldHVyblwiL1wiOzE8YVt5XSYmYS5sYXN0SW5kZXhPZihcIi9cIik9PWFbeV0tMSYmKGE9YS5zdWJzdHIoMCxhW3ldLTEpKTswIT1hW3RdKFwiL1wiKSYmKGE9XCIvXCIrYSk7cmV0dXJuIGF9LGpjPWZ1bmN0aW9uKGEpe2E9a2MoYSk7cmV0dXJuXCIvXCI9PWE/MTphW0FdKFwiL1wiKVt5XX07ZnVuY3Rpb24gWGMoYSxiLGMpe1wibm9uZVwiPT1iJiYoYj1cIlwiKTt2YXIgZD1bXSxlPUNhKGEpO2E9XCJfX3V0bWFcIj09YT82OjI7Zm9yKHZhciBnPTA7ZzxlW3ldO2crKyl7dmFyIGNhPShcIlwiK2VbZ10pW0FdKFwiLlwiKTtjYVt5XT49YSYmZFtwXSh7aGFzaDpjYVswXSxSOmVbZ10sTzpjYX0pfXJldHVybiAwPT1kW3ldP3ZvaWQgMDoxPT1kW3ldP2RbMF06WmMoYixkKXx8WmMoYyxkKXx8WmMobnVsbCxkKXx8ZFswXX1mdW5jdGlvbiBaYyhhLGIpe3ZhciBjLGQ7bnVsbD09YT9jPWQ9MTooYz1MYShhKSxkPUxhKEQoYSxcIi5cIik/YVtGXSgxKTpcIi5cIithKSk7Zm9yKHZhciBlPTA7ZTxiW3ldO2UrKylpZihiW2VdW2hdPT1jfHxiW2VdW2hdPT1kKXJldHVybiBiW2VdfTt2YXIgb2Q9bmV3IFJlZ0V4cCgvXmh0dHBzPzpcXC9cXC8oW15cXC86XSspLykscGQ9LyguKikoWz8mI10pKD86X2dhPVteJiNdKikoPzomPykoLiopLztmdW5jdGlvbiBCYyhhKXthPWEuZ2V0KFEpO3ZhciBiPUljKGEsMCk7cmV0dXJuXCJfZ2E9MS5cIitLKGIrXCIuXCIrYSl9ZnVuY3Rpb24gSWMoYSxiKXtmb3IodmFyIGM9bmV3IERhdGUsZD1PW29hXSxlPWQucGx1Z2luc3x8W10sYz1bYSxkLnVzZXJBZ2VudCxjLmdldFRpbWV6b25lT2Zmc2V0KCksYy5nZXRZZWFyKCksYy5nZXREYXRlKCksYy5nZXRIb3VycygpLGMuZ2V0TWludXRlcygpK2JdLGQ9MDtkPGVbeV07KytkKWNbcF0oZVtkXS5kZXNjcmlwdGlvbik7cmV0dXJuIExhKGNbSF0oXCIuXCIpKX12YXIgRGM9ZnVuY3Rpb24oYSl7Sig0OCk7dGhpcy50YXJnZXQ9YTt0aGlzLlQ9ITF9O1xyXG5EY1t6XS5RPWZ1bmN0aW9uKGEsYil7aWYoYS50YWdOYW1lKXtpZihcImFcIj09YS50YWdOYW1lW0ldKCkpe2FbQWJdJiZQYyhhLHFkKHRoaXMsYVtBYl0sYikpO3JldHVybn1pZihcImZvcm1cIj09YS50YWdOYW1lW0ldKCkpcmV0dXJuIHJkKHRoaXMsYSl9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpcmV0dXJuIHFkKHRoaXMsYSxiKX07XHJcbnZhciBxZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9cGQuZXhlYyhiKTtkJiYzPD1kW3ldJiYoYj1kWzFdKyhkWzNdP2RbMl0rZFszXTpcIlwiKSk7YT1hW2pkXS5nZXQoXCJsaW5rZXJQYXJhbVwiKTt2YXIgZT1iW3RdKFwiP1wiKSxkPWJbdF0oXCIjXCIpO2M/Yis9KC0xPT1kP1wiI1wiOlwiJlwiKSthOihjPS0xPT1lP1wiP1wiOlwiJlwiLGI9LTE9PWQ/YisoYythKTpiW0ZdKDAsZCkrYythK2JbRl0oZCkpO3JldHVybiBifSxyZD1mdW5jdGlvbihhLGIpe2lmKGImJmJba2RdKXt2YXIgYz1hW2pkXS5nZXQoXCJsaW5rZXJQYXJhbVwiKVtBXShcIj1cIilbMV07aWYoXCJnZXRcIj09Yi5tZXRob2RbSV0oKSl7Zm9yKHZhciBkPWIuY2hpbGROb2Rlc3x8W10sZT0wO2U8ZFt5XTtlKyspaWYoXCJfZ2FcIj09ZFtlXVt2XSl7ZFtlXVtpZF0oXCJ2YWx1ZVwiLGMpO3JldHVybn1kPU1bdV0oXCJpbnB1dFwiKTtkW2lkXShcInR5cGVcIixcImhpZGRlblwiKTtkW2lkXShcIm5hbWVcIixcIl9nYVwiKTtkW2lkXShcInZhbHVlXCIsYyk7Yi5hcHBlbmRDaGlsZChkKX1lbHNlXCJwb3N0XCI9PVxyXG5iLm1ldGhvZFtJXSgpJiYoYi5hY3Rpb249cWQoYSxiW2tkXSkpfX07XHJcbkRjW3pdLlM9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYyl7dHJ5e2M9Y3x8Ty5ldmVudDt2YXIgZDt0Ont2YXIgZz1jW2pkXXx8Yy5zcmNFbGVtZW50O2ZvcihjPTEwMDtnJiYwPGM7KXtpZihnW0FiXSYmZy5ub2RlTmFtZVttXSgvXmEoPzpyZWEpPyQvaSkpe2Q9ZzticmVhayB0fWc9Z1tVYl07Yy0tfWQ9e319KFwiaHR0cDpcIj09ZFtFXXx8XCJodHRwczpcIj09ZFtFXSkmJnNkKGEsZFttYV18fFwiXCIpJiZkW0FiXSYmUGMoZCxxZChlLGRbQWJdLGIpKX1jYXRjaCh3KXtKKDI2KX19dmFyIGU9dGhpczt0aGlzLlR8fCh0aGlzLlQ9ITAsTChNLFwibW91c2Vkb3duXCIsZCwhMSksTChNLFwidG91Y2hzdGFydFwiLGQsITEpLEwoTSxcImtleXVwXCIsZCwhMSkpO2lmKGMpe2M9ZnVuY3Rpb24oYil7Yj1ifHxPLmV2ZW50O2lmKChiPWJbamRdfHxiLnNyY0VsZW1lbnQpJiZiW2tkXSl7dmFyIGM9YltrZF1bbV0ob2QpO2MmJnNkKGEsY1sxXSkmJnJkKGUsYil9fTtmb3IodmFyIGc9MDtnPE0uZm9ybXNbeV07ZysrKUwoTS5mb3Jtc1tnXSxcclxuXCJzdWJtaXRcIixjKX19O2Z1bmN0aW9uIHNkKGEsYil7aWYoYj09TVtCXVttYV0pcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxhW3ldO2MrKylpZihhW2NdaW5zdGFuY2VvZiBSZWdFeHApe2lmKGFbY11bc10oYikpcmV0dXJuITB9ZWxzZSBpZigwPD1iW3RdKGFbY10pKXJldHVybiEwO3JldHVybiExfTt2YXIgSmQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5VPWI7dGhpcy5hYT1jOyhiPWQpfHwoYj0oYj1QKGEsVikpJiZcInQwXCIhPWI/V2Rbc10oYik/XCJfZ2F0X1wiK0NjKFAoYSxOYSkpOlwiX2dhdF9cIitDYyhiKTpcIl9nYXRcIik7dGhpcy5ZPWJ9LFJkPWZ1bmN0aW9uKGEsYil7dmFyIGM9Yi5nZXQoV2IpO2Iuc2V0KFdiLGZ1bmN0aW9uKGIpe1BkKGEsYik7dmFyIGQ9YyhiKTtRZChhLGIpO3JldHVybiBkfSk7dmFyIGQ9Yi5nZXQoWGIpO2Iuc2V0KFhiLGZ1bmN0aW9uKGIpe3ZhciBjPWQoYik7SWQoYSxiKTtyZXR1cm4gY30pfSxQZD1mdW5jdGlvbihhLGIpe2IuZ2V0KGEuVSl8fChcIjFcIj09Q2EoYS5ZKVswXT9iLnNldChhLlUsXCJcIiwhMCk6Yi5zZXQoYS5VLFwiXCIraGQoKSwhMCkpfSxRZD1mdW5jdGlvbihhLGIpe2IuZ2V0KGEuVSkmJnpjKGEuWSxcIjFcIixiLmdldChZYiksYi5nZXQoVyksYi5nZXQoTmEpLDZFNSl9LElkPWZ1bmN0aW9uKGEsYil7aWYoYi5nZXQoYS5VKSl7dmFyIGM9bmV3IE4sXHJcbmQ9ZnVuY3Rpb24oYSl7Yy5zZXQoJGEoYSkucCxiLmdldChhKSl9O2QoaGIpO2QoaWIpO2QoTmEpO2QoUSk7ZChhLlUpO2QobGQpO3ZhciBlPWEuYWE7Yy5tYXAoZnVuY3Rpb24oYSxiKXtlKz1LKGEpK1wiPVwiO2UrPUsoXCJcIitiKStcIiZcIn0pO2UrPVwiej1cIitoZCgpO3RhKGUpO2Iuc2V0KGEuVSxcIlwiLCEwKX19LFdkPS9eZ3RtXFxkKyQvO3ZhciBmZD1mdW5jdGlvbihhLGIpe3ZhciBjPWEuYjtpZighYy5nZXQoXCJkY0xvYWRlZFwiKSl7SigyOSk7Ty5fZ2FxJiZKKDUyKTtiPWJ8fHt9O3ZhciBkO2JbVV0mJihkPUNjKGJbVV0pKTtkPW5ldyBKZChjLGVkLFwiaHR0cHM6Ly9zdGF0cy5nLmRvdWJsZWNsaWNrLm5ldC9jb2xsZWN0P3Q9ZGMmYWlwPTEmXCIsZCk7UmQoZCxjKTtjLnNldChcImRjTG9hZGVkXCIsITApfX07dmFyIFNkPWZ1bmN0aW9uKGEpe3ZhciBiO2I9YS5nZXQoXCJkY0xvYWRlZFwiKT8hMTpcImNvb2tpZVwiIT1hLmdldChhYyk/ITE6ITA7YiYmKEooNTEpLGI9bmV3IEpkKGEsZWQpLFBkKGIsYSksUWQoYixhKSxhLmdldChiLlUpJiYoYS5zZXQoTWQsMSwhMCksYS5zZXQoZ2Qsb2MoKStcIi9yL2NvbGxlY3RcIiwhMCkpKX07dmFyIEtkPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5iO2lmKCFjLmdldChcIl9ybHNhTG9hZGVkXCIpKXtKKDM4KTtiPWJ8fHt9O2lmKGJbVV0pdmFyIGQ9Q2MoYltVXSk7ZD1uZXcgSmQoYyxIZCxcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYWRzL2dhLWF1ZGllbmNlcz90PXNyJmFpcD0xJlwiLGQpO1JkKGQsYyk7Yy5zZXQoXCJfcmxzYUxvYWRlZFwiLCEwKTt0YyhcImRpc3BsYXlmZWF0dXJlc1wiLGEsYil9fTt2YXIgTGM9ZnVuY3Rpb24oKXt2YXIgYT1PLmdhR2xvYmFsPU8uZ2FHbG9iYWx8fHt9O3JldHVybiBhLmhpZD1hLmhpZHx8aGQoKX07dmFyIGFkLGJkPWZ1bmN0aW9uKGEsYixjKXtpZighYWQpe3ZhciBkO2Q9TVtCXVtoXTt2YXIgZT1PW3ZdLGc9L14jP2dhc289KFteJl0qKS87aWYoZT0oZD0oZD1kJiZkW21dKGcpfHxlJiZlW21dKGcpKT9kWzFdOkNhKFwiR0FTT1wiKVswXXx8XCJcIikmJmRbbV0oL14oPzohKFstMC05YS16Ll17MSw0MH0pISk/KFstLlxcd117MTAsMTIwMH0pJC9pKSl6YyhcIkdBU09cIixcIlwiK2QsYyxiLGEsMCksZi5fdWRvfHwoZi5fdWRvPWIpLGYuX3V0Y3B8fChmLl91dGNwPWMpLGE9ZVsxXSx3YShcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYW5hbHl0aWNzL3dlYi9pbnBhZ2UvcHViL2lucGFnZS5qcz9cIisoYT9cInByZWZpeD1cIithK1wiJlwiOlwiXCIpK2hkKCksXCJfZ2Fzb2pzXCIpO2FkPSEwfX07dmFyIHdiPS9eKFVBfFlUfE1PfEdQKS0oXFxkKyktKFxcZCspJC8scGM9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe2QuYltxXS5zZXQoYSxiKX1mdW5jdGlvbiBjKGEsYyl7YihhLGMpO2QuZmlsdGVycy5hZGQoYSl9dmFyIGQ9dGhpczt0aGlzLmI9bmV3IFlhO3RoaXMuZmlsdGVycz1uZXcgSGE7YihWLGFbVl0pO2IoTmEsc2EoYVtOYV0pKTtiKFUsYVtVXSk7YihXLGFbV118fHhhKCkpO2IoWWIsYVtZYl0pO2IoWmIsYVtaYl0pO2IoJGIsYVskYl0pO2IoV2MsYVtXY10pO2IoYmMsYVtiY10pO2IoY2MsYVtjY10pO2IoS2EsYVtLYV0pO2IoZGMsYVtkY10pO2IoZWMsYVtlY10pO2IoYWMsYVthY10pO2IoQWQsYVtBZF0pO2IoaGIsMSk7YihpYixcImozMVwiKTtjKFFiLE1hKTtjKGRkLGNkKTtjKFJiLE9hKTtjKG1kLHZiKTtjKFNiLG5jKTtjKFVjLFljKTtjKFRiLEphKTtjKFZiLFRhKTtjKFZjLEhjKTtjKHpkLHlkKTtjKExkLFNkKTtjKFdiLFBhKTtjKFhiLFNhKTtjKENkLEZkKHRoaXMpKTtcclxuSmModGhpcy5iLGFbUV0pO0tjKHRoaXMuYik7dGhpcy5iLnNldChqYixMYygpKTtiZCh0aGlzLmIuZ2V0KE5hKSx0aGlzLmIuZ2V0KFcpLHRoaXMuYi5nZXQoWWIpKX0sSmM9ZnVuY3Rpb24oYSxiKXtpZihcImNvb2tpZVwiPT1QKGEsYWMpKXtoYz0hMTt2YXIgYztpOnt2YXIgZD1DYShQKGEsVSkpO2lmKGQmJiEoMT5kW3ldKSl7Yz1bXTtmb3IodmFyIGU9MDtlPGRbeV07ZSsrKXt2YXIgZztnPWRbZV1bQV0oXCIuXCIpO3ZhciBjYT1nLnNoaWZ0KCk7KFwiR0ExXCI9PWNhfHxcIjFcIj09Y2EpJiYxPGdbeV0/KGNhPWcuc2hpZnQoKVtBXShcIi1cIiksMT09Y2FbeV0mJihjYVsxXT1cIjFcIiksY2FbMF0qPTEsY2FbMV0qPTEsZz17cjpjYSxzOmdbSF0oXCIuXCIpfSk6Zz12b2lkIDA7ZyYmY1twXShnKX1pZigxPT1jW3ldKXtKKDEzKTtjPWNbMF0uczticmVhayBpfWlmKDA9PWNbeV0pSigxMik7ZWxzZXtKKDE0KTtkPWljKFAoYSxXKSk7Yz1HYyhjLGQsMCk7aWYoMT09Y1t5XSl7Yz1jWzBdLnM7YnJlYWsgaX1kPVxyXG5qYyhQKGEsWWIpKTtjPUdjKGMsZCwxKTtjPWNbMF0mJmNbMF0uczticmVhayBpfX1jPXZvaWQgMH1jfHwoYz1QKGEsVyksZD1QKGEsJGIpfHx4YSgpLGM9WGMoXCJfX3V0bWFcIixkLGMpLChjPXZvaWQgMD09Yz92b2lkIDA6Yy5PWzFdK1wiLlwiK2MuT1syXSkmJkooMTApKTtjJiYoYVtxXS5zZXQoUSxjKSxoYz0hMCl9Yz1hLmdldChjYyk7aWYoZT0oYz1NW0JdW2M/XCJocmVmXCI6XCJzZWFyY2hcIl1bbV0oXCIoPzomfCN8XFxcXD8pXCIrSyhcIl9nYVwiKVtRY10oLyhbLiorP149IToke30oKXxcXFtcXF1cXC9cXFxcXSkvZyxcIlxcXFwkMVwiKStcIj0oW14mI10qKVwiKSkmJjI9PWNbeV0/Y1sxXTpcIlwiKWEuZ2V0KGJjKT8oYz1lW3RdKFwiLlwiKSwtMT09Yz9KKDIyKTooZD1lW0ZdKGMrMSksXCIxXCIhPWVbRl0oMCxjKT9KKDIyKTooYz1kW3RdKFwiLlwiKSwtMT09Yz9KKDIyKTooZT1kW0ZdKDAsYyksYz1kW0ZdKGMrMSksZSE9SWMoYywwKSYmZSE9SWMoYywtMSkmJmUhPUljKGMsLTIpP0ooMjMpOihKKDExKSxhW3FdLnNldChRLGMpKSkpKSk6XHJcbkooMjEpO2ImJihKKDkpLGFbcV0uc2V0KFEsSyhiKSkpO2EuZ2V0KFEpfHwoKGM9KGM9Ty5nYUdsb2JhbCYmTy5nYUdsb2JhbC52aWQpJiYtMSE9Y1tnYV0oL14oPzp1dG1hXFwuKT9cXGQrXFwuXFxkKyQvKT9jOnZvaWQgMCk/KEooMTcpLGFbcV0uc2V0KFEsYykpOihKKDgpLGFbcV0uc2V0KFEsW2hkKCleTWMoKSYyMTQ3NDgzNjQ3LG4ucm91bmQoKG5ldyBEYXRlKVtkYV0oKS8xRTMpXVtIXShcIi5cIikpKSk7bWMoYSl9LEtjPWZ1bmN0aW9uKGEpe3ZhciBiPU9bb2FdLGM9Ty5zY3JlZW4sZD1NW0JdO2Euc2V0KGxiLHlhKGEuZ2V0KGVjKSkpO2lmKGQpe3ZhciBlPWQucGF0aG5hbWV8fFwiXCI7XCIvXCIhPWUuY2hhckF0KDApJiYoSigzMSksZT1cIi9cIitlKTthLnNldChrYixkW0VdK1wiLy9cIitkW21hXStlK2RbZ2FdKX1jJiZhLnNldChxYixjLndpZHRoK1wieFwiK2MuaGVpZ2h0KTtjJiZhLnNldChwYixjLmNvbG9yRGVwdGgrXCItYml0XCIpO3ZhciBjPU0uZG9jdW1lbnRFbGVtZW50LGc9KGU9TS5ib2R5KSYmXHJcbmVbbGFdJiZlW25hXSxjYT1bXTtjJiZjW2xhXSYmY1tuYV0mJihcIkNTUzFDb21wYXRcIj09PU0uY29tcGF0TW9kZXx8IWcpP2NhPVtjW2xhXSxjW25hXV06ZyYmKGNhPVtlW2xhXSxlW25hXV0pO2M9MD49Y2FbMF18fDA+PWNhWzFdP1wiXCI6Y2FbSF0oXCJ4XCIpO2Euc2V0KHJiLGMpO2Euc2V0KHRiLGZjKCkpO2Euc2V0KG9iLE0uY2hhcmFjdGVyU2V0fHxNLmNoYXJzZXQpO2Euc2V0KHNiLGImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmphdmFFbmFibGVkJiZiLmphdmFFbmFibGVkKCl8fCExKTthLnNldChuYiwoYiYmKGIubGFuZ3VhZ2V8fGIuYnJvd3Nlckxhbmd1YWdlKXx8XCJcIilbSV0oKSk7aWYoZCYmYS5nZXQoY2MpJiYoYj1NW0JdW2hdKSl7Yj1iW0FdKC9bPyYjXSsvKTtkPVtdO2ZvcihjPTA7YzxiW3ldOysrYykoRChiW2NdLFwidXRtX2lkXCIpfHxEKGJbY10sXCJ1dG1fY2FtcGFpZ25cIil8fEQoYltjXSxcInV0bV9zb3VyY2VcIil8fEQoYltjXSxcInV0bV9tZWRpdW1cIil8fEQoYltjXSxcInV0bV90ZXJtXCIpfHxcclxuRChiW2NdLFwidXRtX2NvbnRlbnRcIil8fEQoYltjXSxcImdjbGlkXCIpfHxEKGJbY10sXCJkY2xpZFwiKXx8RChiW2NdLFwiZ2Nsc3JjXCIpKSYmZFtwXShiW2NdKTswPGRbeV0mJihiPVwiI1wiK2RbSF0oXCImXCIpLGEuc2V0KGtiLGEuZ2V0KGtiKStiKSl9fTtwY1t6XS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYi5nZXQoYSl9O3BjW3pdLnNldD1mdW5jdGlvbihhLGIpe3RoaXMuYi5zZXQoYSxiKX07dmFyIHFjPXtwYWdldmlldzpbbWJdLGV2ZW50Olt1Yix4Yix5Yix6Yl0sc29jaWFsOltCYixDYixEYl0sdGltaW5nOltNYixOYixQYixPYl19O1xyXG5wY1t6XS5zZW5kPWZ1bmN0aW9uKGEpe2lmKCEoMT5hcmd1bWVudHNbeV0pKXt2YXIgYixjO1wic3RyaW5nXCI9PT10eXBlb2YgYXJndW1lbnRzWzBdPyhiPWFyZ3VtZW50c1swXSxjPVtdW2hhXVtDXShhcmd1bWVudHMsMSkpOihiPWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdW1ZhXSxjPWFyZ3VtZW50cyk7YiYmKGM9emEocWNbYl18fFtdLGMpLGNbVmFdPWIsdGhpcy5iLnNldChjLHZvaWQgMCwhMCksdGhpcy5maWx0ZXJzLkQodGhpcy5iKSx0aGlzLmJbcV0ubT17fSxKKDQ0KSl9fTt2YXIgcmM9ZnVuY3Rpb24oYSl7aWYoXCJwcmVyZW5kZXJcIj09TS52aXNpYmlsaXR5U3RhdGUpcmV0dXJuITE7YSgpO3JldHVybiEwfTt2YXIgdGQ9L14oPzooXFx3KylcXC4pPyg/OihcXHcrKTopPyhcXHcrKSQvLHNjPWZ1bmN0aW9uKGEpe2lmKGVhKGFbMF0pKXRoaXMudT1hWzBdO2Vsc2V7dmFyIGI9dGQuZXhlYyhhWzBdKTtudWxsIT1iJiY0PT1iW3ldJiYodGhpcy5jPWJbMV18fFwidDBcIix0aGlzLmU9YlsyXXx8XCJcIix0aGlzLmQ9YlszXSx0aGlzLmE9W11baGFdW0NdKGEsMSksdGhpcy5lfHwodGhpcy5BPVwiY3JlYXRlXCI9PXRoaXMuZCx0aGlzLmk9XCJyZXF1aXJlXCI9PXRoaXMuZCx0aGlzLmc9XCJwcm92aWRlXCI9PXRoaXMuZCx0aGlzLmJhPVwicmVtb3ZlXCI9PXRoaXMuZCksdGhpcy5pJiYoMzw9dGhpcy5hW3ldPyh0aGlzLlg9dGhpcy5hWzFdLHRoaXMuVz10aGlzLmFbMl0pOnRoaXMuYVsxXSYmKHFhKHRoaXMuYVsxXSk/dGhpcy5YPXRoaXMuYVsxXTp0aGlzLlc9dGhpcy5hWzFdKSkpO2I9YVsxXTthPWFbMl07aWYoIXRoaXMuZCl0aHJvd1wiYWJvcnRcIjtpZih0aGlzLmkmJighcWEoYil8fFwiXCI9PWIpKXRocm93XCJhYm9ydFwiO2lmKHRoaXMuZyYmXHJcbighcWEoYil8fFwiXCI9PWJ8fCFlYShhKSkpdGhyb3dcImFib3J0XCI7aWYodWQodGhpcy5jKXx8dWQodGhpcy5lKSl0aHJvd1wiYWJvcnRcIjtpZih0aGlzLmcmJlwidDBcIiE9dGhpcy5jKXRocm93XCJhYm9ydFwiO319O2Z1bmN0aW9uIHVkKGEpe3JldHVybiAwPD1hW3RdKFwiLlwiKXx8MDw9YVt0XShcIjpcIil9O3ZhciBZZCxaZCwkZDtZZD1uZXcgTjskZD1uZXcgTjtaZD17ZWM6NDUsZWNvbW1lcmNlOjQ2LGxpbmtpZDo0N307XHJcbnZhciB0Yz1mdW5jdGlvbihhLGIsYyl7Yj09JD9KKDM1KTpiLmdldChWKTt2YXIgZD1ZZC5nZXQoYSk7aWYoIWVhKGQpKXJldHVybiExO2IucGx1Z2luc189Yi5wbHVnaW5zX3x8bmV3IE47aWYoYi5wbHVnaW5zXy5nZXQoYSkpcmV0dXJuITA7Yi5wbHVnaW5zXy5zZXQoYSxuZXcgZChiLGN8fHt9KSk7cmV0dXJuITB9LGFlPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9KGFbbWFdfHxcIlwiKVtBXShcIjpcIilbMF1bSV0oKSxjPShhW0VdfHxcIlwiKVtJXSgpLGM9MSphW2phXXx8KFwiaHR0cDpcIj09Yz84MDpcImh0dHBzOlwiPT1jPzQ0MzpcIlwiKTthPWEucGF0aG5hbWV8fFwiXCI7RChhLFwiL1wiKXx8KGE9XCIvXCIrYSk7cmV0dXJuW2IsXCJcIitjLGFdfXZhciBjPU1bdV0oXCJhXCIpO1BjKGMsTVtCXVtBYl0pO3ZhciBkPShjW0VdfHxcIlwiKVtJXSgpLGU9YihjKSxnPWNbZ2FdfHxcIlwiLGNhPWQrXCIvL1wiK2VbMF0rKGVbMV0/XCI6XCIrZVsxXTpcIlwiKTtEKGEsXCIvL1wiKT9hPWQrYTpEKGEsXCIvXCIpP2E9Y2ErYTohYXx8XHJcbkQoYSxcIj9cIik/YT1jYStlWzJdKyhhfHxnKTowPmFbQV0oXCIvXCIpWzBdW3RdKFwiOlwiKSYmKGE9Y2ErZVsyXVtGXSgwLGVbMl0ubGFzdEluZGV4T2YoXCIvXCIpKStcIi9cIithKTtQYyhjLGEpO2Q9YihjKTtyZXR1cm57cHJvdG9jb2w6KGNbRV18fFwiXCIpW0ldKCksaG9zdDpkWzBdLHBvcnQ6ZFsxXSxwYXRoOmRbMl0sRzpjW2dhXXx8XCJcIix1cmw6YXx8XCJcIn19O3ZhciBaPXtnYTpmdW5jdGlvbigpe1ouZj1bXX19O1ouZ2EoKTtaLkQ9ZnVuY3Rpb24oYSl7dmFyIGI9Wi5KW0ddKFosYXJndW1lbnRzKSxiPVouZi5jb25jYXQoYik7Zm9yKFouZj1bXTswPGJbeV0mJiFaLnYoYlswXSkmJiEoYi5zaGlmdCgpLDA8Wi5mW3ldKTspO1ouZj1aLmYuY29uY2F0KGIpfTtcclxuWi5KPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7Yzxhcmd1bWVudHNbeV07YysrKXRyeXt2YXIgZD1uZXcgc2MoYXJndW1lbnRzW2NdKTtpZihkLmcpWWQuc2V0KGQuYVswXSxkLmFbMV0pO2Vsc2V7aWYoZC5pKXt2YXIgZT1kLGc9ZS5hWzBdO2lmKCFlYShZZC5nZXQoZykpJiYhJGQuZ2V0KGcpKXtaZFtyYV0oZykmJkooWmRbZ10pO3ZhciBjYT1lLlg7IWNhJiZaZFtyYV0oZyk/KEooMzkpLGNhPWcrXCIuanNcIik6Sig0Myk7aWYoY2Epe2NhJiYwPD1jYVt0XShcIi9cIil8fChjYT0oQmF8fFwiaHR0cHM6XCI9PU1bQl1bRV0/XCJodHRwczpcIjpcImh0dHA6XCIpK1wiLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vcGx1Z2lucy91YS9cIitjYSk7dmFyIGw9YWUoY2EpLGU9dm9pZCAwO3ZhciBrPWxbRV0sdz1NW0JdW0VdLGU9XCJodHRwczpcIj09a3x8az09dz8hMDpcImh0dHA6XCIhPWs/ITE6XCJodHRwOlwiPT13O3ZhciBYZDtpZihYZD1lKXt2YXIgZT1sLGJlPWFlKE1bQl1bQWJdKTtpZihlLkd8fDA8PVxyXG5lLnVybFt0XShcIj9cIil8fDA8PWUucGF0aFt0XShcIjovL1wiKSlYZD0hMTtlbHNlIGlmKGVbeF09PWJlW3hdJiZlW2phXT09YmVbamFdKVhkPSEwO2Vsc2V7dmFyIGNlPVwiaHR0cDpcIj09ZVtFXT84MDo0NDM7WGQ9XCJ3d3cuZ29vZ2xlLWFuYWx5dGljcy5jb21cIj09ZVt4XSYmKGVbamFdfHxjZSk9PWNlJiZEKGUucGF0aCxcIi9wbHVnaW5zL1wiKT8hMDohMX19WGQmJih3YShsLnVybCksJGQuc2V0KGcsITApKX19fWJbcF0oZCl9fWNhdGNoKGRlKXt9cmV0dXJuIGJ9O1xyXG5aLnY9ZnVuY3Rpb24oYSl7dHJ5e2lmKGEudSlhLnVbQ10oTywkLmooXCJ0MFwiKSk7ZWxzZXt2YXIgYj1hLmM9PWdiPyQ6JC5qKGEuYyk7aWYoYS5BKVwidDBcIj09YS5jJiYkLmNyZWF0ZVtHXSgkLGEuYSk7ZWxzZSBpZihhLmJhKSQucmVtb3ZlKGEuYyk7ZWxzZSBpZihiKWlmKGEuaSl7aWYoIXRjKGEuYVswXSxiLGEuVykpcmV0dXJuITB9ZWxzZSBpZihhLmUpe3ZhciBjPWEuZCxkPWEuYSxlPWIucGx1Z2luc18uZ2V0KGEuZSk7ZVtjXVtHXShlLGQpfWVsc2UgYlthLmRdW0ddKGIsYS5hKX19Y2F0Y2goZyl7fX07dmFyICQ9ZnVuY3Rpb24oYSl7SigxKTtaLkRbR10oWixbYXJndW1lbnRzXSl9OyQuaD17fTskLlA9W107JC5MPTA7JC5hbnN3ZXI9NDI7dmFyIHVjPVtOYSxXLFZdOyQuY3JlYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPXphKHVjLFtdW2hhXVtDXShhcmd1bWVudHMpKTtiW1ZdfHwoYltWXT1cInQwXCIpO3ZhciBjPVwiXCIrYltWXTtpZigkLmhbY10pcmV0dXJuICQuaFtjXTtiPW5ldyBwYyhiKTskLmhbY109YjskLlBbcF0oYik7cmV0dXJuIGJ9OyQucmVtb3ZlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8JC5QW3ldO2IrKylpZigkLlBbYl0uZ2V0KFYpPT1hKXskLlAuc3BsaWNlKGIsMSk7JC5oW2FdPW51bGw7YnJlYWt9fTskLmo9ZnVuY3Rpb24oYSl7cmV0dXJuICQuaFthXX07JC5LPWZ1bmN0aW9uKCl7cmV0dXJuICQuUFtoYV0oMCl9O1xyXG4kLk49ZnVuY3Rpb24oKXtcImdhXCIhPWdiJiZKKDQ5KTt2YXIgYT1PW2diXTtpZighYXx8NDIhPWEuYW5zd2VyKXskLkw9YSYmYS5sOyQubG9hZGVkPSEwO3ZhciBiPU9bZ2JdPSQ7WChcImNyZWF0ZVwiLGIsYi5jcmVhdGUsMyk7WChcInJlbW92ZVwiLGIsYi5yZW1vdmUpO1goXCJnZXRCeU5hbWVcIixiLGIuaiw1KTtYKFwiZ2V0QWxsXCIsYixiLkssNik7Yj1wY1t6XTtYKFwiZ2V0XCIsYixiLmdldCw3KTtYKFwic2V0XCIsYixiLnNldCw0KTtYKFwic2VuZFwiLGIsYlt4Y10sMik7Yj1ZYVt6XTtYKFwiZ2V0XCIsYixiLmdldCk7WChcInNldFwiLGIsYi5zZXQpO3Q6Zm9yKHZhciBiPU0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIiksYz0wO2M8Ylt5XSYmMTAwPmM7YysrKXt2YXIgZDtkPShkPWJbY10uc3JjKT8wIT1kW3RdKFwiaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzXCIpPyExOiEwOiExO2lmKGQpe0ooMzMpO2JyZWFrIHR9fVwiaHR0cHM6XCIhPU1bQl1bRV0mJiFCYSYmRWQoKSYmXHJcbihKKDM2KSxCYT0hMCk7KE8uZ2FwbHVnaW5zPU8uZ2FwbHVnaW5zfHx7fSkuTGlua2VyPURjO2I9RGNbel07WWQuc2V0KFwibGlua2VyXCIsRGMpO1goXCJkZWNvcmF0ZVwiLGIsYi5RLDIwKTtYKFwiYXV0b0xpbmtcIixiLGIuUywyNSk7WWQuc2V0KFwiZGlzcGxheWZlYXR1cmVzXCIsZmQpO1lkLnNldChcImFkZmVhdHVyZXNcIixLZCk7YT1hJiZhLnE7a2EoYSk/Wi5EW0ddKCQsYSk6Sig1MCl9fTskLms9ZnVuY3Rpb24oKXtmb3IodmFyIGE9JC5LKCksYj0wO2I8YVt5XTtiKyspYVtiXS5nZXQoVil9OyhmdW5jdGlvbigpe3ZhciBhPSQuTjtpZighcmMoYSkpe0ooMTYpO3ZhciBiPSExLGM9ZnVuY3Rpb24oKXshYiYmcmMoYSkmJihiPSEwLHZhKE0sXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYykpfTtMKE0sXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYyl9fSkoKTtmdW5jdGlvbiBMYShhKXt2YXIgYj0xLGM9MCxkO2lmKGEpZm9yKGI9MCxkPWFbeV0tMTswPD1kO2QtLSljPWEuY2hhckNvZGVBdChkKSxiPShiPDw2JjI2ODQzNTQ1NSkrYysoYzw8MTQpLGM9YiYyNjYzMzgzMDQsYj0wIT1jP2JeYz4+MjE6YjtyZXR1cm4gYn07fSkod2luZG93KTtcclxuXHJcblx0Ly9taXggcGFuZWxcclxuXHQoZnVuY3Rpb24oZixiKXtcclxuXHQgIGlmKCFiLl9fU1Ype3ZhciBhLGUsaSxnO1xyXG5cdCAgd2luZG93Lm1peHBhbmVsPWI7Yi5faT1bXTtcclxuXHQgIGIuaW5pdD1mdW5jdGlvbihhLGUsZCl7XHJcblx0ICAgIGZ1bmN0aW9uIGYoYixoKXtcclxuXHQgICAgICB2YXIgYT1oLnNwbGl0KFwiLlwiKTtcclxuXHQgICAgICAyPT1hLmxlbmd0aCYmKGI9YlthWzBdXSxoPWFbMV0pO1xyXG5cdCAgYltoXT1mdW5jdGlvbigpe1xyXG5cdCAgICBiLnB1c2goW2hdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCkpKX1cclxuXHQgIH1cclxuXHQgIHZhciBjPWI7XHJcblx0ICBcInVuZGVmaW5lZFwiIT09dHlwZW9mIGQ/Yz1iW2RdPVtdOmQ9XCJtaXhwYW5lbFwiO1xyXG5cdCAgYy5wZW9wbGU9Yy5wZW9wbGV8fFtdO1xyXG5cdCAgYy50b1N0cmluZz1mdW5jdGlvbihiKXt2YXIgYT1cIm1peHBhbmVsXCI7XCJtaXhwYW5lbFwiIT09ZCYmKGErPVwiLlwiK2QpO2J8fChhKz1cIiAoc3R1YilcIik7XHJcblx0ICByZXR1cm4gYVxyXG5cdH07XHJcblx0Yy5wZW9wbGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtcclxuXHQgIHJldHVybiBjLnRvU3RyaW5nKDEpK1wiLnBlb3BsZSAoc3R1YilcIn07XHJcblx0ICBpPVwiZGlzYWJsZSB0cmFjayB0cmFja19wYWdldmlldyB0cmFja19saW5rcyB0cmFja19mb3JtcyByZWdpc3RlciByZWdpc3Rlcl9vbmNlIGFsaWFzIHVucmVnaXN0ZXIgaWRlbnRpZnkgbmFtZV90YWcgc2V0X2NvbmZpZyBwZW9wbGUuc2V0IHBlb3BsZS5zZXRfb25jZSBwZW9wbGUuaW5jcmVtZW50IHBlb3BsZS5hcHBlbmQgcGVvcGxlLnRyYWNrX2NoYXJnZSBwZW9wbGUuY2xlYXJfY2hhcmdlcyBwZW9wbGUuZGVsZXRlX3VzZXJcIi5zcGxpdChcIiBcIik7XHJcblx0Zm9yKGc9MDtnPGkubGVuZ3RoO2crKykgZihjLGlbZ10pO1xyXG5cdCAgYi5faS5wdXNoKFthLGUsZF0pfTtcclxuXHQgIGIuX19TVj0xLjI7XHJcblx0ICBhPWYuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuXHQgIGEudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2EuYXN5bmM9ITA7XHJcblx0ICBhLnNyYz1cImh0dHBzOi8vY2RuLm14cG5sLmNvbS9saWJzL21peHBhbmVsLTItbGF0ZXN0Lm1pbi5qc1wiO1xyXG5cdCAgZT1mLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xyXG5cdCAgLy9lLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsZSlcclxuXHR9fSkoZG9jdW1lbnQsd2luZG93Lm1peHBhbmVsfHxbXSk7XHJcblx0XHJcbmlmIChjb25maWcuYXBwID09PSAnYXBwJykge1xyXG5cclxuXHQvLyBtaXhwYW5lbCBcclxuXHJcblx0KGZ1bmN0aW9uKCkge1xyXG5cdHZhciBuPSEwLHA9bnVsbCxzPSExO2Z1bmN0aW9uIEMoKXtyZXR1cm4gZnVuY3Rpb24oKXt9fVxyXG5cdChmdW5jdGlvbihyKXtmdW5jdGlvbiBvKCl7fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gRihhLGIsZSl7dmFyIGYsZD1cIm1peHBhbmVsXCI9PT1lP3I6cltlXTtpZihkJiYhYy5pc0FycmF5KGQpKXEuZXJyb3IoXCJZb3UgaGF2ZSBhbHJlYWR5IGluaXRpYWxpemVkIFwiK2UpO2Vsc2UgcmV0dXJuIGY9bmV3IGksZi5GYShhLGIsZSksZi5wZW9wbGU9bmV3IG8sZi5wZW9wbGUuRmEoZiksdz13fHxmLmQoXCJkZWJ1Z1wiKSxjLmgoZCl8fChmLkRhLmNhbGwoZi5wZW9wbGUsZC5wZW9wbGUpLGYuRGEoZCkpLGZ9ZnVuY3Rpb24gbShhKXt0aGlzLnByb3BzPXt9O3RoaXMua2I9czt0aGlzLm5hbWU9YS5jb29raWVfbmFtZT9cIm1wX1wiK2EuY29va2llX25hbWU6XCJtcF9cIithLnRva2VuK1wiX21peHBhbmVsXCI7dGhpcy5sb2FkKCk7dGhpcy5LYihhKTt0aGlzLlFjKGEpO3RoaXMuc2F2ZSgpfWZ1bmN0aW9uIEcoKXt0aGlzLkFiPVwic3VibWl0XCJ9ZnVuY3Rpb24gQSgpe3RoaXMuQWI9XCJjbGlja1wifWZ1bmN0aW9uIHYoKXt9XHJcblx0ZnVuY3Rpb24geCgpe2lmKCF4LnRjKUs9eC50Yz1uLEw9cyxjLmEoeSxmdW5jdGlvbihhKXthLldiKCl9KX12YXIgSj1BcnJheS5wcm90b3R5cGUsTj1GdW5jdGlvbi5wcm90b3R5cGUsej1PYmplY3QucHJvdG90eXBlLEI9Si5zbGljZSxEPXoudG9TdHJpbmcsSD16Lmhhc093blByb3BlcnR5LHU9d2luZG93LmNvbnNvbGUsRT13aW5kb3cubmF2aWdhdG9yLGs9d2luZG93LmRvY3VtZW50LHQ9RS51c2VyQWdlbnQsTz1cIl9fbXBzLF9fbXBzbyxfX21wYSxfX21wYXAsJHBlb3BsZV9kaXN0aW5jdF9pZCxfX2FsaWFzLF9fY21wbnNcIi5zcGxpdChcIixcIiksej1yJiZyLl9fU1Z8fDAsST13aW5kb3cuWE1MSHR0cFJlcXVlc3QmJlwid2l0aENyZWRlbnRpYWxzXCJpbiBuZXcgWE1MSHR0cFJlcXVlc3QsTD0hSSYmLTE9PXQuaW5kZXhPZihcIk1TSUVcIikmJi0xPT10LmluZGV4T2YoXCJNb3ppbGxhXCIpLGM9e30sdz1zLFA9e2FwaV9ob3N0OihcImh0dHBzOlwiPT1rLmxvY2F0aW9uLnByb3RvY29sP1wiaHR0cHM6Ly9cIjpcclxuXHRcImh0dHA6Ly9cIikrXCJhcGkubWl4cGFuZWwuY29tXCIsY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZTpuLGNvb2tpZV9uYW1lOlwiXCIsbG9hZGVkOkMoKSxzdG9yZV9nb29nbGU6bixzYXZlX3JlZmVycmVyOm4sdGVzdDpzLHZlcmJvc2U6cyxpbWc6cyx0cmFja19wYWdldmlldzpuLGRlYnVnOnMsdHJhY2tfbGlua3NfdGltZW91dDozMDAsY29va2llX2V4cGlyYXRpb246MzY1LHVwZ3JhZGU6cyxkaXNhYmxlX2Nvb2tpZTpzLHNlY3VyZV9jb29raWU6cyxpcDpufSxLPXM7KGZ1bmN0aW9uKCl7dmFyIGE9Ti5iaW5kLGI9Si5mb3JFYWNoLGU9Si5pbmRleE9mLGY9QXJyYXkuaXNBcnJheSxkPXt9O2MuYmluZD1mdW5jdGlvbihiLGUpe3ZhciBkLGY7aWYoYSYmYi5iaW5kPT09YSlyZXR1cm4gYS5hcHBseShiLEIuY2FsbChhcmd1bWVudHMsMSkpO2lmKCFjLndiKGIpKXRocm93IG5ldyBUeXBlRXJyb3I7ZD1CLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmPWZ1bmN0aW9uKCl7aWYoISh0aGlzIGluc3RhbmNlb2ZcclxuXHRmKSlyZXR1cm4gYi5hcHBseShlLGQuY29uY2F0KEIuY2FsbChhcmd1bWVudHMpKSk7Y3Rvci5wcm90b3R5cGU9Yi5wcm90b3R5cGU7dmFyIGE9bmV3IGN0b3I7Y3Rvci5wcm90b3R5cGU9cDt2YXIgYz1iLmFwcGx5KGEsZC5jb25jYXQoQi5jYWxsKGFyZ3VtZW50cykpKTtyZXR1cm4gT2JqZWN0KGMpPT09Yz9jOmF9fTtjLmljPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhW2JdJiYoYVtiXT1jLmJpbmQoYVtiXSxhKSl9O3ZhciBsPWMuYT1mdW5jdGlvbihhLGUsYyl7aWYoYSE9cClpZihiJiZhLmZvckVhY2g9PT1iKWEuZm9yRWFjaChlLGMpO2Vsc2UgaWYoYS5sZW5ndGg9PT0rYS5sZW5ndGgpZm9yKHZhciBmPTAsbD1hLmxlbmd0aDtmPGwmJiEoZiBpbiBhJiZlLmNhbGwoYyxhW2ZdLGYsYSk9PT1kKTtmKyspO2Vsc2UgZm9yKGYgaW4gYSlpZihILmNhbGwoYSxmKSYmZS5jYWxsKGMsYVtmXSxmLGEpPT09ZClicmVha307Yy5wPWZ1bmN0aW9uKGEpe2EmJlxyXG5cdGMuVWEoYSkmJihhPWEucmVwbGFjZSgvJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIikucmVwbGFjZSgvJy9nLFwiJiMwMzk7XCIpKTtyZXR1cm4gYX07Yy5leHRlbmQ9ZnVuY3Rpb24oYSl7bChCLmNhbGwoYXJndW1lbnRzLDEpLGZ1bmN0aW9uKGIpe2Zvcih2YXIgZSBpbiBiKXZvaWQgMCE9PWJbZV0mJihhW2VdPWJbZV0pfSk7cmV0dXJuIGF9O2MuaXNBcnJheT1mfHxmdW5jdGlvbihhKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1ELmNhbGwoYSl9O2Mud2I9ZnVuY3Rpb24oYSl7dHJ5e3JldHVybi9eXFxzKlxcYmZ1bmN0aW9uXFxiLy50ZXN0KGEpfWNhdGNoKGIpe3JldHVybiBzfX07Yy54Yz1mdW5jdGlvbihhKXtyZXR1cm4hKCFhfHwhSC5jYWxsKGEsXCJjYWxsZWVcIikpfTtjLiQ9ZnVuY3Rpb24oYSl7cmV0dXJuIWE/W106YS4kP2EuJCgpOmMuaXNBcnJheShhKXx8Yy54YyhhKT9CLmNhbGwoYSk6Yy5TYyhhKX07XHJcblx0Yy5TYz1mdW5jdGlvbihhKXt2YXIgYj1bXTtpZihhPT1wKXJldHVybiBiO2woYSxmdW5jdGlvbihhKXtiW2IubGVuZ3RoXT1hfSk7cmV0dXJuIGJ9O2MuV2M9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O2Muc2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz1zO2lmKGE9PXApcmV0dXJuIGM7aWYoZSYmYS5pbmRleE9mPT09ZSlyZXR1cm4tMSE9YS5pbmRleE9mKGIpO2woYSxmdW5jdGlvbihhKXtpZihjfHwoYz1hPT09YikpcmV0dXJuIGR9KTtyZXR1cm4gY307Yy5vPWZ1bmN0aW9uKGEsYil7cmV0dXJuLTEhPT1hLmluZGV4T2YoYil9fSkoKTtjLnViPWZ1bmN0aW9uKGEsYil7YS5wcm90b3R5cGU9bmV3IGI7YS5MYz1iLnByb3RvdHlwZX07Yy5qPWZ1bmN0aW9uKGEpe3JldHVybiBhPT09T2JqZWN0KGEpJiYhYy5pc0FycmF5KGEpfTtjLlc9ZnVuY3Rpb24oYSl7aWYoYy5qKGEpKXtmb3IodmFyIGIgaW4gYSlpZihILmNhbGwoYSxiKSlyZXR1cm4gcztyZXR1cm4gbn1yZXR1cm4gc307Yy5oPWZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1cclxuXHRhfTtjLlVhPWZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBTdHJpbmddXCI9PUQuY2FsbChhKX07Yy55Yz1mdW5jdGlvbihhKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09RC5jYWxsKGEpfTtjLnpjPWZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBOdW1iZXJdXCI9PUQuY2FsbChhKX07Yy5vYj1mdW5jdGlvbihhKXtjLmEoYSxmdW5jdGlvbihiLGUpe2MueWMoYik/YVtlXT1jLnVjKGIpOmMuaihiKSYmKGFbZV09Yy5vYihiKSl9KTtyZXR1cm4gYX07Yy51Yz1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEpe3JldHVybiAxMD5hP1wiMFwiK2E6YX1yZXR1cm4gYS5nZXRVVENGdWxsWWVhcigpK1wiLVwiK2IoYS5nZXRVVENNb250aCgpKzEpK1wiLVwiK2IoYS5nZXRVVENEYXRlKCkpK1wiVFwiK2IoYS5nZXRVVENIb3VycygpKStcIjpcIitiKGEuZ2V0VVRDTWludXRlcygpKStcIjpcIitiKGEuZ2V0VVRDU2Vjb25kcygpKX07Yy5zPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3RyeXthLmFwcGx5KHRoaXMsXHJcblx0YXJndW1lbnRzKX1jYXRjaChiKXtxLm5hKFwiSW1wbGVtZW50YXRpb24gZXJyb3IuIFBsZWFzZSBjb250YWN0IHN1cHBvcnRAbWl4cGFuZWwuY29tLlwiKX19fTtjLkNiPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspYS5wcm90b3R5cGVbYltlXV09Yy5zKGEucHJvdG90eXBlW2JbZV1dKX07Yy5yYT1mdW5jdGlvbihhKXt2YXIgYj17fTtjLmEoYSxmdW5jdGlvbihhLGYpe2MuVWEoYSkmJjA8YS5sZW5ndGgmJihiW2ZdPWEpfSk7cmV0dXJuIGJ9O2MudHJ1bmNhdGU9ZnVuY3Rpb24oYSxiKXt2YXIgZTtcInN0cmluZ1wiPT09dHlwZW9mIGE/ZT1hLnNsaWNlKDAsYik6Yy5pc0FycmF5KGEpPyhlPVtdLGMuYShhLGZ1bmN0aW9uKGEpe2UucHVzaChjLnRydW5jYXRlKGEsYikpfSkpOmMuaihhKT8oZT17fSxjLmEoYSxmdW5jdGlvbihhLGQpe2VbZF09Yy50cnVuY2F0ZShhLGIpfSkpOmU9YTtyZXR1cm4gZX07Yy5jYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsXHJcblx0Yyl7dmFyIGw9XCJcIixqPTAsaD1qPVwiXCIsaD0wLGc9bCxpPVtdLGs9Y1thXTtrJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRvSlNPTiYmKGs9ay50b0pTT04oYSkpO3N3aXRjaCh0eXBlb2Ygayl7Y2FzZSBcInN0cmluZ1wiOnJldHVybiBlKGspO2Nhc2UgXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoayk/XCJcIitrOlwibnVsbFwiO2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bGxcIjpyZXR1cm5cIlwiK2s7Y2FzZSBcIm9iamVjdFwiOmlmKCFrKXJldHVyblwibnVsbFwiO2wrPVwiICAgIFwiO2k9W107aWYoXCJbb2JqZWN0IEFycmF5XVwiPT09RC5hcHBseShrKSl7aD1rLmxlbmd0aDtmb3Ioaj0wO2o8aDtqKz0xKWlbal09YihqLGspfHxcIm51bGxcIjtyZXR1cm4gaD0wPT09aS5sZW5ndGg/XCJbXVwiOmw/XCJbXFxuXCIrbCtpLmpvaW4oXCIsXFxuXCIrbCkrXCJcXG5cIitnK1wiXVwiOlwiW1wiK2kuam9pbihcIixcIikrXCJdXCJ9Zm9yKGogaW4gaylILmNhbGwoayxqKSYmKGg9YihqLGspKSYmaS5wdXNoKGUoaikrXHJcblx0KGw/XCI6IFwiOlwiOlwiKStoKTtyZXR1cm4gaD0wPT09aS5sZW5ndGg/XCJ7fVwiOmw/XCJ7XCIraS5qb2luKFwiLFwiKStcIlwiK2crXCJ9XCI6XCJ7XCIraS5qb2luKFwiLFwiKStcIn1cIn19ZnVuY3Rpb24gZShhKXt2YXIgYj0vW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGU9e1wiXFx1MDAwOFwiOlwiXFxcXGJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcdTAwMGNcIjpcIlxcXFxmXCIsXCJcXHJcIjpcIlxcXFxyXCIsJ1wiJzonXFxcXFwiJyxcIlxcXFxcIjpcIlxcXFxcXFxcXCJ9O2IubGFzdEluZGV4PTA7cmV0dXJuIGIudGVzdChhKT8nXCInK2EucmVwbGFjZShiLGZ1bmN0aW9uKGEpe3ZhciBiPWVbYV07cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiP2I6XCJcXFxcdVwiKyhcIjAwMDBcIithLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCl9KSsnXCInOidcIicrYSsnXCInfXJldHVybiBiKFwiXCIsXHJcblx0e1wiXCI6YX0pfX0oKTtjLndhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3N3aXRjaChoKXtjYXNlIFwidFwiOnJldHVybiBkKFwidFwiKSxkKFwiclwiKSxkKFwidVwiKSxkKFwiZVwiKSxuO2Nhc2UgXCJmXCI6cmV0dXJuIGQoXCJmXCIpLGQoXCJhXCIpLGQoXCJsXCIpLGQoXCJzXCIpLGQoXCJlXCIpLHM7Y2FzZSBcIm5cIjpyZXR1cm4gZChcIm5cIiksZChcInVcIiksZChcImxcIiksZChcImxcIikscH1sKFwiVW5leHBlY3RlZCAnXCIraCtcIidcIil9ZnVuY3Rpb24gYigpe2Zvcig7aCYmXCIgXCI+PWg7KWQoKX1mdW5jdGlvbiBlKCl7dmFyIGEsYixlPVwiXCIsYztpZignXCInPT09aClmb3IoO2QoKTspe2lmKCdcIic9PT1oKXJldHVybiBkKCksZTtpZihcIlxcXFxcIj09PWgpaWYoZCgpLFwidVwiPT09aCl7Zm9yKGI9Yz0wOzQ+YjtiKz0xKXthPXBhcnNlSW50KGQoKSwxNik7aWYoIWlzRmluaXRlKGEpKWJyZWFrO2M9MTYqYythfWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyl9ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGdbaF0pZSs9Z1toXTtlbHNlIGJyZWFrO1xyXG5cdGVsc2UgZSs9aH1sKFwiQmFkIHN0cmluZ1wiKX1mdW5jdGlvbiBjKCl7dmFyIGE7YT1cIlwiO1wiLVwiPT09aCYmKGE9XCItXCIsZChcIi1cIikpO2Zvcig7XCIwXCI8PWgmJlwiOVwiPj1oOylhKz1oLGQoKTtpZihcIi5cIj09PWgpZm9yKGErPVwiLlwiO2QoKSYmXCIwXCI8PWgmJlwiOVwiPj1oOylhKz1oO2lmKFwiZVwiPT09aHx8XCJFXCI9PT1oKXthKz1oO2QoKTtpZihcIi1cIj09PWh8fFwiK1wiPT09aClhKz1oLGQoKTtmb3IoO1wiMFwiPD1oJiZcIjlcIj49aDspYSs9aCxkKCl9YT0rYTtpZihpc0Zpbml0ZShhKSlyZXR1cm4gYTtsKFwiQmFkIG51bWJlclwiKX1mdW5jdGlvbiBkKGEpe2EmJmEhPT1oJiZsKFwiRXhwZWN0ZWQgJ1wiK2ErXCInIGluc3RlYWQgb2YgJ1wiK2grXCInXCIpO2g9aS5jaGFyQXQoaik7ais9MTtyZXR1cm4gaH1mdW5jdGlvbiBsKGEpe3Rocm93e25hbWU6XCJTeW50YXhFcnJvclwiLG1lc3NhZ2U6YSxWYzpqLHRleHQ6aX07fXZhciBqLGgsZz17J1wiJzonXCInLFwiXFxcXFwiOlwiXFxcXFwiLFwiL1wiOlwiL1wiLGI6XCJcXHUwMDA4XCIsZjpcIlxcdTAwMGNcIixcclxuXHRuOlwiXFxuXCIscjpcIlxcclwiLHQ6XCJcXHRcIn0saSxrO2s9ZnVuY3Rpb24oKXtiKCk7c3dpdGNoKGgpe2Nhc2UgXCJ7XCI6dmFyIGo7YTp7dmFyIGcsaT17fTtpZihcIntcIj09PWgpe2QoXCJ7XCIpO2IoKTtpZihcIn1cIj09PWgpe2QoXCJ9XCIpO2o9aTticmVhayBhfWZvcig7aDspe2c9ZSgpO2IoKTtkKFwiOlwiKTtPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChpLGcpJiZsKCdEdXBsaWNhdGUga2V5IFwiJytnKydcIicpO2lbZ109aygpO2IoKTtpZihcIn1cIj09PWgpe2QoXCJ9XCIpO2o9aTticmVhayBhfWQoXCIsXCIpO2IoKX19bChcIkJhZCBvYmplY3RcIil9cmV0dXJuIGo7Y2FzZSBcIltcIjphOntqPVtdO2lmKFwiW1wiPT09aCl7ZChcIltcIik7YigpO2lmKFwiXVwiPT09aCl7ZChcIl1cIik7Zz1qO2JyZWFrIGF9Zm9yKDtoOyl7ai5wdXNoKGsoKSk7YigpO2lmKFwiXVwiPT09aCl7ZChcIl1cIik7Zz1qO2JyZWFrIGF9ZChcIixcIik7YigpfX1sKFwiQmFkIGFycmF5XCIpfXJldHVybiBnO2Nhc2UgJ1wiJzpyZXR1cm4gZSgpO2Nhc2UgXCItXCI6cmV0dXJuIGMoKTtcclxuXHRkZWZhdWx0OnJldHVyblwiMFwiPD1oJiZcIjlcIj49aD9jKCk6YSgpfX07cmV0dXJuIGZ1bmN0aW9uKGEpe2k9YTtqPTA7aD1cIiBcIjthPWsoKTtiKCk7aCYmbChcIlN5bnRheCBlcnJvclwiKTtyZXR1cm4gYX19KCk7Yy5pYj1mdW5jdGlvbihhKXt2YXIgYixlLGYsZCxsPTAsaj0wLGg9XCJcIixoPVtdO2lmKCFhKXJldHVybiBhO2E9Yy5SYyhhKTtkbyBiPWEuY2hhckNvZGVBdChsKyspLGU9YS5jaGFyQ29kZUF0KGwrKyksZj1hLmNoYXJDb2RlQXQobCsrKSxkPWI8PDE2fGU8PDh8ZixiPWQ+PjE4JjYzLGU9ZD4+MTImNjMsZj1kPj42JjYzLGQmPTYzLGhbaisrXT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIuY2hhckF0KGIpK1wiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIi5jaGFyQXQoZSkrXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChmKStcclxuXHRcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIuY2hhckF0KGQpO3doaWxlKGw8YS5sZW5ndGgpO2g9aC5qb2luKFwiXCIpO3N3aXRjaChhLmxlbmd0aCUzKXtjYXNlIDE6aD1oLnNsaWNlKDAsLTIpK1wiPT1cIjticmVhaztjYXNlIDI6aD1oLnNsaWNlKDAsLTEpK1wiPVwifXJldHVybiBofTtjLlJjPWZ1bmN0aW9uKGEpe3ZhciBhPShhK1wiXCIpLnJlcGxhY2UoL1xcclxcbi9nLFwiXFxuXCIpLnJlcGxhY2UoL1xcci9nLFwiXFxuXCIpLGI9XCJcIixlLGMsZD0wLGw7ZT1jPTA7ZD1hLmxlbmd0aDtmb3IobD0wO2w8ZDtsKyspe3ZhciBqPWEuY2hhckNvZGVBdChsKSxoPXA7MTI4Pmo/YysrOmg9MTI3PGomJjIwNDg+aj9TdHJpbmcuZnJvbUNoYXJDb2RlKGo+PjZ8MTkyLGomNjN8MTI4KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGo+PjEyfDIyNCxqPj42JjYzfDEyOCxqJjYzfDEyOCk7aCE9PXAmJihjPmUmJihiKz1hLnN1YnN0cmluZyhlLGMpKSxiKz1cclxuXHRoLGU9Yz1sKzEpfWM+ZSYmKGIrPWEuc3Vic3RyaW5nKGUsYS5sZW5ndGgpKTtyZXR1cm4gYn07Yy5SYj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXtmdW5jdGlvbiBhKGIsZSl7dmFyIGMsZD0wO2ZvcihjPTA7YzxlLmxlbmd0aDtjKyspZHw9bFtjXTw8OCpjO3JldHVybiBiXmR9dmFyIGIsYyxsPVtdLGo9MDtmb3IoYj0wO2I8dC5sZW5ndGg7YisrKWM9dC5jaGFyQ29kZUF0KGIpLGwudW5zaGlmdChjJjI1NSksNDw9bC5sZW5ndGgmJihqPWEoaixsKSxsPVtdKTswPGwubGVuZ3RoJiYoaj1hKGosbCkpO3JldHVybiBqLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiBiKCl7Zm9yKHZhciBhPTEqbmV3IERhdGUsYj0wO2E9PTEqbmV3IERhdGU7KWIrKztyZXR1cm4gYS50b1N0cmluZygxNikrYi50b1N0cmluZygxNil9cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9KHNjcmVlbi5oZWlnaHQqc2NyZWVuLndpZHRoKS50b1N0cmluZygxNik7cmV0dXJuIGIoKStcIi1cIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5yZXBsYWNlKFwiLlwiLFxyXG5cdFwiXCIpK1wiLVwiK2EoKStcIi1cIitjK1wiLVwiK2IoKX19KCk7Yy52Yj1mdW5jdGlvbihhKXtyZXR1cm4vKGdvb2dsZSB3ZWIgcHJldmlld3xiYWlkdXNwaWRlcnx5YW5kZXhib3R8YmluZ2JvdHxnb29nbGVib3R8eWFob28hIHNsdXJwKS9pLnRlc3QoYSk/bjpzfTtjLlFiPWZ1bmN0aW9uKGEpe3ZhciBiLGUsZixkPVtdO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYiYmKGI9XCImXCIpO2MuYShhLGZ1bmN0aW9uKGEsYil7ZT1lbmNvZGVVUklDb21wb25lbnQoYS50b1N0cmluZygpKTtmPWVuY29kZVVSSUNvbXBvbmVudChiKTtkW2QubGVuZ3RoXT1mK1wiPVwiK2V9KTtyZXR1cm4gZC5qb2luKGIpfTtjLnBiPWZ1bmN0aW9uKGEsYil7dmFyIGI9Yi5yZXBsYWNlKC9bXFxbXS8sXCJcXFxcW1wiKS5yZXBsYWNlKC9bXFxdXS8sXCJcXFxcXVwiKSxjPVJlZ0V4cChcIltcXFxcPyZdXCIrYitcIj0oW14mI10qKVwiKS5leGVjKGEpO3JldHVybiBjPT09cHx8YyYmXCJzdHJpbmdcIiE9PXR5cGVvZiBjWzFdJiZjWzFdLmxlbmd0aD9cIlwiOmRlY29kZVVSSUNvbXBvbmVudChjWzFdKS5yZXBsYWNlKC9cXCsvZyxcclxuXHRcIiBcIil9O2MuY29va2llPXtnZXQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBhPWErXCI9XCIsYj1rLmNvb2tpZS5zcGxpdChcIjtcIiksYz0wO2M8Yi5sZW5ndGg7YysrKXtmb3IodmFyIGY9YltjXTtcIiBcIj09Zi5jaGFyQXQoMCk7KWY9Zi5zdWJzdHJpbmcoMSxmLmxlbmd0aCk7aWYoMD09Zi5pbmRleE9mKGEpKXJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZi5zdWJzdHJpbmcoYS5sZW5ndGgsZi5sZW5ndGgpKX1yZXR1cm4gcH0scGFyc2U6ZnVuY3Rpb24oYSl7dmFyIGI7dHJ5e2I9Yy53YShjLmNvb2tpZS5nZXQoYSkpfHx7fX1jYXRjaChlKXt9cmV0dXJuIGJ9LHNldDpmdW5jdGlvbihhLGIsYyxmLGQpe3ZhciBlO3ZhciBsPVwiXCIsaj1cIlwiLGg9XCJcIjtmJiYoZT0obD0obD1rLmxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKC9bYS16MC05XVthLXowLTlcXC1dK1xcLlthLXpcXC5dezIsNn0kL2kpKT9sWzBdOlwiXCIpP1wiOyBkb21haW49LlwiK2w6XCJcIixsPWUpO2MmJihqPW5ldyBEYXRlLGouc2V0VGltZShqLmdldFRpbWUoKStcclxuXHQ4NjRFNSpjKSxqPVwiOyBleHBpcmVzPVwiK2oudG9HTVRTdHJpbmcoKSk7ZCYmKGg9XCI7IHNlY3VyZVwiKTtrLmNvb2tpZT1hK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChiKStqK1wiOyBwYXRoPS9cIitsK2h9LHJlbW92ZTpmdW5jdGlvbihhLGIpe2MuY29va2llLnNldChhLFwiXCIsLTEsYil9fTtjLk49ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsZixkKXtyZXR1cm4gZnVuY3Rpb24obCl7aWYobD1sfHxiKHdpbmRvdy5ldmVudCkpe3ZhciBqPW4saDtjLndiKGQpJiYoaD1kKGwpKTtsPWYuY2FsbChhLGwpO2lmKHM9PT1ofHxzPT09bClqPXM7cmV0dXJuIGp9fX1mdW5jdGlvbiBiKGEpe2lmKGEpYS5wcmV2ZW50RGVmYXVsdD1iLnByZXZlbnREZWZhdWx0LGEuc3RvcFByb3BhZ2F0aW9uPWIuc3RvcFByb3BhZ2F0aW9uO3JldHVybiBhfWIucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLnJldHVyblZhbHVlPXN9O2Iuc3RvcFByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7dGhpcy5jYW5jZWxCdWJibGU9XHJcblx0bn07cmV0dXJuIGZ1bmN0aW9uKGIsYyxkLGwpe2I/Yi5hZGRFdmVudExpc3RlbmVyJiYhbD9iLmFkZEV2ZW50TGlzdGVuZXIoYyxkLHMpOihjPVwib25cIitjLGJbY109YShiLGQsYltjXSkpOnEuZXJyb3IoXCJObyB2YWxpZCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlZ2lzdGVyX2V2ZW50XCIpfX0oKTtjLnNjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGMpe3JldHVybiAwPD0oXCIgXCIrYS5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoYixcIiBcIikuaW5kZXhPZihcIiBcIitjK1wiIFwiKX12YXIgYj0vW1xcdFxcclxcbl0vZztyZXR1cm4gZnVuY3Rpb24oYil7aWYoIWsuZ2V0RWxlbWVudHNCeVRhZ05hbWUpcmV0dXJuW107Zm9yKHZhciBiPWIuc3BsaXQoXCIgXCIpLGYsZD1BcnJheShrKSxsPTA7bDxiLmxlbmd0aDtsKyspaWYoZj1iW2xdLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIiksLTE8Zi5pbmRleE9mKFwiI1wiKSl7Zj1mLnNwbGl0KFwiI1wiKTt2YXIgaj1mWzBdLGQ9ay5nZXRFbGVtZW50QnlJZChmWzFdKTtcclxuXHRpZighZHx8aiYmZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIT1qKXJldHVybltdO2Q9QXJyYXkoZCl9ZWxzZSBpZigtMTxmLmluZGV4T2YoXCIuXCIpKXtmPWYuc3BsaXQoXCIuXCIpO3ZhciBqPWZbMF0saD1mWzFdO2p8fChqPVwiKlwiKTtmPVtdO2Zvcih2YXIgZz0wLGk9MDtpPGQubGVuZ3RoO2krKyl7dmFyIG07bT1cIipcIj09aj9kW2ldLmFsbD9kW2ldLmFsbDpkW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKTpkW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKGopO2Zvcih2YXIgbz0wO288bS5sZW5ndGg7bysrKWZbZysrXT1tW29dfWQ9W107Zm9yKGc9aj0wO2c8Zi5sZW5ndGg7ZysrKWZbZ10uY2xhc3NOYW1lJiZjLlVhKGZbZ10uY2xhc3NOYW1lKSYmYShmW2ddLGgpJiYoZFtqKytdPWZbZ10pfWVsc2UgaWYoZi5tYXRjaCgvXihcXHcqKVxcWyhcXHcrKShbPX5cXHxcXF5cXCRcXCpdPyk9P1wiPyhbXlxcXVwiXSopXCI/XFxdJC8pKXt2YXIgaj1SZWdFeHAuJDEscT1SZWdFeHAuJDIsaD1SZWdFeHAuJDMscj1SZWdFeHAuJDQ7XHJcblx0anx8KGo9XCIqXCIpO2Y9W107Zm9yKGk9Zz0wO2k8ZC5sZW5ndGg7aSsrKXttPVwiKlwiPT1qP2RbaV0uYWxsP2RbaV0uYWxsOmRbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpOmRbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoaik7Zm9yKG89MDtvPG0ubGVuZ3RoO28rKylmW2crK109bVtvXX1kPVtdO2o9MDtzd2l0Y2goaCl7Y2FzZSBcIj1cIjpoPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShxKT09cn07YnJlYWs7Y2FzZSBcIn5cIjpoPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShxKS5tYXRjaChSZWdFeHAoXCJcXFxcYlwiK3IrXCJcXFxcYlwiKSl9O2JyZWFrO2Nhc2UgXCJ8XCI6aD1mdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUocSkubWF0Y2goUmVnRXhwKFwiXlwiK3IrXCItP1wiKSl9O2JyZWFrO2Nhc2UgXCJeXCI6aD1mdW5jdGlvbihhKXtyZXR1cm4gMD09YS5nZXRBdHRyaWJ1dGUocSkuaW5kZXhPZihyKX07YnJlYWs7Y2FzZSBcIiRcIjpoPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShxKS5sYXN0SW5kZXhPZihyKT09XHJcblx0YS5nZXRBdHRyaWJ1dGUocSkubGVuZ3RoLXIubGVuZ3RofTticmVhaztjYXNlIFwiKlwiOmg9ZnVuY3Rpb24oYSl7cmV0dXJuLTE8YS5nZXRBdHRyaWJ1dGUocSkuaW5kZXhPZihyKX07YnJlYWs7ZGVmYXVsdDpoPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShxKX19ZD1bXTtmb3IoZz1qPTA7ZzxmLmxlbmd0aDtnKyspaChmW2ddKSYmKGRbaisrXT1mW2ddKX1lbHNle2o9ZjtmPVtdO2ZvcihpPWc9MDtpPGQubGVuZ3RoO2krKyl7bT1kW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKGopO2ZvcihvPTA7bzxtLmxlbmd0aDtvKyspZltnKytdPW1bb119ZD1mfXJldHVybiBkfX0oKTtjLmluZm89e2xjOmZ1bmN0aW9uKCl7dmFyIGE9XCJcIixiPXt9O2MuYShcInV0bV9zb3VyY2UgdXRtX21lZGl1bSB1dG1fY2FtcGFpZ24gdXRtX2NvbnRlbnQgdXRtX3Rlcm1cIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oZSl7YT1jLnBiKGsuVVJMLGUpO2EubGVuZ3RoJiYoYltlXT1hKX0pO3JldHVybiBifSxcclxuXHRFYzpmdW5jdGlvbihhKXtyZXR1cm4gMD09PWEuc2VhcmNoKFwiaHR0cHM/Oi8vKC4qKWdvb2dsZS4oW14vP10qKVwiKT9cImdvb2dsZVwiOjA9PT1hLnNlYXJjaChcImh0dHBzPzovLyguKiliaW5nLmNvbVwiKT9cImJpbmdcIjowPT09YS5zZWFyY2goXCJodHRwcz86Ly8oLiopeWFob28uY29tXCIpP1wieWFob29cIjowPT09YS5zZWFyY2goXCJodHRwcz86Ly8oLiopZHVja2R1Y2tnby5jb21cIik/XCJkdWNrZHVja2dvXCI6cH0sRmM6ZnVuY3Rpb24oYSl7dmFyIGI9Yy5pbmZvLkVjKGEpLGU9e307aWYoYiE9PXApZS4kc2VhcmNoX2VuZ2luZT1iLGE9Yy5wYihhLFwieWFob29cIiE9Yj9cInFcIjpcInBcIiksYS5sZW5ndGgmJihlLm1wX2tleXdvcmQ9YSk7cmV0dXJuIGV9LGthOmZ1bmN0aW9uKGEsYixlKXtiPWJ8fFwiXCI7cmV0dXJuIGU/Yy5vKGEsXCJNaW5pXCIpP1wiT3BlcmEgTWluaVwiOlwiT3BlcmFcIjovKEJsYWNrQmVycnl8UGxheUJvb2t8QkIxMCkvaS50ZXN0KGEpP1wiQmxhY2tCZXJyeVwiOmMubyhhLFwiRkJJT1NcIik/XCJGYWNlYm9vayBNb2JpbGVcIjpcclxuXHRjLm8oYSxcIkNocm9tZVwiKT9cIkNocm9tZVwiOmMubyhhLFwiQ3JpT1NcIik/XCJDaHJvbWUgaU9TXCI6Yy5vKGIsXCJBcHBsZVwiKT9jLm8oYSxcIk1vYmlsZVwiKT9cIk1vYmlsZSBTYWZhcmlcIjpcIlNhZmFyaVwiOmMubyhhLFwiQW5kcm9pZFwiKT9cIkFuZHJvaWQgTW9iaWxlXCI6Yy5vKGEsXCJLb25xdWVyb3JcIik/XCJLb25xdWVyb3JcIjpjLm8oYSxcIkZpcmVmb3hcIik/XCJGaXJlZm94XCI6Yy5vKGEsXCJNU0lFXCIpfHxjLm8oYSxcIlRyaWRlbnQvXCIpP1wiSW50ZXJuZXQgRXhwbG9yZXJcIjpjLm8oYSxcIkdlY2tvXCIpP1wiTW96aWxsYVwiOlwiXCJ9LFhhOmZ1bmN0aW9uKCl7cmV0dXJuL1dpbmRvd3MvaS50ZXN0KHQpPy9QaG9uZS8udGVzdCh0KT9cIldpbmRvd3MgTW9iaWxlXCI6XCJXaW5kb3dzXCI6LyhpUGhvbmV8aVBhZHxpUG9kKS8udGVzdCh0KT9cImlPU1wiOi9BbmRyb2lkLy50ZXN0KHQpP1wiQW5kcm9pZFwiOi8oQmxhY2tCZXJyeXxQbGF5Qm9va3xCQjEwKS9pLnRlc3QodCk/XCJCbGFja0JlcnJ5XCI6L01hYy9pLnRlc3QodCk/XCJNYWMgT1MgWFwiOlxyXG5cdC9MaW51eC8udGVzdCh0KT9cIkxpbnV4XCI6XCJcIn0sbmI6ZnVuY3Rpb24oYSl7cmV0dXJuL2lQYWQvLnRlc3QoYSk/XCJpUGFkXCI6L2lQb2QvLnRlc3QoYSk/XCJpUG9kIFRvdWNoXCI6L2lQaG9uZS8udGVzdChhKT9cImlQaG9uZVwiOi8oQmxhY2tCZXJyeXxQbGF5Qm9va3xCQjEwKS9pLnRlc3QoYSk/XCJCbGFja0JlcnJ5XCI6L1dpbmRvd3MgUGhvbmUvaS50ZXN0KGEpP1wiV2luZG93cyBQaG9uZVwiOi9BbmRyb2lkLy50ZXN0KGEpP1wiQW5kcm9pZFwiOlwiXCJ9LEJiOmZ1bmN0aW9uKGEpe2E9YS5zcGxpdChcIi9cIik7cmV0dXJuIDM8PWEubGVuZ3RoP2FbMl06XCJcIn0scWE6ZnVuY3Rpb24oKXtyZXR1cm4gYy5leHRlbmQoYy5yYSh7JG9zOmMuaW5mby5YYSgpLCRicm93c2VyOmMuaW5mby5rYSh0LEUudmVuZG9yLHdpbmRvdy5vcGVyYSksJHJlZmVycmVyOmsucmVmZXJyZXIsJHJlZmVycmluZ19kb21haW46Yy5pbmZvLkJiKGsucmVmZXJyZXIpLCRkZXZpY2U6Yy5pbmZvLm5iKHQpfSkseyRzY3JlZW5faGVpZ2h0OnNjcmVlbi5oZWlnaHQsXHJcblx0JHNjcmVlbl93aWR0aDpzY3JlZW4ud2lkdGgsbXBfbGliOlwid2ViXCIsJGxpYl92ZXJzaW9uOlwiMi4zLjJcIn0pfSxEYzpmdW5jdGlvbigpe3JldHVybiBjLnJhKHskb3M6Yy5pbmZvLlhhKCksJGJyb3dzZXI6Yy5pbmZvLmthKHQsRS52ZW5kb3Isd2luZG93Lm9wZXJhKX0pfSxDYzpmdW5jdGlvbihhKXtyZXR1cm4gYy5yYSh7bXBfcGFnZTphLG1wX3JlZmVycmVyOmsucmVmZXJyZXIsbXBfYnJvd3NlcjpjLmluZm8ua2EodCxFLnZlbmRvcix3aW5kb3cub3BlcmEpLG1wX3BsYXRmb3JtOmMuaW5mby5YYSgpfSl9fTt2YXIgcT17bG9nOmZ1bmN0aW9uKCl7aWYodyYmIWMuaCh1KSYmdSl0cnl7dS5sb2cuYXBwbHkodSxhcmd1bWVudHMpfWNhdGNoKGEpe2MuYShhcmd1bWVudHMsZnVuY3Rpb24oYSl7dS5sb2coYSl9KX19LGVycm9yOmZ1bmN0aW9uKCl7aWYodyYmIWMuaCh1KSYmdSl7dmFyIGE9W1wiTWl4cGFuZWwgZXJyb3I6XCJdLmNvbmNhdChjLiQoYXJndW1lbnRzKSk7dHJ5e3UuZXJyb3IuYXBwbHkodSxcclxuXHRhKX1jYXRjaChiKXtjLmEoYSxmdW5jdGlvbihhKXt1LmVycm9yKGEpfSl9fX0sbmE6ZnVuY3Rpb24oKXtpZighYy5oKHUpJiZ1KXt2YXIgYT1bXCJNaXhwYW5lbCBlcnJvcjpcIl0uY29uY2F0KGMuJChhcmd1bWVudHMpKTt0cnl7dS5lcnJvci5hcHBseSh1LGEpfWNhdGNoKGIpe2MuYShhLGZ1bmN0aW9uKGEpe3UuZXJyb3IoYSl9KX19fX07di5wcm90b3R5cGUubWE9QygpO3YucHJvdG90eXBlLk9hPUMoKTt2LnByb3RvdHlwZS5LYT1DKCk7di5wcm90b3R5cGUuVGE9ZnVuY3Rpb24oYSl7dGhpcy55Yj1hO3JldHVybiB0aGlzfTt2LnByb3RvdHlwZS5QPWZ1bmN0aW9uKGEsYixlLGYpe3ZhciBkPXRoaXMsZz1jLnNjKGEpO2lmKDA9PWcubGVuZ3RoKXEuZXJyb3IoXCJUaGUgRE9NIHF1ZXJ5IChcIithK1wiKSByZXR1cm5lZCAwIGVsZW1lbnRzXCIpO2Vsc2UgcmV0dXJuIGMuYShnLGZ1bmN0aW9uKGEpe2MuTihhLHRoaXMuQWIsZnVuY3Rpb24oYSl7dmFyIGM9e30saj1kLm1hKGUsdGhpcyksZz1cclxuXHRkLnliLmQoXCJ0cmFja19saW5rc190aW1lb3V0XCIpO2QuT2EoYSx0aGlzLGMpO3dpbmRvdy5zZXRUaW1lb3V0KGQuSWIoZixqLGMsbiksZyk7ZC55Yi5QKGIsaixkLkliKGYsaixjKSl9KX0sdGhpcyksbn07di5wcm90b3R5cGUuSWI9ZnVuY3Rpb24oYSxiLGMsZil7dmFyIGY9Znx8cyxkPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIWMua2MpYy5rYz1uLGEmJmEoZixiKT09PXN8fGQuS2EoYixjLGYpfX07di5wcm90b3R5cGUubWE9ZnVuY3Rpb24oYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKGIpOmMuZXh0ZW5kKHt9LGEpfTtjLnViKEEsdik7QS5wcm90b3R5cGUubWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1BLkxjLm1hLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihiLmhyZWYpYy51cmw9Yi5ocmVmO3JldHVybiBjfTtBLnByb3RvdHlwZS5PYT1mdW5jdGlvbihhLGIsYyl7Yy56Yj0yPT09YS53aGljaHx8YS5tZXRhS2V5fHxcIl9ibGFua1wiPT09Yi50YXJnZXQ7Yy5ocmVmPVxyXG5cdGIuaHJlZjtjLnpifHxhLnByZXZlbnREZWZhdWx0KCl9O0EucHJvdG90eXBlLkthPWZ1bmN0aW9uKGEsYil7Yi56Ynx8c2V0VGltZW91dChmdW5jdGlvbigpe3dpbmRvdy5sb2NhdGlvbj1iLmhyZWZ9LDApfTtjLnViKEcsdik7Ry5wcm90b3R5cGUuT2E9ZnVuY3Rpb24oYSxiLGMpe2MuZWxlbWVudD1iO2EucHJldmVudERlZmF1bHQoKX07Ry5wcm90b3R5cGUuS2E9ZnVuY3Rpb24oYSxiKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yi5lbGVtZW50LnN1Ym1pdCgpfSwwKX07bS5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXt2YXIgYT17fTtjLmEodGhpcy5wcm9wcyxmdW5jdGlvbihiLGUpe2Muc2IoTyxlKXx8KGFbZV09Yil9KTtyZXR1cm4gYX07bS5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe2lmKCF0aGlzLmRpc2FibGVkKXt2YXIgYT1jLmNvb2tpZS5wYXJzZSh0aGlzLm5hbWUpO2EmJih0aGlzLnByb3BzPWMuZXh0ZW5kKHt9LGEpKX19O20ucHJvdG90eXBlLlFjPWZ1bmN0aW9uKGEpe3ZhciBiPVxyXG5cdGEudXBncmFkZSxlO2lmKGIpZT1cIm1wX3N1cGVyX3Byb3BlcnRpZXNcIixcInN0cmluZ1wiPT09dHlwZW9mIGImJihlPWIpLGI9Yy5jb29raWUucGFyc2UoZSksYy5jb29raWUucmVtb3ZlKGUpLGMuY29va2llLnJlbW92ZShlLG4pLGImJih0aGlzLnByb3BzPWMuZXh0ZW5kKHRoaXMucHJvcHMsYi5hbGwsYi5ldmVudHMpKTtpZighYS5jb29raWVfbmFtZSYmXCJtaXhwYW5lbFwiIT09YS5uYW1lJiYoZT1cIm1wX1wiK2EudG9rZW4rXCJfXCIrYS5uYW1lLGI9Yy5jb29raWUucGFyc2UoZSkpKWMuY29va2llLnJlbW92ZShlKSxjLmNvb2tpZS5yZW1vdmUoZSxuKSx0aGlzLkcoYil9O20ucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkfHwodGhpcy5ZYigpLGMuY29va2llLnNldCh0aGlzLm5hbWUsYy5jYSh0aGlzLnByb3BzKSx0aGlzLlBhLHRoaXMuTWEsdGhpcy5EYikpfTttLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXtjLmNvb2tpZS5yZW1vdmUodGhpcy5uYW1lLHMpO2MuY29va2llLnJlbW92ZSh0aGlzLm5hbWUsXHJcblx0bil9O20ucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmUoKTt0aGlzLnByb3BzPXt9fTttLnByb3RvdHlwZS5HPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gYy5qKGEpPyhcInVuZGVmaW5lZFwiPT09dHlwZW9mIGImJihiPVwiTm9uZVwiKSx0aGlzLlBhPVwidW5kZWZpbmVkXCI9PT10eXBlb2YgZT90aGlzLm1iOmUsYy5hKGEsZnVuY3Rpb24oYSxjKXtpZighdGhpcy5wcm9wc1tjXXx8dGhpcy5wcm9wc1tjXT09PWIpdGhpcy5wcm9wc1tjXT1hfSx0aGlzKSx0aGlzLnNhdmUoKSxuKTpzfTttLnByb3RvdHlwZS5aPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGMuaihhKT8odGhpcy5QYT1cInVuZGVmaW5lZFwiPT09dHlwZW9mIGI/dGhpcy5tYjpiLGMuZXh0ZW5kKHRoaXMucHJvcHMsYSksdGhpcy5zYXZlKCksbik6c307bS5wcm90b3R5cGUudWE9ZnVuY3Rpb24oYSl7YSBpbiB0aGlzLnByb3BzJiYoZGVsZXRlIHRoaXMucHJvcHNbYV0sdGhpcy5zYXZlKCkpfTttLnByb3RvdHlwZS5ZYj1cclxuXHRmdW5jdGlvbigpe3ZhciBhPXRoaXMucHJvcHMuX19jbXBucyxiPXc/NkU0OjM2RTU7aWYoYSl7Zm9yKHZhciBlIGluIGEpMSpuZXcgRGF0ZS1hW2VdPmImJmRlbGV0ZSBhW2VdO2MuVyhhKSYmZGVsZXRlIHRoaXMucHJvcHMuX19jbXBuc319O20ucHJvdG90eXBlLlBjPWZ1bmN0aW9uKCl7aWYoIXRoaXMua2IpdGhpcy5HKGMuaW5mby5sYygpKSx0aGlzLmtiPW59O20ucHJvdG90eXBlLkxiPWZ1bmN0aW9uKGEpe3RoaXMuWihjLmluZm8uRmMoYSkpfTttLnByb3RvdHlwZS5aYT1mdW5jdGlvbihhKXt0aGlzLkcoeyRpbml0aWFsX3JlZmVycmVyOmF8fFwiJGRpcmVjdFwiLCRpbml0aWFsX3JlZmVycmluZ19kb21haW46Yy5pbmZvLkJiKGEpfHxcIiRkaXJlY3RcIn0sXCJcIil9O20ucHJvdG90eXBlLndjPWZ1bmN0aW9uKCl7cmV0dXJuIGMucmEoeyRpbml0aWFsX3JlZmVycmVyOnRoaXMucHJvcHMuJGluaXRpYWxfcmVmZXJyZXIsJGluaXRpYWxfcmVmZXJyaW5nX2RvbWFpbjp0aGlzLnByb3BzLiRpbml0aWFsX3JlZmVycmluZ19kb21haW59KX07XHJcblx0bS5wcm90b3R5cGUuS2I9ZnVuY3Rpb24oYSl7dGhpcy5tYj10aGlzLlBhPWEuY29va2llX2V4cGlyYXRpb247dGhpcy5IYyhhLmRpc2FibGVfY29va2llKTt0aGlzLkdjKGEuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSk7dGhpcy5JYyhhLnNlY3VyZV9jb29raWUpfTttLnByb3RvdHlwZS5IYz1mdW5jdGlvbihhKXsodGhpcy5kaXNhYmxlZD1hKSYmdGhpcy5yZW1vdmUoKX07bS5wcm90b3R5cGUuR2M9ZnVuY3Rpb24oYSl7aWYoYSE9PXRoaXMuTWEpdGhpcy5NYT1hLHRoaXMucmVtb3ZlKCksdGhpcy5zYXZlKCl9O20ucHJvdG90eXBlLnZjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuTWF9O20ucHJvdG90eXBlLkljPWZ1bmN0aW9uKGEpe2lmKGEhPT10aGlzLkRiKXRoaXMuRGI9YT9uOnMsdGhpcy5yZW1vdmUoKSx0aGlzLnNhdmUoKX07bS5wcm90b3R5cGUuQz1mdW5jdGlvbihhLGIpe3ZhciBlPXRoaXMuRWEoYSksZj1iW2FdLGQ9dGhpcy5nYShcIiRzZXRcIiksZz10aGlzLmdhKFwiJHNldF9vbmNlXCIpLFxyXG5cdGo9dGhpcy5nYShcIiRhZGRcIiksaD10aGlzLmdhKFwiJGFwcGVuZFwiLFtdKTtcIl9fbXBzXCI9PT1lPyhjLmV4dGVuZChkLGYpLHRoaXMuaWEoXCIkYWRkXCIsZikpOlwiX19tcHNvXCI9PT1lP2MuYShmLGZ1bmN0aW9uKGEsYil7YiBpbiBnfHwoZ1tiXT1hKX0pOlwiX19tcGFcIj09PWU/Yy5hKGYsZnVuY3Rpb24oYSxiKXtiIGluIGQ/ZFtiXSs9YTooYiBpbiBqfHwoaltiXT0wKSxqW2JdKz1hKX0sdGhpcyk6XCJfX21wYXBcIj09PWUmJmgucHVzaChmKTtxLmxvZyhcIk1JWFBBTkVMIFBFT1BMRSBSRVFVRVNUIChRVUVVRUQsIFBFTkRJTkcgSURFTlRJRlkpOlwiKTtxLmxvZyhiKTt0aGlzLnNhdmUoKX07bS5wcm90b3R5cGUuaWE9ZnVuY3Rpb24oYSxiKXt2YXIgZT10aGlzLlQoYSk7Yy5oKGUpfHwoYy5hKGIsZnVuY3Rpb24oYSxiKXtkZWxldGUgZVtiXX0sdGhpcyksdGhpcy5zYXZlKCkpfTttLnByb3RvdHlwZS5FYT1mdW5jdGlvbihhKXtpZihcIiRzZXRcIj09PWEpcmV0dXJuXCJfX21wc1wiO2lmKFwiJHNldF9vbmNlXCI9PT1cclxuXHRhKXJldHVyblwiX19tcHNvXCI7aWYoXCIkYWRkXCI9PT1hKXJldHVyblwiX19tcGFcIjtpZihcIiRhcHBlbmRcIj09PWEpcmV0dXJuXCJfX21wYXBcIjtxLmVycm9yKFwiSW52YWxpZCBxdWV1ZTpcIixhKX07bS5wcm90b3R5cGUuVD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wcm9wc1t0aGlzLkVhKGEpXX07bS5wcm90b3R5cGUuZ2E9ZnVuY3Rpb24oYSxiKXt2YXIgZT10aGlzLkVhKGEpLGI9Yy5oKGIpP3t9OmI7cmV0dXJuIHRoaXMucHJvcHNbZV18fCh0aGlzLnByb3BzW2VdPWIpfTtpLnByb3RvdHlwZS5UYT1mdW5jdGlvbihhLGIsYyl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBjKXEuZXJyb3IoXCJZb3UgbXVzdCBuYW1lIHlvdXIgbmV3IGxpYnJhcnk6IGluaXQodG9rZW4sIGNvbmZpZywgbmFtZSlcIik7ZWxzZSBpZihcIm1peHBhbmVsXCI9PT1jKXEuZXJyb3IoXCJZb3UgbXVzdCBpbml0aWFsaXplIHRoZSBtYWluIG1peHBhbmVsIG9iamVjdCByaWdodCBhZnRlciB5b3UgaW5jbHVkZSB0aGUgTWl4cGFuZWwganMgc25pcHBldFwiKTtcclxuXHRlbHNlIHJldHVybiBhPUYoYSxiLGMpLHJbY109YSxhLmhhKCksYX07aS5wcm90b3R5cGUuRmE9ZnVuY3Rpb24oYSxiLGUpe3RoaXMuX19sb2FkZWQ9bjt0aGlzLmNvbmZpZz17fTt0aGlzLkViKGMuZXh0ZW5kKHt9LFAsYix7bmFtZTplLHRva2VuOmEsY2FsbGJhY2tfZm46KFwibWl4cGFuZWxcIj09PWU/ZTpcIm1peHBhbmVsLlwiK2UpK1wiLl9qc2NcIn0pKTt0aGlzLl9qc2M9QygpO3RoaXMuQmE9W107dGhpcy5DYT1bXTt0aGlzLkFhPVtdO3RoaXMuUz17ZGlzYWJsZV9hbGxfZXZlbnRzOnMsaWRlbnRpZnlfY2FsbGVkOnN9O3RoaXMuY29va2llPW5ldyBtKHRoaXMuY29uZmlnKTt0aGlzLkcoe2Rpc3RpbmN0X2lkOmMuUmIoKX0sXCJcIil9O2kucHJvdG90eXBlLmhhPWZ1bmN0aW9uKCl7dGhpcy5kKFwibG9hZGVkXCIpKHRoaXMpO3RoaXMuZChcInRyYWNrX3BhZ2V2aWV3XCIpJiZ0aGlzLkpiKCl9O2kucHJvdG90eXBlLldiPWZ1bmN0aW9uKCl7Yy5hKHRoaXMuQmEsZnVuY3Rpb24oYSl7dGhpcy5JYS5hcHBseSh0aGlzLFxyXG5cdGEpfSx0aGlzKTtjLmEodGhpcy5DYSxmdW5jdGlvbihhKXt0aGlzLncuYXBwbHkodGhpcyxhKX0sdGhpcyk7ZGVsZXRlIHRoaXMuQmE7ZGVsZXRlIHRoaXMuQ2F9O2kucHJvdG90eXBlLklhPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5kKFwiaW1nXCIpKXJldHVybiBxLmVycm9yKFwiWW91IGNhbid0IHVzZSBET00gdHJhY2tpbmcgZnVuY3Rpb25zIHdpdGggaW1nID0gdHJ1ZS5cIikscztpZighSylyZXR1cm4gdGhpcy5CYS5wdXNoKFthLGJdKSxzO3ZhciBjPShuZXcgYSkuVGEodGhpcyk7cmV0dXJuIGMuUC5hcHBseShjLGIpfTtpLnByb3RvdHlwZS5HYT1mdW5jdGlvbihhLGIpe2lmKGMuaChhKSlyZXR1cm4gcDtpZihJKXJldHVybiBmdW5jdGlvbihjKXthKGMsYil9O3ZhciBlPXRoaXMuX2pzYyxmPVwiXCIrTWF0aC5mbG9vcigxRTgqTWF0aC5yYW5kb20oKSksZD10aGlzLmQoXCJjYWxsYmFja19mblwiKSsnW1wiJytmKydcIl0nO2VbZl09ZnVuY3Rpb24oYyl7ZGVsZXRlIGVbZl07YShjLGIpfTtyZXR1cm4gZH07XHJcblx0aS5wcm90b3R5cGUudz1mdW5jdGlvbihhLGIsZSl7aWYoTCl0aGlzLkNhLnB1c2goYXJndW1lbnRzKTtlbHNle3ZhciBmPXRoaXMuZChcInZlcmJvc2VcIik7Yi52ZXJib3NlJiYoZj1uKTt0aGlzLmQoXCJ0ZXN0XCIpJiYoYi50ZXN0PTEpO2YmJihiLnZlcmJvc2U9MSk7dGhpcy5kKFwiaW1nXCIpJiYoYi5pbWc9MSk7aWYoIUkpaWYoZSliLmNhbGxiYWNrPWU7ZWxzZSBpZihmfHx0aGlzLmQoXCJ0ZXN0XCIpKWIuY2FsbGJhY2s9XCIoZnVuY3Rpb24oKXt9KVwiO2IuaXA9dGhpcy5kKFwiaXBcIik/MTowO2IuXz0obmV3IERhdGUpLmdldFRpbWUoKS50b1N0cmluZygpO2ErPVwiP1wiK2MuUWIoYik7aWYoXCJpbWdcImluIGIpe3ZhciBkPWsuY3JlYXRlRWxlbWVudChcImltZ1wiKTtkLnNyYz1hO2suYm9keS5hcHBlbmRDaGlsZChkKX1lbHNlIGlmKEkpe3ZhciBnPW5ldyBYTUxIdHRwUmVxdWVzdDtnLm9wZW4oXCJHRVRcIixhLG4pO2cud2l0aENyZWRlbnRpYWxzPW47Zy5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZig0PT09XHJcblx0Zy5yZWFkeVN0YXRlKWlmKDIwMD09PWcuc3RhdHVzKWUmJihmP2UoYy53YShnLnJlc3BvbnNlVGV4dCkpOmUoTnVtYmVyKGcucmVzcG9uc2VUZXh0KSkpO2Vsc2V7dmFyIGE9XCJCYWQgSFRUUCBzdGF0dXM6IFwiK2cuc3RhdHVzK1wiIFwiK2cuc3RhdHVzVGV4dDtxLmVycm9yKGEpO2UmJihmP2Uoe3N0YXR1czowLGVycm9yOmF9KTplKDApKX19O2cuc2VuZChwKX1lbHNle2Q9ay5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2QudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2QuYXN5bmM9bjtkLmRlZmVyPW47ZC5zcmM9YTt2YXIgaj1rLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO2oucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZCxqKX19fTtpLnByb3RvdHlwZS5EYT1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYil7Yy5hKGEsZnVuY3Rpb24oYSl7dGhpc1thWzBdXS5hcHBseSh0aGlzLGEuc2xpY2UoMSkpfSxiKX12YXIgZSxmPVtdLGQ9W10sZz1bXTtjLmEoYSxmdW5jdGlvbihhKXthJiZcclxuXHQoZT1hWzBdLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbCh0aGlzKTpjLmlzQXJyYXkoYSkmJlwiYWxpYXNcIj09PWU/Zi5wdXNoKGEpOmMuaXNBcnJheShhKSYmLTEhPWUuaW5kZXhPZihcInRyYWNrXCIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpc1tlXT9nLnB1c2goYSk6ZC5wdXNoKGEpKX0sdGhpcyk7YihmLHRoaXMpO2IoZCx0aGlzKTtiKGcsdGhpcyl9O2kucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oYSl7dGhpcy5EYShbYV0pfTtpLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKGEpe1widW5kZWZpbmVkXCI9PT10eXBlb2YgYT90aGlzLlMucGM9bjp0aGlzLkFhPXRoaXMuQWEuY29uY2F0KGEpfTtpLnByb3RvdHlwZS5QPWZ1bmN0aW9uKGEsYixlKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcS5lcnJvcihcIk5vIGV2ZW50IG5hbWUgcHJvdmlkZWQgdG8gbWl4cGFuZWwudHJhY2tcIik7ZWxzZSBpZihjLnZiKHQpfHx0aGlzLlMucGN8fGMuc2IodGhpcy5BYSxhKSlcInVuZGVmaW5lZFwiIT09XHJcblx0dHlwZW9mIGUmJmUoMCk7ZWxzZSByZXR1cm4gYj1ifHx7fSxiLnRva2VuPWIuWGN8fHRoaXMuZChcInRva2VuXCIpLHRoaXMuY29va2llLkxiKGsucmVmZXJyZXIpLHRoaXMuZChcInN0b3JlX2dvb2dsZVwiKSYmdGhpcy5jb29raWUuUGMoKSx0aGlzLmQoXCJzYXZlX3JlZmVycmVyXCIpJiZ0aGlzLmNvb2tpZS5aYShrLnJlZmVycmVyKSxiPWMuZXh0ZW5kKHt9LGMuaW5mby5xYSgpLHRoaXMuY29va2llLnFhKCksYiksYT1jLnRydW5jYXRlKHtldmVudDphLHByb3BlcnRpZXM6Yn0sMjU1KSxiPWMuY2EoYSksYj1jLmliKGIpLHEubG9nKFwiTUlYUEFORUwgUkVRVUVTVDpcIikscS5sb2coYSksdGhpcy53KHRoaXMuZChcImFwaV9ob3N0XCIpK1wiL3RyYWNrL1wiLHtkYXRhOmJ9LHRoaXMuR2EoZSxhKSksYX07aS5wcm90b3R5cGUuSmI9ZnVuY3Rpb24oYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKWE9ay5sb2NhdGlvbi5ocmVmO3RoaXMuUChcIm1wX3BhZ2Vfdmlld1wiLGMuaW5mby5DYyhhKSl9O2kucHJvdG90eXBlLk9jPVxyXG5cdGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuSWEuY2FsbCh0aGlzLEEsYXJndW1lbnRzKX07aS5wcm90b3R5cGUuTmM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5JYS5jYWxsKHRoaXMsRyxhcmd1bWVudHMpfTtpLnByb3RvdHlwZS5aPWZ1bmN0aW9uKGEsYil7dGhpcy5jb29raWUuWihhLGIpfTtpLnByb3RvdHlwZS5HPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmNvb2tpZS5HKGEsYixjKX07aS5wcm90b3R5cGUudWE9ZnVuY3Rpb24oYSl7dGhpcy5jb29raWUudWEoYSl9O2kucHJvdG90eXBlLkhhPWZ1bmN0aW9uKGEsYil7dmFyIGM9e307Y1thXT1iO3RoaXMuWihjKX07aS5wcm90b3R5cGUuUmE9ZnVuY3Rpb24oYSxiLGMsZixkKXthIT10aGlzLk0oKSYmYSE9dGhpcy5vYShcIl9fYWxpYXNcIikmJih0aGlzLnVhKFwiX19hbGlhc1wiKSx0aGlzLkhhKFwiZGlzdGluY3RfaWRcIixhKSk7dGhpcy4kYSh0aGlzLk0oKSk7dGhpcy5TLnFiPW47dGhpcy5wZW9wbGUuWmIoYixjLGYsZCl9O2kucHJvdG90eXBlLk09XHJcblx0ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYShcImRpc3RpbmN0X2lkXCIpfTtpLnByb3RvdHlwZS5oYz1mdW5jdGlvbihhLGIpe2lmKGE9PT10aGlzLm9hKFwiJHBlb3BsZV9kaXN0aW5jdF9pZFwiKSlyZXR1cm4gcS5uYShcIkF0dGVtcHRpbmcgdG8gY3JlYXRlIGFsaWFzIGZvciBleGlzdGluZyBQZW9wbGUgdXNlciAtIGFib3J0aW5nLlwiKSwtMjt2YXIgZT10aGlzO2MuaChiKSYmKGI9dGhpcy5NKCkpO2lmKGEhPT1iKXJldHVybiB0aGlzLkhhKFwiX19hbGlhc1wiLGEpLHRoaXMuUChcIiRjcmVhdGVfYWxpYXNcIix7YWxpYXM6YSxkaXN0aW5jdF9pZDpifSxmdW5jdGlvbigpe2UuUmEoYSl9KTtxLmVycm9yKFwiYWxpYXMgbWF0Y2hlcyBjdXJyZW50IGRpc3RpbmN0X2lkIC0gc2tpcHBpbmcgYXBpIGNhbGwuXCIpO3RoaXMuUmEoYSk7cmV0dXJuLTF9O2kucHJvdG90eXBlLkFjPWZ1bmN0aW9uKGEpe3RoaXMuSGEoXCJtcF9uYW1lX3RhZ1wiLGEpfTtpLnByb3RvdHlwZS5FYj1mdW5jdGlvbihhKXtjLmooYSkmJlxyXG5cdChjLmV4dGVuZCh0aGlzLmNvbmZpZyxhKSx0aGlzLmNvb2tpZSYmdGhpcy5jb29raWUuS2IodGhpcy5jb25maWcpLHc9d3x8dGhpcy5kKFwiZGVidWdcIikpfTtpLnByb3RvdHlwZS5kPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmNvbmZpZ1thXX07aS5wcm90b3R5cGUub2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY29va2llLnByb3BzW2FdfTtpLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZChcIm5hbWVcIik7XCJtaXhwYW5lbFwiIT09YSYmKGE9XCJtaXhwYW5lbC5cIithKTtyZXR1cm4gYX07aS5wcm90b3R5cGUuJGE9ZnVuY3Rpb24oYSl7aWYoYSYmIXRoaXMuUy5xYiYmIXRoaXMuZChcImRpc2FibGVfbm90aWZpY2F0aW9uc1wiKSl7cS5sb2coXCJNSVhQQU5FTCBOT1RJRklDQVRJT04gQ0hFQ0tcIik7dmFyIGI9dGhpczt0aGlzLncodGhpcy5kKFwiYXBpX2hvc3RcIikrXCIvZGVjaWRlL1wiLHt2ZXJib3NlOm4sdmVyc2lvbjpcIjFcIixsaWI6XCJ3ZWJcIix0b2tlbjp0aGlzLmQoXCJ0b2tlblwiKSxcclxuXHRkaXN0aW5jdF9pZDphfSx0aGlzLkdhKGZ1bmN0aW9uKGEpe2Eubm90aWZpY2F0aW9ucyYmMDxhLm5vdGlmaWNhdGlvbnMubGVuZ3RoJiZiLmdiLmNhbGwoYixhLm5vdGlmaWNhdGlvbnNbMF0pfSkpfX07aS5wcm90b3R5cGUuZ2I9ZnVuY3Rpb24oYSl7KG5ldyBnKGEsdGhpcykpLnNob3coKX07by5wcm90b3R5cGUuRmE9ZnVuY3Rpb24oYSl7dGhpcy5jPWF9O28ucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIsZSl7dmFyIGY9e30sZD17fTtjLmooYSk/KGMuYShhLGZ1bmN0aW9uKGEsYil7XCIkZGlzdGluY3RfaWRcIj09Ynx8XCIkdG9rZW5cIj09Ynx8KGRbYl09YSl9KSxlPWIpOmRbYV09Yjt0aGlzLmZhKFwic2F2ZV9yZWZlcnJlclwiKSYmdGhpcy5jLmNvb2tpZS5aYShrLnJlZmVycmVyKTtkPWMuZXh0ZW5kKHt9LGMuaW5mby5EYygpLHRoaXMuYy5jb29raWUud2MoKSxkKTtmLiRzZXQ9ZDtyZXR1cm4gdGhpcy53KGYsZSl9O28ucHJvdG90eXBlLkZiPWZ1bmN0aW9uKGEsYixlKXt2YXIgZj1cclxuXHR7fSxkPXt9O2MuaihhKT8oYy5hKGEsZnVuY3Rpb24oYSxiKXtcIiRkaXN0aW5jdF9pZFwiPT1ifHxcIiR0b2tlblwiPT1ifHwoZFtiXT1hKX0pLGU9Yik6ZFthXT1iO2YuJHNldF9vbmNlPWQ7cmV0dXJuIHRoaXMudyhmLGUpfTtvLnByb3RvdHlwZS50Yj1mdW5jdGlvbihhLGIsZSl7dmFyIGY9e30sZD17fTtjLmooYSk/KGMuYShhLGZ1bmN0aW9uKGEsYil7XCIkZGlzdGluY3RfaWRcIj09Ynx8XCIkdG9rZW5cIj09Ynx8KGlzTmFOKHBhcnNlRmxvYXQoYSkpP3EuZXJyb3IoXCJJbnZhbGlkIGluY3JlbWVudCB2YWx1ZSBwYXNzZWQgdG8gbWl4cGFuZWwucGVvcGxlLmluY3JlbWVudCAtIG11c3QgYmUgYSBudW1iZXJcIik6ZFtiXT1hKX0pLGU9Yik6KGMuaChiKSYmKGI9MSksZFthXT1iKTtmLiRhZGQ9ZDtyZXR1cm4gdGhpcy53KGYsZSl9O28ucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihhLGIsZSl7dmFyIGY9e30sZD17fTtjLmooYSk/KGMuYShhLGZ1bmN0aW9uKGEsYil7XCIkZGlzdGluY3RfaWRcIj09XHJcblx0Ynx8XCIkdG9rZW5cIj09Ynx8KGRbYl09YSl9KSxlPWIpOmRbYV09YjtmLiRhcHBlbmQ9ZDtyZXR1cm4gdGhpcy53KGYsZSl9O28ucHJvdG90eXBlLk1jPWZ1bmN0aW9uKGEsYixlKXtpZighYy56YyhhKSYmKGE9cGFyc2VGbG9hdChhKSxpc05hTihhKSkpe3EuZXJyb3IoXCJJbnZhbGlkIHZhbHVlIHBhc3NlZCB0byBtaXhwYW5lbC5wZW9wbGUudHJhY2tfY2hhcmdlIC0gbXVzdCBiZSBhIG51bWJlclwiKTtyZXR1cm59cmV0dXJuIHRoaXMuYXBwZW5kKFwiJHRyYW5zYWN0aW9uc1wiLGMuZXh0ZW5kKHskYW1vdW50OmF9LGIpLGUpfTtvLnByb3RvdHlwZS5tYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zZXQoXCIkdHJhbnNhY3Rpb25zXCIsW10sYSl9O28ucHJvdG90eXBlLm9jPWZ1bmN0aW9uKCl7aWYodGhpcy5iYigpKXJldHVybiB0aGlzLncoeyRkZWxldGU6dGhpcy5jLk0oKX0pO3EuZXJyb3IoXCJtaXhwYW5lbC5wZW9wbGUuZGVsZXRlX3VzZXIoKSByZXF1aXJlcyB5b3UgdG8gY2FsbCBpZGVudGlmeSgpIGZpcnN0XCIpfTtcclxuXHRvLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmMudG9TdHJpbmcoKStcIi5wZW9wbGVcIn07by5wcm90b3R5cGUudz1mdW5jdGlvbihhLGIpe2EuJHRva2VuPXRoaXMuZmEoXCJ0b2tlblwiKTthLiRkaXN0aW5jdF9pZD10aGlzLmMuTSgpO3ZhciBlPWMub2IoYSksZj1jLnRydW5jYXRlKGUsMjU1KSxlPWMuY2EoZSksZT1jLmliKGUpO2lmKCF0aGlzLmJiKCkpcmV0dXJuIHRoaXMuWGIoYSksYy5oKGIpfHwodGhpcy5mYShcInZlcmJvc2VcIik/Yih7c3RhdHVzOi0xLGVycm9yOnB9KTpiKC0xKSksZjtxLmxvZyhcIk1JWFBBTkVMIFBFT1BMRSBSRVFVRVNUOlwiKTtxLmxvZyhmKTt0aGlzLmMudyh0aGlzLmZhKFwiYXBpX2hvc3RcIikrXCIvZW5nYWdlL1wiLHtkYXRhOmV9LHRoaXMuYy5HYShiLGYpKTtyZXR1cm4gZn07by5wcm90b3R5cGUuZmE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYy5kKGEpfTtvLnByb3RvdHlwZS5iYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmMuUy5xYj09PVxyXG5cdG59O28ucHJvdG90eXBlLlhiPWZ1bmN0aW9uKGEpe1wiJHNldFwiaW4gYT90aGlzLmMuY29va2llLkMoXCIkc2V0XCIsYSk6XCIkc2V0X29uY2VcImluIGE/dGhpcy5jLmNvb2tpZS5DKFwiJHNldF9vbmNlXCIsYSk6XCIkYWRkXCJpbiBhP3RoaXMuYy5jb29raWUuQyhcIiRhZGRcIixhKTpcIiRhcHBlbmRcImluIGE/dGhpcy5jLmNvb2tpZS5DKFwiJGFwcGVuZFwiLGEpOnEuZXJyb3IoXCJJbnZhbGlkIGNhbGwgdG8gX2VucXVldWUoKTpcIixhKX07by5wcm90b3R5cGUuWmI9ZnVuY3Rpb24oYSxiLGUsZil7dmFyIGQ9dGhpcyxnPWMuZXh0ZW5kKHt9LHRoaXMuYy5jb29raWUuVChcIiRzZXRcIikpLGo9Yy5leHRlbmQoe30sdGhpcy5jLmNvb2tpZS5UKFwiJHNldF9vbmNlXCIpKSxoPWMuZXh0ZW5kKHt9LHRoaXMuYy5jb29raWUuVChcIiRhZGRcIikpLGk9dGhpcy5jLmNvb2tpZS5UKFwiJGFwcGVuZFwiKTshYy5oKGcpJiZjLmooZykmJiFjLlcoZykmJihkLmMuY29va2llLmlhKFwiJHNldFwiLGcpLHRoaXMuc2V0KGcsZnVuY3Rpb24oYixcclxuXHRlKXswPT1iJiZkLmMuY29va2llLkMoXCIkc2V0XCIsZyk7Yy5oKGEpfHxhKGIsZSl9KSk7IWMuaChqKSYmYy5qKGopJiYhYy5XKGopJiYoZC5jLmNvb2tpZS5pYShcIiRzZXRfb25jZVwiLGopLHRoaXMuRmIoaixmdW5jdGlvbihhLGIpezA9PWEmJmQuYy5jb29raWUuQyhcIiRzZXRfb25jZVwiLGopO2MuaChmKXx8ZihhLGIpfSkpOyFjLmgoaCkmJmMuaihoKSYmIWMuVyhoKSYmKGQuYy5jb29raWUuaWEoXCIkYWRkXCIsaCksdGhpcy50YihoLGZ1bmN0aW9uKGEsZSl7MD09YSYmZC5jLmNvb2tpZS5DKFwiJGFkZFwiLGgpO2MuaChiKXx8YihhLGUpfSkpO2lmKCFjLmgoaSkmJmMuaXNBcnJheShpKSYmaS5sZW5ndGgpe2Zvcih2YXIgaz1pLmxlbmd0aC0xOzA8PWs7ay0tKXt2YXIgbT1pLnBvcCgpO2QuYXBwZW5kKG0sZnVuY3Rpb24oYSxiKXswPT1hJiZkLmMuY29va2llLkMoXCIkYXBwZW5kXCIsbSk7Yy5oKGUpfHxlKGEsYil9KX1kLmMuY29va2llLnNhdmUoKX19O2kuVWI9ZnVuY3Rpb24oYSxiKXtjLmljKHRoaXMpO1xyXG5cdHRoaXMuV2E9Yjt0aGlzLmNvb2tpZT10aGlzLldhLmNvb2tpZTt0aGlzLkQ9Yy5wKGEuaWQpO3RoaXMueGI9Yy5wKGEubWVzc2FnZV9pZCk7dGhpcy5ib2R5PShjLnAoYS5ib2R5KXx8XCJcIikucmVwbGFjZSgvXFxuL2csXCI8YnIvPlwiKTt0aGlzLm5jPWMucChhLmN0YSl8fFwiQ2xvc2VcIjt0aGlzLlY9Yy5wKGEuY3RhX3VybCl8fHA7dGhpcy5TYT1jLnAoYS5pbWFnZV91cmwpfHxwO3RoaXMuWD1jLnAoYS50eXBlKXx8XCJ0YWtlb3ZlclwiO3RoaXMuc3R5bGU9Yy5wKGEuc3R5bGUpfHxcImxpZ2h0XCI7dGhpcy5IPWMucChhLnRodW1iX2ltYWdlX3VybCl8fHA7dGhpcy50aXRsZT1jLnAoYS50aXRsZSl8fFwiXCI7dGhpcy52YT1jLnAoYS52aWRlb191cmwpfHxwO3RoaXMuYWE9Zy5UYjt0aGlzLlE9Zy5TYjt0aGlzLmxhPW47aWYoIXRoaXMuVil0aGlzLlY9XCIjZGlzbWlzc1wiLHRoaXMubGE9czt0aGlzLnE9XCJtaW5pXCI9PT10aGlzLlg7aWYoIXRoaXMucSl0aGlzLlg9XCJ0YWtlb3ZlclwiO3RoaXMuQmM9IXRoaXMucT9cclxuXHRnLlI6Zy54YTt0aGlzLmZiKCk7dGhpcy5wYT10aGlzLiRiKCk7dGhpcy5jYygpfTt2YXIgZz1pLlViO2cuST0yMDA7Zy51PVwibWl4cGFuZWwtbm90aWZpY2F0aW9uXCI7Zy5iYT0wLjY7Zy5CPTI1O2cuZGE9MjAwO2cuUj0zODg7Zy54YT00MjA7Zy52PTg1O2cueWE9NTtnLkY9NjA7Zy56YT1NYXRoLnJvdW5kKGcuRi8yKTtnLlRiPTU5NTtnLlNiPTMzNDtnLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczt0aGlzLmZiKCk7dGhpcy5sPyh0aGlzLmJjKCksdGhpcy5hYygpLHRoaXMuZGModGhpcy5WYikpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXthLnNob3coKX0sMzAwKX07Zy5wcm90b3R5cGUuTmE9Yy5zKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5KYz90aGlzLmcoXCJ2aWRlb1wiKTp0aGlzLkwoKTtpZih0aGlzLk1iKXRoaXMuZWMoXCJiZ1wiLFwidmlzaWJsZVwiKSx0aGlzLkooYSxcImV4aXRpbmdcIiksc2V0VGltZW91dCh0aGlzLmViLGcuSSk7ZWxzZXt2YXIgYixjLGY7dGhpcy5xP1xyXG5cdChiPVwicmlnaHRcIixjPTIwLGY9LTEwMCk6KGI9XCJ0b3BcIixjPWcuQixmPWcuZGErZy5CKTt0aGlzLmVhKFt7bTp0aGlzLmcoXCJiZ1wiKSxrOlwib3BhY2l0eVwiLHN0YXJ0OmcuYmEsaTowfSx7bTphLGs6XCJvcGFjaXR5XCIsc3RhcnQ6MSxpOjB9LHttOmEsazpiLHN0YXJ0OmMsaTpmfV0sZy5JLHRoaXMuZWIpfX0pO2cucHJvdG90eXBlLko9Yy5zKGZ1bmN0aW9uKGEsYil7Yj1nLnUrXCItXCIrYjtcInN0cmluZ1wiPT09dHlwZW9mIGEmJihhPXRoaXMuZyhhKSk7YS5jbGFzc05hbWU/fihcIiBcIithLmNsYXNzTmFtZStcIiBcIikuaW5kZXhPZihcIiBcIitiK1wiIFwiKXx8KGEuY2xhc3NOYW1lKz1cIiBcIitiKTphLmNsYXNzTmFtZT1ifSk7Zy5wcm90b3R5cGUuZWM9Yy5zKGZ1bmN0aW9uKGEsYil7Yj1nLnUrXCItXCIrYjtcInN0cmluZ1wiPT09dHlwZW9mIGEmJihhPXRoaXMuZyhhKSk7aWYoYS5jbGFzc05hbWUpYS5jbGFzc05hbWU9KFwiIFwiK2EuY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKFwiIFwiK2IrXCIgXCIsXCJcIikucmVwbGFjZSgvXltcXHNcXHhBMF0rLyxcclxuXHRcIlwiKS5yZXBsYWNlKC9bXFxzXFx4QTBdKyQvLFwiXCIpfSk7Zy5wcm90b3R5cGUuZWE9Yy5zKGZ1bmN0aW9uKGEsYixjLGYpe3ZhciBkPXRoaXMsZz1zLGosaDtqPTEqbmV3IERhdGU7dmFyIGksZj1mfHxqO2k9ai1mO2ZvcihqPTA7ajxhLmxlbmd0aDtqKyspe2g9YVtqXTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGguQSloLkE9aC5zdGFydDtpZihoLkEhPT1oLmkpe3ZhciBnPW4saz1oLmk+PWguc3RhcnQ/MTotMTtoLkE9aC5zdGFydCsoaC5pLWguc3RhcnQpKmkvYjtpZihcIm9wYWNpdHlcIiE9PWguayloLkE9TWF0aC5yb3VuZChoLkEpO2lmKDA8ayYmaC5BPj1oLml8fDA+ayYmaC5BPD1oLmkpaC5BPWguaX19aWYoZyl7Zm9yKGo9MDtqPGEubGVuZ3RoO2orKyloPWFbal0saC5tJiYoaC5tLnN0eWxlW2gua109XCJcIitoLkErKFwib3BhY2l0eVwiPT09aC5rP1wiXCI6XCJweFwiKSk7c2V0VGltZW91dChmdW5jdGlvbigpe2QuZWEoYSxiLGMsZil9LDEwKX1lbHNlIGMmJmMoKX0pO2cucHJvdG90eXBlLlZiPVxyXG5cdGMucyhmdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoIXRoaXMuS2MmJiF0aGlzLmFiKClbdGhpcy5EXSl0aGlzLktjPW4sdGhpcy5sLmFwcGVuZENoaWxkKHRoaXMuWSksc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBiPWEuTCgpO2lmKGEuTWIpYS5xfHxhLkooXCJiZ1wiLFwidmlzaWJsZVwiKSxhLkooYixcInZpc2libGVcIiksYS5jYigpO2Vsc2V7dmFyIGMsZixkO2EucT8oYz1cInJpZ2h0XCIsZj0tMTAwLGQ9MjApOihjPVwidG9wXCIsZj1nLmRhK2cuQixkPWcuQik7YS5lYShbe206YS5nKFwiYmdcIiksazpcIm9wYWNpdHlcIixzdGFydDowLGk6Zy5iYX0se206YixrOlwib3BhY2l0eVwiLHN0YXJ0OjAsaToxfSx7bTpiLGs6YyxzdGFydDpmLGk6ZH1dLGcuSSxhLmNiKX19LDEwMCksYy5OKGEuZyhcImNhbmNlbFwiKSxcImNsaWNrXCIsZnVuY3Rpb24oYil7Yi5wcmV2ZW50RGVmYXVsdCgpO2EuTmEoKX0pLGMuTihhLmcoXCJidXR0b25cIil8fGEuZyhcIm1pbmktY29udGVudFwiKSxcImNsaWNrXCIsZnVuY3Rpb24oYil7Yi5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdGEuTz8oYS5KYShcIiRjYW1wYWlnbl9vcGVuXCIseyRyZXNvdXJjZV90eXBlOlwidmlkZW9cIn0pLGEuZmMoKSk6KGEuTmEoKSxhLmxhJiZhLkphKFwiJGNhbXBhaWduX29wZW5cIix7JHJlc291cmNlX3R5cGU6XCJsaW5rXCJ9LGZ1bmN0aW9uKCl7d2luZG93LmxvY2F0aW9uLmhyZWY9YS5WfSkpfSl9KTtnLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe3JldHVybiBrLmdldEVsZW1lbnRCeUlkKGcudStcIi1cIithKX07Zy5wcm90b3R5cGUuTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmcodGhpcy5YKX07Zy5wcm90b3R5cGUuYWI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb29raWUucHJvcHMuX19jbXBuc3x8KHRoaXMuY29va2llLnByb3BzLl9fY21wbnM9e30pfTtnLnByb3RvdHlwZS5LPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuelthXSYmdGhpcy56W2FdPD1ifTtnLnByb3RvdHlwZS4kYj1mdW5jdGlvbigpe3ZhciBhPVtdO3RoaXMucT8odGhpcy5IPXRoaXMuSHx8XCIvL2Nkbi5teHBubC5jb20vc2l0ZV9tZWRpYS9pbWFnZXMvaWNvbnMvbm90aWZpY2F0aW9ucy9taW5pLW5ld3MtZGFyay5wbmdcIixcclxuXHRhLnB1c2godGhpcy5IKSk6KHRoaXMuU2E/KGEucHVzaCh0aGlzLlNhKSx0aGlzLnJiPSc8aW1nIGlkPVwiaW1nXCIgc3JjPVwiJyt0aGlzLlNhKydcIi8+Jyk6dGhpcy5yYj1cIlwiLHRoaXMuSD8oYS5wdXNoKHRoaXMuSCksdGhpcy5IYj0nPGRpdiBpZD1cInRodW1iYm9yZGVyLXdyYXBwZXJcIj48ZGl2IGlkPVwidGh1bWJib3JkZXJcIj48L2Rpdj48L2Rpdj48aW1nIGlkPVwidGh1bWJuYWlsXCIgc3JjPVwiJyt0aGlzLkgrJ1wiIHdpZHRoPVwiJytnLkYrJ1wiIGhlaWdodD1cIicrZy5GKydcIi8+PGRpdiBpZD1cInRodW1ic3BhY2VyXCI+PC9kaXY+Jyk6dGhpcy5IYj1cIlwiKTtyZXR1cm4gYX07Zy5wcm90b3R5cGUuYWM9ZnVuY3Rpb24oKXt2YXIgYT1cIlwiLGI9XCJcIixjPVwiXCI7dGhpcy5ZPWsuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0aGlzLlkuaWQ9Zy51K1wiLXdyYXBwZXJcIjtpZih0aGlzLnEpYT0nPGRpdiBpZD1cIm1pbmlcIj48ZGl2IGlkPVwibWFpbmJveFwiPjxkaXYgaWQ9XCJjYW5jZWxcIj48ZGl2IGlkPVwiY2FuY2VsLWljb25cIj48L2Rpdj48L2Rpdj48ZGl2IGlkPVwibWluaS1jb250ZW50XCI+PGRpdiBpZD1cIm1pbmktaWNvblwiPjxkaXYgaWQ9XCJtaW5pLWljb24taW1nXCI+PC9kaXY+PC9kaXY+PGRpdiBpZD1cImJvZHlcIj48ZGl2IGlkPVwiYm9keS10ZXh0XCI+PGRpdj4nK1xyXG5cdHRoaXMuYm9keSsnPC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBpZD1cIm1pbmktYm9yZGVyXCI+PC9kaXY+PC9kaXY+JztlbHNle3ZhciBhPXRoaXMubGF8fHRoaXMuTz9cIlwiOic8ZGl2IGlkPVwiYnV0dG9uLWNsb3NlXCI+PC9kaXY+JyxmPXRoaXMuTz8nPGRpdiBpZD1cImJ1dHRvbi1wbGF5XCI+PC9kaXY+JzpcIlwiO3RoaXMuSyhcImllXCIsNykmJihmPWE9XCJcIik7YT0nPGRpdiBpZD1cInRha2VvdmVyXCI+Jyt0aGlzLkhiKyc8ZGl2IGlkPVwibWFpbmJveFwiPjxkaXYgaWQ9XCJjYW5jZWxcIj48ZGl2IGlkPVwiY2FuY2VsLWljb25cIj48L2Rpdj48L2Rpdj48ZGl2IGlkPVwiY29udGVudFwiPicrdGhpcy5yYisnPGRpdiBpZD1cInRpdGxlXCI+Jyt0aGlzLnRpdGxlKyc8L2Rpdj48ZGl2IGlkPVwiYm9keVwiPicrdGhpcy5ib2R5Kyc8L2Rpdj48ZGl2IGlkPVwidGFnbGluZVwiPjxhIGhyZWY9XCJodHRwOi8vbWl4cGFuZWwuY29tP2Zyb209aW5hcHBcIiB0YXJnZXQ9XCJfYmxhbmtcIj5QT1dFUkVEIEJZIE1JWFBBTkVMPC9hPjwvZGl2PjwvZGl2PjxkaXYgaWQ9XCJidXR0b25cIj4nK1xyXG5cdGErJzxhIGlkPVwiYnV0dG9uLWxpbmtcIiBocmVmPVwiJyt0aGlzLlYrJ1wiPicrdGhpcy5uYytcIjwvYT5cIitmK1wiPC9kaXY+PC9kaXY+PC9kaXY+XCJ9dGhpcy5PYj8oYj1cIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiK3RoaXMuT2IrXCI/d21vZGU9dHJhbnNwYXJlbnQmc2hvd2luZm89MCZtb2Rlc3RicmFuZGluZz0wJnJlbD0wJmF1dG9wbGF5PTEmbG9vcD0wJnZxPWhkMTA4MFwiLHRoaXMuUGImJihiKz1cIiZlbmFibGVqc2FwaT0xJmh0bWw1PTEmY29udHJvbHM9MFwiLGM9JzxkaXYgaWQ9XCJ2aWRlby1jb250cm9sc1wiPjxkaXYgaWQ9XCJ2aWRlby1wcm9ncmVzc1wiIGNsYXNzPVwidmlkZW8tcHJvZ3Jlc3MtZWxcIj48ZGl2IGlkPVwidmlkZW8tcHJvZ3Jlc3MtdG90YWxcIiBjbGFzcz1cInZpZGVvLXByb2dyZXNzLWVsXCI+PC9kaXY+PGRpdiBpZD1cInZpZGVvLWVsYXBzZWRcIiBjbGFzcz1cInZpZGVvLXByb2dyZXNzLWVsXCI+PC9kaXY+PC9kaXY+PGRpdiBpZD1cInZpZGVvLXRpbWVcIiBjbGFzcz1cInZpZGVvLXByb2dyZXNzLWVsXCI+PC9kaXY+PC9kaXY+JykpOlxyXG5cdHRoaXMuTmImJihiPVwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvL1wiK3RoaXMuTmIrXCI/YXV0b3BsYXk9MSZ0aXRsZT0wJmJ5bGluZT0wJnBvcnRyYWl0PTBcIik7aWYodGhpcy5PKXRoaXMuVGM9JzxpZnJhbWUgaWQ9XCInK2cudSsnLXZpZGVvLWZyYW1lXCIgd2lkdGg9XCInK3RoaXMuYWErJ1wiIGhlaWdodD1cIicrdGhpcy5RKydcIiAgc3JjPVwiJytiKydcIiBmcmFtZWJvcmRlcj1cIjBcIiB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIGFsbG93ZnVsbHNjcmVlbj1cIjFcIiBzY3JvbGxpbmc9XCJub1wiPjwvaWZyYW1lPicsYz0nPGRpdiBpZD1cInZpZGVvLScrKHRoaXMuUWE/XCJcIjpcIm5vXCIpKydmbGlwXCI+PGRpdiBpZD1cInZpZGVvXCI+PGRpdiBpZD1cInZpZGVvLWhvbGRlclwiPjwvZGl2PicrYytcIjwvZGl2PjwvZGl2PlwiO2I9YythO3RoaXMuUWEmJihiPSh0aGlzLnE/YTpcIlwiKSsnPGRpdiBpZD1cImZsaXBjb250YWluZXJcIj48ZGl2IGlkPVwiZmxpcHBlclwiPicrKHRoaXMucT9jOmIpK1wiPC9kaXY+PC9kaXY+XCIpO1xyXG5cdHRoaXMuWS5pbm5lckhUTUw9KCc8ZGl2IGlkPVwib3ZlcmxheVwiIGNsYXNzPVwiJyt0aGlzLlgrJ1wiPjxkaXYgaWQ9XCJjYW1wYWlnbmlkLScrdGhpcy5EKydcIj48ZGl2IGlkPVwiYmd3cmFwcGVyXCI+PGRpdiBpZD1cImJnXCI+PC9kaXY+JytiK1wiPC9kaXY+PC9kaXY+PC9kaXY+XCIpLnJlcGxhY2UoL2NsYXNzPVxcXCIvZywnY2xhc3M9XCInK2cudStcIi1cIikucmVwbGFjZSgvaWQ9XFxcIi9nLCdpZD1cIicrZy51K1wiLVwiKX07Zy5wcm90b3R5cGUuYmM9ZnVuY3Rpb24oKXt0aGlzLmU9XCJkYXJrXCI9PT10aGlzLnN0eWxlP3tMYTpcIiMxZDFmMjVcIixVOlwiIzI4MmIzMlwiLGphOlwiIzNhNDE0N1wiLGpiOlwiIzRhNTE1N1wiLGpjOlwiIzMyMzUzY1wiLGxiOlwiMC40XCIsVmE6XCIjMmEzMTM3XCIsdGE6XCIjZmZmXCIsWWE6XCIjOTQ5OGEzXCIsR2I6XCIjNDY0ODUxXCIsc2E6XCIjZGRkXCJ9OntMYTpcIiNmZmZcIixVOlwiI2U3ZWFlZVwiLGphOlwiI2VjZWZmM1wiLGpiOlwiI2Y1ZjVmNVwiLGpjOlwiI2U0ZWNmMlwiLGxiOlwiMS4wXCIsVmE6XCIjZmFmYWZhXCIsdGE6XCIjNWM2NTc4XCIsXHJcblx0WWE6XCIjOGI5NDliXCIsR2I6XCIjY2VkOWU2XCIsc2E6XCIjN2M4NTk4XCJ9O3ZhciBhPVwiMHB4IDBweCAzNXB4IDBweCByZ2JhKDQ1LCA0OSwgNTYsIDAuNylcIixiPWEsZT1hLGY9Zy5GKzIqZy55YSxkPWcuSS8xRTMrXCJzXCI7dGhpcy5xJiYoYT1cIm5vbmVcIik7dmFyIGk9e307aVtcIkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIrKGcueGErMjAtMSkrXCJweClcIl09e1wiI292ZXJsYXlcIjp7ZGlzcGxheTpcIm5vbmVcIn19O2E9e1wiLmZsaXBwZWRcIjp7dHJhbnNmb3JtOlwicm90YXRlWSgxODBkZWcpXCJ9LFwiI292ZXJsYXlcIjp7cG9zaXRpb246XCJmaXhlZFwiLHRvcDpcIjBcIixsZWZ0OlwiMFwiLHdpZHRoOlwiMTAwJVwiLGhlaWdodDpcIjEwMCVcIixvdmVyZmxvdzpcImF1dG9cIixcInRleHQtYWxpZ25cIjpcImNlbnRlclwiLFwiei1pbmRleFwiOlwiMTAwMDBcIixcImZvbnQtZmFtaWx5XCI6J1wiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZicsXCItd2Via2l0LWZvbnQtc21vb3RoaW5nXCI6XCJhbnRpYWxpYXNlZFwiLFwiLW1vei1vc3gtZm9udC1zbW9vdGhpbmdcIjpcImdyYXlzY2FsZVwifSxcclxuXHRcIiNvdmVybGF5Lm1pbmlcIjp7aGVpZ2h0OlwiMFwiLG92ZXJmbG93OlwidmlzaWJsZVwifSxcIiNvdmVybGF5IGFcIjp7d2lkdGg6XCJpbml0aWFsXCIscGFkZGluZzpcIjBcIixcInRleHQtZGVjb3JhdGlvblwiOlwibm9uZVwiLFwidGV4dC10cmFuc2Zvcm1cIjpcIm5vbmVcIixjb2xvcjpcImluaGVyaXRcIn0sXCIjYmd3cmFwcGVyXCI6e3Bvc2l0aW9uOlwicmVsYXRpdmVcIix3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIxMDAlXCJ9LFwiI2JnXCI6e3Bvc2l0aW9uOlwiZml4ZWRcIix0b3A6XCIwXCIsbGVmdDpcIjBcIix3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIxMDAlXCIsXCJtaW4td2lkdGhcIjo0KnRoaXMucmMrXCJweFwiLFwibWluLWhlaWdodFwiOjQqdGhpcy5xYytcInB4XCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6XCJibGFja1wiLG9wYWNpdHk6XCIwLjBcIixcIi1tcy1maWx0ZXJcIjpcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTYwKVwiLGZpbHRlcjpcImFscGhhKG9wYWNpdHk9NjApXCIsdHJhbnNpdGlvbjpcIm9wYWNpdHkgXCIrZH0sXHJcblx0XCIjYmcudmlzaWJsZVwiOntvcGFjaXR5OmcuYmF9LFwiLm1pbmkgI2JnXCI6e3dpZHRoOlwiMFwiLGhlaWdodDpcIjBcIixcIm1pbi13aWR0aFwiOlwiMFwifSxcIiNmbGlwY29udGFpbmVyXCI6e3BlcnNwZWN0aXZlOlwiMTAwMHB4XCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLHdpZHRoOlwiMTAwJVwifSxcIiNmbGlwcGVyXCI6e3Bvc2l0aW9uOlwicmVsYXRpdmVcIixcInRyYW5zZm9ybS1zdHlsZVwiOlwicHJlc2VydmUtM2RcIix0cmFuc2l0aW9uOlwiMC4zc1wifSxcIiN0YWtlb3ZlclwiOntwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDpcIjUwJVwiLHdpZHRoOmcuUitcInB4XCIsXCJtYXJnaW4tbGVmdFwiOk1hdGgucm91bmQoLWcuUi8yKStcInB4XCIsXCJiYWNrZmFjZS12aXNpYmlsaXR5XCI6XCJoaWRkZW5cIix0cmFuc2Zvcm06XCJyb3RhdGVZKDBkZWcpXCIsb3BhY2l0eTpcIjAuMFwiLHRvcDpnLmRhK1wicHhcIix0cmFuc2l0aW9uOlwib3BhY2l0eSBcIitkK1wiLCB0b3AgXCIrZH0sXCIjdGFrZW92ZXIudmlzaWJsZVwiOntvcGFjaXR5OlwiMS4wXCIsdG9wOmcuQitcInB4XCJ9LFxyXG5cdFwiI3Rha2VvdmVyLmV4aXRpbmdcIjp7b3BhY2l0eTpcIjAuMFwiLHRvcDpnLmRhK1wicHhcIn0sXCIjdGh1bWJzcGFjZXJcIjp7aGVpZ2h0OmcuemErXCJweFwifSxcIiN0aHVtYmJvcmRlci13cmFwcGVyXCI6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6LWcueWErXCJweFwiLGxlZnQ6Zy5SLzItZy56YS1nLnlhK1wicHhcIix3aWR0aDpmK1wicHhcIixoZWlnaHQ6Zi8yK1wicHhcIixvdmVyZmxvdzpcImhpZGRlblwifSxcIiN0aHVtYmJvcmRlclwiOntwb3NpdGlvbjpcImFic29sdXRlXCIsd2lkdGg6ZitcInB4XCIsaGVpZ2h0OmYrXCJweFwiLFwiYm9yZGVyLXJhZGl1c1wiOmYrXCJweFwiLFwiYmFja2dyb3VuZC1jb2xvclwiOnRoaXMuZS5VLG9wYWNpdHk6XCIwLjVcIn0sXCIjdGh1bWJuYWlsXCI6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6XCIwcHhcIixsZWZ0OmcuUi8yLWcuemErXCJweFwiLHdpZHRoOmcuRitcInB4XCIsaGVpZ2h0OmcuRitcInB4XCIsb3ZlcmZsb3c6XCJoaWRkZW5cIixcInotaW5kZXhcIjpcIjEwMFwiLFwiYm9yZGVyLXJhZGl1c1wiOmcuRitcInB4XCJ9LFxyXG5cdFwiI21pbmlcIjp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHJpZ2h0OlwiMjBweFwiLHRvcDpnLkIrXCJweFwiLHdpZHRoOnRoaXMuQmMrXCJweFwiLGhlaWdodDoyKmcuditcInB4XCIsXCJtYXJnaW4tdG9wXCI6MjAtZy52K1wicHhcIixcImJhY2tmYWNlLXZpc2liaWxpdHlcIjpcImhpZGRlblwiLG9wYWNpdHk6XCIwLjBcIix0cmFuc2Zvcm06XCJyb3RhdGVYKDkwZGVnKVwiLHRyYW5zaXRpb246XCJvcGFjaXR5IDAuM3MsIHRyYW5zZm9ybSAwLjNzLCByaWdodCAwLjNzXCJ9LFwiI21pbmkudmlzaWJsZVwiOntvcGFjaXR5OlwiMS4wXCIsdHJhbnNmb3JtOlwicm90YXRlWCgwZGVnKVwifSxcIiNtaW5pLmV4aXRpbmdcIjp7b3BhY2l0eTpcIjAuMFwiLHJpZ2h0OlwiLTE1MHB4XCJ9LFwiI21haW5ib3hcIjp7XCJib3JkZXItcmFkaXVzXCI6XCI0cHhcIixcImJveC1zaGFkb3dcIjphLFwidGV4dC1hbGlnblwiOlwiY2VudGVyXCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6dGhpcy5lLkxhLFwiZm9udC1zaXplXCI6XCIxNHB4XCIsY29sb3I6dGhpcy5lLllhfSxcIiNtaW5pICNtYWluYm94XCI6e2hlaWdodDpnLnYrXHJcblx0XCJweFwiLFwibWFyZ2luLXRvcFwiOmcuditcInB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCIzcHhcIix0cmFuc2l0aW9uOlwiYmFja2dyb3VuZC1jb2xvciBcIitkfSxcIiNtaW5pLWJvcmRlclwiOntoZWlnaHQ6Zy52KzYrXCJweFwiLHdpZHRoOmcueGErNitcInB4XCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpcIi0zcHhcIixsZWZ0OlwiLTNweFwiLFwibWFyZ2luLXRvcFwiOmcuditcInB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCI2cHhcIixvcGFjaXR5OlwiMC4yNVwiLFwiYmFja2dyb3VuZC1jb2xvclwiOlwiI2ZmZlwiLFwiei1pbmRleFwiOlwiLTFcIixcImJveC1zaGFkb3dcIjplfSxcIiNtaW5pLWljb25cIjp7cG9zaXRpb246XCJyZWxhdGl2ZVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIix3aWR0aDpcIjc1cHhcIixoZWlnaHQ6Zy52K1wicHhcIixcImJvcmRlci1yYWRpdXNcIjpcIjNweCAwIDAgM3B4XCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6dGhpcy5lLlUsYmFja2dyb3VuZDpcImxpbmVhci1ncmFkaWVudCgxMzVkZWcsIFwiK3RoaXMuZS5qYitcIiAwJSwgXCIrdGhpcy5lLlUrXHJcblx0XCIgMTAwJSlcIix0cmFuc2l0aW9uOlwiYmFja2dyb3VuZC1jb2xvciBcIitkfSxcIiNtaW5pOmhvdmVyICNtaW5pLWljb25cIjp7XCJiYWNrZ3JvdW5kLWNvbG9yXCI6dGhpcy5lLlZhfSxcIiNtaW5pOmhvdmVyICNtYWluYm94XCI6e1wiYmFja2dyb3VuZC1jb2xvclwiOnRoaXMuZS5WYX0sXCIjbWluaS1pY29uLWltZ1wiOntwb3NpdGlvbjpcImFic29sdXRlXCIsXCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoXCIrdGhpcy5IK1wiKVwiLHdpZHRoOlwiNDhweFwiLGhlaWdodDpcIjQ4cHhcIix0b3A6XCIyMHB4XCIsbGVmdDpcIjEycHhcIn0sXCIjY29udGVudFwiOntwYWRkaW5nOlwiMzBweCAyMHB4IDBweCAyMHB4XCJ9LFwiI21pbmktY29udGVudFwiOntcInRleHQtYWxpZ25cIjpcImxlZnRcIixoZWlnaHQ6Zy52K1wicHhcIixjdXJzb3I6XCJwb2ludGVyXCJ9LFwiI2ltZ1wiOnt3aWR0aDpcIjMyOHB4XCIsXCJtYXJnaW4tdG9wXCI6XCIzMHB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCI1cHhcIn0sXCIjdGl0bGVcIjp7XCJtYXgtaGVpZ2h0XCI6XCI2MDBweFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsXHJcblx0XCJ3b3JkLXdyYXBcIjpcImJyZWFrLXdvcmRcIixwYWRkaW5nOlwiMjVweCAwcHggMjBweCAwcHhcIixcImZvbnQtc2l6ZVwiOlwiMTlweFwiLFwiZm9udC13ZWlnaHRcIjpcImJvbGRcIixjb2xvcjp0aGlzLmUudGF9LFwiI2JvZHlcIjp7XCJtYXgtaGVpZ2h0XCI6XCI2MDBweFwiLFwibWFyZ2luLWJvdHRvbVwiOlwiMjVweFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsXCJ3b3JkLXdyYXBcIjpcImJyZWFrLXdvcmRcIixcImxpbmUtaGVpZ2h0XCI6XCIyMXB4XCIsXCJmb250LXNpemVcIjpcIjE1cHhcIixcImZvbnQtd2VpZ2h0XCI6XCJub3JtYWxcIixcInRleHQtYWxpZ25cIjpcImxlZnRcIn0sXCIjbWluaSAjYm9keVwiOntkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsXCJtYXgtd2lkdGhcIjpcIjI1MHB4XCIsbWFyZ2luOlwiMCAwIDAgMzBweFwiLGhlaWdodDpnLnYrXCJweFwiLFwiZm9udC1zaXplXCI6XCIxNnB4XCIsXCJsZXR0ZXItc3BhY2luZ1wiOlwiMC44cHhcIixjb2xvcjp0aGlzLmUudGF9LFwiI21pbmkgI2JvZHktdGV4dFwiOntkaXNwbGF5OlwidGFibGVcIixoZWlnaHQ6Zy52K1wicHhcIn0sXCIjbWluaSAjYm9keS10ZXh0IGRpdlwiOntkaXNwbGF5OlwidGFibGUtY2VsbFwiLFxyXG5cdFwidmVydGljYWwtYWxpZ25cIjpcIm1pZGRsZVwifSxcIiN0YWdsaW5lXCI6e1wibWFyZ2luLWJvdHRvbVwiOlwiMTVweFwiLFwiZm9udC1zaXplXCI6XCIxMHB4XCIsXCJmb250LXdlaWdodFwiOlwiNjAwXCIsXCJsZXR0ZXItc3BhY2luZ1wiOlwiMC44cHhcIixjb2xvcjpcIiNjY2Q3ZTBcIixcInRleHQtYWxpZ25cIjpcImxlZnRcIn0sXCIjdGFnbGluZSBhXCI6e2NvbG9yOnRoaXMuZS5HYix0cmFuc2l0aW9uOlwiY29sb3IgXCIrZH0sXCIjdGFnbGluZSBhOmhvdmVyXCI6e2NvbG9yOnRoaXMuZS5zYX0sXCIjY2FuY2VsXCI6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIixyaWdodDpcIjBcIix3aWR0aDpcIjhweFwiLGhlaWdodDpcIjhweFwiLHBhZGRpbmc6XCIxMHB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCIyMHB4XCIsbWFyZ2luOlwiMTJweCAxMnB4IDAgMFwiLFwiYm94LXNpemluZ1wiOlwiY29udGVudC1ib3hcIixjdXJzb3I6XCJwb2ludGVyXCIsdHJhbnNpdGlvbjpcImJhY2tncm91bmQtY29sb3IgXCIrZH0sXCIjbWluaSAjY2FuY2VsXCI6e21hcmdpbjpcIjdweCA3cHggMCAwXCJ9LFwiI2NhbmNlbC1pY29uXCI6e3dpZHRoOlwiOHB4XCIsXHJcblx0aGVpZ2h0OlwiOHB4XCIsb3ZlcmZsb3c6XCJoaWRkZW5cIixcImJhY2tncm91bmQtaW1hZ2VcIjpcInVybCgvL2Nkbi5teHBubC5jb20vc2l0ZV9tZWRpYS9pbWFnZXMvaWNvbnMvbm90aWZpY2F0aW9ucy9jYW5jZWwteC5wbmcpXCIsb3BhY2l0eTp0aGlzLmUubGJ9LFwiI2NhbmNlbDpob3ZlclwiOntcImJhY2tncm91bmQtY29sb3JcIjp0aGlzLmUuamF9LFwiI2J1dHRvblwiOntkaXNwbGF5OlwiYmxvY2tcIixoZWlnaHQ6XCI2MHB4XCIsXCJsaW5lLWhlaWdodFwiOlwiNjBweFwiLFwidGV4dC1hbGlnblwiOlwiY2VudGVyXCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6dGhpcy5lLlUsXCJib3JkZXItcmFkaXVzXCI6XCIwIDAgNHB4IDRweFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsY3Vyc29yOlwicG9pbnRlclwiLHRyYW5zaXRpb246XCJiYWNrZ3JvdW5kLWNvbG9yIFwiK2R9LFwiI2J1dHRvbi1jbG9zZVwiOntkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsd2lkdGg6XCI5cHhcIixoZWlnaHQ6XCI2MHB4XCIsXCJtYXJnaW4tcmlnaHRcIjpcIjhweFwiLFwidmVydGljYWwtYWxpZ25cIjpcInRvcFwiLFxyXG5cdFwiYmFja2dyb3VuZC1pbWFnZVwiOlwidXJsKC8vY2RuLm14cG5sLmNvbS9zaXRlX21lZGlhL2ltYWdlcy9pY29ucy9ub3RpZmljYXRpb25zL2Nsb3NlLXgtXCIrdGhpcy5zdHlsZStcIi5wbmcpXCIsXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOlwibm8tcmVwZWF0XCIsXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6XCIwcHggMjVweFwifSxcIiNidXR0b24tcGxheVwiOntkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsd2lkdGg6XCIzMHB4XCIsaGVpZ2h0OlwiNjBweFwiLFwibWFyZ2luLWxlZnRcIjpcIjE1cHhcIixcImJhY2tncm91bmQtaW1hZ2VcIjpcInVybCgvL2Nkbi5teHBubC5jb20vc2l0ZV9tZWRpYS9pbWFnZXMvaWNvbnMvbm90aWZpY2F0aW9ucy9wbGF5LVwiK3RoaXMuc3R5bGUrXCItc21hbGwucG5nKVwiLFwiYmFja2dyb3VuZC1yZXBlYXRcIjpcIm5vLXJlcGVhdFwiLFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOlwiMHB4IDE1cHhcIn0sXCJhI2J1dHRvbi1saW5rXCI6e2Rpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIixcInZlcnRpY2FsLWFsaWduXCI6XCJ0b3BcIixcInRleHQtYWxpZ25cIjpcImNlbnRlclwiLFxyXG5cdFwiZm9udC1zaXplXCI6XCIxN3B4XCIsXCJmb250LXdlaWdodFwiOlwiYm9sZFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsXCJ3b3JkLXdyYXBcIjpcImJyZWFrLXdvcmRcIixjb2xvcjp0aGlzLmUudGEsdHJhbnNpdGlvbjpcImNvbG9yIFwiK2R9LFwiI2J1dHRvbjpob3ZlclwiOntcImJhY2tncm91bmQtY29sb3JcIjp0aGlzLmUuamEsY29sb3I6dGhpcy5lLnNhfSxcIiNidXR0b246aG92ZXIgYVwiOntjb2xvcjp0aGlzLmUuc2F9LFwiI3ZpZGVvLW5vZmxpcFwiOntwb3NpdGlvbjpcInJlbGF0aXZlXCIsdG9wOjIqLXRoaXMuUStcInB4XCJ9LFwiI3ZpZGVvLWZsaXBcIjp7XCJiYWNrZmFjZS12aXNpYmlsaXR5XCI6XCJoaWRkZW5cIix0cmFuc2Zvcm06XCJyb3RhdGVZKDE4MGRlZylcIn0sXCIjdmlkZW9cIjp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHdpZHRoOnRoaXMuYWEtMStcInB4XCIsaGVpZ2h0OnRoaXMuUStcInB4XCIsdG9wOmcuQitcInB4XCIsXCJtYXJnaW4tdG9wXCI6XCIxMDBweFwiLGxlZnQ6XCI1MCVcIixcIm1hcmdpbi1sZWZ0XCI6TWF0aC5yb3VuZCgtdGhpcy5hYS9cclxuXHQyKStcInB4XCIsb3ZlcmZsb3c6XCJoaWRkZW5cIixcImJvcmRlci1yYWRpdXNcIjpcIjVweFwiLFwiYm94LXNoYWRvd1wiOmIsdHJhbnNmb3JtOlwidHJhbnNsYXRlWigxcHgpXCIsdHJhbnNpdGlvbjpcIm9wYWNpdHkgXCIrZCtcIiwgdG9wIFwiK2R9LFwiI3ZpZGVvLmV4aXRpbmdcIjp7b3BhY2l0eTpcIjAuMFwiLHRvcDp0aGlzLlErXCJweFwifSxcIiN2aWRlby1ob2xkZXJcIjp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHdpZHRoOnRoaXMuYWEtMStcInB4XCIsaGVpZ2h0OnRoaXMuUStcInB4XCIsb3ZlcmZsb3c6XCJoaWRkZW5cIixcImJvcmRlci1yYWRpdXNcIjpcIjVweFwifSxcIiN2aWRlby1mcmFtZVwiOntcIm1hcmdpbi1sZWZ0XCI6XCItMXB4XCIsd2lkdGg6dGhpcy5hYStcInB4XCJ9LFwiI3ZpZGVvLWNvbnRyb2xzXCI6e29wYWNpdHk6XCIwXCIsdHJhbnNpdGlvbjpcIm9wYWNpdHkgMC41c1wifSxcIiN2aWRlbzpob3ZlciAjdmlkZW8tY29udHJvbHNcIjp7b3BhY2l0eTpcIjEuMFwifSxcIiN2aWRlbyAudmlkZW8tcHJvZ3Jlc3MtZWxcIjp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLFxyXG5cdGJvdHRvbTpcIjBcIixoZWlnaHQ6XCIyNXB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCIwIDAgMCA1cHhcIn0sXCIjdmlkZW8tcHJvZ3Jlc3NcIjp7d2lkdGg6XCI5MCVcIn0sXCIjdmlkZW8tcHJvZ3Jlc3MtdG90YWxcIjp7d2lkdGg6XCIxMDAlXCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6dGhpcy5lLkxhLG9wYWNpdHk6XCIwLjdcIn0sXCIjdmlkZW8tZWxhcHNlZFwiOnt3aWR0aDpcIjBcIixcImJhY2tncm91bmQtY29sb3JcIjpcIiM2Y2I2ZjVcIixvcGFjaXR5OlwiMC45XCJ9LFwiI3ZpZGVvICN2aWRlby10aW1lXCI6e3dpZHRoOlwiMTAlXCIscmlnaHQ6XCIwXCIsXCJmb250LXNpemVcIjpcIjExcHhcIixcImxpbmUtaGVpZ2h0XCI6XCIyNXB4XCIsY29sb3I6dGhpcy5lLllhLFwiYmFja2dyb3VuZC1jb2xvclwiOlwiIzY2NlwiLFwiYm9yZGVyLXJhZGl1c1wiOlwiMCAwIDVweCAwXCJ9fTt0aGlzLksoXCJpZVwiLDgpJiZjLmV4dGVuZChhLHtcIiogaHRtbCAjb3ZlcmxheVwiOntwb3NpdGlvbjpcImFic29sdXRlXCJ9LFwiKiBodG1sICNiZ1wiOntwb3NpdGlvbjpcImFic29sdXRlXCJ9LFwiaHRtbCwgYm9keVwiOntoZWlnaHQ6XCIxMDAlXCJ9fSk7XHJcblx0dGhpcy5LKFwiaWVcIiw3KSYmYy5leHRlbmQoYSx7XCIjbWluaSAjYm9keVwiOntkaXNwbGF5OlwiaW5saW5lXCIsem9vbTpcIjFcIixib3JkZXI6XCIxcHggc29saWQgXCIrdGhpcy5lLmphfSxcIiNtaW5pICNib2R5LXRleHRcIjp7cGFkZGluZzpcIjIwcHhcIn0sXCIjbWluaSAjbWluaS1pY29uXCI6e2Rpc3BsYXk6XCJub25lXCJ9fSk7dmFyIGI9XCJiYWNrZmFjZS12aXNpYmlsaXR5LGJvcmRlci1yYWRpdXMsYm94LXNoYWRvdyxvcGFjaXR5LHBlcnNwZWN0aXZlLHRyYW5zZm9ybSx0cmFuc2Zvcm0tc3R5bGUsdHJhbnNpdGlvblwiLnNwbGl0KFwiLFwiKSxlPVtcImtodG1sXCIsXCJtb3pcIixcIm1zXCIsXCJvXCIsXCJ3ZWJraXRcIl0sajtmb3IoaiBpbiBhKWZvcihmPTA7ZjxiLmxlbmd0aDtmKyspaWYoZD1iW2ZdLGQgaW4gYVtqXSlmb3IodmFyIGg9YVtqXVtkXSxtPTA7bTxlLmxlbmd0aDttKyspYVtqXVtcIi1cIitlW21dK1wiLVwiK2RdPWg7KGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXt2YXIgYj1cIlwiLGQ7Zm9yKGQgaW4gYSl7dmFyIGU9XHJcblx0ZC5yZXBsYWNlKC8jL2csXCIjXCIrZy51K1wiLVwiKS5yZXBsYWNlKC9cXC4vZyxcIi5cIitnLnUrXCItXCIpLGI9YisoXCJcXG5cIitlK1wiIHtcIiksZT1hW2RdLGY7Zm9yKGYgaW4gZSliKz1mK1wiOlwiK2VbZl0rXCI7XCI7Yis9XCJ9XCJ9cmV0dXJuIGJ9dmFyIGQ9YyhhKStmdW5jdGlvbihhKXt2YXIgYj1cIlwiLGQ7Zm9yKGQgaW4gYSliKz1cIlxcblwiK2QrXCIge1wiK2MoYVtkXSkrXCJcXG59XCI7cmV0dXJuIGJ9KGIpLGU9ay5oZWFkfHxrLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXXx8ay5kb2N1bWVudEVsZW1lbnQsZj1rLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLmFwcGVuZENoaWxkKGYpO2Yuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dC9jc3NcIik7Zi5zdHlsZVNoZWV0P2Yuc3R5bGVTaGVldC5jc3NUZXh0PWQ6Zi50ZXh0Q29udGVudD1kfSkoYSxpKX07Zy5wcm90b3R5cGUuY2M9Yy5zKGZ1bmN0aW9uKCl7aWYodGhpcy52YSl7dmFyIGE9dGhpczthLlBiPVwicG9zdE1lc3NhZ2VcImluIHdpbmRvdztrLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0YS5WPWEudmE7dmFyIGI9YS52YS5tYXRjaCgvKD86eW91dHViZSg/Oi1ub2Nvb2tpZSk/XFwuY29tXFwvKD86W15cXC9dK1xcLy4rXFwvfCg/OnZ8ZSg/Om1iZWQpPylcXC98LipbPyZddj0pfHlvdXR1XFwuYmVcXC8pKFteXCImP1xcLyBdezExfSkvaSksYz1hLnZhLm1hdGNoKC92aW1lb1xcLmNvbVxcLy4qPyhcXGQrKS9pKTtpZihiKXtpZihhLk89bixhLk9iPWJbMV0sYS5QYil3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHk9ZnVuY3Rpb24oKXthLmcoXCJ2aWRlby1mcmFtZVwiKSYmYS5oYigpfSxiPWsuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxiLnNyYz1cIi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIixjPWsuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF0sYy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpfWVsc2UgaWYoYylhLk89bixhLk5iPWNbMV07aWYoYS5LKFwiaWVcIiw3KXx8YS5LKFwiZmlyZWZveFwiLDMpKWEuTz1zLGEubGE9bn19KTtnLnByb3RvdHlwZS5jYj1jLnMoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsXHJcblx0Yil7dmFyIGM9e307aWYoay5kZWZhdWx0VmlldyYmay5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKWM9ay5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGEscCk7ZWxzZSBpZihhLmN1cnJlbnRTdHlsZSljPWEuY3VycmVudFN0eWxlO3JldHVybiBjW2JdfXZhciBiPXRoaXM7Yy5OKGIuZyhcImJnXCIpLFwiY2xpY2tcIixmdW5jdGlvbigpe2IuTmEoKX0pO2lmKHRoaXMuRCl7dmFyIGU9dGhpcy5nKFwib3ZlcmxheVwiKTtlJiZcImhpZGRlblwiIT09YShlLFwidmlzaWJpbGl0eVwiKSYmXCJub25lXCIhPT1hKGUsXCJkaXNwbGF5XCIpJiYodGhpcy5hYigpW3RoaXMuRF09MSpuZXcgRGF0ZSx0aGlzLmNvb2tpZS5zYXZlKCksdGhpcy5KYShcIiRjYW1wYWlnbl9kZWxpdmVyeVwiKSx0aGlzLldhLnBlb3BsZS5hcHBlbmQoeyRjYW1wYWlnbnM6dGhpcy5ELCRub3RpZmljYXRpb25zOntjYW1wYWlnbl9pZDp0aGlzLkQsbWVzc2FnZV9pZDp0aGlzLnhiLHR5cGU6XCJ3ZWJcIix0aW1lOm5ldyBEYXRlfX0pKX19KTtcclxuXHRnLnByb3RvdHlwZS5kYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2lmKDA9PT10aGlzLnBhLmxlbmd0aClhKCk7ZWxzZXtmb3IodmFyIGM9MCxmPVtdLGQ9MDtkPHRoaXMucGEubGVuZ3RoO2QrKyl7dmFyIGc9bmV3IEltYWdlLGk9ZnVuY3Rpb24oKXtjKys7Yz09PWIucGEubGVuZ3RoJiZhJiYoYSgpLGE9cCl9O2cub25sb2FkPWk7Zy5zcmM9dGhpcy5wYVtkXTtnLmNvbXBsZXRlJiZpKCk7Zi5wdXNoKGcpfXRoaXMuSyhcImllXCIsNykmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgYj1uO2ZvcihkPTA7ZDxmLmxlbmd0aDtkKyspZltkXS5jb21wbGV0ZXx8KGI9cyk7YiYmYSYmKGEoKSxhPXApfSw1MDApfX07Zy5wcm90b3R5cGUuZWI9Yy5zKGZ1bmN0aW9uKCl7d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5nYyk7dGhpcy5ZLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIjt0aGlzLmwucmVtb3ZlQ2hpbGQodGhpcy5ZKX0pO2cucHJvdG90eXBlLmZiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXtpZihhIGluXHJcblx0ZilyZXR1cm4gbjtpZighYylmb3IodmFyIGE9YVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksYT1bXCJPXCIrYSxcIldlYmtpdFwiK2EsXCJNb3pcIithXSxiPTA7YjxhLmxlbmd0aDtiKyspaWYoYVtiXWluIGYpcmV0dXJuIG47cmV0dXJuIHN9ZnVuY3Rpb24gYihhKXtyZXR1cm4oYT1FLnVzZXJBZ2VudC5tYXRjaChhKSkmJmFbMV19dGhpcy56PXt9O3RoaXMuei5jaHJvbWU9YigvQ2hyb21lXFwvKFxcZCspLyk7dGhpcy56LmZpcmVmb3g9YigvRmlyZWZveFxcLyhcXGQrKS8pO3RoaXMuei5pZT1iKC9NU0lFIChcXGQrKS4rLyk7IXRoaXMuei5pZSYmIXdpbmRvdy5BY3RpdmVYT2JqZWN0JiZcIkFjdGl2ZVhPYmplY3RcImluIHdpbmRvdyYmKHRoaXMuei5pZT0xMSk7aWYodGhpcy5sPWsuYm9keXx8ay5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0pdGhpcy5yYz1NYXRoLm1heCh0aGlzLmwuc2Nyb2xsV2lkdGgsay5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGgsdGhpcy5sLm9mZnNldFdpZHRoLFxyXG5cdGsuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLHRoaXMubC5jbGllbnRXaWR0aCxrLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCksdGhpcy5xYz1NYXRoLm1heCh0aGlzLmwuc2Nyb2xsSGVpZ2h0LGsuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCx0aGlzLmwub2Zmc2V0SGVpZ2h0LGsuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCx0aGlzLmwuY2xpZW50SGVpZ2h0LGsuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCk7dmFyIGM9dGhpcy56LmllLGY9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlO3RoaXMuTWI9dGhpcy5sJiZhKFwidHJhbnNpdGlvblwiKSYmYShcInRyYW5zZm9ybVwiKTt0aGlzLlFhPSgzMzw9dGhpcy56LmNocm9tZXx8MTU8PXRoaXMuei5maXJlZm94KSYmdGhpcy5sJiZhKFwiYmFja2ZhY2VWaXNpYmlsaXR5XCIpJiZhKFwicGVyc3BlY3RpdmVcIikmJmEoXCJ0cmFuc2Zvcm1cIil9O2cucHJvdG90eXBlLmZjPWMucyhmdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt3aW5kb3cuWVQmJlxyXG5cdHdpbmRvdy5ZVC5sb2FkZWQmJmIuaGIoKTtiLkpjPW47Yi5MKCkuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwifXZhciBiPXRoaXMsYz1be206Yi5MKCksazpcIm9wYWNpdHlcIixzdGFydDoxLGk6MH0se206Yi5MKCksazpcInRvcFwiLHN0YXJ0OmcuQixpOi01MDB9LHttOmIuZyhcInZpZGVvLW5vZmxpcFwiKSxrOlwib3BhY2l0eVwiLHN0YXJ0OjAsaToxfSx7bTpiLmcoXCJ2aWRlby1ub2ZsaXBcIiksazpcInRvcFwiLHN0YXJ0OjIqLWIuUSxpOjB9XTtpZihiLnEpe3ZhciBmPWIuZyhcImJnXCIpLGQ9Yi5nKFwib3ZlcmxheVwiKTtmLnN0eWxlLndpZHRoPVwiMTAwJVwiO2Yuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiO2Quc3R5bGUud2lkdGg9XCIxMDAlXCI7Yi5KKGIuTCgpLFwiZXhpdGluZ1wiKTtiLkooZixcInZpc2libGVcIik7Yy5wdXNoKHttOmIuZyhcImJnXCIpLGs6XCJvcGFjaXR5XCIsc3RhcnQ6MCxpOmcuYmF9KX1iLmcoXCJ2aWRlby1ob2xkZXJcIikuaW5uZXJIVE1MPWIuVGM7Yi5RYT8oYi5KKFwiZmxpcHBlclwiLFwiZmxpcHBlZFwiKSxcclxuXHRzZXRUaW1lb3V0KGEsZy5JKSk6Yi5lYShjLGcuSSxhKX0pO2cucHJvdG90eXBlLkphPWZ1bmN0aW9uKGEsYixlKXt0aGlzLkQ/KGI9Ynx8e30sYj1jLmV4dGVuZChiLHtjYW1wYWlnbl9pZDp0aGlzLkQsbWVzc2FnZV9pZDp0aGlzLnhiLG1lc3NhZ2VfdHlwZTpcIndlYl9pbmFwcFwiLG1lc3NhZ2Vfc3VidHlwZTp0aGlzLlh9KSx0aGlzLldhLnRyYWNrKGEsYixlKSk6ZSYmZS5jYWxsKCl9O2cucHJvdG90eXBlLmhiPWMucyhmdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoIWEuVWMpe2EuVWM9bjt2YXIgYj1hLmcoXCJ2aWRlby1lbGFwc2VkXCIpLGU9YS5nKFwidmlkZW8tdGltZVwiKSxmPWEuZyhcInZpZGVvLXByb2dyZXNzXCIpO25ldyB3aW5kb3cuWVQuUGxheWVyKGcudStcIi12aWRlby1mcmFtZVwiLHtldmVudHM6e29uUmVhZHk6ZnVuY3Rpb24oZCl7ZnVuY3Rpb24gZyhhKXt2YXIgYT1NYXRoLnJvdW5kKGgtYSksYj1NYXRoLmZsb29yKGEvNjApLGM9TWF0aC5mbG9vcihiLzYwKSxhPWEtNjAqYjtlLmlubmVySFRNTD1cclxuXHRcIi1cIisoYz9jK1wiOlwiOlwiXCIpKyhcIjAwXCIrKGItNjAqYykpLnNsaWNlKC0yKStcIjpcIisoXCIwMFwiK2EpLnNsaWNlKC0yKX12YXIgaT1kLnRhcmdldCxoPWkuZ2V0RHVyYXRpb24oKTtnKDApO2EuZ2M9d2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCl7dmFyIGE9aS5nZXRDdXJyZW50VGltZSgpO2Iuc3R5bGUud2lkdGg9MTAwKihhL2gpK1wiJVwiO2coYSl9LDI1MCk7Yy5OKGYsXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2E9TWF0aC5tYXgoMCxhLnBhZ2VYLWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCk7aS5zZWVrVG8oaCphL2YuY2xpZW50V2lkdGgsbil9KX19fSl9fSk7Yy50b0FycmF5PWMuJDtjLmlzT2JqZWN0PWMuajtjLkpTT05FbmNvZGU9Yy5jYTtjLkpTT05EZWNvZGU9Yy53YTtjLmlzQmxvY2tlZFVBPWMudmI7Yy5pc0VtcHR5T2JqZWN0PWMuVztjLmluZm89Yy5pbmZvO2MuaW5mby5kZXZpY2U9Yy5pbmZvLm5iO2MuaW5mby5icm93c2VyPWMuaW5mby5rYTtpLnByb3RvdHlwZS5pbml0PVxyXG5cdGkucHJvdG90eXBlLlRhO2kucHJvdG90eXBlLmRpc2FibGU9aS5wcm90b3R5cGUuZGlzYWJsZTtpLnByb3RvdHlwZS50cmFjaz1pLnByb3RvdHlwZS5QO2kucHJvdG90eXBlLnRyYWNrX2xpbmtzPWkucHJvdG90eXBlLk9jO2kucHJvdG90eXBlLnRyYWNrX2Zvcm1zPWkucHJvdG90eXBlLk5jO2kucHJvdG90eXBlLnRyYWNrX3BhZ2V2aWV3PWkucHJvdG90eXBlLkpiO2kucHJvdG90eXBlLnJlZ2lzdGVyPWkucHJvdG90eXBlLlo7aS5wcm90b3R5cGUucmVnaXN0ZXJfb25jZT1pLnByb3RvdHlwZS5HO2kucHJvdG90eXBlLnVucmVnaXN0ZXI9aS5wcm90b3R5cGUudWE7aS5wcm90b3R5cGUuaWRlbnRpZnk9aS5wcm90b3R5cGUuUmE7aS5wcm90b3R5cGUuYWxpYXM9aS5wcm90b3R5cGUuaGM7aS5wcm90b3R5cGUubmFtZV90YWc9aS5wcm90b3R5cGUuQWM7aS5wcm90b3R5cGUuc2V0X2NvbmZpZz1pLnByb3RvdHlwZS5FYjtpLnByb3RvdHlwZS5nZXRfY29uZmlnPWkucHJvdG90eXBlLmQ7aS5wcm90b3R5cGUuZ2V0X3Byb3BlcnR5PVxyXG5cdGkucHJvdG90eXBlLm9hO2kucHJvdG90eXBlLmdldF9kaXN0aW5jdF9pZD1pLnByb3RvdHlwZS5NO2kucHJvdG90eXBlLnRvU3RyaW5nPWkucHJvdG90eXBlLnRvU3RyaW5nO2kucHJvdG90eXBlLl9jaGVja19hbmRfaGFuZGxlX25vdGlmaWNhdGlvbnM9aS5wcm90b3R5cGUuJGE7aS5wcm90b3R5cGUuX3Nob3dfbm90aWZpY2F0aW9uPWkucHJvdG90eXBlLmdiO20ucHJvdG90eXBlLnByb3BlcnRpZXM9bS5wcm90b3R5cGUucWE7bS5wcm90b3R5cGUudXBkYXRlX3NlYXJjaF9rZXl3b3JkPW0ucHJvdG90eXBlLkxiO20ucHJvdG90eXBlLnVwZGF0ZV9yZWZlcnJlcl9pbmZvPW0ucHJvdG90eXBlLlphO20ucHJvdG90eXBlLmdldF9jcm9zc19zdWJkb21haW49bS5wcm90b3R5cGUudmM7bS5wcm90b3R5cGUuY2xlYXI9bS5wcm90b3R5cGUuY2xlYXI7by5wcm90b3R5cGUuc2V0PW8ucHJvdG90eXBlLnNldDtvLnByb3RvdHlwZS5zZXRfb25jZT1vLnByb3RvdHlwZS5GYjtvLnByb3RvdHlwZS5pbmNyZW1lbnQ9XHJcblx0by5wcm90b3R5cGUudGI7by5wcm90b3R5cGUuYXBwZW5kPW8ucHJvdG90eXBlLmFwcGVuZDtvLnByb3RvdHlwZS50cmFja19jaGFyZ2U9by5wcm90b3R5cGUuTWM7by5wcm90b3R5cGUuY2xlYXJfY2hhcmdlcz1vLnByb3RvdHlwZS5tYztvLnByb3RvdHlwZS5kZWxldGVfdXNlcj1vLnByb3RvdHlwZS5vYztvLnByb3RvdHlwZS50b1N0cmluZz1vLnByb3RvdHlwZS50b1N0cmluZztjLkNiKG0sW1wiX2V4cGlyZV9ub3RpZmljYXRpb25fY2FtcGFpZ25zXCJdKTtjLkNiKGksW1wiaWRlbnRpZnlcIixcIl9jaGVja19hbmRfaGFuZGxlX25vdGlmaWNhdGlvbnNcIixcIl9zaG93X25vdGlmaWNhdGlvblwiXSk7aWYoYy5oKHIpKXEubmEoXCInbWl4cGFuZWwnIG9iamVjdCBub3QgaW5pdGlhbGl6ZWQuIEVuc3VyZSB5b3UgYXJlIHVzaW5nIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGUgTWl4cGFuZWwgSlMgTGlicmFyeSBhbG9uZyB3aXRoIHRoZSBzbmlwcGV0IHdlIHByb3ZpZGUuXCIpO2Vsc2UgaWYoci5fX2xvYWRlZHx8XHJcblx0ci5jb25maWcmJnIuY29va2llKXEuZXJyb3IoXCJNaXhwYW5lbCBsaWJyYXJ5IGhhcyBhbHJlYWR5IGJlZW4gZG93bmxvYWRlZCBhdCBsZWFzdCBvbmNlLlwiKTtlbHNlIGlmKDEuMT56KXEubmEoXCJWZXJzaW9uIG1pc21hdGNoOyBwbGVhc2UgZW5zdXJlIHlvdSdyZSB1c2luZyB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIE1peHBhbmVsIGNvZGUgc25pcHBldC5cIik7ZWxzZXt2YXIgeT17fTtjLmEoci5faSxmdW5jdGlvbihhKXt2YXIgYjthJiZjLmlzQXJyYXkoYSkmJihiPWFbYS5sZW5ndGgtMV0sYT1GLmFwcGx5KHRoaXMsYSkseVtiXT1hKX0pO3ZhciBRPWZ1bmN0aW9uKCl7Yy5hKHksZnVuY3Rpb24oYSxiKXtcIm1peHBhbmVsXCIhPT1iJiYocltiXT1hKX0pO3IuXz1jfTtyLmluaXQ9ZnVuY3Rpb24oYSxiLGMpe2M/cltjXXx8KHJbY109eVtjXT1GKGEsYixjKSxyW2NdLmhhKCkpOihjPXIseS5taXhwYW5lbD9jPXkubWl4cGFuZWw6YSYmKGM9RihhLGIsXCJtaXhwYW5lbFwiKSxjLmhhKCkpLFxyXG5cdHdpbmRvdy5taXhwYW5lbD1yPWMsUSgpKX07ci5pbml0KCk7Yy5hKHksZnVuY3Rpb24oYSl7YS5oYSgpfSk7aWYoay5hZGRFdmVudExpc3RlbmVyKVwiY29tcGxldGVcIj09ay5yZWFkeVN0YXRlP3goKTprLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIseCxzKTtlbHNlIGlmKGsuYXR0YWNoRXZlbnQpe2suYXR0YWNoRXZlbnQoXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIix4KTt6PXM7dHJ5e3o9d2luZG93LmZyYW1lRWxlbWVudD09cH1jYXRjaChSKXt9aWYoay5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwmJnope3ZhciBNPWZ1bmN0aW9uKCl7dHJ5e2suZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKX1jYXRjaChhKXtzZXRUaW1lb3V0KE0sMSk7cmV0dXJufXgoKX07TSgpfX1jLk4od2luZG93LFwibG9hZFwiLHgsbil9fSkod2luZG93Lm1peHBhbmVsKTtcclxuXHR9KSgpO1xyXG5cclxufSBcclxuLy9lbHNlXHJcbiB7XHJcblxyXG59XHJcblxyXG4vL0dvb2dsZSBBbmFseXRpY3NcclxuXHJcbmlmICh0eXBlb2YgZ2EgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0Ly8gbGlnaHRcclxuXHRzd2l0Y2goY29uZmlnLmFwcCkge1xyXG5cdCAgY2FzZSAnbGlnaHQnOlxyXG5cdFx0ICBnYSgnY3JlYXRlJywgJ1VBLTU1ODYzNjY2LTEnLCAnYXV0bycpO1xyXG5cdFx0ICBicmVhaztcclxuXHQgIGNhc2UgJ3Bybyc6XHJcblx0XHQgIGdhKCdjcmVhdGUnLCAnVUEtNTU4NjM2NjYtMicsICdhdXRvJyk7XHJcblx0XHQgIG1peHBhbmVsLmluaXQoXCIzMzllNTExY2ZmZjdmZGNkMTQ2ZDNhNGRkNjBmMDNhOFwiKTtcclxuXHRcdCAgYnJlYWs7XHJcblx0ICBjYXNlICd3ZWInOlxyXG5cdFx0ICBnYSgnY3JlYXRlJywgJ1VBLTU4MTgzMzE3LTEnLCAnYXV0bycpO1xyXG5cdFx0ICBtaXhwYW5lbC5pbml0KFwiMzM5ZTUxMWNmZmY3ZmRjZDE0NmQzYTRkZDYwZjAzYThcIik7XHJcblx0XHQgIGJyZWFrO1xyXG5cdCAgY2FzZSAnYXBwJzpcclxuXHRcdCAgZ2EoJ2NyZWF0ZScsICdVQS01NTg2MzY2Ni04JywgJ2F1dG8nKTtcclxuXHRcdCAgYnJlYWs7XHJcblx0ICBjYXNlICdhbWJpZXllJzpcclxuXHRcdCAgZ2EoJ2NyZWF0ZScsICdVQS01NTg2MzY2Ni02JywgJ2F1dG8nKTtcclxuXHRcdCAgYnJlYWs7XHJcblx0fVxyXG5cdC8vZ2EoJ2NyZWF0ZScsICdVQS01NTg2MzY2Ni0yJywgJ2F1dG8nKTtcclxuXHQvLyBhbWJpZXllIGdhKCdjcmVhdGUnLCAnVUEtNTU4NjM2NjYtNicsICdhdXRvJyk7XHJcblxyXG5cdGdhKCdyZXF1aXJlJywgJ2Rpc3BsYXlmZWF0dXJlcycpO1xyXG5cdGdhKCdzZW5kJywgJ3BhZ2V2aWV3Jyk7XHJcbn1cclxuXHJcbmlmICh0eXBlb2YobWl4cGFuZWwpICE9PSBcInVuZGVmaW5lZFwiICYmIG1peHBhbmVsLnRyYWNrX2xpbmtzICE9PSB1bmRlZmluZWQpIHtcclxuXHRtaXhwYW5lbC50cmFja19saW5rcyhcImFcIiwgXCJjbGlja1wiLCB7XHJcblx0ICAgIFwicmVmZXJyZXJcIjogZG9jdW1lbnQucmVmZXJyZXJcclxuXHR9KTtcclxufVxyXG4vKiovXHJcblxyXG5mdW5jdGlvbiB0cmFja1N0YXRlKG5hbWUsIHN0YXRlKSB7XHJcblx0cmV0dXJuO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmFja0V2ZW50KGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZSwgZGF0YSkge1xyXG5cdGlmICh0eXBlb2YgZ2EgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRnYSgnc2VuZCcsICdldmVudCcsIGNhdGVnb3J5LCBhY3Rpb24sIHtcclxuXHRcdFx0J25vbkludGVyYWN0aW9uJzogMSwgXHJcblx0XHRcdCdsYWJlbCc6IGxhYmVsLCBcclxuXHRcdFx0J3ZhbHVlJzogdmFsdWVcclxuXHRcdH0pOyBcclxuXHR9XHJcblxyXG5cdHZhciBvYmogPSB7XHJcblx0XHQnY2F0ZWdvcnknOiBjYXRlZ29yeSwgXHJcblx0XHQnYWN0aW9uJzogYWN0aW9uLCBcclxuXHRcdCd2YWx1ZSc6IHZhbHVlLFxyXG5cdFx0J2RhdGEnOiBkYXRhXHJcblx0fTtcclxuXHJcblx0aWYgKHR5cGVvZihtaXhwYW5lbCkgIT09IFwidW5kZWZpbmVkXCIgJiYgbWl4cGFuZWwudHJhY2tfbGlua3MgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0bWl4cGFuZWwudHJhY2sobGFiZWwsIG9iaik7XHJcblx0fVxyXG5cclxuXHRpZiAoZGF0YSkge1xyXG5cdFx0dHJhY2tTdGF0ZShjYXRlZ29yeSwgb2JqKVxyXG5cdH1cclxufVxyXG5cclxuXHJcbnZhciBnT2xkT25FcnJvciA9IHdpbmRvdy5vbmVycm9yO1xyXG4vLyBPdmVycmlkZSBwcmV2aW91cyBoYW5kbGVyLlxyXG53aW5kb3cub25lcnJvciA9IGZ1bmN0aW9uIG15RXJyb3JIYW5kbGVyKGVycm9yTXNnLCB1cmwsIGxpbmVOdW1iZXIpIHtcclxuICBpZiAoZ09sZE9uRXJyb3IpXHJcbiAgICAvLyBDYWxsIHByZXZpb3VzIGhhbmRsZXIuXHJcbiAgICByZXR1cm4gZ09sZE9uRXJyb3IoZXJyb3JNc2csIHVybCwgbGluZU51bWJlcik7XHJcblxyXG4gIC8vIEp1c3QgbGV0IGRlZmF1bHQgaGFuZGxlciBydW4uXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5pZiAoY29uZmlnLmFwcCA9PT0gJ3BybycgfHwgY29uZmlnLmFwcCA9PT0gJ3dlYicpIHtcclxuXHQvLyBzY3JpcHQuZmFpbCByZW12b2VkXHJcblx0LypcclxuXHQoZnVuY3Rpb24oXywgX18pIHtcclxuXHRfLl9lcnJzID0gW107IHZhciBoID0gXy5vbmVycm9yOyB2YXIgZiA9IGZ1bmN0aW9uKCkgeyB2YXIgYSA9IGFyZ3VtZW50czsgX2VycnMucHVzaChhKTsgaCAmJiBoLmFwcGx5KHRoaXMsIGEpfTtcclxuXHR2YXIgc2YgPSBfXy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzZi50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7c2YuYXN5bmMgPSB0cnVlO3NmLmlkID0gJ29uc2NyaXB0ZmFpbCc7XHJcblx0c2Yuc3JjID0gJy8vc2NyaXB0LmZhaWwvaW5mb3JtP2MyRmtZV3R2ZGtCbmJXRnBiQzVqYjIwPSRtbk5NemVSOG9FZks3T0M0TU9BN01aQmh5bitmU0k4eGFXUTJxSFhIQ1hFPSc7XHJcblx0dmFyIHMgPSBfXy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2YsIHMpO1xyXG5cdF8ub25lcnJvciA9IGY7XHJcblx0fSkod2luZG93LCBkb2N1bWVudCk7XHJcblx0Ki9cclxufVxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

'use strict'; /*!
               * Color Thief v2.0
               * by Lokesh Dhakar - http://www.lokeshdhakar.com
               *
               * Thanks
               * ------
               * Nick Rabinowitz - For creating quantize.js.
               * John Schulz - For clean up and optimization. @JFSIII
               * Nathan Spady - For adding drag and drop support to the demo page.
               *
               * License
               * -------
               * Copyright 2011, 2015 Lokesh Dhakar
               * Released under the MIT license
               * https://raw.githubusercontent.com/lokesh/color-thief/master/LICENSE
               *
               */


/*
  CanvasImage Class
  Class that wraps the html image element and canvas.
  It also simplifies some of the canvas context manipulation
  with a set of helper functions.
*/
var CanvasImage = function CanvasImage(image) {
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');

    document.body.appendChild(this.canvas);

    this.width = this.canvas.width = image.width;
    this.height = this.canvas.height = image.height;

    this.context.drawImage(image, 0, 0, this.width, this.height);};


CanvasImage.prototype.clear = function () {
    this.context.clearRect(0, 0, this.width, this.height);};


CanvasImage.prototype.update = function (imageData) {
    this.context.putImageData(imageData, 0, 0);};


CanvasImage.prototype.getPixelCount = function () {
    return this.width * this.height;};


CanvasImage.prototype.getImageData = function () {
    return this.context.getImageData(0, 0, this.width, this.height);};


CanvasImage.prototype.removeCanvas = function () {
    this.canvas.parentNode.removeChild(this.canvas);};



var ColorThief = function ColorThief() {};

/*
 * getColor(sourceImage[, quality])
 * returns {r: num, g: num, b: num}
 *
 * Use the median cut algorithm provided by quantize.js to cluster similar
 * colors and return the base color from the largest cluster.
 *
 * Quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
 * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
 * faster a color will be returned but the greater the likelihood that it will not be the visually
 * most dominant color.
 *
 * */
ColorThief.prototype.getColor = function (sourceImage, quality) {
    var palette = this.getPalette(sourceImage, 5, quality);
    var dominantColor = palette[0];
    return dominantColor;};



/*
 * getPalette(sourceImage[, colorCount, quality])
 * returns array[ {r: num, g: num, b: num}, {r: num, g: num, b: num}, ...]
 *
 * Use the median cut algorithm provided by quantize.js to cluster similar colors.
 *
 * colorCount determines the size of the palette; the number of colors returned. If not set, it
 * defaults to 10.
 *
 * BUGGY: Function does not always return the requested amount of colors. It can be +/- 2.
 *
 * quality is an optional argument. It needs to be an integer. 1 is the highest quality settings.
 * 10 is the default. There is a trade-off between quality and speed. The bigger the number, the
 * faster the palette generation but the greater the likelihood that colors will be missed.
 *
 *
 */
ColorThief.prototype.getPalette = function (sourceImage, colorCount, quality) {

    if (typeof colorCount === 'undefined') {
        colorCount = 10;}

    if (typeof quality === 'undefined' || quality < 1) {
        quality = 10;}


    // Create custom CanvasImage object
    var image = new CanvasImage(sourceImage);
    var imageData = image.getImageData();
    var pixels = imageData.data;
    var pixelCount = image.getPixelCount();

    // Store the RGB values in an array format suitable for quantize function
    var pixelArray = [];
    for (var i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {
        offset = i * 4;
        r = pixels[offset + 0];
        g = pixels[offset + 1];
        b = pixels[offset + 2];
        a = pixels[offset + 3];
        // If pixel is mostly opaque and not white
        if (a >= 125) {
            if (!(r > 250 && g > 250 && b > 250)) {
                pixelArray.push([r, g, b]);}}}




    // Send array to quantize function which clusters values
    // using median cut algorithm
    var cmap = MMCQ.quantize(pixelArray, colorCount);
    var palette = cmap ? cmap.palette() : null;

    // Clean up
    image.removeCanvas();

    return palette;};





/*!
 * quantize.js Copyright 2008 Nick Rabinowitz.
 * Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
 */

// fill out a couple protovis dependencies
/*!
 * Block below copied from Protovis: http://mbostock.github.com/protovis/
 * Copyright 2010 Stanford Visualization Group
 * Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php
 */
if (!pv) {
    var pv = { 
        map: function map(array, f) {
            var o = {};
            return f ? array.map(function (d, i) {o.index = i;return f.call(o, d);}) : array.slice();}, 

        naturalOrder: function naturalOrder(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;}, 

        sum: function sum(array, f) {
            var o = {};
            return array.reduce(f ? function (p, d, i) {o.index = i;return p + f.call(o, d);} : function (p, d) {return p + d;}, 0);}, 

        max: function max(array, f) {
            return Math.max.apply(null, f ? pv.map(array, f) : array);} };}






/**
 * Basic Javascript port of the MMCQ (modified median cut quantization)
 * algorithm from the Leptonica library (http://www.leptonica.com/).
 * Returns a color map you can use to map original pixels to the reduced
 * palette. Still a work in progress.
 *
 * @author Nick Rabinowitz
 * @example

// array of pixels as [R,G,B] arrays
var myPixels = [[190,197,190], [202,204,200], [207,214,210], [211,214,211], [205,207,207]
                // etc
                ];
var maxColors = 4;

var cmap = MMCQ.quantize(myPixels, maxColors);
var newPalette = cmap.palette();
var newPixels = myPixels.map(function(p) {
    return cmap.map(p);
});

 */
var MMCQ = (function () {
    // private constants
    var sigbits = 5, 
    rshift = 8 - sigbits, 
    maxIterations = 1000, 
    fractByPopulations = 0.75;

    // get reduced-space color index for a pixel
    function getColorIndex(r, g, b) {
        if (r === 0 && g === 0 && b === 0) {
            return 0;}

        return (r << 2 * sigbits) + (g << sigbits) + b;}


    // Simple priority queue
    function PQueue(comparator) {
        var contents = [], 
        sorted = false;

        function sort() {
            contents.sort(comparator);
            sorted = true;}


        return { 
            push: function push(o) {
                contents.push(o);
                sorted = false;}, 

            peek: function peek(index) {
                if (!sorted) sort();
                if (index === undefined) index = contents.length - 1;
                return contents[index];}, 

            pop: function pop() {
                if (!sorted) sort();
                return contents.pop();}, 

            size: function size() {
                return contents.length;}, 

            map: function map(f) {
                return contents.map(f);}, 

            debug: function debug() {
                if (!sorted) sort();
                return contents;} };}




    // 3d color space box
    function VBox(r1, r2, g1, g2, b1, b2, histo) {
        var vbox = this;
        vbox.r1 = r1;
        vbox.r2 = r2;
        vbox.g1 = g1;
        vbox.g2 = g2;
        vbox.b1 = b1;
        vbox.b2 = b2;
        vbox.histo = histo;}

    VBox.prototype = { 
        volume: function volume(force) {
            var vbox = this;
            if (!vbox._volume || force) {
                vbox._volume = (vbox.r2 - vbox.r1 + 1) * (vbox.g2 - vbox.g1 + 1) * (vbox.b2 - vbox.b1 + 1);}

            return vbox._volume;}, 

        count: function count(force) {
            var vbox = this, 
            histo = vbox.histo;
            if (!vbox._count_set || force) {
                var npix = 0, 
                i, j, k;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var index = getColorIndex(i, j, k);
                            npix += histo[index] || 0;}}}



                vbox._count = npix;
                vbox._count_set = true;}

            return vbox._count;}, 

        copy: function copy() {
            var vbox = this;
            return new VBox(vbox.r1, vbox.r2, vbox.g1, vbox.g2, vbox.b1, vbox.b2, vbox.histo);}, 

        avg: function avg(force) {
            var vbox = this, 
            histo = vbox.histo;
            if (!vbox._avg || force) {
                var ntot = 0, 
                mult = 1 << 8 - sigbits, 
                rsum = 0, 
                gsum = 0, 
                bsum = 0, 
                hval, 
                i, j, k, histoindex;
                for (i = vbox.r1; i <= vbox.r2; i++) {
                    for (j = vbox.g1; j <= vbox.g2; j++) {
                        for (k = vbox.b1; k <= vbox.b2; k++) {
                            var histoindex = getColorIndex(i, j, k);
                            hval = histo[histoindex] || 0;
                            ntot += hval;
                            rsum += hval * (i + 0.5) * mult;
                            gsum += hval * (j + 0.5) * mult;
                            bsum += hval * (k + 0.5) * mult;}}}



                if (ntot) {
                    vbox._avg = [~ ~(rsum / ntot), ~ ~(gsum / ntot), ~ ~(bsum / ntot)];} else 
                {
                    //                    console.log('empty box');
                    vbox._avg = [
                    ~ ~(mult * (vbox.r1 + vbox.r2 + 1) / 2), 
                    ~ ~(mult * (vbox.g1 + vbox.g2 + 1) / 2), 
                    ~ ~(mult * (vbox.b1 + vbox.b2 + 1) / 2)];}}



            return vbox._avg;}, 

        contains: function contains(pixel) {
            var vbox = this, 
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            return rval >= vbox.r1 && rval <= vbox.r2 && 
            gval >= vbox.g1 && gval <= vbox.g2 && 
            bval >= vbox.b1 && bval <= vbox.b2;} };



    // Color map
    function CMap() {
        this.vboxes = new PQueue(function (a, b) {
            return pv.naturalOrder(
            a.vbox.count() * a.vbox.volume(), 
            b.vbox.count() * b.vbox.volume());});}



    CMap.prototype = { 
        push: function push(vbox) {
            this.vboxes.push({ 
                vbox: vbox, 
                color: vbox.avg() });}, 


        palette: function palette() {
            return this.vboxes.map(function (vb) {return vb.color;});}, 

        size: function size() {
            return this.vboxes.size();}, 

        map: function map(color) {
            var vboxes = this.vboxes;
            for (var i = 0; i < vboxes.size(); i++) {
                if (vboxes.peek(i).vbox.contains(color)) {
                    return vboxes.peek(i).color;}}


            return this.nearest(color);}, 

        nearest: function nearest(color) {
            var vboxes = this.vboxes, 
            d1, d2, pColor;
            for (var i = 0; i < vboxes.size(); i++) {
                d2 = Math.sqrt(
                Math.pow(color[0] - vboxes.peek(i).color[0], 2) + 
                Math.pow(color[1] - vboxes.peek(i).color[1], 2) + 
                Math.pow(color[2] - vboxes.peek(i).color[2], 2));

                if (d2 < d1 || d1 === undefined) {
                    d1 = d2;
                    pColor = vboxes.peek(i).color;}}


            return pColor;}, 

        forcebw: function forcebw() {
            // XXX: won't  work yet
            var vboxes = this.vboxes;
            vboxes.sort(function (a, b) {return pv.naturalOrder(pv.sum(a.color), pv.sum(b.color));});

            // force darkest color to black if everything < 5
            var lowest = vboxes[0].color;
            if (lowest[0] < 5 && lowest[1] < 5 && lowest[2] < 5) 
            vboxes[0].color = [0, 0, 0];

            // force lightest color to white if everything > 251
            var idx = vboxes.length - 1, 
            highest = vboxes[idx].color;
            if (highest[0] > 251 && highest[1] > 251 && highest[2] > 251) 
            vboxes[idx].color = [255, 255, 255];} };



    // histo (1-d array, giving the number of pixels in
    // each quantized region of color space), or null on error
    function getHisto(pixels) {
        var histosize = 1 << 3 * sigbits, 
        histo = new Array(histosize), 
        index, rval, gval, bval;
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            index = getColorIndex(rval, gval, bval);
            histo[index] = (histo[index] || 0) + 1;});

        return histo;}


    function vboxFromPixels(pixels, histo) {
        var rmin = 1000000, rmax = 0, 
        gmin = 1000000, gmax = 0, 
        bmin = 1000000, bmax = 0, 
        rval, gval, bval;
        // find min/max
        pixels.forEach(function (pixel) {
            rval = pixel[0] >> rshift;
            gval = pixel[1] >> rshift;
            bval = pixel[2] >> rshift;
            if (rval < rmin) rmin = rval;else 
            if (rval > rmax) rmax = rval;
            if (gval < gmin) gmin = gval;else 
            if (gval > gmax) gmax = gval;
            if (bval < bmin) bmin = bval;else 
            if (bval > bmax) bmax = bval;});

        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo);}


    function medianCutApply(histo, vbox) {
        if (!vbox.count()) return;

        var rw = vbox.r2 - vbox.r1 + 1, 
        gw = vbox.g2 - vbox.g1 + 1, 
        bw = vbox.b2 - vbox.b1 + 1, 
        maxw = pv.max([rw, gw, bw]);
        // only one pixel, no split
        if (vbox.count() == 1) {
            return [vbox.copy()];}

        /* Find the partial sum arrays along the selected axis. */
        var total = 0, 
        partialsum = [], 
        lookaheadsum = [], 
        i, j, k, sum, index;
        if (maxw == rw) {
            for (i = vbox.r1; i <= vbox.r2; i++) {
                sum = 0;
                for (j = vbox.g1; j <= vbox.g2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        var index = getColorIndex(i, j, k);
                        sum += histo[index] || 0;}}


                total += sum;
                partialsum[i] = total;}} else 


        if (maxw == gw) {
            for (i = vbox.g1; i <= vbox.g2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.b1; k <= vbox.b2; k++) {
                        index = getColorIndex(j, i, k);
                        sum += histo[index] || 0;}}


                total += sum;
                partialsum[i] = total;}} else 


        {/* maxw == bw */
            for (i = vbox.b1; i <= vbox.b2; i++) {
                sum = 0;
                for (j = vbox.r1; j <= vbox.r2; j++) {
                    for (k = vbox.g1; k <= vbox.g2; k++) {
                        index = getColorIndex(j, k, i);
                        sum += histo[index] || 0;}}


                total += sum;
                partialsum[i] = total;}}


        partialsum.forEach(function (d, i) {
            lookaheadsum[i] = total - d;});

        function doCut(color) {
            var dim1 = color + '1', 
            dim2 = color + '2', 
            left, right, vbox1, vbox2, d2, count2 = 0;
            for (i = vbox[dim1]; i <= vbox[dim2]; i++) {
                if (partialsum[i] > total / 2) {
                    vbox1 = vbox.copy();
                    vbox2 = vbox.copy();
                    left = i - vbox[dim1];
                    right = vbox[dim2] - i;
                    if (left <= right) 
                    d2 = Math.min(vbox[dim2] - 1, ~ ~(i + right / 2));else 
                    d2 = Math.max(vbox[dim1], ~ ~(i - 1 - left / 2));
                    // avoid 0-count boxes
                    while (!partialsum[d2]) d2++;
                    count2 = lookaheadsum[d2];
                    while (!count2 && partialsum[d2 - 1]) count2 = lookaheadsum[--d2];
                    // set dimensions
                    vbox1[dim2] = d2;
                    vbox2[dim1] = vbox1[dim2] + 1;
                    //                    console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());
                    return [vbox1, vbox2];}}}




        // determine the cut planes
        return maxw == rw ? doCut('r') : 
        maxw == gw ? doCut('g') : 
        doCut('b');}


    function quantize(pixels, maxcolors) {
        // short-circuit
        if (!pixels.length || maxcolors < 2 || maxcolors > 256) {
            //            console.log('wrong number of maxcolors');
            return false;}


        // XXX: check color content and convert to grayscale if insufficient

        var histo = getHisto(pixels), 
        histosize = 1 << 3 * sigbits;

        // check that we aren't below maxcolors already
        var nColors = 0;
        histo.forEach(function () {nColors++;});
        if (nColors <= maxcolors) {}
        // XXX: generate the new colors from the histo and return


        // get the beginning vbox from the colors
        var vbox = vboxFromPixels(pixels, histo), 
        pq = new PQueue(function (a, b) {return pv.naturalOrder(a.count(), b.count());});
        pq.push(vbox);

        // inner function to do the iteration
        function iter(lh, target) {
            var ncolors = 1, 
            niters = 0, 
            vbox;
            while (niters < maxIterations) {
                vbox = lh.pop();
                if (!vbox.count()) {/* just put it back */
                    lh.push(vbox);
                    niters++;
                    continue;}

                // do the cut
                var vboxes = medianCutApply(histo, vbox), 
                vbox1 = vboxes[0], 
                vbox2 = vboxes[1];

                if (!vbox1) {
                    //                    console.log("vbox1 not defined; shouldn't happen!");
                    return;}

                lh.push(vbox1);
                if (vbox2) {/* vbox2 can be null */
                    lh.push(vbox2);
                    ncolors++;}

                if (ncolors >= target) return;
                if (niters++ > maxIterations) {
                    //                    console.log("infinite loop; perhaps too few pixels!");
                    return;}}}




        // first set of colors, sorted by population
        iter(pq, fractByPopulations * maxcolors);

        // Re-sort by the product of pixel occupancy times the size in color space.
        var pq2 = new PQueue(function (a, b) {
            return pv.naturalOrder(a.count() * a.volume(), b.count() * b.volume());});

        while (pq.size()) {
            pq2.push(pq.pop());}


        // next set - generate the median cuts using the (npix * vol) sorting.
        iter(pq2, maxcolors - pq2.size());

        // calculate the actual colors
        var cmap = new CMap();
        while (pq2.size()) {
            cmap.push(pq2.pop());}


        return cmap;}


    return { 
        quantize: quantize };})();
//# sourceMappingURL=data:application/json;base64,

// localstorage interface

'use strict'
/*jshint multistr: true */

/*globals chrome:false */

/* exported Storage */;var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var 

Storage = (function () {function Storage() {_classCallCheck(this, Storage);}_createClass(Storage, null, [{ key: 'set', value: function set(
		name, val) {var _this = this;
			return new Promise(function (resolve, reject) {
				try {
					console.log('setting ' + name + ' = ' + JSON.stringify(val));
					var obj = {};
					obj[name] = val;

					if (_this.syncAvailable()) {
						chrome.storage.sync.set(obj, resolve);} else 
					{
						localStorage.setItem(name, JSON.stringify(val));}


					resolve(name, val); // might be different from sync
				} catch (e) {
					reject(e);}});} }, { key: 'get', value: function get(




		name) {var _this2 = this;
			return new Promise(function (resolve, reject) {
				if (_this2.syncAvailable()) {
					chrome.storage.sync.get(name, function (items) {
						console.log('got storage ' + name + ': ' + items[name]);
						resolve(items[name]);});} else 

				if (localStorage) {
					var result = null;
					try {
						var b = localStorage.getItem(name);
						if (b === 'undefined') {
							result = undefined;} else 
						if (b === 'null') {
							result = null;} else 
						{
							result = JSON.parse(b);}} 

					catch (e) {
						console.log('Error: ' + e);
						result = localStorage.getItem(name);}

					resolve(result);} else 
				{
					resolve(null);}});} }, { key: 'syncAvailable', value: function syncAvailable() 



		{
			return typeof chrome !== 'undefined' && 
			chrome.storage !== undefined && 
			chrome.storage.sync !== undefined;} }]);return Storage;})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7Ozs7c0JBQVksQ0FBQzs7QUFPUCxPQUFPLDBCQUFQLE9BQU8sMEJBQVAsT0FBTyxnQkFBUCxPQUFPO0FBQ0EsTUFBSSxFQUFFLEdBQUcsRUFBRTtBQUN0QixVQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN2QyxRQUFJO0FBQ0QsWUFBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDN0QsU0FBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7QUFFaEIsU0FBSSxNQUFLLGFBQWEsRUFBRSxFQUFFO0FBQzNCLFlBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FDdEM7QUFBTTtBQUNOLGtCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDaEQ7OztBQUVELFlBQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO0FBQUMsS0FDbkIsQ0FBQyxPQUFNLENBQUMsRUFBRTtBQUNWLFdBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNWLENBQ0QsQ0FBQyxDQUFDLENBQ0g7Ozs7O0FBRVcsTUFBSSxFQUFFO0FBQ2pCLFVBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3ZDLFFBQUksT0FBSyxhQUFhLEVBQUUsRUFBRTtBQUN6QixXQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsS0FBSyxFQUFFO0FBQzlDLGFBQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEQsYUFBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3JCLENBQUMsQ0FBQyxDQUNIOztBQUFNLFFBQUksWUFBWSxFQUFFO0FBQ3hCLFNBQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUNsQixTQUFJO0FBQ0gsVUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxVQUFJLENBQUMsS0FBSyxXQUFXLEVBQUU7QUFDdEIsYUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUNuQjtBQUFNLFVBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTtBQUN4QixhQUFNLEdBQUcsSUFBSSxDQUFDLENBQ2Q7QUFBTTtBQUNOLGFBQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3ZCLENBQ0Q7O0FBQUEsWUFBTSxDQUFDLEVBQUU7QUFDVCxhQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzQixZQUFNLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNwQzs7QUFDRCxZQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDaEI7QUFBTTtBQUNOLFlBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNkLENBQ0QsQ0FBQyxDQUFDLENBQ0g7Ozs7QUFDc0I7QUFDdEIsVUFBTyxPQUFPLE1BQU0sQUFBQyxLQUFLLFdBQVc7QUFDakMsU0FBTSxDQUFDLE9BQU8sS0FBSyxTQUFTO0FBQzVCLFNBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUN0QyxZQXJESSxPQUFPIiwiZmlsZSI6InN0b3JhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsb2NhbHN0b3JhZ2UgaW50ZXJmYWNlXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcbi8qanNoaW50IG11bHRpc3RyOiB0cnVlICovXHJcblxyXG4vKmdsb2JhbHMgY2hyb21lOmZhbHNlICovXHJcblxyXG4vKiBleHBvcnRlZCBTdG9yYWdlICovXHJcblxyXG5jbGFzcyBTdG9yYWdlIHtcclxuXHRzdGF0aWMgc2V0IChuYW1lLCB2YWwpIHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdCAgXHRjb25zb2xlLmxvZygnc2V0dGluZyAnICsgbmFtZSArICcgPSAnICsgSlNPTi5zdHJpbmdpZnkodmFsKSk7XHJcblx0XHRcdCAgXHR2YXIgb2JqID0ge307XHJcblx0XHRcdCAgXHRvYmpbbmFtZV0gPSB2YWw7XHJcblxyXG5cdFx0XHQgIFx0aWYgKHRoaXMuc3luY0F2YWlsYWJsZSgpKSB7XHJcblx0XHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zeW5jLnNldChvYmosIHJlc29sdmUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWwpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc29sdmUobmFtZSwgdmFsKTsvLyBtaWdodCBiZSBkaWZmZXJlbnQgZnJvbSBzeW5jXHJcblx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdHJlamVjdChlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0IChuYW1lKSB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy5zeW5jQXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChuYW1lLCBmdW5jdGlvbiAoaXRlbXMpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdnb3Qgc3RvcmFnZSAnICsgbmFtZSArICc6ICcgKyBpdGVtc1tuYW1lXSk7XHJcblx0XHRcdFx0XHRyZXNvbHZlKGl0ZW1zW25hbWVdKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIGlmIChsb2NhbFN0b3JhZ2UpIHtcclxuXHRcdFx0XHR2YXIgcmVzdWx0ID0gbnVsbDtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0dmFyIGIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcclxuXHRcdFx0XHRcdGlmIChiID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGIgPT09ICdudWxsJykge1xyXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBudWxsO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0ID0gSlNPTi5wYXJzZShiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9Y2F0Y2goZSkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0Vycm9yOiAnICsgZSk7XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc29sdmUobnVsbCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRzdGF0aWMgc3luY0F2YWlsYWJsZSgpIHtcclxuXHRcdHJldHVybiB0eXBlb2YoY2hyb21lKSAhPT0gJ3VuZGVmaW5lZCcgICYmIFxyXG5cdFx0XHRcdFx0XHRjaHJvbWUuc3RvcmFnZSAhPT0gdW5kZWZpbmVkICYmIFxyXG5cdFx0XHRcdFx0XHRjaHJvbWUuc3RvcmFnZS5zeW5jICE9PSB1bmRlZmluZWQ7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

'use strict'; /**
               * Color utility functions, exposed as an AMD module.
               * No external dependencies.
               * Special thanks for the RGB to CIE conversion code goes out to the Q42 team 
               * for their Q42.HueApi work. Dank u!
               * More info: https://github.com/Q42/Q42.HueApi.
               *
               * https://github.com/bjohnso5/hue-hacking
               * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

/*globals define:false */
/*exported colors*/
var colors = function colors() {

    'use strict'

    /**
     * Represents a CIE 1931 XY coordinate pair.
     *
     * @param {Number} X coordinate.
     * @param {Number} Y coordinate.
     * @constructor
     */;
    var XYPoint = function XYPoint(x, y) {
        this.x = x;
        this.y = y;}, 


    Red = new XYPoint(0.675, 0.322), 
    Lime = new XYPoint(0.4091, 0.518), 
    Blue = new XYPoint(0.167, 0.04), 

    /**
     * Parses a valid hex color string and returns the Red RGB integer value.
     *
     * @param {String} Hex color string.
     * @return {Number} Red integer value.
     */
    hexToRed = function hexToRed(hex) {
        return parseInt(hex.substring(0, 2), 16);}, 


    /**
     * Parses a valid hex color string and returns the Green RGB integer value.
     *
     * @param {String} Hex color string.
     * @return {Number} Green integer value.
     */
    hexToGreen = function hexToGreen(hex) {
        return parseInt(hex.substring(2, 4), 16);}, 


    /**
     * Parses a valid hex color string and returns the Blue RGB integer value.
     *
     * @param {String} Hex color string.
     * @return {Number} Blue integer value.
     */
    hexToBlue = function hexToBlue(hex) {
        return parseInt(hex.substring(4, 6), 16);}, 


    /**
     * Converts a valid hex color string to an RGB array.
     *
     * @param {String} Hex color String (e.g. FF00FF)
     * @return {Array} Array containing R, G, B values
     */
    hexToRGB = function hexToRGB(h) {
        var rgb = [hexToRed(h), hexToGreen(h), hexToBlue(h)];
        return rgb;}, 


    /**
     * Generates a random number between 'from' and 'to'.
     *
     * @param {Number} Number representing the start of a range.
     * @param {Number} Number representing the end of a range.
     */
    randomFromInterval = function randomFromInterval(from /* Number */, to /* Number */) {
        return Math.floor(Math.random() * (to - from + 1) + from);}, 


    /**
     * Return a random Integer in the range of 0 to 255, representing an RGB
     * color value.
     *
     * @return {number} Integer between 0 and 255.
     */
    randomRGBValue = function randomRGBValue() {
        return randomFromInterval(0, 255);}, 


    /**
     * Returns the cross product of two XYPoints.
     *
     * @param {XYPoint} Point 1.
     * @param {XYPoint} Point 2.
     * @return {Number} Cross-product of the two XYPoints provided.
     */
    crossProduct = function crossProduct(p1, p2) {
        return p1.x * p2.y - p1.y * p2.x;}, 


    /**
     * Check if the provided XYPoint can be recreated by a Hue lamp.
     *
     * @param {XYPoint} XYPoint to check.
     * @return {boolean} Flag indicating if the point is within reproducible range.
     */
    checkPointInLampsReach = function checkPointInLampsReach(p) {
        var v1 = new XYPoint(Lime.x - Red.x, Lime.y - Red.y), 
        v2 = new XYPoint(Blue.x - Red.x, Blue.y - Red.y), 

        q = new XYPoint(p.x - Red.x, p.y - Red.y), 

        s = crossProduct(q, v2) / crossProduct(v1, v2), 
        t = crossProduct(v1, q) / crossProduct(v1, v2);

        return s >= 0.0 && t >= 0.0 && s + t <= 1.0;}, 


    /**
     * Find the closest point on a line. This point will be reproducible by a Hue lamp.
     *
     * @param {XYPoint} The point where the line starts.
     * @param {XYPoint} The point where the line ends.
     * @param {XYPoint} The point which is close to the line.
     * @return {XYPoint} A point that is on the line, and closest to the XYPoint provided.
     */
    getClosestPointToPoint = function getClosestPointToPoint(A, B, P) {
        var AP = new XYPoint(P.x - A.x, P.y - A.y), 
        AB = new XYPoint(B.x - A.x, B.y - A.y), 
        ab2 = AB.x * AB.x + AB.y * AB.y, 
        apab = AP.x * AB.x + AP.y * AB.y, 
        t = apab / ab2;

        if (t < 0.0) {
            t = 0.0;} else 
        if (t > 1.0) {
            t = 1.0;}


        return new XYPoint(A.x + AB.x * t, A.y + AB.y * t);}, 


    /**
     * Returns the distance between two XYPoints.
     *
     * @param {XYPoint} The first point.
     * @param {XYPoint} The second point.
     * @param {Number} The distance between points one and two.
     */
    getDistanceBetweenTwoPoints = function getDistanceBetweenTwoPoints(one, two) {
        var dx = one.x - two.x, // horizontal difference
        dy = one.y - two.y; // vertical difference

        return Math.sqrt(dx * dx + dy * dy);}, 


    /**
     * Returns an XYPoint object containing the closest available CIE 1931
     * coordinates based on the RGB input values.
     *
     * @param {Number} RGB red value, integer between 0 and 255.
     * @param {Number} RGB green value, integer between 0 and 255.
     * @param {Number} RGB blue value, integer between 0 and 255.
     * @return {XYPoint} CIE 1931 XY coordinates, corrected for reproducibility.
     */
    getXYPointFromRGB = function getXYPointFromRGB(red, green, blue) {

        var r = red > 0.04045 ? Math.pow((red + 0.055) / (1.0 + 0.055), 2.4) : red / 12.92, 
        g = green > 0.04045 ? Math.pow((green + 0.055) / (1.0 + 0.055), 2.4) : green / 12.92, 
        b = blue > 0.04045 ? Math.pow((blue + 0.055) / (1.0 + 0.055), 2.4) : blue / 12.92, 

        X = r * 0.4360747 + g * 0.3850649 + b * 0.0930804, 
        Y = r * 0.2225045 + g * 0.7168786 + b * 0.0406169, 
        Z = r * 0.0139322 + g * 0.0971045 + b * 0.7141733, 

        cx = X / (X + Y + Z), 
        cy = Y / (X + Y + Z);

        cx = isNaN(cx) ? 0.0 : cx;
        cy = isNaN(cy) ? 0.0 : cy;

        //Check if the given XY value is within the colourreach of our lamps.
        var xyPoint = new XYPoint(cx, cy), 
        inReachOfLamps = checkPointInLampsReach(xyPoint);

        if (!inReachOfLamps) {

            //Color is unreproducible, find the closest point on each line in the CIE 1931 'triangle'.
            var pAB = getClosestPointToPoint(Red, Lime, xyPoint), 
            pAC = getClosestPointToPoint(Blue, Red, xyPoint), 
            pBC = getClosestPointToPoint(Lime, Blue, xyPoint), 

            // Get the distances per point and see which point is closer to our Point.
            dAB = getDistanceBetweenTwoPoints(xyPoint, pAB), 
            dAC = getDistanceBetweenTwoPoints(xyPoint, pAC), 
            dBC = getDistanceBetweenTwoPoints(xyPoint, pBC), 

            lowest = dAB, 
            closestPoint = pAB;

            if (dAC < lowest) {
                lowest = dAC;
                closestPoint = pAC;}

            if (dBC < lowest) {
                lowest = dBC;
                closestPoint = pBC;}


            // Change the xy value to a value which is within the reach of the lamp.
            cx = closestPoint.x;
            cy = closestPoint.y;}


        return new XYPoint(cx, cy);};


    /**
     * Publicly accessible functions exposed as API.
     */
    return { 
        /**
         * Converts hexadecimal colors represented as a String to approximate
         * CIE 1931 coordinates. May not produce accurate values.
         *
         * @param {String} Value representing a hexadecimal color value
         * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
         */
        hexToCIE1931: function hexToCIE1931(h) {
            var rgb = hexToRGB(h);
            return this.rgbToCIE1931(rgb[0], rgb[1], rgb[2]);}, 


        /**
         * Converts red, green and blue integer values to approximate CIE 1931
         * x and y coordinates. Algorithm from: 
         * http://www.easyrgb.com/index.php?X=MATH&H=02#text2. May not produce
         * accurate values.
         *
         * @param {Number} red Integer in the 0-255 range.
         * @param {Number} green Integer in the 0-255 range.
         * @param {Number} blue Integer in the 0-255 range.
         * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
         */
        rgbToCIE1931: function rgbToCIE1931(red, green, blue) {
            var point = getXYPointFromRGB(red, green, blue);
            return [point.x, point.y];}, 


        /**
         * Returns the approximate CIE 1931 x,y coordinates represented by the 
         * supplied hexColor parameter, or of a random color if the parameter
         * is not passed.
         *
         * @param {String} hexColor String representing a hexidecimal color value.
         * @return {Array{Number}} Approximate CIE 1931 x,y coordinates.
         */
        getCIEColor: function getCIEColor(hexColor /* String */) {
            var hex = hexColor || null, 
            xy = [];
            if (null !== hex) {
                xy = this.hexToCIE1931(hex);} else 
            {
                var r = randomRGBValue(), 
                g = randomRGBValue(), 
                b = randomRGBValue();
                xy = this.rgbToCIE1931(r, g, b);}

            return xy;}, 

        hexFullRed: 'FF0000', 
        hexFullGreen: '00FF00', 
        hexFullBlue: '0000FF', 
        hexFullWhite: 'FFFFFF' };};



if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {
    define(colors);} else 
{
    window.colors = colors();}
//# sourceMappingURL=data:application/json;base64,

/*exported Palettes */
'use strict'

// fill solid palette
;var Palettes = { 
    'Empty': [], 

    'Kelvin degrees': [
    { name: 'Candle', color: '#FF9329' }, 
    { name: '40W Tungsten', color: '#FFC58F' }, 
    { name: '100W Tungsten', color: '#FFD6AA' }, 
    { name: 'Halogen', color: '#FFF1E0' }, 
    { name: 'Carbon Arc', color: '#FFFAF4' }, 
    { name: 'High Noon Sun', color: '#FFFFFB' }, 
    { name: 'Direct Sunlight', color: '#FFFFFF' }, 
    { name: 'Overcast Sky', color: '#C9E2FF' }, 
    { name: 'Clear Blue Sky', color: '#409CFF' }], 

    'Fluorescents': [
    { name: 'Warm Fluorescent', color: '#FFF4E5' }, 
    { name: 'Standard Fluorescent', color: '#F4FFFA' }, 
    { name: 'Cool White Fluorescent', color: '#D4EBFF' }, 
    { name: 'Full Spectrum Fluorescent', color: '#FFF4F2' }, 
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' }, 
    { name: 'Pink Fluorescent', color: '#ffc0cb' }], 

    'Valentines': [
    { name: 'February 14', color: '#820081' }, 
    { name: 'Feelings', color: '#FE59C2' }, 
    { name: 'Joy', color: '#FE40B9' }, 
    { name: 'Hearts', color: '#FE1CAC' }, 
    { name: 'Attitude', color: '#390039' }, 
    { name: 'Pink Fluorescent', color: '#ffc0cb' }], 

    'Rainbow': [
    '#3400E5', 
    '#7200E2', 
    '#AD00DF', 
    '#DD00D2', 
    '#DA0094', 
    '#D80058', 
    '#D5001C', 
    '#D31C00', 
    '#D05500', 
    '#CE8C00', 
    '#CBC200', 
    '#9BC900', 
    '#63C600', 
    '#2DC400', 
    '#00C108', 
    '#00BF3C'], 

    'RomanticRed': [
    // '#4c0000',
    // '#660000',
    // '#7f0000',
    // '#990000',
    // '#b20000',
    // '#cc0000',
    // '#e50000',
    '#ff0000', 
    '#ff1919', 
    '#ff3232', 
    '#ff4c4c', 
    '#ff6666', 
    '#ff7f7f', 
    '#ff9999', 
    '#ffb2b2'
    // '#ffcccc',
    // '#ffe5e5',
    // '#ffffff'
    ], 
    'Sunrise': [
    '#FF8E74', 
    '#FFB376', 
    '#FFDF80', 
    '#FFFA90', 
    '#CBF2FF'], 

    'Thanksgiving': [
    '#FFC300', 
    '#FF6200', 
    '#FF0000', 
    '#CD0500', 
    '#690F00'], 

    'TurkeyFeast': [
    '#DE7600', 
    '#BF7117', 
    '#965811', 
    '#9E4A0E', 
    '#663715'], 

    'TurkeyDinner': [
    { name: 'Salad', color: '#456905' }, 
    { name: 'Tabasco', color: '#B2A509' }, 
    { name: 'Turkey Girll', color: '#E0E610' }, 
    { name: 'Salmon', color: '#FE6823' }, 
    { name: 'Grow Light Fluorescent', color: '#FFEFF7' }, 
    { name: 'Catch a turkey', color: '#AA5B00' }], 

    'Police': [
    '#0000FF', 
    '#FF0000', 
    '#0000FF', 
    '#0000FF', 
    '#FF0000'], 

    'Christmas': [
    '#FF3333', 
    '#FFFFFF', 
    '#FFFE99', 
    '#33FF33'], 

    'NewYears': [
    '#5B1D99', 
    '#0074B4', 
    '#00B34C', 
    '#FFD41F', 
    '#FC6E3D'], 

    'Broadway': [
    '#FFFFFF', 
    '#FFFE99', 
    '#FFFFFF', 
    '#FFFE99', 
    '#FFFFFF', 
    '#FFFE99', 
    '#FFFFFF', 
    '#FFFE99'], 

    'America': [
    { name: 'White', color: '#FFFFFF' }, 
    { name: 'Old Glory Red', color: '#B22234' }, 
    { name: 'Old Glory Blue', color: '#404BC1' }], 

    'Lightning': [
    { name: 'Lightning', color: '#E5F8FF' }, 
    { name: 'Dark night', color: '#050AF9' }, 
    { name: 'Dark night', color: '#070A8E' }, 
    { name: 'Dark night', color: '#0A0EC8' }, 
    { name: 'Dark night', color: '#0A0DAE' }, 
    { name: 'Dark night', color: '#2125D2' }] };
//# sourceMappingURL=data:application/json;base64,

//var Timer = {};
'use strict'
/*exported Sequence */;
var Sequence = { 
	All: function All(time) {
		return true;}, 

	Sequence: function Sequence(timer) {}, 


	Random: function Random(time) {} };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcXVlbmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtzQkFBWSxDQUFDO0FBRWIsSUFBSSxRQUFRLEdBQUc7QUFDZCxJQUFHLEVBQUUsYUFBUyxJQUFJLEVBQUU7QUFDbkIsU0FBTyxJQUFJLENBQUMsQ0FDWjs7QUFDRCxTQUFRLEVBQUUsa0JBQVMsS0FBSyxFQUFDLEVBRXhCOzs7QUFDRCxPQUFNLEVBQUUsZ0JBQVMsSUFBSSxFQUFFLEVBRXRCLEVBQ0QsQ0FBQyIsImZpbGUiOiJzZXF1ZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vdmFyIFRpbWVyID0ge307XHJcbid1c2Ugc3RyaWN0JztcclxuLypleHBvcnRlZCBTZXF1ZW5jZSAqL1xyXG52YXIgU2VxdWVuY2UgPSB7XHJcblx0QWxsOiBmdW5jdGlvbih0aW1lKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cdFNlcXVlbmNlOiBmdW5jdGlvbih0aW1lcil7XHJcblx0XHRcclxuXHR9LCBcclxuXHRSYW5kb206IGZ1bmN0aW9uKHRpbWUpIHtcclxuXHJcblx0fVxyXG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

/*
  Ambient Class  
  (c) 2014, Dmitry Sadakov, all rights reserved
*/

'use strict'
/*globals ColorThief, chrome, colorUtil*/
/*exported Ambient*/;


var Ambient = (function () {

	var dominantColors = [], 
	updateHandlers = [], 
	publicMethods = {}, 
	lastUpdate = null;

	// fields
	publicMethods.on = false;
	publicMethods.updateImage = false;
	publicMethods.changeBrightness = false;
	publicMethods.enablePrimary = false;
	publicMethods.mode = 'eye-ambient';

	function parseBrightness(color) {
		var helper = colorUtil();
		if (publicMethods.changeBrightness) {
			return helper.getBrightness(color);} else 
		{
			return undefined;}}



	function onImageUpdated(image) {
		if (image === undefined) {
			return;}

		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			chrome.runtime.lastError = null;} else 
		{
			var img = new Image();
			img.src = image;
			img.onload = function () {
				// get main colors
				var colorThief = new ColorThief();
				if (img && img.width == 0) {
					return; // this is an error
				}
				var colors = colorThief.getPalette(img, 8);
				if (!colors) {
					return;}


				lastUpdate = new Date();

				dominantColors = [];
				var helper = colorUtil();

				if (publicMethods.enablePrimary) {
					var primary = helper.rgbToHex(
					colors[0][0], 
					colors[0][1], 
					colors[0][2]);

					var bri = parseBrightness(primary);

					// thrice for ui.
					var color = { color: primary, bri: bri };
					dominantColors.push(color);
					dominantColors.push(color);
					dominantColors.push(color);} else 

				{
					colors.forEach(function (color) {
						var hex = helper.rgbToHex(
						color[0], 
						color[1], 
						color[2]);

						var b = parseBrightness(hex);
						dominantColors.push({ color: hex, bri: b });});}};




			updateHandlers.forEach(function (handler) {
				handler(dominantColors, image);});}



		// do it again
		setTimeout(retryRequestImage, getDelay() * 500);}


	function retryRequestImage() {
		if (publicMethods.on || publicMethods.updateImage) {
			try {
				requestImage();} 
			catch (e) {
				setTimeout(retryRequestImage, 1000);
				console.log(e);}}}




	function requestImage() {
		if (chrome.runtime.lastError) {
			console.log(chrome.runtime.lastError.message);
			return;}

		if (typeof chrome !== 'undefined' && 
		chrome.tabs !== undefined && 
		chrome.tabs.captureVisibleTab !== undefined) {
			chrome.tabs.captureVisibleTab({ quality: 1 }, onImageUpdated);
			return true;}

		return false;}


	function getDelay() {
		switch (publicMethods.mode) {
			case 'eye-ambient':
				return 10;
			case 'eye-work':
				return 5;
			case 'eye-movie':
				return 1;
			case 'eye-gaming':
				return 0;
			default:
				return 1;}}



	publicMethods.definedBrightness = function () {
		if (publicMethods.changeBrightness === false) {
			return 255; // always bright
		}
		return undefined;};

	publicMethods.run = function () {
		return requestImage();};

	publicMethods.onUpdate = function (func) {
		updateHandlers = []; // clear for now, memory might go unused on multi-timed open popup
		updateHandlers.push(func);};

	// in seconds
	publicMethods.getDelay = function () {
		return getDelay();};

	publicMethods.getDominantColors = function (colorCount) {
		if (new Date() - lastUpdate > getDelay() * 1000) {// if more than delay
			retryRequestImage();}

		return dominantColors;};


	return publicMethods;})();
//# sourceMappingURL=data:application/json;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals $:false, Palettes:false, Ambient */
/*exported scenes */

'use strict';

var scenes = { 
    'RelaxedRandom': { 
        interval: 2000, 
        Palette: Palettes.RomanticRed, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'Romantic Red': { 
        interval: 2000, 
        Palette: Palettes.RomanticRed, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'Valentines': { 
        interval: 2000, 
        Palette: Palettes.Valentines, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'Christmas': { 
        interval: 5000, 
        Palette: Palettes.Christmas, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette, 5);}, 

        index: 0 }, 

    'New Years Fireworks': { 
        interval: 500, 
        Palette: Palettes.NewYears, 
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);}, 

        index: 0 }, 

    '4th of July': { 
        interval: 500, 
        Palette: Palettes.America, 
        update: function update(lampIds) {
            return scenes.fireworks(lampIds, this.Palette);}, 

        index: 0 }, 

    'Broadway': { 
        interval: 500, 
        Palette: Palettes.Broadway, 
        update: function update(lampIds) {
            scenes.Broadway.index++;
            if (scenes.Broadway.index >= lampIds.length) {
                scenes.Broadway.index = 0;}

            return scenes.one(lampIds, this.Palette, scenes.Broadway.index, 0);}, 

        index: 0 }, 

    'Police': { 
        interval: 200, 
        Palette: Palettes.Police, 
        update: function update(lampIds) {
            scenes.Police.index++;
            if (scenes.Police.index >= this.Palette.length) {
                scenes.Police.index = 0;}

            return scenes.cycle(lampIds, this.Palette, scenes.Police.index, 0);}, 

        index: 0 }, 

    'Sunrise': { 
        interval: 5000, 
        Palette: Palettes.Sunrise, 
        update: function update(lampIds) {
            scenes.Sunrise.index++;
            if (scenes.Sunrise.index >= this.Palette.length) {
                scenes.Sunrise.index = 0;}

            return scenes.cycle(lampIds, this.Palette, scenes.Sunrise.index, 5);}, 

        index: 0 }, 

    'Disco': { 
        interval: 200, 
        Palette: Palettes.Rainbow, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'Thanksgiving': { 
        interval: 2000, 
        Palette: Palettes.Thanksgiving, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'TurkeyFeast': { 
        interval: 5000, 
        Palette: Palettes.TurkeyFeast, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'TurkeyDinner': { 
        interval: 1000, 
        Palette: Palettes.TurkeyDinner, 
        update: function update(lampIds) {
            return scenes.randomPallete(lampIds, this.Palette);} }, 


    'Lightning': { 
        interval: 500, 
        Palette: Palettes.Lightning, 
        update: function update(lampIds) {
            return scenes.lightning(lampIds, this.Palette);} }, 


    'Ambient': { 
        interval: 1000, 
        Palette: Palettes.Empty, 
        update: function update(lampIds) {
            var lightStates = [];

            var dominantColors = Ambient.getDominantColors();
            $.each(lampIds, function (index, val) {
                while (dominantColors.length <= index) {
                    index -= dominantColors.length;}

                var c = dominantColors[index];
                lightStates.push({ 
                    lamp: val, 
                    color: c.color, 
                    bri: c.bri, 
                    transitionTime: Ambient.getDelay() * 10 });});

            return lightStates;} }, 


    makeArray: function makeArray(lampIds) {
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];}

        return lampIds;}, 

    one: function one(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;}

        var lightStates = [];
        $.each(lampIds, function (index, val) {
            if (index === cycleIndex) {
                lightStates.push({ lamp: val, color: palette[1], transitionTime: transitionTime * 10 });} else 
            {
                lightStates.push({ lamp: val, color: palette[0], transitionTime: transitionTime * 10 });}});



        return lightStates;}, 

    chain: function chain(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var chain = cycleIndex;
        if (transitionTime === undefined) {
            transitionTime = 2;}

        $.each(lampIds, function (index, val) {
            chain++;
            if (palette.length <= chain) {
                chain = 0; // need to circle back if length larger
            }
            var co = palette[chain];
            lightStates.push({ lamp: val, color: co, transitionTime: transitionTime * 10 });});


        return lightStates;}, 

    cycle: function cycle(lampIds, palette, cycleIndex, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        var lightStates = [];
        var color = palette[cycleIndex];
        if (transitionTime === undefined) {
            transitionTime = 2;}

        $.each(lampIds, function (index, val) {
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });});


        return lightStates;}, 

    randomPallete: function randomPallete(lampIds, palette, transitionTime) {
        lampIds = scenes.makeArray(lampIds);
        if (transitionTime === undefined) {
            transitionTime = 2;}

        var lightStates = [];
        $.each(lampIds, function (index, val) {
            var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
            lightStates.push({ lamp: val, color: color, transitionTime: transitionTime * 10 });});


        return lightStates;}, 

    findScene: function findScene(name) {
        for (var key in scenes) {
            if (key.toLowerCase() === name.toLowerCase()) {
                return key;}}


        return null;}, 

    fireworks: function fireworks(lampIds, palette) {
        var lightStates = [];

        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            if (Math.random() > 0.6) {
                var color = palette[Math.round(Math.random() * (palette.length - 1))]; // random
                lightStates.push({ lamp: val, color: color, bri: 255, transitionTime: 0 });} else 
            {
                var random = Math.floor(Math.random() * (15 - 6 + 1) + 6);
                lightStates.push({ lamp: val, bri: -255, transitionTime: random });}}


        return lightStates;}, 

    lightning: function lightning(lampIds, palette) {
        var lightStates = [];

        var isLightning = Math.random() < 0.1;
        for (var index = 0; index < lampIds.length; index++) {
            var val = lampIds[index];

            var color = palette[Math.round(Math.random() * (palette.length - 2)) + 1]; // random after the first
            if (isLightning) {
                var bri = Math.round(Math.random() * 100) + 155;
                lightStates.push({ lamp: val, color: color, bri: bri, transitionTime: 0 });} else 
            {
                lightStates.push({ lamp: val, color: color, bri: -255, transitionTime: 3 });}}



        return lightStates;} };
//# sourceMappingURL=data:application/json;base64,

/**
 * Scene Commander
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals scenes */
/*exported sceneCommander */

'use strict';

var sceneCommander = function sceneCommander($, hue) {
    var logger = null, 
    scene = null, 
    sceneTimer = null, 
    sceneStart = function sceneStart(sceneName, lampIds) 
    {
        sceneStop();
        log('Starting scene ' + sceneName);
        var sceneKey = scenes.findScene(sceneName);
        if (sceneKey === null) {
            // might be programmed into the bridge already:
            var state = hue.getState();
            if (state.scenes[sceneName] !== undefined) {
                hue.startScene(sceneName);}} else 

        {
            scene = scenes[sceneKey];
            if (scene.interval === 0) {
                // one time hit
                setTimeout(sceneUpdate, 10);} else 

            {
                // counter
                sceneTimer = setInterval(function intervaledSceneUpdate() {
                    sceneUpdate(lampIds);}, 
                Math.round(scene.interval * lampIds.length / 3));
                sceneUpdate(lampIds); // start now.
            }}}, 


    sceneStop = function sceneStop() {
        log('Stop scenes');
        clearInterval(sceneTimer);
        scene = null;}, 


    sceneUpdate = function sceneUpdate(lampIds) {
        log('Updating scenes');
        if (scene === null) {
            clearInterval(sceneTimer);} else 
        {
            var lightStates = scene.update(lampIds);
            $(lightStates).each(function setSceneState(index, state) {
                var time = state.transitionTime;
                if (state.color !== undefined) {
                    var co = state.color.color !== undefined ? state.color.color : state.color;
                    log('setting color: ' + state.lamp + ' = ' + co);
                    hue.setColor(state.lamp, co.substring(1), time, state.bri);} else 
                if (state.bri !== undefined) {
                    hue.brighten(state.lamp, state.bri, time);}});}}, 




    log = function log(text) {
        if (logger !== null) {
            logger(text);}};




    return { 
        executing: function executing() {
            return scene; // null if none
        }, 
        sceneExists: function sceneExists(sceneName) {
            return scenes[sceneName] !== undefined;}, 

        start: function start(sceneName, actors) {
            sceneStart(sceneName, actors);}, 

        stop: function stop() {
            sceneStop();}, 

        palette: function palette(colors) {
            scenes.RelaxedRandom.Palette = colors;}, 

        setLogger: function setLogger(logHandler) {
            logger = logHandler;} };};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjZW5lQ29tbWFuZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxjQUFjLEdBQUcsU0FBakIsY0FBYyxDQUFhLENBQUMsRUFBRSxHQUFHLEVBQUU7QUFDbkMsUUFBSSxNQUFNLEdBQUcsSUFBSTtBQUNiLFNBQUssR0FBRyxJQUFJO0FBQ1osY0FBVSxHQUFHLElBQUk7QUFDakIsY0FBVSxHQUFHLFNBQWIsVUFBVSxDQUFZLFNBQVMsRUFBRSxPQUFPO0FBQ3hDO0FBQ0MsaUJBQVMsRUFBRSxDQUFDO0FBQ1QsV0FBRyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLFlBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0MsWUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFOztBQUVuQixnQkFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzNCLGdCQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3ZDLG1CQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQzdCLENBQ0o7O0FBQU07QUFDSCxpQkFBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QixnQkFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTs7QUFFekIsMEJBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FDNUI7O0FBQ0k7O0FBRUosMEJBQVUsR0FBRyxXQUFXLENBQUMsU0FBUyxxQkFBcUIsR0FBRztBQUNuRCwrQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQ3hCO0FBQUUsb0JBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEQsMkJBQVcsQ0FBQyxPQUFPLENBQUM7QUFBQyxhQUMzQixDQUNELENBQ0o7OztBQUNELGFBQVMsR0FBRyxTQUFaLFNBQVMsR0FBYTtBQUNsQixXQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbkIscUJBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixhQUFLLEdBQUcsSUFBSSxDQUFDLENBQ2hCOzs7QUFFRCxlQUFXLEdBQUcsU0FBZCxXQUFXLENBQVksT0FBTyxFQUFDO0FBQzNCLFdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZCLFlBQUcsS0FBSyxLQUFLLElBQUksRUFBRTtBQUNmLHlCQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FDN0I7QUFBTTtBQUNILGdCQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLGFBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNyRCxvQkFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztBQUNoQyxvQkFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtBQUM5Qix3QkFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDeEUsdUJBQUcsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNqRCx1QkFBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUM5RDtBQUFNLG9CQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFO0FBQ2hDLHVCQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUM3QyxDQUNKLENBQUMsQ0FBQyxDQUNOLENBQ0o7Ozs7O0FBQ0QsT0FBRyxHQUFHLFNBQU4sR0FBRyxDQUFhLElBQUksRUFBQztBQUNqQixZQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7QUFDakIsa0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNoQixDQUNKLENBQUM7Ozs7O0FBR04sV0FBTztBQUNOLGlCQUFTLEVBQUUscUJBQVU7QUFDcEIsbUJBQU8sS0FBSztBQUFDLFNBQ2I7QUFDRSxtQkFBVyxFQUFFLHFCQUFTLFNBQVMsRUFBRTtBQUN0QyxtQkFBTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQ2pDOztBQUNELGFBQUssRUFBRSxlQUFTLFNBQVMsRUFBRSxNQUFNLEVBQUU7QUFDeEMsc0JBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FDeEI7O0FBQ0QsWUFBSSxFQUFFLGdCQUFXO0FBQ3RCLHFCQUFTLEVBQUUsQ0FBQyxDQUNOOztBQUNELGVBQU8sRUFBRSxpQkFBUyxNQUFNLEVBQUU7QUFDdEIsa0JBQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUN6Qzs7QUFDRCxpQkFBUyxFQUFFLG1CQUFTLFVBQVUsRUFBRTtBQUM1QixrQkFBTSxHQUFHLFVBQVUsQ0FBQyxDQUN2QixFQUNKLENBQUMsQ0FDTCxDQUFDIiwiZmlsZSI6InNjZW5lQ29tbWFuZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFNjZW5lIENvbW1hbmRlclxyXG4gKiBEZXBlbmRlbmNpZXM6XHJcbiAqICAgIC0galF1ZXJ5IDEuOC4zXHJcbiAqICAgIC0gY29sb3JzLmpzIChwYWNrYWdlZCBhbG9uZ3NpZGUgdGhpcyBmaWxlKVxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRG1pdHJ5IFNhZGFrb3YsIEFsbCByaWdodHMgcmVzZXJ2ZWQuICovXHJcblxyXG4vKmdsb2JhbHMgc2NlbmVzICovXHJcbi8qZXhwb3J0ZWQgc2NlbmVDb21tYW5kZXIgKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBzY2VuZUNvbW1hbmRlciA9IGZ1bmN0aW9uICgkLCBodWUpIHsgXHJcbiAgICB2YXIgbG9nZ2VyID0gbnVsbCxcclxuICAgICAgICBzY2VuZSA9IG51bGwsXHJcbiAgICAgICAgc2NlbmVUaW1lciA9IG51bGwsXHJcbiAgICAgICAgc2NlbmVTdGFydCA9IGZ1bmN0aW9uKHNjZW5lTmFtZSwgbGFtcElkcykgXHJcbiAgICAgICAge1xyXG4gICAgICAgIFx0c2NlbmVTdG9wKCk7IFxyXG4gICAgICAgICAgICBsb2coJ1N0YXJ0aW5nIHNjZW5lICcgKyBzY2VuZU5hbWUpO1xyXG4gICAgICAgICAgICB2YXIgc2NlbmVLZXkgPSBzY2VuZXMuZmluZFNjZW5lKHNjZW5lTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChzY2VuZUtleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbWlnaHQgYmUgcHJvZ3JhbW1lZCBpbnRvIHRoZSBicmlkZ2UgYWxyZWFkeTpcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGh1ZS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNjZW5lc1tzY2VuZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBodWUuc3RhcnRTY2VuZShzY2VuZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUgPSBzY2VuZXNbc2NlbmVLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lLmludGVydmFsID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBcdC8vIG9uZSB0aW1lIGhpdFxyXG4gICAgICAgICAgICAgICAgXHRzZXRUaW1lb3V0KHNjZW5lVXBkYXRlLCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFx0Ly8gY291bnRlclxyXG4gICAgXHQgICAgICAgICAgICBzY2VuZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gaW50ZXJ2YWxlZFNjZW5lVXBkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2VuZVVwZGF0ZShsYW1wSWRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBNYXRoLnJvdW5kKHNjZW5lLmludGVydmFsICogbGFtcElkcy5sZW5ndGggLyAzKSk7IFxyXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lVXBkYXRlKGxhbXBJZHMpOyAvLyBzdGFydCBub3cuXHJcbiAgICBcdCAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzY2VuZVN0b3AgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBsb2coJ1N0b3Agc2NlbmVzJyk7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2NlbmVUaW1lcik7XHJcbiAgICAgICAgICAgIHNjZW5lID0gbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzY2VuZVVwZGF0ZSA9IGZ1bmN0aW9uKGxhbXBJZHMpe1xyXG4gICAgICAgICAgICBsb2coJ1VwZGF0aW5nIHNjZW5lcycpO1xyXG4gICAgICAgICAgICBpZihzY2VuZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzY2VuZVRpbWVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaWdodFN0YXRlcyA9IHNjZW5lLnVwZGF0ZShsYW1wSWRzKTtcclxuICAgICAgICAgICAgICAgICQobGlnaHRTdGF0ZXMpLmVhY2goZnVuY3Rpb24gc2V0U2NlbmVTdGF0ZShpbmRleCwgc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZSA9IHN0YXRlLnRyYW5zaXRpb25UaW1lOyBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY29sb3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFx0dmFyIGNvID0gc3RhdGUuY29sb3IuY29sb3IgIT09IHVuZGVmaW5lZCA/IHN0YXRlLmNvbG9yLmNvbG9yIDogc3RhdGUuY29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZygnc2V0dGluZyBjb2xvcjogJyArIHN0YXRlLmxhbXAgKyAnID0gJyArIGNvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHVlLnNldENvbG9yKHN0YXRlLmxhbXAsIGNvLnN1YnN0cmluZygxKSwgdGltZSwgc3RhdGUuYnJpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmJyaSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh1ZS5icmlnaHRlbihzdGF0ZS5sYW1wLCBzdGF0ZS5icmksIHRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2cgPSBmdW5jdGlvbiAodGV4dCl7XHJcbiAgICAgICAgICAgIGlmIChsb2dnZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlcih0ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiBcclxuICAgIHJldHVybiB7XHJcbiAgICBcdGV4ZWN1dGluZzogZnVuY3Rpb24oKXtcclxuICAgIFx0XHRyZXR1cm4gc2NlbmU7IC8vIG51bGwgaWYgbm9uZVxyXG4gICAgXHR9LFxyXG4gICAgICAgIHNjZW5lRXhpc3RzOiBmdW5jdGlvbihzY2VuZU5hbWUpIHtcclxuXHRcdFx0cmV0dXJuIHNjZW5lc1tzY2VuZU5hbWVdICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oc2NlbmVOYW1lLCBhY3RvcnMpIHtcclxuXHRcdFx0c2NlbmVTdGFydChzY2VuZU5hbWUsIGFjdG9ycyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0c2NlbmVTdG9wKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYWxldHRlOiBmdW5jdGlvbihjb2xvcnMpIHtcclxuICAgICAgICAgICAgc2NlbmVzLlJlbGF4ZWRSYW5kb20uUGFsZXR0ZSA9IGNvbG9ycztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldExvZ2dlcjogZnVuY3Rpb24obG9nSGFuZGxlcikge1xyXG4gICAgICAgICAgICBsb2dnZXIgPSBsb2dIYW5kbGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

/**
 * Copyright (c) 2015 Dmitry Sadakov; All rights reserve
*/

'use strict'

/*globals trackState,AjaxLite */
/*exported HueDiscoverer */;var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var 

MeetHueLookup = (function () {
    function MeetHueLookup(AjaxLite) {_classCallCheck(this, MeetHueLookup);
        this.AjaxLite = AjaxLite;}_createClass(MeetHueLookup, [{ key: 'discover', value: function discover() 

        {var _this = this;
            return new Promise(function (resolveCallback, reject) {
                console.log('Requesting meethue.com/api/nupnp.');
                var nupnp = 'https://www.meethue.com/api/nupnp';
                _this.AjaxLite.ajax({ 
                    url: nupnp, 
                    dataType: 'json', 
                    success: function success(data) {
                        trackState('nunpnp', data);
                        if (data !== null && data.length > 0) {
                            var ips = [];
                            data.forEach(function (bridgeInfo, index) {
                                var bridgeIP = bridgeInfo.internalipaddress;
                                if (bridgeIP !== '0.0.0.0') {
                                    ips.push(bridgeIP);}});


                            resolveCallback(ips);} else 
                        {
                            console.log('meethue portal did not return');
                            reject([]);}}, 


                    error: function error(err) {
                        reject(err);} });});} }]);return MeetHueLookup;})();var 






BruteForcer = (function () {function BruteForcer() {_classCallCheck(this, BruteForcer);}_createClass(BruteForcer, null, [{ key: 'ips', value: function ips() 
        {
            var ips = [];
            var i = 0;
            for (i = 1; i < 8; i++) {ips.push('10.0.1.' + i);} // mac: 10.0.1.1-20
            for (i = 1; i < 8; i++) {ips.push('192.168.0.' + i);} // win: 192.168.0.1-20
            for (i = 0; i < 8; i++) {ips.push('192.168.0.' + (100 + i));} // win: 192.168.1.100-120
            for (i = 1; i < 8; i++) {ips.push('192.168.1.' + i);} // win: 192.168.1.1-20

            return ips;} }]);return BruteForcer;})();var 



HueBridge = (function () {_createClass(HueBridge, [{ key: 'status', value: function status() 

        {
            return this.status;} }]);


    function HueBridge($, storage, bridgeIP, appName, lastUsername, onNeedAuthorization, onAuthorized, onError, retryCount) {_classCallCheck(this, HueBridge);
        // todo: remove storage from HueBridge
        this.$ = $;

        // defaults
        if (!lastUsername) {
            lastUsername = '123-bogus';}

        this.ip = bridgeIP;
        this.appname = appName;
        this.username = lastUsername;

        this.baseUrl = 'http://' + this.ip + '/api';
        this.baseApiUrl = this.baseUrl + '/' + this.username;
        this.status = 'init'; // found, notauthorized, ready, error

        this.timeoutAuthCounter = 0;
        this.retryCount = retryCount || 0;

        this.onNeedAuthorization = onNeedAuthorization;
        this.onAuthorized = onAuthorized;
        this.onError = onError;}_createClass(HueBridge, [{ key: 'log', value: function log(



        text) {
            var message = 'hueBridge (' + this.ip + '): ' + text;
            console.log(message);} }, { key: 'getLightState', value: function getLightState(

        successCallback) {var _this2 = this;
            try {
                var options = { 
                    dataType: 'json', 
                    url: this.baseApiUrl + '/lights', 
                    success: function success(data) {
                        _this2.timeoutAuthCounter = 0;
                        _this2.onGotLightState(data, successCallback);}, 

                    error: function error(data) {return _this2.onAuthError(data);}, 
                    timeout: 2000 };

                this.$.ajax(options);} 
            catch (err) {
                this.onAuthError(err);}} }, { key: 'getBridgeState', value: function getBridgeState(


        successCallback) {var _this3 = this;
            try {
                var options = { 
                    dataType: 'json', 
                    url: this.baseApiUrl, 
                    success: function success(data) {return _this3.onGotBridgeState(data, successCallback);}, // lighter bag of data
                    error: function error(data) {return _this3.onAuthError(data);}, 
                    timeout: 5000 };

                this.$.ajax(options);} 
            catch (err) {
                this.onAuthError(err);}} }, { key: 'onAuthError', value: function onAuthError(


        err) {
            if (err.statusText === 'timeout' || err.status === 0) {
                this.timeoutAuthCounter++;
                this.log('Bridge error timeout: ' + this.ip);
                if (this.timeoutAuthCounter >= this.retryCount) {
                    this.timeoutAuthCounter = 0;
                    if (this.retryCount !== 0) {
                        this.log('too many timeouts with IP ' + this.baseUrl);}

                    this.onError(this.ip, 'Timeout', 'Too many timeouts on: ' + this.baseUrl);} else 
                {
                    this.log('timeout on auth: ' + err.statusText + ' retry #' + this.timeoutAuthCounter);
                    this.getBridgeState(); // retry
                }} else 
                {//if (err.statusText !== 'error') {
                    this.log('error on auth: ' + err.statusText);
                    this.status = 'error';
                    this.onError(this.ip, 'Error', 'Unknown error: ' + err.statusText);}
            // what now?
        } }, { key: 'onGotLightState', value: function onGotLightState(
        data, successCallback) {
            if (data.hasOwnProperty('1') && 
            data['1'].hasOwnProperty('manufacturername')) {
                // indeed a light response.
                data = { 'lights': data };}

            this.onGotBridgeState(data, successCallback);} }, { key: 'onGotBridgeState', value: function onGotBridgeState(

        data, successCallback) {
            if (Array.isArray(data)) {
                data = data[0]; // take first
            }
            this.timeoutAuthCounter = 0;
            if (data.hasOwnProperty('error')) 
            {
                if (data.error.description === 'unauthorized user') {
                    this.log('Not authorized with bridge ' + this.ip + ', registering...');
                    this.retryCounter++;
                    this.status = 'found';
                    // bridgeAuth
                    this.addUser();} else 
                {
                    this.status = 'error';
                    this.onError(this.ip, 'Error', 'Error: ' + data.error.description);}} else 


            if (data.hasOwnProperty('lights')) 
            {
                this.status = 'ready';
                this.log('Bridge ready ' + this.ip);
                this.retryCounter = 0;
                (successCallback || this.onAuthorized)(this, this.ip, this.username, 'Ready', data);}} }, { key: 'addUser', value: function addUser() 


        {var _this4 = this;
            this.log('adding user...');
            var dataString = JSON.stringify({ devicetype: this.appname }); // no username - bridge generates it
            this.log(dataString);
            this.$.ajax({ 
                url: this.baseUrl, 
                type: 'POST', 
                data: dataString, 
                success: function success(data) {return _this4.onAddUserResponse(data);}, 
                error: function error(data) {return _this4.unauthorized();} });} }, { key: 'onAddUserResponse', value: function onAddUserResponse(


        response) {
            this.log(JSON.stringify(response));
            if (response[0].hasOwnProperty('error')) 
            {
                this.unauthorized(response);} else 

            if (response[0].hasOwnProperty('success')) 
            {
                this.username = response[0].success.username;
                this.baseApiUrl = this.baseUrl + '/' + this.username;
                this.status = 'ready';
                this.log('Authorization successful');
                // request success message from actual bridge:
                this.getBridgeState();}} }, { key: 'unauthorized', value: function unauthorized(


        response) {
            if (!response) {
                this.onError(this.ip, 'Error', 'Request cancelled');} else 

            if (response[0].error.description === 'link button not pressed') {
                this.status = 'needauthorization';
                this.onNeedAuthorization(this.ip, this.username, 'NeedAuthorization', response); // changed signature
                this.onError(this.ip, 'Error', 'Need authentication: ' + response[0].error.description);} else 
            {
                this.status = 'error';
                this.onError(this.ip, 'Error', 'Error: ' + response[0].error.description);}} }, { key: 'ip', value: function ip() 


        {
            return this.ip;} }, { key: 'username', value: function username() 

        {
            return this.username;} }, { key: 'getStatus', value: function getStatus() 

        {
            return this.status;} }]);return HueBridge;})();var 





HueDiscoverer = (function () {
    function HueDiscoverer(AjaxLite, storage, appname, onNeedAuthorization) {_classCallCheck(this, HueDiscoverer);
        this.AjaxLite = AjaxLite;
        this.storage = storage;
        this.appname = appname;
        this.onNeedAuthorization = onNeedAuthorization;
        this.self = this;}_createClass(HueDiscoverer, [{ key: 'bridgeThenable', value: function bridgeThenable(

        ip) {var _this5 = this;
            var bridgeThenable = new Promise(function (resolve, reject) {
                if (!ip) {
                    reject(ip);
                    return;}


                var bridge = null;

                function onResolve(ip, status, message) {
                    resolve(bridge, ip, status, message);}

                function onReject(ip, status, message) {
                    reject(bridge, ip, status, message);}


                bridge = new HueBridge(_this5.AjaxLite, _this5.storage, ip, _this5.appname, _this5.username, 
                _this5.onNeedAuthorization, 
                function (ip, status, message) {return onResolve(bridge, status, message);}, 
                function (ip, status, message) {return onReject(bridge, status, message);});
                bridge.getLightState();});

            return bridgeThenable;} }, { key: 'start', value: function start(

        ip) {var _this6 = this;var brute = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
            function getIP() {
                return this.storage.get('lastBridgeIp');}

            function getUsername() {
                return this.storage.get('lastUsername');}

            function saveIP(ip) {
                this.ip = ip;}

            return new Promise(function (resolve, reject) {

                var promise = _this6.self.storage.get('lastBridgeIp').
                then(function (ip) {
                    _this6.self.ip = ip;
                    return _this6.self.storage.get('lastUsername');}).

                then(function (val) {return _this6.self.username = val;}).
                then(function () {
                    var promises = [];
                    if (ip) {
                        promises.push(_this6.self.bridgeThenable(ip)); // from arguments
                    }
                    if (_this6.self.ip) {
                        promises.push(_this6.self.bridgeThenable(_this6.self.ip)); // from storage
                    }
                    return promises.length != 0 ? Promise.any(promises) : Promise.reject();}).

                catch(function () {
                    var promises = [];
                    var meethuePromise = new Promise(function (resolve, reject) {
                        return new MeetHueLookup(_this6.self.AjaxLite).discover().then(function (ips) {
                            var bridges = [];var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
                                for (var _iterator = ips[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var i = _step.value;
                                    bridges.push(_this6.self.bridgeThenable(i));}} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}

                            Promise.any(bridges).then(function (bridges) {return resolve(bridges[0]);}, function () {return reject();});}, 
                        function () {return reject();});});

                    promises.push(meethuePromise);

                    if (brute === true) {
                        var ips = BruteForcer.ips();var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {
                            for (var _iterator2 = ips[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var i = _step2.value;
                                if (i !== _this6.self.ip && i !== ip) {
                                    promises.push(_this6.self.bridgeThenable(i)); // 84 requests
                                }}} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}}


                    return Promise.any(promises);}).

                then(function (bridges) {
                    _this6.self.storage.set('lastBridgeIp', bridges[0].ip);
                    _this6.self.storage.set('lastUsername', bridges[0].username);
                    resolve(bridges[0]);}).

                catch(function () {
                    reject();});


                //resolve();
                return promise;});} }]);return HueDiscoverer;})();
//# sourceMappingURL=data:application/json;base64,

/**
 * Dmitry Sadakov's Philips Hue api wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright 2014 Dmitry Sadakov, All rights reserved.
 * original: https://github.com/bjohnso5/hue-hacking
 * Copyright (c) 2013 Bryan Johnson; Licensed MIT */

'use strict'

/*globals colorUtil:false, HueDiscoverer, AjaxLite, Storage, HueBridge
*/
/*trackEvent*/
/*exported  hue, 
            findActors, 
            findGroupIdByName 
*/

// extract hueBridge class (with ip, username, authentication logic)
// todo: remove authentication logic - forward to bridge class
// on start check setup (ip & username) and do fast start.
;
var hue = function hue($, colors) {

    var discover = null;
    var discoverStatus = 'init';


    var bridge = null, 
    bridgeIP = '', // Hue bridge's IP address 
    appname = 'lightswitch-v5', // API key registered with hue bridge
    username = '', 
    status = { status: 'init', text: 'Initializing...' }, // system status
    state = null, // bridge state

    // defaults
    baseUrl = 'http://' + bridgeIP + '/api', 
    baseApiUrl = null, //baseUrl + '/' + appname,
    lightApiUrl = null, // baseApiUrl + '/lights',
    lastResult = null, 
    numberOfLamps = 3, // defaulted to the # of lamps included in the starter kit, update if you've connected additional bulbs

    // lamp states:
    shortFlashType = 'select', 
    longFlashType = 'lselect', 
    offState = { on: false }, 
    onState = { on: true }, 
    shortFlashState = { alert: shortFlashType }, 
    longFlashState = { alert: longFlashType }, 
    transitionTime = null, 
    errorCounter = 0;

    //discover = hueDiscoverer(appname, onNeedAuthorization, onIpAuthorized, onError, onComplete);
    discover = new HueDiscoverer(AjaxLite, Storage, appname, onNeedAuthorization);

    var statusInit = { status: 'init', text: 'Initializing...' };
    var statusNeedAuth = { status: 'Authenticating', text: 'Bridge found. Press the bridge button...' };
    //var statusNoBridge = {status: 'BridgeNotFound', text: 'Philip Hue bridge not found.'};
    //var statusReady = {status: 'OK', text: 'Lights found.'};

    function onNeedAuthorization(ip) {
        statusNeedAuth.text = 'Bridge found at ' + ip + '.<br >Press the bridge button...';
        onStatus(statusNeedAuth);
        discoverStatus = 'auth';}


    function onBridgeError(err) {
        console.log('onBridgeError' + err);
        onError(err);}


    function onIpAuthorized(bridgeAuthorized, ip, usernameArg, message, data) {

        //if(bridge === null || !(ip === bridge.ip() && username === bridge.username())) {
        bridge = new HueBridge(
        AjaxLite, 
        Storage, 
        bridgeAuthorized.ip, 
        appname, 
        bridgeAuthorized.username, 
        onNeedAuthorization, 
        onIpAuthorized, 
        onBridgeError, 
        10);
        discoverStatus = 'ok';

        bridgeIP = bridge.ip;
        username = bridge.username;
        updateURLs();

        //} 

        if (data === undefined) {
            bridge.getBridgeState();} else 
        {
            onNewState(data); // safe to delete
        }}


    function onDiscoverError(ip, msg, text) {
        //onStatus(statusNoBridge);
        if (status !== null) {
            if (status.status !== statusNeedAuth.status) {
                updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');} else 
            {
                // discover:
                setTimeout(function () {return rediscover();}, 2000);}}}




    function rediscover(ip) {
        discover.start(ip).then(function (bridge, ip, username, message, data) {
            onIpAuthorized(bridge, ip, username, message, data);}, 

        function (ip, msg, text) {
            onDiscoverError(ip, msg, text);});


        updateStatus(statusInit.status, statusInit.text);}


    function onError(ip, msg, text) {
        updateStatus('BridgeNotFound', 'Philip Hue bridge not found.');}


    var onLampError = function onLampError(err) {
        // do nothing for now.
        errorCounter++;}, 

    /**
     * Reconstruct the baseUrl and baseApiUrl members when configuration is updated.
     */
    updateURLs = function updateURLs() {
        baseUrl = 'http://' + bridgeIP + '/api';
        baseApiUrl = baseUrl + '/' + username;
        lightApiUrl = baseApiUrl + '/lights';}, 

    /**
     * Sets the response to the lastResult member for use. Currently unused.
     *
     * @param {String} Response data as a String
     * @param {String} Status text
     * @param {jqXHR} jQuery XmlHttpResponse object
     */
    apiSuccess = function apiSuccess(data, successText, jqXHR) {
        lastResult = data;
        log(JSON.stringify(lastResult));}, 


    /**
     * Convenience function to perform an asynchronous HTTP PUT with the
     * provided JSON data.
     *
     * @param {String} url The URL to send the PUT request to.
     * @param {Function} callback The function to invoke on a successful response.
     * @param {Object} data The JSON data.
     * @return {Object} The JSON data.
     */
    putJSON = function putJSON(url, callback, error, data) {
        var options = { 
            type: 'PUT', 
            url: url, 
            success: callback, 
            error: error || onLampError, 
            dataType: 'json', 
            contentType: 'application/json', 
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;}, 


    postJSON = function postJSON(url, callback, error, data) {
        var options = { 
            type: 'POST', 
            url: url, 
            success: callback, 
            error: error || onLampError, 
            dataType: 'json', 
            contentType: 'application/json', 
            data: JSON.stringify(data) };

        $.ajax(options);
        //log(JSON.stringify(options));
        return data;}, 


    del = function del(url, callback, error, data) {
        var options = { 
            type: 'DELETE', 
            url: url, 
            success: callback, 
            error: error || onLampError };

        $.ajax(options);
        log(JSON.stringify(options));}, 


    /**
     * Convenience function used to query the state of a Hue lamp or other
     * bridge-administered resource.
     *
     * @param {String} destination URL to send HTTP GET request to.
     * @param {Function} success Callback function to invoke on successful response.
     * @return {Object} JSON bulb configuration data.
     */
    get = function get(destination, _success, error) {
        var callback = _success || null;
        callback = null === callback ? apiSuccess : _success;

        $.ajax({ 
            dataType: 'json', 
            url: destination, 
            success: function success(data) {
                _success(data);}, 

            error: error, 
            timeout: 2000 });}, 



    /**
     * Convenience function used to build a state URL for a provided Hue lamp
     * index.
     *
     * @param {Number} lampIndex 1-based index of the Hue lamp.
     * @return {String} URL to put state to a lamp.
     */
    buildStateURL = function buildStateURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex + '/state';}, 


    /**
     * Convenience function used to build a state URL for a provided Hue lamp
     * group.
     *
     * @param {Number} groupIndex 0-based index of the lamp group.
     * @return {String} URL to trigger a group action.
     */
    buildGroupActionURL = function buildGroupActionURL(groupIndex /* {Number} */) {
        return baseApiUrl + '/groups/' + groupIndex + '/action';}, 


    buildGroupURL = function buildGroupURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/groups/' + key;}

        return baseApiUrl + '/groups';}, 

    buildSceneURL = function buildSceneURL(key) {
        if (key !== undefined) {
            return baseApiUrl + '/scenes/' + key;}

        return baseApiUrl + '/scenes';}, 

    /**
     * Convenience function used to initiate an HTTP PUT request to modify 
     * state.
     *
     * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
     * @param {String} data String containing the JSON state object to commit to the lamp.
     * @param {Function} success Callback function to invoke on successful response.
     * @return {Object} JSON bulb state data.
     */
    put = function put(lampIndex, data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;
        return putJSON(buildStateURL(lampIndex), callback, error, data);}, 


    /**
     * Convenience function used to initiate an HTTP PUT request to modify state of a group of lamps.
     *
     * @param {Number} Index of the lamp group to modify
     * @param {Object} Object containing desired lamp state
     * @return {Object} JSON bulb group state data.
     */
    putGroupAction = function putGroupAction(groupIndex /* {Number} */, action /* String */) {
        var callback = apiSuccess;
        var error = log;
        return putJSON(buildGroupActionURL(groupIndex), callback, error, action);}, 


    postGroup = function postGroup(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name, lights: lampIds };
        return postJSON(buildGroupURL(), callback, error, state);}, 

    deleteGroup = function deleteGroup(key) {
        var callback = apiSuccess;
        var error = log;
        return del(buildGroupURL(key), callback, error);}, 

    getRandomInt = function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;}, 

    putScene = function putScene(name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = { name: name + ' on 0', lights: lampIds };
        var key = getRandomInt(100000000, 999999999) + '-on-0';
        return putJSON(buildSceneURL(key), callback, error, state);}, 


    _startSchedule = function _startSchedule(id) {
        if (state !== null) {
            // build schedule command, execute:
            var schedule = state.schedules[id];
            if (schedule) {
                var cmd = schedule.command;
                if (cmd.method.toLowerCase() === 'put') {
                    var url = baseUrl + cmd.address.substring('/api'.length);
                    putJSON(url, apiSuccess, log, cmd.body);}}} else 


        {
            // error
        }}, 

    /*
    updateScene = function(key, name, lampIds) {
        var callback = apiSuccess;
        var error = log;
        var state = {name: name, lights: lampIds };
        return putJSON(buildSceneURL(key), callback, error, state);
    },*/
    /*
            // http://www.developers.meethue.com/documentation/schedules-api-0#31_get_all_schedules
            getSchedules = function () {
               return get(buildSchedulesURL(lampIndex), function(data) {
                    // success
                    if (data.state === undefined) {
                        // fail
                        return;
                    }
                    success(data.state.bri);
                }, function(err){
                    err = null;
                    // fail
                });
           },
    
    
        # http://www.developers.meethue.com/documentation/schedules-api-0#32_create_schedule
        # TODO: strip whitespace from command
        @createSchedule = (name="schedule", description="", command, time, status="enabled", autodelete=false) ->
          _setup().then ->
            body = {
              "name": name
              "description": description
              "command": command
              "time": time
              "status": status
              "autodelete": autodelete
            }
            _apiCall "post", ["schedules"], body
    
        # http://www.developers.meethue.com/documentation/schedules-api-0#33_get_schedule_attributes
        @getScheduleAttributes = (id) ->
          _setup().then ->
            _apiCall "get", ["schedules", id]
    
        # http://www.developers.meethue.com/documentation/schedules-api-0#34_set_schedule_attributes
        @setScheduleAttributes = (id, name=null, description=null, command=null, time=null, status=null, autodelete=null) ->
          _setup().then ->
            body = {}
            body.name = name if name
            body.description = description if description
            body.command = command if command
            body.status = status if status
            body.autodelete = autodelete if autodelete != null
            _apiCall "put", ["schedules", id], body
    
        # http://www.developers.meethue.com/documentation/schedules-api-0#35_delete_schedule
        @deleteSchedule = (id) ->
          _setup().then ->
            _apiCall "delete", ["schedules", id]
    
    */

    /**
     * Convenience function used to initiate HTTP PUT requests to modify state
     * of all connected Hue lamps.
     *
     * @param {String} data String containing the JSON state object to commit to the lamps.
     * @param {Function} success Callback function to invoke on successful response.
     * @return {Object} JSON object containing state to apply to lamp.
     */
    putAll = function putAll(data, success, error) {
        var callback = success || null;
        callback = null === callback ? apiSuccess : success;

        for (var i = 0; i < numberOfLamps; ++i) {
            putJSON(buildStateURL(i + 1), callback, error, data);}

        return data;}, 


    /**
     * Convenience function used to build a URL to query a lamp's status.
     *
     * @param {Number} lampIndex 1-based index of the Hue lamp.
     * @return {String} URL to query a specific lamp.
     */
    buildLampQueryURL = function buildLampQueryURL(lampIndex /* Number */) {
        return baseApiUrl + '/lights/' + lampIndex;}, 


    /** 
     * Builds a JSON state object for the CIE 1931 color coordinates provided.
     * If the transitionTime property has been set, it is also included in the
     * JSON object.
     *
     * @param {Number[]} CIE 1931 X,Y color coordinates.
     * @return {Object} State object containing CIE X,Y coordinates.
     */
    buildXYState = function buildXYState(xyCoords /* Number[] */, brightness, transitionTimeOverride) {
        var stateObj = { xy: xyCoords };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;}

        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;}, 


    /** 
     * Builds a JSON state object for the hue, saturation, and brightness provided.
     * @param {Number} hue from 0 to 65535.
     * @param {Number} sat from 0 to 255.
     * @param {Number} bri from 0 to 255.
     * @return {Object} State object containing CIE X,Y coordinates.
     */
    buildHueSatState = function buildHueSatState(hue, sat, brightness, transitionTimeOverride) {
        var stateObj = { hue: hue, sat: sat };
        if (typeof brightness === 'number') {
            stateObj.bri = brightness;}

        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;}, 

    addTransitionTime = function addTransitionTime(stateObj, transitionTimeOverride) {
        if (typeof transitionTime === 'number') {
            stateObj.transitiontime = transitionTime;}

        if (typeof transitionTimeOverride === 'number') {
            stateObj.transitiontime = transitionTimeOverride;}}, 


    buildSceneState = function buildSceneState(sceneKey, transitionTimeOverride) {
        var stateObj = { scene: sceneKey };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;}, 


    /**
     * Returns the brightness of the lamp at lampIndex.
     *
     * @param {Number} lampIndex 1-based index of the lamp to query.
     * @return {Number} Brightness of the lamp at lampIndex. 0 - 255.
     */
    getBrightness = function getBrightness(lampIndex /* Number */, success) {
        get(buildLampQueryURL(lampIndex), function (data) {
            // success
            if (data.state === undefined) {
                // fail
                return;}

            success(data.state.bri);}, 
        function (err) {
            err = null;
            // fail
        });
        //return lampState.state.bri;
    }, 

    /**
     * Builds a JSON state object used to set the brightness of a Hue lamp to
     * the value of the brightness parameter.
     *
     * @param {Number} brightness Integer value between 0 and 255. Note that 0
     * is not equivalent to the lamp's off state.
     * @return {Object} JSON object used to set brightness.
     */
    buildBrightnessState = function buildBrightnessState(brightness, transitionTimeOverride) {
        var stateObj = { bri: Number(brightness) };
        addTransitionTime(stateObj, transitionTimeOverride);
        return stateObj;}, 


    adjustBrightness = function adjustBrightness(lampId, brightness, success) {
        brightness = Number(brightness);
        getBrightness(lampId, function (currentBrightness) {
            var adjustedBrightness = currentBrightness + brightness;
            var newBrightness = adjustedBrightness < 255 ? adjustedBrightness : 254;
            newBrightness = adjustedBrightness > 0 ? adjustedBrightness : 0;
            success(Math.round(newBrightness));});}, 


    getLightState = function getLightState() {
        bridge.getLightState(onLightUpdate);}, 

    onLightUpdate = function onLightUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state.lights = data.lights;}}, 


    onBridgeUpdate = function onBridgeUpdate(bridge, ip, username, status, data) {
        if (data !== null && state !== null) {
            state = data;
            onNewState(data);}}, 


    getBridgeState = function getBridgeState() {
        bridge.getBridgeState(onBridgeUpdate);}, 

    onNewState = function onNewState(data) {
        //log('Authorized');
        /* jshint ignore:start */
        if (!(typeof testData === 'undefined')) {
            data = testData;}

        /* jshint ignore:end */

        // cache state
        state = data;
        // re-create virtual All group:
        var lampIds = $.map(state.lights, function (lamp, key) {
            return key;});

        state.groups['0'] = { 
            name: 'All', 
            lights: lampIds, 
            type: 'LightGroup', 
            action: {} };


        //log('hue: saving state - ' + JSON.stringify(data));

        numberOfLamps = Object.keys(data.lights).length;
        var message = 'No  lights found';
        if (numberOfLamps === 0) {
            message = 'No lights found.';} else 
        if (numberOfLamps === 1) {
            message = 'One light found.';} else 
        {
            message = '' + numberOfLamps + ' lights found.';}


        log('Updating Status - ok...');
        updateStatus('OK', message);}, 


    /**
     * Log to console
     */
    updateStatus = function updateStatus(inStatus, text, data) {
        var newStatus = { status: inStatus, text: text, data: data };
        onStatus(newStatus);}, 

    onStatus = function onStatus(newStatus) {
        if (JSON.stringify(status) !== JSON.stringify(newStatus)) {
            console.log('hue: status change, ' + newStatus.status + ', text: ' + newStatus.text + ', data: ' + newStatus.data);
            status = newStatus;}}, 


    log = function log(text) {
        console.log('hue: ' + text);
        if (typeof logHandler !== 'undefined') {
            logHandler(text);}}, 


    _setHueSatState = function _setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
        var state = buildHueSatState(hue, sat, bri, transitiontime);
        put(lampIndex, state);}, 

    _setXYState = function _setXYState(lampIndex /* Number */, xy, transitiontime, bri) {
        var state = buildXYState(xy, bri, transitiontime);
        put(lampIndex, state);};


    return { 
        /** 
         * Flash the lamp at lampIndex for a short time. 
         *	
         * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
         * @return {Object} JSON object containing lamp state.
         */
        flash: function flash(lampIndex /* Number */) {
            return put(lampIndex, shortFlashState);}, 

        /** 
         * Flash all connected lamps for a short time.
         *
         * @return {Object} JSON object containing lamp state.
         */
        flashAll: function flashAll() {
            return putAll(shortFlashState);}, 

        /** 
         * Flash the lamp at lampIndex for a long time.
         *
         * @param {Number} lampIndex 1-based index of the Hue lamp to flash.
         * @return {Object} JSON object containing lamp state.
         */
        longFlash: function longFlash(lampIndex /* Number */) {
            return put(lampIndex, longFlashState);}, 

        /** 
         * Flash all connected lamps for a long time.
         *
         * @return {Object} JSON object containing lamp state.
         */
        longFlashAll: function longFlashAll() {
            return putAll(longFlashState);}, 

        /** 
         * Set the lamp at lampIndex to the approximate CIE x,y equivalent of 
         * the provided hex color.
         *
         * @param {Number} lampIndex 1-based index of the Hue lamp to colorize.
         * @param {String} color String representing a hexadecimal color value.
         * @return {Object} JSON object containing lamp state.
         */
        setColor: function setColor(lampIndex /* Number */, color /* String */, transitiontime, brightness) {
            var xy = colors.getCIEColor(color);
            if (typeof brightness === 'number') {
                if (brightness < 0) {// min
                    // adjust it:
                    var bri = colorUtil().getBrightness(color);
                    adjustBrightness(lampIndex, bri, function (bri) {
                        _setXYState(lampIndex, xy, transitiontime, bri);});

                    return;}

                _setXYState(lampIndex, xy, transitiontime, brightness);} else 

            {
                _setXYState(lampIndex, xy, transitiontime, null);}}, 


        setXYState: function setXYState(lampIndex, xy, transitiontime, bri) {
            _setXYState(lampIndex, xy, transitiontime, bri);}, 

        /** 
         * Sets state for the hue, saturation, and brightness provided.
         * @param {Number} hue from 0 to 65535.
         * @param {Number} sat from 0 to 255.
         * @param {Number} bri from 0 to 255.
         * @return {Object} State object containing CIE X,Y coordinates.
         */
        setHueSatState: function setHueSatState(lampIndex, hue, sat, bri, transitiontime) {
            _setHueSatState(lampIndex, hue, sat, bri, transitiontime);}, 


        /**
         * Sets all connected lamps to the approximate CIE x,y equivalent of 
         * the provided hex color.
         *
         * @param {String} color String representing a hexadecimal color value.
         * @return {Object} JSON object containing lamp state.
         */
        setAllColors: function setAllColors(color /* String */) {
            var xy = colors.getCIEColor(color);
            colorUtil().getBrightness(color, function (bri) {
                var state = buildXYState(xy, bri);
                putGroupAction(0, state);});}, 


        createGroup: function createGroup(name, lights) {
            return postGroup(name, lights);}, 

        removeGroup: function removeGroup(key) {
            return deleteGroup(key);}, 

        createScene: function createScene(name, lights) {
            return putScene(name, lights);}, 

        /** 
         * Turn on scene by key
         */
        startScene: function startScene(sceneKey) {
            var state = buildSceneState(sceneKey);
            return putGroupAction(0, state);
            //var scene = hue.getState().scenes[sceneKey];
            //if (scene !== undefined) {
            //var state = buildSceneState(sceneKey);
            //$.each(scene.lights, function(index, val){
            //    put(val, state);
            //});       
            //}
        }, 
        startSchedule: function startSchedule(id) {
            return _startSchedule(id);}, 

        /**
         * Turn off the lamp at lampIndex.
         *
         * @param {Number} lampIndex 1-based index of the Hue lamp to turn off.
         * @return {Object} JSON object containing lamp state.
         */
        turnOff: function turnOff(lampIndex /* Number */) {
            return put(lampIndex, offState);}, 

        /** 
         * Turn on the lamp at lampIndex.
         *
         * @param {Number} lampIndex 1-based index of the Hue lamp to turn on.
         * @return {Object} JSON object containing lamp state.
         */
        turnOn: function turnOn(lampIndex /* Number */) {
            return put(lampIndex, onState);}, 

        /** 
         * Turn off all connected lamps.
         *
         * @return {Object} JSON object containing lamp state.
         */
        turnOffAll: function turnOffAll() {
            if (status.status === 'OK') {status.data = false;}
            return putGroupAction(0, offState);}, 

        /** 
         * Turn on all connected lamps.
         *
         * @return {Object} JSON object containing lamp state.
         */
        turnOnAll: function turnOnAll() {
            if (status.status === 'OK') {status.data = true;}
            return putGroupAction(0, onState);}, 

        /**
         * Set the brightness of the lamp at lampIndex.
         *
         * @param {Number} lampIndex 1-based index of the Hue lamp to modify.
         * @param {Number} brightness Integer value between 0 and 254.
         * @return {Object} JSON object containing lamp state.
         */
        setBrightness: function setBrightness(lampIndex /* Number */, brightness /* Number */, transitiontime /* Number */) {
            var state = buildBrightnessState(brightness, transitiontime);
            return put(lampIndex, state);}, 

        /**
         * Set the brightness of all connected lamps.
         *
         * @param {Number} brightness Integer value between 0 and 254.
         * @return {Object} JSON object containing all lamp state.
         */
        setAllBrightness: function setAllBrightness(brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(0, state);}, 

        /**
         * Set the brightness of an indexed group of lamps.
         *
         * @param {Number} groupIndex 0-based lamp group index.
         * @param {Number} brightness Integer value between 0 and 254.
         * @return {Object} JSON object containing group state.
         */
        setGroupBrightness: function setGroupBrightness(groupIndex /* Number */, brightness /* Number */) {
            var state = buildBrightnessState(brightness);
            return putGroupAction(groupIndex, state);}, 

        /**
         * Dim the lamp at lampIndex by decrement.
         * 
         * @param {Number} lampIndex 1-based lamp index.
         * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
         * @return {Object} JSON object containing lamp state.
         */
        dim: function dim(lampIndex /* Number */, decrement /* Number */, transitiontime) {
            decrement = decrement || -10; // default to 10 if decrement not provided.
            adjustBrightness(lampIndex, decrement, function (newBrightness) {
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));});}, 


        /**
         * Dim all lamps by decrement.
         * 
         * @param {Number} [decrement] Amount to decrement brightness by (between 0 and 255).
         * @return {Object[]} JSON objects containing lamp states.
         */
        dimAll: function dimAll(decrement /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.dim(i + 1, decrement);}

            return states;}, 

        /**
         * Brighten the lamp at lampIndex by increment.
         *
         * @param {Number} lampIndex 1-based lamp index.
         * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
         * @return {Object} JSON object containing lamp state.
         */
        brighten: function brighten(lampIndex, increment, transitiontime) {
            increment = increment || 10;
            adjustBrightness(lampIndex, increment, function (newBrightness) {
                //this.setBrightness(lampIndex, newBrightness, transitiontime);
                return put(lampIndex, buildBrightnessState(newBrightness, transitiontime));});}, 


        /**
         * Brighten all lamps by increment.
         *
         * @param {Number} [increment] Amount to increment brightness by (between 0 and 255).
         * @return {Object[]} JSON objects containing lamp states.
         */
        brightenAll: function brightenAll(increment /* Number */) {
            var states = [];
            for (var i = 0; i < numberOfLamps; ++i) {
                states[i] = this.brighten(i + 1, increment);}

            return states;}, 

        /** 
         * Return the value of the configured transitionTime property.
         *
         * @return {Number} Value of the transitionTime property. Null by default if not
         * set.
         */
        getTransitionTime: function getTransitionTime() {
            return transitionTime;}, 

        /**
         * Set the value of the transitionTime property.
         *
         * @param {Number} time Lamp color transition time in approximate milliseconds.
         */
        setTransitionTime: function setTransitionTime(time /* Number */) {
            transitionTime = time;}, 

        /**
         * Find bridges  findBridge() a upnp, then scan, then predefined typical ips. 
         */
        //findBridge: function(onerror) {
        // deprecated, use discover 
        //},
        /**
         * Set the number of lamps available to control.
         *
         * @param {Number} The total number of lamps available to interact with. Default is 3.
         */
        setNumberOfLamps: function setNumberOfLamps(numLamps /* Number */) {
            if (typeof numLamps === 'number') {
                numberOfLamps = numLamps;}}, 


        setLogger: function setLogger(func) {
            console.log('new subscriber to log change registered;');
            logHandler = func;}, 

        getState: function getState() {
            return state;}, 

        getStatus: function getStatus() {
            return status;}, 

        refresh: function refresh() {
            getBridgeState();}, 

        heartbeat: function heartbeat() {
            getLightState();}, 

        getLampIds: function getLampIds(actors) {
            // parse actors
            //actors
            if (actors === null) {
                return []; // no lamps
            }
            if (actors.substring(0, 'group-'.length) === 'group-') 
            {
                var group = actors.substring('group-'.length);
                if (state.groups[group] === undefined) {
                    // error.
                    return [];}

                return state.groups[group].lights;}

            return [actors]; // lights: prefix not used, just return array of number.
        }, 
        discover: function discover(ip) {
            rediscover(ip);} };};





function findActors(key) {
    return findGroupIdByName(key);}


function findGroupIdByName(name) {
    if (name.toLowerCase() === 'all') {
        return '0'; // special case group-0 is all.
    }
    var state = window.hue.getState();
    if (state !== null) {
        for (var group in state.groups) {
            if (state.groups[group].name.toLowerCase() === name.toLowerCase()) {
                return group;}}}



    return null;}
//# sourceMappingURL=data:application/json;base64,

/**
 * Dmitry Sadakov's Color Util
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

'use strict'

/*exported colorUtil */;
var colorUtil = function colorUtil() {


    function colourNameToHex(colour) 
    {
        var colours = { 
            'aliceblue': '#f0f8ff', 
            'antiquewhite': '#faebd7', 
            'aqua': '#00ffff', 
            'aquamarine': '#7fffd4', 
            'azure': '#f0ffff', 
            'beige': '#f5f5dc', 
            'bisque': '#ffe4c4', 
            'black': '#000000', 
            'blanchedalmond': '#ffebcd', 
            'blue': '#0000ff', 
            'blueviolet': '#8a2be2', 
            'brown': '#a52a2a', 
            'burlywood': '#deb887', 
            'cadetblue': '#5f9ea0', 
            'chartreuse': '#7fff00', 
            'chocolate': '#d2691e', 
            'coral': '#ff7f50', 
            'cornflowerblue': '#6495ed', 
            'cornsilk': '#fff8dc', 
            'crimson': '#dc143c', 
            'cyan': '#00ffff', 
            'darkblue': '#00008b', 
            'darkcyan': '#008b8b', 
            'darkgoldenrod': '#b8860b', 
            'darkgray': '#a9a9a9', 
            'darkgreen': '#006400', 
            'darkkhaki': '#bdb76b', 
            'darkmagenta': '#8b008b', 
            'darkolivegreen': '#556b2f', 
            'darkorange': '#ff8c00', 
            'darkorchid': '#9932cc', 
            'darkred': '#8b0000', 
            'darksalmon': '#e9967a', 
            'darkseagreen': '#8fbc8f', 
            'darkslateblue': '#483d8b', 
            'darkslategray': '#2f4f4f', 
            'darkturquoise': '#00ced1', 
            'darkviolet': '#9400d3', 
            'deeppink': '#ff1493', 
            'deepskyblue': '#00bfff', 
            'dimgray': '#696969', 
            'dodgerblue': '#1e90ff', 
            'firebrick': '#b22222', 
            'floralwhite': '#fffaf0', 
            'forestgreen': '#228b22', 
            'fuchsia': '#ff00ff', 
            'gainsboro': '#dcdcdc', 
            'ghostwhite': '#f8f8ff', 
            'gold': '#ffd700', 
            'goldenrod': '#daa520', 
            'gray': '#808080', 
            'green': '#008000', 
            'greenyellow': '#adff2f', 
            'honeydew': '#f0fff0', 
            'hotpink': '#ff69b4', 
            'indianred ': '#cd5c5c', 
            'indigo': '#4b0082', 
            'ivory': '#fffff0', 
            'khaki': '#f0e68c', 
            'lavender': '#e6e6fa', 
            'lavenderblush': '#fff0f5', 
            'lawngreen': '#7cfc00', 
            'lemonchiffon': '#fffacd', 
            'lemon': '#fffacd', 
            'lightblue': '#add8e6', 
            'lightcoral': '#f08080', 
            'lightcyan': '#e0ffff', 
            'lightgoldenrodyellow': '#fafad2', 
            'lightgrey': '#d3d3d3', 
            'lightgreen': '#90ee90', 
            'lightpink': '#ffb6c1', 
            'lightsalmon': '#ffa07a', 
            'lightseagreen': '#20b2aa', 
            'lightskyblue': '#87cefa', 
            'lightslategray': '#778899', 
            'lightsteelblue': '#b0c4de', 
            'lightyellow': '#ffffe0', 
            'lime': '#00ff00', 
            'limegreen': '#32cd32', 
            'linen': '#faf0e6', 
            'magenta': '#ff00ff', 
            'maroon': '#800000', 
            'mediumaquamarine': '#66cdaa', 
            'mediumblue': '#0000cd', 
            'mediumorchid': '#ba55d3', 
            'mediumpurple': '#9370d8', 
            'mediumseagreen': '#3cb371', 
            'mediumslateblue': '#7b68ee', 
            'mediumspringgreen': '#00fa9a', 
            'mediumturquoise': '#48d1cc', 
            'mediumvioletred': '#c71585', 
            'midnightblue': '#191970', 
            'mintcream': '#f5fffa', 
            'mistyrose': '#ffe4e1', 
            'moccasin': '#ffe4b5', 
            'navajowhite': '#ffdead', 
            'navy': '#000080', 
            'oldlace': '#fdf5e6', 
            'olive': '#808000', 
            'olivedrab': '#6b8e23', 
            'orange': '#ffa500', 
            'orangered': '#ff4500', 
            'orchid': '#da70d6', 
            'palegoldenrod': '#eee8aa', 
            'palegreen': '#98fb98', 
            'paleturquoise': '#afeeee', 
            'palevioletred': '#d87093', 
            'papayawhip': '#ffefd5', 
            'peachpuff': '#ffdab9', 
            'peru': '#cd853f', 
            'pink': '#ffc0cb', 
            'plum': '#dda0dd', 
            'powderblue': '#b0e0e6', 
            'purple': '#800080', 
            'red': '#ff0000', 
            'rosybrown': '#bc8f8f', 
            'royalblue': '#4169e1', 
            'saddlebrown': '#8b4513', 
            'salmon': '#fa8072', 
            'sandybrown': '#f4a460', 
            'seagreen': '#2e8b57', 
            'seashell': '#fff5ee', 
            'sienna': '#a0522d', 
            'silver': '#c0c0c0', 
            'skyblue': '#87ceeb', 
            'slateblue': '#6a5acd', 
            'slategray': '#708090', 
            'snow': '#fffafa', 
            'springgreen': '#00ff7f', 
            'steelblue': '#4682b4', 
            'tan': '#d2b48c', 
            'teal': '#008080', 
            'thistle': '#d8bfd8', 
            'tomato': '#ff6347', 
            'turquoise': '#40e0d0', 
            'violet': '#ee82ee', 
            'wheat': '#f5deb3', 
            'white': '#ffffff', 
            'whitesmoke': '#f5f5f5', 
            'yellow': '#ffff00', 
            'yellowgreen': '#9acd32', 

            'minty': '#98FF98', 
            'coldwhite': '#FFF4E5', 
            'warmwhite': '#D4EBFF' };


        // if key exists
        if (typeof colours[colour.toLowerCase()] !== 'undefined') {
            return colours[colour.toLowerCase()];}


        return false;}


    function isColorHex(hex) {
        var isColor = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
        if (isColor) {
            return true;}

        return false;}


    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;}


    function hexToRgb(hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;});


        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? { 
            r: parseInt(result[1], 16), 
            g: parseInt(result[2], 16), 
            b: parseInt(result[3], 16) } : 
        null;}

    /*
    //Converts to color HSB object (code from here 
    // http://www.csgnetwork.com/csgcolorsel4.html 
    //with some improvements)
    function rgb2hsb(r, g, b) {    
        r /= 255; g /= 255; b /= 255; // Scale to unity.   
        var minVal = Math.min(r, g, b),
        maxVal = Math.max(r, g, b),
        delta = maxVal - minVal,
        HSB = {hue:0, sat:0, bri:maxVal},
        del_R, del_G, del_B;
          if( delta !== 0 ) {
            HSB.sat = delta / maxVal;
            del_R = (((maxVal - r) / 6) + (delta / 2)) / delta;
            del_G = (((maxVal - g) / 6) + (delta / 2)) / delta;
            del_B = (((maxVal - b) / 6) + (delta / 2)) / delta;
              if (r === maxVal) {HSB.hue = del_B - del_G;}
            else if (g === maxVal) {HSB.hue = (1 / 3) + del_R - del_B;}
            else if (b === maxVal) {HSB.hue = (2 / 3) + del_G - del_R;}
              if (HSB.hue < 0) {HSB.hue += 1;}
            if (HSB.hue > 1) {HSB.hue -= 1;}
        }
          HSB.hue *= 360;
        HSB.sat *= 100;
        HSB.bri *= 100;
          return HSB;
    }
    */






    return { 
        getColor: function getColor(command) {
            //log('get color: ' + command);

            var foundColor = colourNameToHex(command);
            if (foundColor !== false) {
                return foundColor;}


            var isColor = isColorHex(command);
            if (isColor) {
                return command;}

            return false;}, 

        getBrightness: function getBrightness(hex) {
            var rgb = hexToRgb(hex);
            return Math.round(0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b);}, 

        rgbToHex: function rgbToHex(r, g, b) {
            return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);} };};
//# sourceMappingURL=data:application/json;base64,

/**
 * Dmitry Sadakov's Philips Hue Commander wrapper, exposed as an AMD module.
 * Dependencies:
 *    - jQuery 1.8.3
 *    - colors.js (packaged alongside this file)
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved. */

/*globals trackEvent, $, findActors */
/*exported 
    hueCommander,
    executeCommand,
    activatedScene
 */

'use strict';

var hueCommander = function hueCommander($, hue, colorUtil, sceneCmd) {

    var logger = null, 
    actorId = null, 
    stateCache = null, 
    executeCommand = function executeCommand(command) {
        log('executing command: ' + command + ' on actor: ' + actorId);
        trackEvent('huecommander', 'command', command);

        if (actorId === null) {
            // by default set all group
            var groupAll = findActors('All');
            if (groupAll === null) {
                actorId = 'group-1';} else 
            {
                actorId = 'group-' + groupAll;}}



        if (command === undefined) {
            return;}

        if (command === 'brighten' || command === 'up') {
            //hue.brightenAll(Math.floor(255 / 3));
            executeOnActors(function (bulb) {
                hue.brighten(bulb, Math.floor(255 / 3));});}


        if (command === 'darken' || command === 'dim' || command === 'dim down' || command === 'down') {
            //hue.brightenAll(Math.floor(-255 / 3));
            executeOnActors(function (bulb) {
                hue.dim(bulb, -Math.floor(255 / 3));});}


        if (command === 'on') {
            executeOnActors(function (bulb) {
                hue.turnOn(bulb);});

            return;}

        if (command === 'off') {
            executeOnActors(function (bulb) {
                hue.turnOff(bulb);});

            return;}

        var json = parseJson(command);
        if (json !== null) 
        {
            // hue, sat, bri command:
            if ('hue' in json) {
                executeOnActors(function (bulb) {
                    hue.setHueSatState(bulb, json.hue, json.sat, json.bri, json.time);});

                return;} else 
            if ('bri' in json) {
                executeOnActors(function (bulb) {
                    hue.setBrightness(bulb, json.bri);});

                return;}

            //else if('color' in json) {
            //    hue.setColor(color.substring(1));
            //}
        }
        var bri = detectBrightness(command);
        if (bri !== null) {
            executeOnActors(function (bulb) {
                hue.setBrightness(bulb, bri);});

            return;}

        var color = colorUtil.getColor(command);
        if (color !== false) {
            executeOnActors(function (bulb) {
                hue.setColor(bulb, color.substring(1));});

            return;}


        if (command === 'scene:stop') {
            sceneCmd.stop();
            restoreState();
            return 'stop';} else 
        {
            if (command.lastIndexOf('scene:', 0) === 0) {
                var sceneName = command.substring(6);
                var lampids = hue.getLampIds(actorId);

                saveState();

                sceneCmd.start(sceneName, lampids);
                return sceneName;} else 
            if (command.lastIndexOf('schedule:', 0) === 0) {
                var scheduleId = command.substring('schedule:'.length);
                hue.startSchedule(scheduleId);
                return;}}}, 




    parseJson = function parseJson(cmd) {
        try {
            if (cmd.startsWith('{')) {
                return JSON.parse(cmd);}} 


        catch (ex) 
        {
            log('Bad command:' + cmd + ' ex:' + ex.message);}

        return null;}, 

    saveState = function saveState() {
        if (stateCache === null) {
            stateCache = getActorStatesInternal();
            log('Saved state' + JSON.stringify(stateCache));}}, 


    restoreState = function restoreState() {
        if (stateCache !== null) {
            var newstate = stateCache;
            stateCache = null;
            log('Restoring state' + JSON.stringify(newstate));
            $.each(newstate, function (key, value) {
                hue.setXYState(value.key, value.state.xy, 0, value.state.bri);});

            hue.heartbeat(); // force refresh from bridge
        }}, 

    executeOnActors = function executeOnActors(func) {
        sceneCmd.stop();
        restoreState();

        var lampIds = hue.getLampIds(actorId);
        if (!$.isArray(lampIds)) {
            lampIds = [lampIds];}

        $.each(lampIds, function (index, val) {
            func(val, index);});}, 


    detectBrightness = function detectBrightness(command) {
        if (command === undefined) {
            return null;}

        if (command.startsWith('bri:')) {
            return command.substring('bri:'.length);}

        return null;}, 

    log = function log(text) {
        if (logger !== null) {
            logger(text);}}, 


    getActorStatesInternal = function getActorStatesInternal() {
        var lampIds = hue.getLampIds(actorId);
        var state = window.hue.getState();
        var actorStates = [];
        if (state.lights !== null) {
            for (var i in state.lights) {
                var lamp = state.lights[i];
                lamp.key = i;
                if (lampIds.indexOf(i) !== -1) {
                    actorStates.push(lamp);}}}



        return actorStates;}, 

    getActorBrightnessInternal = function getActorBrightnessInternal() {
        var bri = 0;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            if (lamp.state.bri > bri) {
                bri = lamp.state.bri;}});


        return bri;}, 

    getActorTurnedOn = function getActorTurnedOn() {
        var on = false;
        var actors = getActorStatesInternal();
        $.each(actors, function (key, lamp) {
            on = on || lamp.state.on;});

        return on;}, 

    _discover = function _discover(ip) {
        hue.discover(ip);}, 

    _heartbeat = function _heartbeat() {
        hue.heartbeat();}, 

    _createGroup = function _createGroup(name, lampIds) {
        hue.createGroup(name, lampIds);}, 

    _removeGroup = function _removeGroup(key) {
        hue.removeGroup(key);}, 

    _createScene = function _createScene(key) {
        var lampIds = hue.getLampIds(actorId);
        hue.createScene(key, lampIds);}, 

    _refresh = function _refresh() {
        hue.refresh();}, 

    _flash = function _flash(key) {
        hue.flash(key);}, 

    _getState = function _getState() {
        var state = hue.getState();
        state.actorId = actorId;
        return state;}, 

    _getStatus = function _getStatus() {
        return hue.getStatus();}, 

    _palette = function _palette(colors) {
        return sceneCmd.palette(colors);};




    return { 
        setActor: function setActor(actor) {
            actorId = actor;
            return actorId;}, 

        getActor: function getActor(actor) {
            return actorId;}, 

        getActorBrightness: function getActorBrightness() {
            return { 
                bri: getActorBrightnessInternal(), 
                on: getActorTurnedOn() };}, 


        getActorStates: function getActorStates() {
            return getActorStatesInternal();}, 

        command: function command(commandText) {
            return executeCommand(commandText);}, 

        setLogger: function setLogger(logHandler) {
            logger = logHandler;}, 

        discover: function discover(ip) {
            _discover(ip);}, 

        heartbeat: function heartbeat() {
            _heartbeat();}, 

        createGroup: function createGroup(group) {
            //name, lampIds){
            _createGroup(group.name, group.lampIds);}, 

        removeGroup: function removeGroup(key) {
            _removeGroup(key);}, 

        createScene: function createScene(name) {
            //name, lampIds){
            _createScene(name);}, 

        refresh: function refresh() {
            _refresh();}, 

        flash: function flash(key) {
            _flash(key);}, 

        getState: function getState() {
            return _getState();}, 

        getStatus: function getStatus() {
            return _getStatus();}, 

        palette: function palette(colors) {
            return _palette(colors);}, 

        parse: function parse(cmd) {
            return this[cmd.hueCommand.command](cmd.hueCommand.args);} };};





function executeCommand(command) {
    window.hueCommander.command(command);
    //activatedScene('stop');
    return false;}


function activatedScene(key) {
    $('#scenes button').removeClass('active');
    $('.scene').removeClass('active');
    $('#scenes button[id="' + key + '"]').addClass('active');
    $('.scene[data-scene="' + key + '"]').addClass('active');}


function activatedSchedule(key) {
    $('#schedule button').removeClass('active');
    $('.schedule').removeClass('active');
    $('#schedule button[id="schedule-' + key + '"]').addClass('active');
    $('.schedule[data-schedule="' + key + '"]').addClass('active');}
//# sourceMappingURL=data:application/json;base64,

// Dmitry Sadakov 2015 Voice module
/*globals 
    SpeechSynthesisUtterance: false,
    trackEvent
*/
/*exported voice, voiceCommander, huevoice, voiceCmd */
'use strict';

var voice = function voice() {

    var recognition = null;
    var callback = null;
    var errfunc = null;
    var endfunc = null;

    function _speak(text) {
        if ('speechSynthesis' in window) {
            var speech = new SpeechSynthesisUtterance();
            speech.lang = 'en-US';
            speech.text = text;
            window.speechSynthesis.speak(speech);}}



    function available() {
        var SpeechRecognition = window.SpeechRecognition || 
        window.webkitSpeechRecognition || 
        window.mozSpeechRecognition || 
        window.msSpeechRecognition || 
        window.oSpeechRecognition;
        return SpeechRecognition;}


    function _recognize(callbackFunc, err, onend) {
        callback = callbackFunc;
        errfunc = err;
        endfunc = onend;

        var SpeechRecognition = available();
        if (SpeechRecognition !== undefined) {
            if (recognition === null) {
                recognition = new SpeechRecognition();} else 
            {
                return recognition;}} else 


        {
            console.error('Your browser does not support the Web Speech API');
            _speak('Voice not supported');
            return null;}

        recognition.lang = 'en-US';
        recognition.continuous = true;
        recognition.interimResults = false;
        recognition.onresult = onSpeechResult;
        recognition.onstart = onStarted;
        recognition.onerror = onErrored;
        recognition.onend = onEnd;
        return recognition;}


    function onStarted() {
        console.log('voice started');
        trackEvent('voice', 'started');}


    function onErrored(err) {
        console.log('voice error: ' + err);
        if (errfunc) {
            errfunc(err);}

        trackEvent('voice', 'error', err.message);}


    function onEnd() {
        console.log('voice end');
        //recognition.start();
        if (endfunc) {
            endfunc();}}



    function onSpeechResult(e) {
        var text = '';
        for (var i = e.resultIndex; i < e.results.length; ++i) {
            text += e.results[i][0].transcript;}


        console.log('voice:' + text);
        trackEvent('voice', 'speech', text);

        if (callback) {
            callback(text);}}



    function _start() {
        if (recognition) {
            recognition.start();}}



    function _stop() {
        if (recognition) {
            recognition.stop();}}



    function _abort() {
        if (recognition) {
            recognition.abort();}}



    return { 
        speak: function speak(text) {
            return _speak(text);}, 

        recognize: function recognize(func, errfunc, endfunc) {
            return _recognize(func, errfunc, endfunc);}, 

        start: function start() {
            return _start();}, 

        stop: function stop() {
            return _stop();}, 

        abort: function abort() {
            return _abort();}, 

        notAvailable: function notAvailable() {
            return available() === undefined;} };};





var reaction = function reaction() {
    var items = [];
    var filters = [];
    var otherwise = null;

    function _on(regex, func) {
        items.push([regex, func]);}


    function filterAdd(func) {
        filters.push(func);}


    function _setDefault(func) {
        otherwise = func;}


    function _react(text) {
        var textIn = text;
        for (var index in filters) {
            text = filters[index](text);}


        var obj = { 'voice': true, 'text': textIn, 'text-reaction': text, match: false };
        for (var item in items) {
            if (items[item][0].test(text)) {
                console.log('filtered text: "' + textIn + '" -> "' + text + '" matched: ' + items[item][0]);
                obj.match = items[item][0];
                trackEvent('voice', 'reaction', text, textIn, obj);
                var args = items[item][0].exec(text);
                args.unshift(text);
                var func = items[item][1];
                func.apply(null, args);
                return;}}


        console.log('filtered text: "' + textIn + '" -> "' + text + '", no match');
        trackEvent('voice', 'reaction', text, textIn, obj);
        if (otherwise) {
            otherwise.apply(null, [text]);}}



    return { 
        on: function on(text, func) {
            _on(text, func);}, 

        react: function react(text) {
            _react(text);}, 

        setDefault: function setDefault(text) {
            _setDefault(text);}, 

        filter: function filter(func) {
            filterAdd(func);} };};




var voiceCommander = function voiceCommander(voiceFunc) {
    var voiceCallback = voiceFunc;

    function lightCmdParser() {
        var cmds = new reaction();
        cmds.filter(removeDeterminers);
        cmds.filter(replaceLightSynonyms);
        cmds.filter(replaceSceneSynonyms);
        cmds.filter(replaceCommandSynonyms);

        cmds.on(/make it look like (?:a )?(.+)/, sceneCmd);
        cmds.on(/(?:start |stop )(?:dynamic )?([a-z ]+)(?: scene| lights)?(?: in )([a-z ]+)/, toggleSceneCmd);
        cmds.on(/(start|stop)(?: dynamic)?(?: scene| lights)?/, toggleSceneCmd);
        cmds.on(/(?:set|up|dim) ([a-z ]+) to ([a-z0-9%]*)(?: brightness)?/, inverseCmd);
        cmds.on(/(?:set|up|dim) to ([a-z0-9%]*)(?: brightness)?/, voiceCmd);
        cmds.on(/(on|off|up|dim)+? ([a-z]+)+/, voiceCmd);
        cmds.on(/([a-z0-9% ]*) brightness/, inverseCmd);
        cmds.on(/([a-z]+) (on|off|up|dim|dimmer)+?/, inverseCmd);
        cmds.on(/(on|off|up|dim|dimmer)+ ([a-z]+)/, voiceCmd);
        cmds.on(/(on|off|up|down|dim|lower|higher)/, voiceCmd);
        cmds.setDefault(function (text) {
            voiceCallback(text);});

        return cmds;}


    function removeDeterminers(text) {
        return text.replace(/the |my /g, '');}


    function replaceLightSynonyms(text) {
        return text.replace(/bulbs |lamps |lights | lights?/g, '');}


    function replaceCommandSynonyms(text) {
        text = text.replace(/ percent/g, '%');
        text = text.replace(/maximum/g, '100%');
        text = text.replace(/minimum/g, '1%');
        text = text.replace(/turn /g, '');
        text = text.replace(/dim down|down|dimmer/g, 'dim');
        text = text.replace(/animate|continue/g, 'start');
        text = text.replace(/brighten|lighten/g, 'up');
        return text;}


    function replaceSceneSynonyms(text) {
        return text.replace(/animation|theme/g, 'scene');}


    function voiceCmd(text, match, action, actor) {
        if (voiceCallback) {
            voiceCallback(text, match, action, actor);}}



    //function inverseSceneCmd(text, match, actor, action) {
    //  voiceCmd(text, match, 'scene:' + action, actor);
    //}

    function toggleSceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);}


    function inverseCmd(text, match, actor, action) {
        voiceCmd(text, match, action, actor);}


    function sceneCmd(text, match, action, actor) {
        voiceCmd(text, match, 'scene:' + action, actor);}


    return lightCmdParser();};




/*   voice commands */
var huevoice = null;

/*
function voiceError(err){
  var mic = $('#voice-mic');
  mic.removeClass('active');
  console.error(err);
}

function voiceEnd(){
  var mic = $('#voice-mic');
  mic.removeClass('active');
  console.log('voice end');
}*/


function voiceCmd(text, match, action, actor) {
    if (window.voiceCmdFunc) {
        window.voiceCmdFunc(text, match, action, actor);}}
//# sourceMappingURL=data:application/json;base64,

/**
 * Dmitry Sadakov's Philips Hue api wrapper background page
 * Copyright (c) 2014 Dmitry Sadakov, All rights reserved.
 */
'use strict'

/* global
	$,
	hue:false,
 	sceneCommander:false,
 	config:false,
 	voiceCmd,
 	findActors,
 	setActor,
 	huevoice,
 	executeCommand,
 	hueCommander,
 	colorUtil,
 	sceneCmd
 */

/* exported hasAllUrlAccess, requestAmbientPermission, voiceCmdFunc */

// $(document).ready(function(){
;window.hue = hue(window.jQuery, window.colors);
// window.hue.findBridge();
window.hue.discover();
window.sceneCmd = sceneCommander(window.jQuery, window.hue);
window.hueCommander = hueCommander(window.jQuery, window.hue, colorUtil(), sceneCmd);

if (config.app === 'app') {
  /* global chrome */
  if (chrome.app.runtime.onLaunched !== undefined) {
    chrome.app.runtime.onLaunched.addListener(function () {
      chrome.app.window.create('index.html', { 
        id: 'app', 
        frame: 'none', 
        resizable: false, 
        innerBounds: { 
          width: 320, 
          height: 140 } });});}}





//});


// listen to external voices
chrome.runtime.onMessageExternal.addListener(onExternal);

function onExternal(request, sender, sendResponse) {
  console.log('onExternal');
  if (request.voiceCmd) {
    console.log(request.voiceCmd.text + ',' + 
    request.voiceCmd.match + ',' + 
    request.voiceCmd.action + ',' + 
    request.voiceCmd.actor);

    voiceCmd(request.voiceCmd.text, 
    request.voiceCmd.match, 
    request.voiceCmd.action, 
    request.voiceCmd.actor);}

  if (request.hueCommand) {
    console.log('onExternal:' + request.hueCommand.command + ',' + request.hueCommand.args);

    var result = hueCommander.parse(request);
    if (sendResponse) {
      console.log('sending response to onExternal');
      sendResponse(result);}}}






function voiceCmdFunc(text, match, action, actor) {
  try {

    if (actor !== undefined) {
      var actorId = findActors(actor);
      if (actorId !== null) {
        setActor('group-' + actorId);} else 
      {
        huevoice.speak('Cannot find the ' + actor + ' lights');
        return;}}



    if ($.inArray(action, ['on', 'off', 'dim', 'dim down', 'up', 'brighten', 'lighten', 'down', 'light up']) >= 0 || action.match('^scene:')) {
      executeCommand(action);}} 

  catch (err) {
    console.log(err);
    // nothing
  }}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tncm91bmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFZLENBQUMsQUFvQmIsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDOztBQUFDLEFBRS9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUQsTUFBTSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDOztBQUVyRixJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFOztBQUV4QixNQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7QUFDakQsVUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFXO0FBQ25ELFlBQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7QUFDdEMsVUFBRSxFQUFFLEtBQUs7QUFDVCxhQUFLLEVBQUUsTUFBTTtBQUNiLGlCQUFTLEVBQUUsS0FBSztBQUNmLG1CQUFXLEVBQUU7QUFDWCxlQUFLLEVBQUUsR0FBRztBQUNWLGdCQUFNLEVBQUUsR0FBRyxFQUNaLEVBQ0YsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FDRDs7Ozs7Ozs7OztBQUFBLEFBS0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRXpELFNBQVMsVUFBVSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUIsTUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO0FBQ3BCLFdBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRztBQUNyQyxXQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQzVCLFdBQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUc7QUFDN0IsV0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQ3JCLENBQUM7O0FBQ0osWUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSTtBQUM1QixXQUFPLENBQUMsUUFBUSxDQUFDLEtBQUs7QUFDdEIsV0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNO0FBQ3ZCLFdBQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDM0I7O0FBQ0QsTUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO0FBQ3RCLFdBQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUV4RixRQUFJLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLFFBQUcsWUFBWSxFQUFFO0FBQ2YsYUFBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzlDLGtCQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDdEIsQ0FDRixDQUNGOzs7Ozs7O0FBSUQsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQ2hELE1BQUk7O0FBRUYsUUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0FBQ3ZCLFVBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxVQUFHLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDbkIsZ0JBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FDOUI7QUFBTTtBQUNMLGdCQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQztBQUN2RCxlQUFPLENBQ1IsQ0FDRjs7OztBQUVELFFBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxVQUFVLEVBQUMsSUFBSSxFQUFDLFVBQVUsRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDaEksb0JBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUN4QixDQUNGOztBQUFDLFNBQU8sR0FBRyxFQUFDO0FBQ1gsV0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7O0FBQUMsR0FFbEIsQ0FDRiIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERtaXRyeSBTYWRha292J3MgUGhpbGlwcyBIdWUgYXBpIHdyYXBwZXIgYmFja2dyb3VuZCBwYWdlXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEbWl0cnkgU2FkYWtvdiwgQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qIGdsb2JhbFxyXG5cdCQsXHJcblx0aHVlOmZhbHNlLFxyXG4gXHRzY2VuZUNvbW1hbmRlcjpmYWxzZSxcclxuIFx0Y29uZmlnOmZhbHNlLFxyXG4gXHR2b2ljZUNtZCxcclxuIFx0ZmluZEFjdG9ycyxcclxuIFx0c2V0QWN0b3IsXHJcbiBcdGh1ZXZvaWNlLFxyXG4gXHRleGVjdXRlQ29tbWFuZCxcclxuIFx0aHVlQ29tbWFuZGVyLFxyXG4gXHRjb2xvclV0aWwsXHJcbiBcdHNjZW5lQ21kXHJcbiAqL1xyXG5cclxuLyogZXhwb3J0ZWQgaGFzQWxsVXJsQWNjZXNzLCByZXF1ZXN0QW1iaWVudFBlcm1pc3Npb24sIHZvaWNlQ21kRnVuYyAqL1xyXG5cclxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxud2luZG93Lmh1ZSA9IGh1ZSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuY29sb3JzKTtcclxuLy8gd2luZG93Lmh1ZS5maW5kQnJpZGdlKCk7XHJcbndpbmRvdy5odWUuZGlzY292ZXIoKTtcclxud2luZG93LnNjZW5lQ21kID0gc2NlbmVDb21tYW5kZXIod2luZG93LmpRdWVyeSwgd2luZG93Lmh1ZSk7XHJcbndpbmRvdy5odWVDb21tYW5kZXIgPSBodWVDb21tYW5kZXIod2luZG93LmpRdWVyeSwgd2luZG93Lmh1ZSwgY29sb3JVdGlsKCksIHNjZW5lQ21kKTtcclxuXHJcbmlmIChjb25maWcuYXBwID09PSAnYXBwJykge1xyXG5cdC8qIGdsb2JhbCBjaHJvbWUgKi9cclxuICBpZiAoY2hyb21lLmFwcC5ydW50aW1lLm9uTGF1bmNoZWQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0Y2hyb21lLmFwcC5ydW50aW1lLm9uTGF1bmNoZWQuYWRkTGlzdGVuZXIoZnVuY3Rpb24oKSB7XHJcblx0XHQgIGNocm9tZS5hcHAud2luZG93LmNyZWF0ZSgnaW5kZXguaHRtbCcsIHtcclxuXHRcdCAgXHRpZDogJ2FwcCcsXHJcblx0XHQgIFx0ZnJhbWU6ICdub25lJyxcclxuXHRcdCAgXHRyZXNpemFibGU6IGZhbHNlLFxyXG5cdFx0ICAgIGlubmVyQm91bmRzOiB7XHJcblx0XHQgICAgICB3aWR0aDogMzIwLFxyXG5cdFx0ICAgICAgaGVpZ2h0OiAxNDBcclxuXHRcdCAgICB9XHJcblx0XHQgIH0pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcbi8vfSk7XHJcblxyXG5cclxuLy8gbGlzdGVuIHRvIGV4dGVybmFsIHZvaWNlc1xyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2VFeHRlcm5hbC5hZGRMaXN0ZW5lcihvbkV4dGVybmFsKTtcclxuXHJcbmZ1bmN0aW9uIG9uRXh0ZXJuYWwocmVxdWVzdCwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcclxuICBjb25zb2xlLmxvZygnb25FeHRlcm5hbCcpO1xyXG4gIGlmIChyZXF1ZXN0LnZvaWNlQ21kKSB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXF1ZXN0LnZvaWNlQ21kLnRleHQgKyAnLCcgK1xyXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLm1hdGNoICsgJywnICtcclxuICAgICAgcmVxdWVzdC52b2ljZUNtZC5hY3Rpb24gKyAnLCcgK1xyXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLmFjdG9yXHJcbiAgICAgICk7XHJcbiAgICB2b2ljZUNtZChyZXF1ZXN0LnZvaWNlQ21kLnRleHQsXHJcbiAgICAgIHJlcXVlc3Qudm9pY2VDbWQubWF0Y2gsXHJcbiAgICAgIHJlcXVlc3Qudm9pY2VDbWQuYWN0aW9uLFxyXG4gICAgICByZXF1ZXN0LnZvaWNlQ21kLmFjdG9yKTtcclxuICB9XHJcbiAgaWYgKHJlcXVlc3QuaHVlQ29tbWFuZCkge1xyXG4gICAgY29uc29sZS5sb2coJ29uRXh0ZXJuYWw6JyArIHJlcXVlc3QuaHVlQ29tbWFuZC5jb21tYW5kICsgJywnICsgcmVxdWVzdC5odWVDb21tYW5kLmFyZ3MpO1xyXG4gICAgXHJcbiAgICB2YXIgcmVzdWx0ID0gaHVlQ29tbWFuZGVyLnBhcnNlKHJlcXVlc3QpO1xyXG4gICAgaWYoc2VuZFJlc3BvbnNlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kaW5nIHJlc3BvbnNlIHRvIG9uRXh0ZXJuYWwnKTtcclxuICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHZvaWNlQ21kRnVuYyh0ZXh0LCBtYXRjaCwgYWN0aW9uLCBhY3Rvcikge1xyXG4gIHRyeSB7XHJcbiAgICBcclxuICAgIGlmIChhY3RvciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHZhciBhY3RvcklkID0gZmluZEFjdG9ycyhhY3Rvcik7XHJcbiAgICAgIGlmKGFjdG9ySWQgIT09IG51bGwpIHtcclxuICAgICAgICBzZXRBY3RvcignZ3JvdXAtJyArIGFjdG9ySWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGh1ZXZvaWNlLnNwZWFrKCdDYW5ub3QgZmluZCB0aGUgJyArIGFjdG9yICsgJyBsaWdodHMnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCQuaW5BcnJheShhY3Rpb24sIFsnb24nLCdvZmYnLCdkaW0nLCdkaW0gZG93bicsJ3VwJywnYnJpZ2h0ZW4nLCdsaWdodGVuJywnZG93bicsJ2xpZ2h0IHVwJ10pID49IDAgfHwgYWN0aW9uLm1hdGNoKCdec2NlbmU6JykpIHtcclxuICAgICAgZXhlY3V0ZUNvbW1hbmQoYWN0aW9uKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnIpe1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIC8vIG5vdGhpbmdcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

//# sourceMappingURL=background.min.js.map
